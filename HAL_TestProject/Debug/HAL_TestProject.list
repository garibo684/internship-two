
HAL_TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070bc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08007178  08007178  00008178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007520  08007520  0000908c  2**0
                  CONTENTS
  4 .ARM          00000008  08007520  08007520  00008520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007528  08007528  0000908c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007528  08007528  00008528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800752c  0800752c  0000852c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08007530  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000008c  080075bc  0000908c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080075bc  000091fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001317d  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267e  00000000  00000000  0001c231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0001e8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d6c  00000000  00000000  0001f988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018355  00000000  00000000  000206f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b7c  00000000  00000000  00038a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d0e2  00000000  00000000  0004c5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e96a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fb0  00000000  00000000  000e9730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ed6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000008c 	.word	0x2000008c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007160 	.word	0x08007160

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000090 	.word	0x20000090
 8000100:	08007160 	.word	0x08007160

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f824 	bl	8000298 <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_d2uiz>:
 800025c:	b570      	push	{r4, r5, r6, lr}
 800025e:	2200      	movs	r2, #0
 8000260:	4b0c      	ldr	r3, [pc, #48]	@ (8000294 <__aeabi_d2uiz+0x38>)
 8000262:	0004      	movs	r4, r0
 8000264:	000d      	movs	r5, r1
 8000266:	f001 f82d 	bl	80012c4 <__aeabi_dcmpge>
 800026a:	2800      	cmp	r0, #0
 800026c:	d104      	bne.n	8000278 <__aeabi_d2uiz+0x1c>
 800026e:	0020      	movs	r0, r4
 8000270:	0029      	movs	r1, r5
 8000272:	f000 ff93 	bl	800119c <__aeabi_d2iz>
 8000276:	bd70      	pop	{r4, r5, r6, pc}
 8000278:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <__aeabi_d2uiz+0x38>)
 800027a:	2200      	movs	r2, #0
 800027c:	0020      	movs	r0, r4
 800027e:	0029      	movs	r1, r5
 8000280:	f000 fbf0 	bl	8000a64 <__aeabi_dsub>
 8000284:	f000 ff8a 	bl	800119c <__aeabi_d2iz>
 8000288:	2380      	movs	r3, #128	@ 0x80
 800028a:	061b      	lsls	r3, r3, #24
 800028c:	469c      	mov	ip, r3
 800028e:	4460      	add	r0, ip
 8000290:	e7f1      	b.n	8000276 <__aeabi_d2uiz+0x1a>
 8000292:	46c0      	nop			@ (mov r8, r8)
 8000294:	41e00000 	.word	0x41e00000

08000298 <__udivmoddi4>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	4657      	mov	r7, sl
 800029c:	464e      	mov	r6, r9
 800029e:	4645      	mov	r5, r8
 80002a0:	46de      	mov	lr, fp
 80002a2:	b5e0      	push	{r5, r6, r7, lr}
 80002a4:	0004      	movs	r4, r0
 80002a6:	000d      	movs	r5, r1
 80002a8:	4692      	mov	sl, r2
 80002aa:	4699      	mov	r9, r3
 80002ac:	b083      	sub	sp, #12
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d830      	bhi.n	8000314 <__udivmoddi4+0x7c>
 80002b2:	d02d      	beq.n	8000310 <__udivmoddi4+0x78>
 80002b4:	4649      	mov	r1, r9
 80002b6:	4650      	mov	r0, sl
 80002b8:	f001 f82c 	bl	8001314 <__clzdi2>
 80002bc:	0029      	movs	r1, r5
 80002be:	0006      	movs	r6, r0
 80002c0:	0020      	movs	r0, r4
 80002c2:	f001 f827 	bl	8001314 <__clzdi2>
 80002c6:	1a33      	subs	r3, r6, r0
 80002c8:	4698      	mov	r8, r3
 80002ca:	3b20      	subs	r3, #32
 80002cc:	d434      	bmi.n	8000338 <__udivmoddi4+0xa0>
 80002ce:	469b      	mov	fp, r3
 80002d0:	4653      	mov	r3, sl
 80002d2:	465a      	mov	r2, fp
 80002d4:	4093      	lsls	r3, r2
 80002d6:	4642      	mov	r2, r8
 80002d8:	001f      	movs	r7, r3
 80002da:	4653      	mov	r3, sl
 80002dc:	4093      	lsls	r3, r2
 80002de:	001e      	movs	r6, r3
 80002e0:	42af      	cmp	r7, r5
 80002e2:	d83b      	bhi.n	800035c <__udivmoddi4+0xc4>
 80002e4:	42af      	cmp	r7, r5
 80002e6:	d100      	bne.n	80002ea <__udivmoddi4+0x52>
 80002e8:	e079      	b.n	80003de <__udivmoddi4+0x146>
 80002ea:	465b      	mov	r3, fp
 80002ec:	1ba4      	subs	r4, r4, r6
 80002ee:	41bd      	sbcs	r5, r7
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	da00      	bge.n	80002f6 <__udivmoddi4+0x5e>
 80002f4:	e076      	b.n	80003e4 <__udivmoddi4+0x14c>
 80002f6:	2200      	movs	r2, #0
 80002f8:	2300      	movs	r3, #0
 80002fa:	9200      	str	r2, [sp, #0]
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	2301      	movs	r3, #1
 8000300:	465a      	mov	r2, fp
 8000302:	4093      	lsls	r3, r2
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	2301      	movs	r3, #1
 8000308:	4642      	mov	r2, r8
 800030a:	4093      	lsls	r3, r2
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	e029      	b.n	8000364 <__udivmoddi4+0xcc>
 8000310:	4282      	cmp	r2, r0
 8000312:	d9cf      	bls.n	80002b4 <__udivmoddi4+0x1c>
 8000314:	2200      	movs	r2, #0
 8000316:	2300      	movs	r3, #0
 8000318:	9200      	str	r2, [sp, #0]
 800031a:	9301      	str	r3, [sp, #4]
 800031c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <__udivmoddi4+0x8e>
 8000322:	601c      	str	r4, [r3, #0]
 8000324:	605d      	str	r5, [r3, #4]
 8000326:	9800      	ldr	r0, [sp, #0]
 8000328:	9901      	ldr	r1, [sp, #4]
 800032a:	b003      	add	sp, #12
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
 800032e:	46bb      	mov	fp, r7
 8000330:	46b2      	mov	sl, r6
 8000332:	46a9      	mov	r9, r5
 8000334:	46a0      	mov	r8, r4
 8000336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000338:	4642      	mov	r2, r8
 800033a:	469b      	mov	fp, r3
 800033c:	2320      	movs	r3, #32
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	4652      	mov	r2, sl
 8000342:	40da      	lsrs	r2, r3
 8000344:	4641      	mov	r1, r8
 8000346:	0013      	movs	r3, r2
 8000348:	464a      	mov	r2, r9
 800034a:	408a      	lsls	r2, r1
 800034c:	0017      	movs	r7, r2
 800034e:	4642      	mov	r2, r8
 8000350:	431f      	orrs	r7, r3
 8000352:	4653      	mov	r3, sl
 8000354:	4093      	lsls	r3, r2
 8000356:	001e      	movs	r6, r3
 8000358:	42af      	cmp	r7, r5
 800035a:	d9c3      	bls.n	80002e4 <__udivmoddi4+0x4c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	4643      	mov	r3, r8
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0d8      	beq.n	800031c <__udivmoddi4+0x84>
 800036a:	07fb      	lsls	r3, r7, #31
 800036c:	0872      	lsrs	r2, r6, #1
 800036e:	431a      	orrs	r2, r3
 8000370:	4646      	mov	r6, r8
 8000372:	087b      	lsrs	r3, r7, #1
 8000374:	e00e      	b.n	8000394 <__udivmoddi4+0xfc>
 8000376:	42ab      	cmp	r3, r5
 8000378:	d101      	bne.n	800037e <__udivmoddi4+0xe6>
 800037a:	42a2      	cmp	r2, r4
 800037c:	d80c      	bhi.n	8000398 <__udivmoddi4+0x100>
 800037e:	1aa4      	subs	r4, r4, r2
 8000380:	419d      	sbcs	r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	1924      	adds	r4, r4, r4
 8000386:	416d      	adcs	r5, r5
 8000388:	2100      	movs	r1, #0
 800038a:	3e01      	subs	r6, #1
 800038c:	1824      	adds	r4, r4, r0
 800038e:	414d      	adcs	r5, r1
 8000390:	2e00      	cmp	r6, #0
 8000392:	d006      	beq.n	80003a2 <__udivmoddi4+0x10a>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d9ee      	bls.n	8000376 <__udivmoddi4+0xde>
 8000398:	3e01      	subs	r6, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d1f8      	bne.n	8000394 <__udivmoddi4+0xfc>
 80003a2:	9800      	ldr	r0, [sp, #0]
 80003a4:	9901      	ldr	r1, [sp, #4]
 80003a6:	465b      	mov	r3, fp
 80003a8:	1900      	adds	r0, r0, r4
 80003aa:	4169      	adcs	r1, r5
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	db24      	blt.n	80003fa <__udivmoddi4+0x162>
 80003b0:	002b      	movs	r3, r5
 80003b2:	465a      	mov	r2, fp
 80003b4:	4644      	mov	r4, r8
 80003b6:	40d3      	lsrs	r3, r2
 80003b8:	002a      	movs	r2, r5
 80003ba:	40e2      	lsrs	r2, r4
 80003bc:	001c      	movs	r4, r3
 80003be:	465b      	mov	r3, fp
 80003c0:	0015      	movs	r5, r2
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db2a      	blt.n	800041c <__udivmoddi4+0x184>
 80003c6:	0026      	movs	r6, r4
 80003c8:	409e      	lsls	r6, r3
 80003ca:	0033      	movs	r3, r6
 80003cc:	0026      	movs	r6, r4
 80003ce:	4647      	mov	r7, r8
 80003d0:	40be      	lsls	r6, r7
 80003d2:	0032      	movs	r2, r6
 80003d4:	1a80      	subs	r0, r0, r2
 80003d6:	4199      	sbcs	r1, r3
 80003d8:	9000      	str	r0, [sp, #0]
 80003da:	9101      	str	r1, [sp, #4]
 80003dc:	e79e      	b.n	800031c <__udivmoddi4+0x84>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d8bc      	bhi.n	800035c <__udivmoddi4+0xc4>
 80003e2:	e782      	b.n	80002ea <__udivmoddi4+0x52>
 80003e4:	4642      	mov	r2, r8
 80003e6:	2320      	movs	r3, #32
 80003e8:	2100      	movs	r1, #0
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	2200      	movs	r2, #0
 80003ee:	9100      	str	r1, [sp, #0]
 80003f0:	9201      	str	r2, [sp, #4]
 80003f2:	2201      	movs	r2, #1
 80003f4:	40da      	lsrs	r2, r3
 80003f6:	9201      	str	r2, [sp, #4]
 80003f8:	e785      	b.n	8000306 <__udivmoddi4+0x6e>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	4646      	mov	r6, r8
 8000404:	409a      	lsls	r2, r3
 8000406:	0023      	movs	r3, r4
 8000408:	40f3      	lsrs	r3, r6
 800040a:	4644      	mov	r4, r8
 800040c:	4313      	orrs	r3, r2
 800040e:	002a      	movs	r2, r5
 8000410:	40e2      	lsrs	r2, r4
 8000412:	001c      	movs	r4, r3
 8000414:	465b      	mov	r3, fp
 8000416:	0015      	movs	r5, r2
 8000418:	2b00      	cmp	r3, #0
 800041a:	dad4      	bge.n	80003c6 <__udivmoddi4+0x12e>
 800041c:	4642      	mov	r2, r8
 800041e:	002f      	movs	r7, r5
 8000420:	2320      	movs	r3, #32
 8000422:	0026      	movs	r6, r4
 8000424:	4097      	lsls	r7, r2
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	40de      	lsrs	r6, r3
 800042a:	003b      	movs	r3, r7
 800042c:	4333      	orrs	r3, r6
 800042e:	e7cd      	b.n	80003cc <__udivmoddi4+0x134>

08000430 <__aeabi_ddiv>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	46de      	mov	lr, fp
 8000434:	4645      	mov	r5, r8
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	b087      	sub	sp, #28
 800043e:	9200      	str	r2, [sp, #0]
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	030b      	lsls	r3, r1, #12
 8000444:	0b1b      	lsrs	r3, r3, #12
 8000446:	469b      	mov	fp, r3
 8000448:	0fca      	lsrs	r2, r1, #31
 800044a:	004b      	lsls	r3, r1, #1
 800044c:	0004      	movs	r4, r0
 800044e:	4680      	mov	r8, r0
 8000450:	0d5b      	lsrs	r3, r3, #21
 8000452:	9202      	str	r2, [sp, #8]
 8000454:	d100      	bne.n	8000458 <__aeabi_ddiv+0x28>
 8000456:	e16a      	b.n	800072e <__aeabi_ddiv+0x2fe>
 8000458:	4ad4      	ldr	r2, [pc, #848]	@ (80007ac <__aeabi_ddiv+0x37c>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d100      	bne.n	8000460 <__aeabi_ddiv+0x30>
 800045e:	e18c      	b.n	800077a <__aeabi_ddiv+0x34a>
 8000460:	4659      	mov	r1, fp
 8000462:	0f42      	lsrs	r2, r0, #29
 8000464:	00c9      	lsls	r1, r1, #3
 8000466:	430a      	orrs	r2, r1
 8000468:	2180      	movs	r1, #128	@ 0x80
 800046a:	0409      	lsls	r1, r1, #16
 800046c:	4311      	orrs	r1, r2
 800046e:	00c2      	lsls	r2, r0, #3
 8000470:	4690      	mov	r8, r2
 8000472:	4acf      	ldr	r2, [pc, #828]	@ (80007b0 <__aeabi_ddiv+0x380>)
 8000474:	4689      	mov	r9, r1
 8000476:	4692      	mov	sl, r2
 8000478:	449a      	add	sl, r3
 800047a:	2300      	movs	r3, #0
 800047c:	2400      	movs	r4, #0
 800047e:	9303      	str	r3, [sp, #12]
 8000480:	9e00      	ldr	r6, [sp, #0]
 8000482:	9f01      	ldr	r7, [sp, #4]
 8000484:	033b      	lsls	r3, r7, #12
 8000486:	0b1b      	lsrs	r3, r3, #12
 8000488:	469b      	mov	fp, r3
 800048a:	007b      	lsls	r3, r7, #1
 800048c:	0030      	movs	r0, r6
 800048e:	0d5b      	lsrs	r3, r3, #21
 8000490:	0ffd      	lsrs	r5, r7, #31
 8000492:	2b00      	cmp	r3, #0
 8000494:	d100      	bne.n	8000498 <__aeabi_ddiv+0x68>
 8000496:	e128      	b.n	80006ea <__aeabi_ddiv+0x2ba>
 8000498:	4ac4      	ldr	r2, [pc, #784]	@ (80007ac <__aeabi_ddiv+0x37c>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d100      	bne.n	80004a0 <__aeabi_ddiv+0x70>
 800049e:	e177      	b.n	8000790 <__aeabi_ddiv+0x360>
 80004a0:	4659      	mov	r1, fp
 80004a2:	0f72      	lsrs	r2, r6, #29
 80004a4:	00c9      	lsls	r1, r1, #3
 80004a6:	430a      	orrs	r2, r1
 80004a8:	2180      	movs	r1, #128	@ 0x80
 80004aa:	0409      	lsls	r1, r1, #16
 80004ac:	4311      	orrs	r1, r2
 80004ae:	468b      	mov	fp, r1
 80004b0:	49bf      	ldr	r1, [pc, #764]	@ (80007b0 <__aeabi_ddiv+0x380>)
 80004b2:	00f2      	lsls	r2, r6, #3
 80004b4:	468c      	mov	ip, r1
 80004b6:	4651      	mov	r1, sl
 80004b8:	4463      	add	r3, ip
 80004ba:	1acb      	subs	r3, r1, r3
 80004bc:	469a      	mov	sl, r3
 80004be:	2300      	movs	r3, #0
 80004c0:	9e02      	ldr	r6, [sp, #8]
 80004c2:	406e      	eors	r6, r5
 80004c4:	2c0f      	cmp	r4, #15
 80004c6:	d827      	bhi.n	8000518 <__aeabi_ddiv+0xe8>
 80004c8:	49ba      	ldr	r1, [pc, #744]	@ (80007b4 <__aeabi_ddiv+0x384>)
 80004ca:	00a4      	lsls	r4, r4, #2
 80004cc:	5909      	ldr	r1, [r1, r4]
 80004ce:	468f      	mov	pc, r1
 80004d0:	46cb      	mov	fp, r9
 80004d2:	4642      	mov	r2, r8
 80004d4:	9e02      	ldr	r6, [sp, #8]
 80004d6:	9b03      	ldr	r3, [sp, #12]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d016      	beq.n	800050a <__aeabi_ddiv+0xda>
 80004dc:	2b03      	cmp	r3, #3
 80004de:	d100      	bne.n	80004e2 <__aeabi_ddiv+0xb2>
 80004e0:	e2a6      	b.n	8000a30 <__aeabi_ddiv+0x600>
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d000      	beq.n	80004e8 <__aeabi_ddiv+0xb8>
 80004e6:	e0df      	b.n	80006a8 <__aeabi_ddiv+0x278>
 80004e8:	2200      	movs	r2, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	2400      	movs	r4, #0
 80004ee:	4690      	mov	r8, r2
 80004f0:	051b      	lsls	r3, r3, #20
 80004f2:	4323      	orrs	r3, r4
 80004f4:	07f6      	lsls	r6, r6, #31
 80004f6:	4333      	orrs	r3, r6
 80004f8:	4640      	mov	r0, r8
 80004fa:	0019      	movs	r1, r3
 80004fc:	b007      	add	sp, #28
 80004fe:	bcf0      	pop	{r4, r5, r6, r7}
 8000500:	46bb      	mov	fp, r7
 8000502:	46b2      	mov	sl, r6
 8000504:	46a9      	mov	r9, r5
 8000506:	46a0      	mov	r8, r4
 8000508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050a:	2200      	movs	r2, #0
 800050c:	2400      	movs	r4, #0
 800050e:	4690      	mov	r8, r2
 8000510:	4ba6      	ldr	r3, [pc, #664]	@ (80007ac <__aeabi_ddiv+0x37c>)
 8000512:	e7ed      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 8000514:	002e      	movs	r6, r5
 8000516:	e7df      	b.n	80004d8 <__aeabi_ddiv+0xa8>
 8000518:	45cb      	cmp	fp, r9
 800051a:	d200      	bcs.n	800051e <__aeabi_ddiv+0xee>
 800051c:	e1d4      	b.n	80008c8 <__aeabi_ddiv+0x498>
 800051e:	d100      	bne.n	8000522 <__aeabi_ddiv+0xf2>
 8000520:	e1cf      	b.n	80008c2 <__aeabi_ddiv+0x492>
 8000522:	2301      	movs	r3, #1
 8000524:	425b      	negs	r3, r3
 8000526:	469c      	mov	ip, r3
 8000528:	4644      	mov	r4, r8
 800052a:	4648      	mov	r0, r9
 800052c:	2700      	movs	r7, #0
 800052e:	44e2      	add	sl, ip
 8000530:	465b      	mov	r3, fp
 8000532:	0e15      	lsrs	r5, r2, #24
 8000534:	021b      	lsls	r3, r3, #8
 8000536:	431d      	orrs	r5, r3
 8000538:	0c19      	lsrs	r1, r3, #16
 800053a:	042b      	lsls	r3, r5, #16
 800053c:	0212      	lsls	r2, r2, #8
 800053e:	9500      	str	r5, [sp, #0]
 8000540:	0c1d      	lsrs	r5, r3, #16
 8000542:	4691      	mov	r9, r2
 8000544:	9102      	str	r1, [sp, #8]
 8000546:	9503      	str	r5, [sp, #12]
 8000548:	f7ff fe62 	bl	8000210 <__aeabi_uidivmod>
 800054c:	0002      	movs	r2, r0
 800054e:	436a      	muls	r2, r5
 8000550:	040b      	lsls	r3, r1, #16
 8000552:	0c21      	lsrs	r1, r4, #16
 8000554:	4680      	mov	r8, r0
 8000556:	4319      	orrs	r1, r3
 8000558:	428a      	cmp	r2, r1
 800055a:	d909      	bls.n	8000570 <__aeabi_ddiv+0x140>
 800055c:	9d00      	ldr	r5, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	46ac      	mov	ip, r5
 8000562:	425b      	negs	r3, r3
 8000564:	4461      	add	r1, ip
 8000566:	469c      	mov	ip, r3
 8000568:	44e0      	add	r8, ip
 800056a:	428d      	cmp	r5, r1
 800056c:	d800      	bhi.n	8000570 <__aeabi_ddiv+0x140>
 800056e:	e1fb      	b.n	8000968 <__aeabi_ddiv+0x538>
 8000570:	1a88      	subs	r0, r1, r2
 8000572:	9902      	ldr	r1, [sp, #8]
 8000574:	f7ff fe4c 	bl	8000210 <__aeabi_uidivmod>
 8000578:	9a03      	ldr	r2, [sp, #12]
 800057a:	0424      	lsls	r4, r4, #16
 800057c:	4342      	muls	r2, r0
 800057e:	0409      	lsls	r1, r1, #16
 8000580:	0c24      	lsrs	r4, r4, #16
 8000582:	0003      	movs	r3, r0
 8000584:	430c      	orrs	r4, r1
 8000586:	42a2      	cmp	r2, r4
 8000588:	d906      	bls.n	8000598 <__aeabi_ddiv+0x168>
 800058a:	9900      	ldr	r1, [sp, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	468c      	mov	ip, r1
 8000590:	4464      	add	r4, ip
 8000592:	42a1      	cmp	r1, r4
 8000594:	d800      	bhi.n	8000598 <__aeabi_ddiv+0x168>
 8000596:	e1e1      	b.n	800095c <__aeabi_ddiv+0x52c>
 8000598:	1aa0      	subs	r0, r4, r2
 800059a:	4642      	mov	r2, r8
 800059c:	0412      	lsls	r2, r2, #16
 800059e:	431a      	orrs	r2, r3
 80005a0:	4693      	mov	fp, r2
 80005a2:	464b      	mov	r3, r9
 80005a4:	4659      	mov	r1, fp
 80005a6:	0c1b      	lsrs	r3, r3, #16
 80005a8:	001d      	movs	r5, r3
 80005aa:	9304      	str	r3, [sp, #16]
 80005ac:	040b      	lsls	r3, r1, #16
 80005ae:	4649      	mov	r1, r9
 80005b0:	0409      	lsls	r1, r1, #16
 80005b2:	0c09      	lsrs	r1, r1, #16
 80005b4:	000c      	movs	r4, r1
 80005b6:	0c1b      	lsrs	r3, r3, #16
 80005b8:	435c      	muls	r4, r3
 80005ba:	0c12      	lsrs	r2, r2, #16
 80005bc:	436b      	muls	r3, r5
 80005be:	4688      	mov	r8, r1
 80005c0:	4351      	muls	r1, r2
 80005c2:	436a      	muls	r2, r5
 80005c4:	0c25      	lsrs	r5, r4, #16
 80005c6:	46ac      	mov	ip, r5
 80005c8:	185b      	adds	r3, r3, r1
 80005ca:	4463      	add	r3, ip
 80005cc:	4299      	cmp	r1, r3
 80005ce:	d903      	bls.n	80005d8 <__aeabi_ddiv+0x1a8>
 80005d0:	2180      	movs	r1, #128	@ 0x80
 80005d2:	0249      	lsls	r1, r1, #9
 80005d4:	468c      	mov	ip, r1
 80005d6:	4462      	add	r2, ip
 80005d8:	0c19      	lsrs	r1, r3, #16
 80005da:	0424      	lsls	r4, r4, #16
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	0c24      	lsrs	r4, r4, #16
 80005e0:	188a      	adds	r2, r1, r2
 80005e2:	191c      	adds	r4, r3, r4
 80005e4:	4290      	cmp	r0, r2
 80005e6:	d302      	bcc.n	80005ee <__aeabi_ddiv+0x1be>
 80005e8:	d116      	bne.n	8000618 <__aeabi_ddiv+0x1e8>
 80005ea:	42a7      	cmp	r7, r4
 80005ec:	d214      	bcs.n	8000618 <__aeabi_ddiv+0x1e8>
 80005ee:	465b      	mov	r3, fp
 80005f0:	9d00      	ldr	r5, [sp, #0]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	444f      	add	r7, r9
 80005f6:	9305      	str	r3, [sp, #20]
 80005f8:	454f      	cmp	r7, r9
 80005fa:	419b      	sbcs	r3, r3
 80005fc:	46ac      	mov	ip, r5
 80005fe:	425b      	negs	r3, r3
 8000600:	4463      	add	r3, ip
 8000602:	18c0      	adds	r0, r0, r3
 8000604:	4285      	cmp	r5, r0
 8000606:	d300      	bcc.n	800060a <__aeabi_ddiv+0x1da>
 8000608:	e1a1      	b.n	800094e <__aeabi_ddiv+0x51e>
 800060a:	4282      	cmp	r2, r0
 800060c:	d900      	bls.n	8000610 <__aeabi_ddiv+0x1e0>
 800060e:	e1f6      	b.n	80009fe <__aeabi_ddiv+0x5ce>
 8000610:	d100      	bne.n	8000614 <__aeabi_ddiv+0x1e4>
 8000612:	e1f1      	b.n	80009f8 <__aeabi_ddiv+0x5c8>
 8000614:	9b05      	ldr	r3, [sp, #20]
 8000616:	469b      	mov	fp, r3
 8000618:	1b3c      	subs	r4, r7, r4
 800061a:	42a7      	cmp	r7, r4
 800061c:	41bf      	sbcs	r7, r7
 800061e:	9d00      	ldr	r5, [sp, #0]
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	427f      	negs	r7, r7
 8000624:	1bc0      	subs	r0, r0, r7
 8000626:	4285      	cmp	r5, r0
 8000628:	d100      	bne.n	800062c <__aeabi_ddiv+0x1fc>
 800062a:	e1d0      	b.n	80009ce <__aeabi_ddiv+0x59e>
 800062c:	9902      	ldr	r1, [sp, #8]
 800062e:	f7ff fdef 	bl	8000210 <__aeabi_uidivmod>
 8000632:	9a03      	ldr	r2, [sp, #12]
 8000634:	040b      	lsls	r3, r1, #16
 8000636:	4342      	muls	r2, r0
 8000638:	0c21      	lsrs	r1, r4, #16
 800063a:	0007      	movs	r7, r0
 800063c:	4319      	orrs	r1, r3
 800063e:	428a      	cmp	r2, r1
 8000640:	d900      	bls.n	8000644 <__aeabi_ddiv+0x214>
 8000642:	e178      	b.n	8000936 <__aeabi_ddiv+0x506>
 8000644:	1a88      	subs	r0, r1, r2
 8000646:	9902      	ldr	r1, [sp, #8]
 8000648:	f7ff fde2 	bl	8000210 <__aeabi_uidivmod>
 800064c:	9a03      	ldr	r2, [sp, #12]
 800064e:	0424      	lsls	r4, r4, #16
 8000650:	4342      	muls	r2, r0
 8000652:	0409      	lsls	r1, r1, #16
 8000654:	0c24      	lsrs	r4, r4, #16
 8000656:	0003      	movs	r3, r0
 8000658:	430c      	orrs	r4, r1
 800065a:	42a2      	cmp	r2, r4
 800065c:	d900      	bls.n	8000660 <__aeabi_ddiv+0x230>
 800065e:	e15d      	b.n	800091c <__aeabi_ddiv+0x4ec>
 8000660:	4641      	mov	r1, r8
 8000662:	1aa4      	subs	r4, r4, r2
 8000664:	043a      	lsls	r2, r7, #16
 8000666:	431a      	orrs	r2, r3
 8000668:	9d04      	ldr	r5, [sp, #16]
 800066a:	0413      	lsls	r3, r2, #16
 800066c:	0c1b      	lsrs	r3, r3, #16
 800066e:	4359      	muls	r1, r3
 8000670:	4647      	mov	r7, r8
 8000672:	436b      	muls	r3, r5
 8000674:	469c      	mov	ip, r3
 8000676:	0c10      	lsrs	r0, r2, #16
 8000678:	4347      	muls	r7, r0
 800067a:	0c0b      	lsrs	r3, r1, #16
 800067c:	44bc      	add	ip, r7
 800067e:	4463      	add	r3, ip
 8000680:	4368      	muls	r0, r5
 8000682:	429f      	cmp	r7, r3
 8000684:	d903      	bls.n	800068e <__aeabi_ddiv+0x25e>
 8000686:	2580      	movs	r5, #128	@ 0x80
 8000688:	026d      	lsls	r5, r5, #9
 800068a:	46ac      	mov	ip, r5
 800068c:	4460      	add	r0, ip
 800068e:	0c1f      	lsrs	r7, r3, #16
 8000690:	0409      	lsls	r1, r1, #16
 8000692:	041b      	lsls	r3, r3, #16
 8000694:	0c09      	lsrs	r1, r1, #16
 8000696:	183f      	adds	r7, r7, r0
 8000698:	185b      	adds	r3, r3, r1
 800069a:	42bc      	cmp	r4, r7
 800069c:	d200      	bcs.n	80006a0 <__aeabi_ddiv+0x270>
 800069e:	e102      	b.n	80008a6 <__aeabi_ddiv+0x476>
 80006a0:	d100      	bne.n	80006a4 <__aeabi_ddiv+0x274>
 80006a2:	e0fd      	b.n	80008a0 <__aeabi_ddiv+0x470>
 80006a4:	2301      	movs	r3, #1
 80006a6:	431a      	orrs	r2, r3
 80006a8:	4b43      	ldr	r3, [pc, #268]	@ (80007b8 <__aeabi_ddiv+0x388>)
 80006aa:	4453      	add	r3, sl
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dc00      	bgt.n	80006b2 <__aeabi_ddiv+0x282>
 80006b0:	e0ae      	b.n	8000810 <__aeabi_ddiv+0x3e0>
 80006b2:	0751      	lsls	r1, r2, #29
 80006b4:	d000      	beq.n	80006b8 <__aeabi_ddiv+0x288>
 80006b6:	e198      	b.n	80009ea <__aeabi_ddiv+0x5ba>
 80006b8:	4659      	mov	r1, fp
 80006ba:	01c9      	lsls	r1, r1, #7
 80006bc:	d506      	bpl.n	80006cc <__aeabi_ddiv+0x29c>
 80006be:	4659      	mov	r1, fp
 80006c0:	4b3e      	ldr	r3, [pc, #248]	@ (80007bc <__aeabi_ddiv+0x38c>)
 80006c2:	4019      	ands	r1, r3
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	468b      	mov	fp, r1
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	4453      	add	r3, sl
 80006cc:	493c      	ldr	r1, [pc, #240]	@ (80007c0 <__aeabi_ddiv+0x390>)
 80006ce:	428b      	cmp	r3, r1
 80006d0:	dd00      	ble.n	80006d4 <__aeabi_ddiv+0x2a4>
 80006d2:	e71a      	b.n	800050a <__aeabi_ddiv+0xda>
 80006d4:	4659      	mov	r1, fp
 80006d6:	08d2      	lsrs	r2, r2, #3
 80006d8:	0749      	lsls	r1, r1, #29
 80006da:	4311      	orrs	r1, r2
 80006dc:	465a      	mov	r2, fp
 80006de:	055b      	lsls	r3, r3, #21
 80006e0:	0254      	lsls	r4, r2, #9
 80006e2:	4688      	mov	r8, r1
 80006e4:	0b24      	lsrs	r4, r4, #12
 80006e6:	0d5b      	lsrs	r3, r3, #21
 80006e8:	e702      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 80006ea:	465a      	mov	r2, fp
 80006ec:	9b00      	ldr	r3, [sp, #0]
 80006ee:	431a      	orrs	r2, r3
 80006f0:	d100      	bne.n	80006f4 <__aeabi_ddiv+0x2c4>
 80006f2:	e07e      	b.n	80007f2 <__aeabi_ddiv+0x3c2>
 80006f4:	465b      	mov	r3, fp
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d100      	bne.n	80006fc <__aeabi_ddiv+0x2cc>
 80006fa:	e100      	b.n	80008fe <__aeabi_ddiv+0x4ce>
 80006fc:	4658      	mov	r0, fp
 80006fe:	f000 fdeb 	bl	80012d8 <__clzsi2>
 8000702:	0002      	movs	r2, r0
 8000704:	0003      	movs	r3, r0
 8000706:	3a0b      	subs	r2, #11
 8000708:	271d      	movs	r7, #29
 800070a:	9e00      	ldr	r6, [sp, #0]
 800070c:	1aba      	subs	r2, r7, r2
 800070e:	0019      	movs	r1, r3
 8000710:	4658      	mov	r0, fp
 8000712:	40d6      	lsrs	r6, r2
 8000714:	3908      	subs	r1, #8
 8000716:	4088      	lsls	r0, r1
 8000718:	0032      	movs	r2, r6
 800071a:	4302      	orrs	r2, r0
 800071c:	4693      	mov	fp, r2
 800071e:	9a00      	ldr	r2, [sp, #0]
 8000720:	408a      	lsls	r2, r1
 8000722:	4928      	ldr	r1, [pc, #160]	@ (80007c4 <__aeabi_ddiv+0x394>)
 8000724:	4453      	add	r3, sl
 8000726:	468a      	mov	sl, r1
 8000728:	449a      	add	sl, r3
 800072a:	2300      	movs	r3, #0
 800072c:	e6c8      	b.n	80004c0 <__aeabi_ddiv+0x90>
 800072e:	465b      	mov	r3, fp
 8000730:	4303      	orrs	r3, r0
 8000732:	4699      	mov	r9, r3
 8000734:	d056      	beq.n	80007e4 <__aeabi_ddiv+0x3b4>
 8000736:	465b      	mov	r3, fp
 8000738:	2b00      	cmp	r3, #0
 800073a:	d100      	bne.n	800073e <__aeabi_ddiv+0x30e>
 800073c:	e0cd      	b.n	80008da <__aeabi_ddiv+0x4aa>
 800073e:	4658      	mov	r0, fp
 8000740:	f000 fdca 	bl	80012d8 <__clzsi2>
 8000744:	230b      	movs	r3, #11
 8000746:	425b      	negs	r3, r3
 8000748:	469c      	mov	ip, r3
 800074a:	0002      	movs	r2, r0
 800074c:	4484      	add	ip, r0
 800074e:	4666      	mov	r6, ip
 8000750:	231d      	movs	r3, #29
 8000752:	1b9b      	subs	r3, r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	0011      	movs	r1, r2
 8000758:	4658      	mov	r0, fp
 800075a:	40de      	lsrs	r6, r3
 800075c:	3908      	subs	r1, #8
 800075e:	4088      	lsls	r0, r1
 8000760:	0033      	movs	r3, r6
 8000762:	4303      	orrs	r3, r0
 8000764:	4699      	mov	r9, r3
 8000766:	0023      	movs	r3, r4
 8000768:	408b      	lsls	r3, r1
 800076a:	4698      	mov	r8, r3
 800076c:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <__aeabi_ddiv+0x398>)
 800076e:	2400      	movs	r4, #0
 8000770:	1a9b      	subs	r3, r3, r2
 8000772:	469a      	mov	sl, r3
 8000774:	2300      	movs	r3, #0
 8000776:	9303      	str	r3, [sp, #12]
 8000778:	e682      	b.n	8000480 <__aeabi_ddiv+0x50>
 800077a:	465a      	mov	r2, fp
 800077c:	4302      	orrs	r2, r0
 800077e:	4691      	mov	r9, r2
 8000780:	d12a      	bne.n	80007d8 <__aeabi_ddiv+0x3a8>
 8000782:	2200      	movs	r2, #0
 8000784:	469a      	mov	sl, r3
 8000786:	2302      	movs	r3, #2
 8000788:	4690      	mov	r8, r2
 800078a:	2408      	movs	r4, #8
 800078c:	9303      	str	r3, [sp, #12]
 800078e:	e677      	b.n	8000480 <__aeabi_ddiv+0x50>
 8000790:	465a      	mov	r2, fp
 8000792:	9b00      	ldr	r3, [sp, #0]
 8000794:	431a      	orrs	r2, r3
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <__aeabi_ddiv+0x39c>)
 8000798:	469c      	mov	ip, r3
 800079a:	44e2      	add	sl, ip
 800079c:	2a00      	cmp	r2, #0
 800079e:	d117      	bne.n	80007d0 <__aeabi_ddiv+0x3a0>
 80007a0:	2302      	movs	r3, #2
 80007a2:	431c      	orrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	469b      	mov	fp, r3
 80007a8:	3302      	adds	r3, #2
 80007aa:	e689      	b.n	80004c0 <__aeabi_ddiv+0x90>
 80007ac:	000007ff 	.word	0x000007ff
 80007b0:	fffffc01 	.word	0xfffffc01
 80007b4:	08007414 	.word	0x08007414
 80007b8:	000003ff 	.word	0x000003ff
 80007bc:	feffffff 	.word	0xfeffffff
 80007c0:	000007fe 	.word	0x000007fe
 80007c4:	000003f3 	.word	0x000003f3
 80007c8:	fffffc0d 	.word	0xfffffc0d
 80007cc:	fffff801 	.word	0xfffff801
 80007d0:	2303      	movs	r3, #3
 80007d2:	0032      	movs	r2, r6
 80007d4:	431c      	orrs	r4, r3
 80007d6:	e673      	b.n	80004c0 <__aeabi_ddiv+0x90>
 80007d8:	469a      	mov	sl, r3
 80007da:	2303      	movs	r3, #3
 80007dc:	46d9      	mov	r9, fp
 80007de:	240c      	movs	r4, #12
 80007e0:	9303      	str	r3, [sp, #12]
 80007e2:	e64d      	b.n	8000480 <__aeabi_ddiv+0x50>
 80007e4:	2300      	movs	r3, #0
 80007e6:	4698      	mov	r8, r3
 80007e8:	469a      	mov	sl, r3
 80007ea:	3301      	adds	r3, #1
 80007ec:	2404      	movs	r4, #4
 80007ee:	9303      	str	r3, [sp, #12]
 80007f0:	e646      	b.n	8000480 <__aeabi_ddiv+0x50>
 80007f2:	2301      	movs	r3, #1
 80007f4:	431c      	orrs	r4, r3
 80007f6:	2300      	movs	r3, #0
 80007f8:	469b      	mov	fp, r3
 80007fa:	3301      	adds	r3, #1
 80007fc:	e660      	b.n	80004c0 <__aeabi_ddiv+0x90>
 80007fe:	2300      	movs	r3, #0
 8000800:	2480      	movs	r4, #128	@ 0x80
 8000802:	4698      	mov	r8, r3
 8000804:	2600      	movs	r6, #0
 8000806:	4b92      	ldr	r3, [pc, #584]	@ (8000a50 <__aeabi_ddiv+0x620>)
 8000808:	0324      	lsls	r4, r4, #12
 800080a:	e671      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 800080c:	2201      	movs	r2, #1
 800080e:	4252      	negs	r2, r2
 8000810:	2101      	movs	r1, #1
 8000812:	1ac9      	subs	r1, r1, r3
 8000814:	2938      	cmp	r1, #56	@ 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_ddiv+0x3ea>
 8000818:	e666      	b.n	80004e8 <__aeabi_ddiv+0xb8>
 800081a:	291f      	cmp	r1, #31
 800081c:	dc00      	bgt.n	8000820 <__aeabi_ddiv+0x3f0>
 800081e:	e0ab      	b.n	8000978 <__aeabi_ddiv+0x548>
 8000820:	201f      	movs	r0, #31
 8000822:	4240      	negs	r0, r0
 8000824:	1ac3      	subs	r3, r0, r3
 8000826:	4658      	mov	r0, fp
 8000828:	40d8      	lsrs	r0, r3
 800082a:	0003      	movs	r3, r0
 800082c:	2920      	cmp	r1, #32
 800082e:	d004      	beq.n	800083a <__aeabi_ddiv+0x40a>
 8000830:	4658      	mov	r0, fp
 8000832:	4988      	ldr	r1, [pc, #544]	@ (8000a54 <__aeabi_ddiv+0x624>)
 8000834:	4451      	add	r1, sl
 8000836:	4088      	lsls	r0, r1
 8000838:	4302      	orrs	r2, r0
 800083a:	1e51      	subs	r1, r2, #1
 800083c:	418a      	sbcs	r2, r1
 800083e:	431a      	orrs	r2, r3
 8000840:	2307      	movs	r3, #7
 8000842:	0019      	movs	r1, r3
 8000844:	2400      	movs	r4, #0
 8000846:	4011      	ands	r1, r2
 8000848:	4213      	tst	r3, r2
 800084a:	d00c      	beq.n	8000866 <__aeabi_ddiv+0x436>
 800084c:	230f      	movs	r3, #15
 800084e:	4013      	ands	r3, r2
 8000850:	2b04      	cmp	r3, #4
 8000852:	d100      	bne.n	8000856 <__aeabi_ddiv+0x426>
 8000854:	e0f9      	b.n	8000a4a <__aeabi_ddiv+0x61a>
 8000856:	1d11      	adds	r1, r2, #4
 8000858:	4291      	cmp	r1, r2
 800085a:	419b      	sbcs	r3, r3
 800085c:	000a      	movs	r2, r1
 800085e:	425b      	negs	r3, r3
 8000860:	0759      	lsls	r1, r3, #29
 8000862:	025b      	lsls	r3, r3, #9
 8000864:	0b1c      	lsrs	r4, r3, #12
 8000866:	08d2      	lsrs	r2, r2, #3
 8000868:	430a      	orrs	r2, r1
 800086a:	4690      	mov	r8, r2
 800086c:	2300      	movs	r3, #0
 800086e:	e63f      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 8000870:	2480      	movs	r4, #128	@ 0x80
 8000872:	464b      	mov	r3, r9
 8000874:	0324      	lsls	r4, r4, #12
 8000876:	4223      	tst	r3, r4
 8000878:	d009      	beq.n	800088e <__aeabi_ddiv+0x45e>
 800087a:	465b      	mov	r3, fp
 800087c:	4223      	tst	r3, r4
 800087e:	d106      	bne.n	800088e <__aeabi_ddiv+0x45e>
 8000880:	431c      	orrs	r4, r3
 8000882:	0324      	lsls	r4, r4, #12
 8000884:	002e      	movs	r6, r5
 8000886:	4690      	mov	r8, r2
 8000888:	4b71      	ldr	r3, [pc, #452]	@ (8000a50 <__aeabi_ddiv+0x620>)
 800088a:	0b24      	lsrs	r4, r4, #12
 800088c:	e630      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 800088e:	2480      	movs	r4, #128	@ 0x80
 8000890:	464b      	mov	r3, r9
 8000892:	0324      	lsls	r4, r4, #12
 8000894:	431c      	orrs	r4, r3
 8000896:	0324      	lsls	r4, r4, #12
 8000898:	9e02      	ldr	r6, [sp, #8]
 800089a:	4b6d      	ldr	r3, [pc, #436]	@ (8000a50 <__aeabi_ddiv+0x620>)
 800089c:	0b24      	lsrs	r4, r4, #12
 800089e:	e627      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_ddiv+0x476>
 80008a4:	e700      	b.n	80006a8 <__aeabi_ddiv+0x278>
 80008a6:	9800      	ldr	r0, [sp, #0]
 80008a8:	1e51      	subs	r1, r2, #1
 80008aa:	4684      	mov	ip, r0
 80008ac:	4464      	add	r4, ip
 80008ae:	4284      	cmp	r4, r0
 80008b0:	d200      	bcs.n	80008b4 <__aeabi_ddiv+0x484>
 80008b2:	e084      	b.n	80009be <__aeabi_ddiv+0x58e>
 80008b4:	42bc      	cmp	r4, r7
 80008b6:	d200      	bcs.n	80008ba <__aeabi_ddiv+0x48a>
 80008b8:	e0ae      	b.n	8000a18 <__aeabi_ddiv+0x5e8>
 80008ba:	d100      	bne.n	80008be <__aeabi_ddiv+0x48e>
 80008bc:	e0c1      	b.n	8000a42 <__aeabi_ddiv+0x612>
 80008be:	000a      	movs	r2, r1
 80008c0:	e6f0      	b.n	80006a4 <__aeabi_ddiv+0x274>
 80008c2:	4542      	cmp	r2, r8
 80008c4:	d900      	bls.n	80008c8 <__aeabi_ddiv+0x498>
 80008c6:	e62c      	b.n	8000522 <__aeabi_ddiv+0xf2>
 80008c8:	464b      	mov	r3, r9
 80008ca:	07dc      	lsls	r4, r3, #31
 80008cc:	0858      	lsrs	r0, r3, #1
 80008ce:	4643      	mov	r3, r8
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	431c      	orrs	r4, r3
 80008d4:	4643      	mov	r3, r8
 80008d6:	07df      	lsls	r7, r3, #31
 80008d8:	e62a      	b.n	8000530 <__aeabi_ddiv+0x100>
 80008da:	f000 fcfd 	bl	80012d8 <__clzsi2>
 80008de:	2315      	movs	r3, #21
 80008e0:	469c      	mov	ip, r3
 80008e2:	4484      	add	ip, r0
 80008e4:	0002      	movs	r2, r0
 80008e6:	4663      	mov	r3, ip
 80008e8:	3220      	adds	r2, #32
 80008ea:	2b1c      	cmp	r3, #28
 80008ec:	dc00      	bgt.n	80008f0 <__aeabi_ddiv+0x4c0>
 80008ee:	e72e      	b.n	800074e <__aeabi_ddiv+0x31e>
 80008f0:	0023      	movs	r3, r4
 80008f2:	3808      	subs	r0, #8
 80008f4:	4083      	lsls	r3, r0
 80008f6:	4699      	mov	r9, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	4698      	mov	r8, r3
 80008fc:	e736      	b.n	800076c <__aeabi_ddiv+0x33c>
 80008fe:	f000 fceb 	bl	80012d8 <__clzsi2>
 8000902:	0002      	movs	r2, r0
 8000904:	0003      	movs	r3, r0
 8000906:	3215      	adds	r2, #21
 8000908:	3320      	adds	r3, #32
 800090a:	2a1c      	cmp	r2, #28
 800090c:	dc00      	bgt.n	8000910 <__aeabi_ddiv+0x4e0>
 800090e:	e6fb      	b.n	8000708 <__aeabi_ddiv+0x2d8>
 8000910:	9900      	ldr	r1, [sp, #0]
 8000912:	3808      	subs	r0, #8
 8000914:	4081      	lsls	r1, r0
 8000916:	2200      	movs	r2, #0
 8000918:	468b      	mov	fp, r1
 800091a:	e702      	b.n	8000722 <__aeabi_ddiv+0x2f2>
 800091c:	9900      	ldr	r1, [sp, #0]
 800091e:	3b01      	subs	r3, #1
 8000920:	468c      	mov	ip, r1
 8000922:	4464      	add	r4, ip
 8000924:	42a1      	cmp	r1, r4
 8000926:	d900      	bls.n	800092a <__aeabi_ddiv+0x4fa>
 8000928:	e69a      	b.n	8000660 <__aeabi_ddiv+0x230>
 800092a:	42a2      	cmp	r2, r4
 800092c:	d800      	bhi.n	8000930 <__aeabi_ddiv+0x500>
 800092e:	e697      	b.n	8000660 <__aeabi_ddiv+0x230>
 8000930:	1e83      	subs	r3, r0, #2
 8000932:	4464      	add	r4, ip
 8000934:	e694      	b.n	8000660 <__aeabi_ddiv+0x230>
 8000936:	46ac      	mov	ip, r5
 8000938:	4461      	add	r1, ip
 800093a:	3f01      	subs	r7, #1
 800093c:	428d      	cmp	r5, r1
 800093e:	d900      	bls.n	8000942 <__aeabi_ddiv+0x512>
 8000940:	e680      	b.n	8000644 <__aeabi_ddiv+0x214>
 8000942:	428a      	cmp	r2, r1
 8000944:	d800      	bhi.n	8000948 <__aeabi_ddiv+0x518>
 8000946:	e67d      	b.n	8000644 <__aeabi_ddiv+0x214>
 8000948:	1e87      	subs	r7, r0, #2
 800094a:	4461      	add	r1, ip
 800094c:	e67a      	b.n	8000644 <__aeabi_ddiv+0x214>
 800094e:	4285      	cmp	r5, r0
 8000950:	d000      	beq.n	8000954 <__aeabi_ddiv+0x524>
 8000952:	e65f      	b.n	8000614 <__aeabi_ddiv+0x1e4>
 8000954:	45b9      	cmp	r9, r7
 8000956:	d900      	bls.n	800095a <__aeabi_ddiv+0x52a>
 8000958:	e65c      	b.n	8000614 <__aeabi_ddiv+0x1e4>
 800095a:	e656      	b.n	800060a <__aeabi_ddiv+0x1da>
 800095c:	42a2      	cmp	r2, r4
 800095e:	d800      	bhi.n	8000962 <__aeabi_ddiv+0x532>
 8000960:	e61a      	b.n	8000598 <__aeabi_ddiv+0x168>
 8000962:	1e83      	subs	r3, r0, #2
 8000964:	4464      	add	r4, ip
 8000966:	e617      	b.n	8000598 <__aeabi_ddiv+0x168>
 8000968:	428a      	cmp	r2, r1
 800096a:	d800      	bhi.n	800096e <__aeabi_ddiv+0x53e>
 800096c:	e600      	b.n	8000570 <__aeabi_ddiv+0x140>
 800096e:	46ac      	mov	ip, r5
 8000970:	1e83      	subs	r3, r0, #2
 8000972:	4698      	mov	r8, r3
 8000974:	4461      	add	r1, ip
 8000976:	e5fb      	b.n	8000570 <__aeabi_ddiv+0x140>
 8000978:	4837      	ldr	r0, [pc, #220]	@ (8000a58 <__aeabi_ddiv+0x628>)
 800097a:	0014      	movs	r4, r2
 800097c:	4450      	add	r0, sl
 800097e:	4082      	lsls	r2, r0
 8000980:	465b      	mov	r3, fp
 8000982:	0017      	movs	r7, r2
 8000984:	4083      	lsls	r3, r0
 8000986:	40cc      	lsrs	r4, r1
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	4197      	sbcs	r7, r2
 800098c:	4323      	orrs	r3, r4
 800098e:	433b      	orrs	r3, r7
 8000990:	001a      	movs	r2, r3
 8000992:	465b      	mov	r3, fp
 8000994:	40cb      	lsrs	r3, r1
 8000996:	0751      	lsls	r1, r2, #29
 8000998:	d009      	beq.n	80009ae <__aeabi_ddiv+0x57e>
 800099a:	210f      	movs	r1, #15
 800099c:	4011      	ands	r1, r2
 800099e:	2904      	cmp	r1, #4
 80009a0:	d005      	beq.n	80009ae <__aeabi_ddiv+0x57e>
 80009a2:	1d11      	adds	r1, r2, #4
 80009a4:	4291      	cmp	r1, r2
 80009a6:	4192      	sbcs	r2, r2
 80009a8:	4252      	negs	r2, r2
 80009aa:	189b      	adds	r3, r3, r2
 80009ac:	000a      	movs	r2, r1
 80009ae:	0219      	lsls	r1, r3, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_ddiv+0x584>
 80009b2:	e755      	b.n	8000860 <__aeabi_ddiv+0x430>
 80009b4:	2200      	movs	r2, #0
 80009b6:	2301      	movs	r3, #1
 80009b8:	2400      	movs	r4, #0
 80009ba:	4690      	mov	r8, r2
 80009bc:	e598      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 80009be:	000a      	movs	r2, r1
 80009c0:	42bc      	cmp	r4, r7
 80009c2:	d000      	beq.n	80009c6 <__aeabi_ddiv+0x596>
 80009c4:	e66e      	b.n	80006a4 <__aeabi_ddiv+0x274>
 80009c6:	454b      	cmp	r3, r9
 80009c8:	d000      	beq.n	80009cc <__aeabi_ddiv+0x59c>
 80009ca:	e66b      	b.n	80006a4 <__aeabi_ddiv+0x274>
 80009cc:	e66c      	b.n	80006a8 <__aeabi_ddiv+0x278>
 80009ce:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <__aeabi_ddiv+0x62c>)
 80009d0:	4a23      	ldr	r2, [pc, #140]	@ (8000a60 <__aeabi_ddiv+0x630>)
 80009d2:	4453      	add	r3, sl
 80009d4:	4592      	cmp	sl, r2
 80009d6:	da00      	bge.n	80009da <__aeabi_ddiv+0x5aa>
 80009d8:	e718      	b.n	800080c <__aeabi_ddiv+0x3dc>
 80009da:	2101      	movs	r1, #1
 80009dc:	4249      	negs	r1, r1
 80009de:	1d0a      	adds	r2, r1, #4
 80009e0:	428a      	cmp	r2, r1
 80009e2:	4189      	sbcs	r1, r1
 80009e4:	4249      	negs	r1, r1
 80009e6:	448b      	add	fp, r1
 80009e8:	e666      	b.n	80006b8 <__aeabi_ddiv+0x288>
 80009ea:	210f      	movs	r1, #15
 80009ec:	4011      	ands	r1, r2
 80009ee:	2904      	cmp	r1, #4
 80009f0:	d100      	bne.n	80009f4 <__aeabi_ddiv+0x5c4>
 80009f2:	e661      	b.n	80006b8 <__aeabi_ddiv+0x288>
 80009f4:	0011      	movs	r1, r2
 80009f6:	e7f2      	b.n	80009de <__aeabi_ddiv+0x5ae>
 80009f8:	42bc      	cmp	r4, r7
 80009fa:	d800      	bhi.n	80009fe <__aeabi_ddiv+0x5ce>
 80009fc:	e60a      	b.n	8000614 <__aeabi_ddiv+0x1e4>
 80009fe:	2302      	movs	r3, #2
 8000a00:	425b      	negs	r3, r3
 8000a02:	469c      	mov	ip, r3
 8000a04:	9900      	ldr	r1, [sp, #0]
 8000a06:	444f      	add	r7, r9
 8000a08:	454f      	cmp	r7, r9
 8000a0a:	419b      	sbcs	r3, r3
 8000a0c:	44e3      	add	fp, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	425b      	negs	r3, r3
 8000a12:	4463      	add	r3, ip
 8000a14:	18c0      	adds	r0, r0, r3
 8000a16:	e5ff      	b.n	8000618 <__aeabi_ddiv+0x1e8>
 8000a18:	4649      	mov	r1, r9
 8000a1a:	9d00      	ldr	r5, [sp, #0]
 8000a1c:	0048      	lsls	r0, r1, #1
 8000a1e:	4548      	cmp	r0, r9
 8000a20:	4189      	sbcs	r1, r1
 8000a22:	46ac      	mov	ip, r5
 8000a24:	4249      	negs	r1, r1
 8000a26:	4461      	add	r1, ip
 8000a28:	4681      	mov	r9, r0
 8000a2a:	3a02      	subs	r2, #2
 8000a2c:	1864      	adds	r4, r4, r1
 8000a2e:	e7c7      	b.n	80009c0 <__aeabi_ddiv+0x590>
 8000a30:	2480      	movs	r4, #128	@ 0x80
 8000a32:	465b      	mov	r3, fp
 8000a34:	0324      	lsls	r4, r4, #12
 8000a36:	431c      	orrs	r4, r3
 8000a38:	0324      	lsls	r4, r4, #12
 8000a3a:	4690      	mov	r8, r2
 8000a3c:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <__aeabi_ddiv+0x620>)
 8000a3e:	0b24      	lsrs	r4, r4, #12
 8000a40:	e556      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 8000a42:	4599      	cmp	r9, r3
 8000a44:	d3e8      	bcc.n	8000a18 <__aeabi_ddiv+0x5e8>
 8000a46:	000a      	movs	r2, r1
 8000a48:	e7bd      	b.n	80009c6 <__aeabi_ddiv+0x596>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e708      	b.n	8000860 <__aeabi_ddiv+0x430>
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	000007ff 	.word	0x000007ff
 8000a54:	0000043e 	.word	0x0000043e
 8000a58:	0000041e 	.word	0x0000041e
 8000a5c:	000003ff 	.word	0x000003ff
 8000a60:	fffffc02 	.word	0xfffffc02

08000a64 <__aeabi_dsub>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	464e      	mov	r6, r9
 8000a68:	4645      	mov	r5, r8
 8000a6a:	46de      	mov	lr, fp
 8000a6c:	4657      	mov	r7, sl
 8000a6e:	b5e0      	push	{r5, r6, r7, lr}
 8000a70:	b085      	sub	sp, #20
 8000a72:	9000      	str	r0, [sp, #0]
 8000a74:	9101      	str	r1, [sp, #4]
 8000a76:	030c      	lsls	r4, r1, #12
 8000a78:	004f      	lsls	r7, r1, #1
 8000a7a:	0fce      	lsrs	r6, r1, #31
 8000a7c:	0a61      	lsrs	r1, r4, #9
 8000a7e:	9c00      	ldr	r4, [sp, #0]
 8000a80:	46b0      	mov	r8, r6
 8000a82:	0f64      	lsrs	r4, r4, #29
 8000a84:	430c      	orrs	r4, r1
 8000a86:	9900      	ldr	r1, [sp, #0]
 8000a88:	0d7f      	lsrs	r7, r7, #21
 8000a8a:	00c8      	lsls	r0, r1, #3
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	001a      	movs	r2, r3
 8000a90:	031b      	lsls	r3, r3, #12
 8000a92:	469c      	mov	ip, r3
 8000a94:	9100      	str	r1, [sp, #0]
 8000a96:	9201      	str	r2, [sp, #4]
 8000a98:	0051      	lsls	r1, r2, #1
 8000a9a:	0d4b      	lsrs	r3, r1, #21
 8000a9c:	4699      	mov	r9, r3
 8000a9e:	9b01      	ldr	r3, [sp, #4]
 8000aa0:	9d00      	ldr	r5, [sp, #0]
 8000aa2:	0fd9      	lsrs	r1, r3, #31
 8000aa4:	4663      	mov	r3, ip
 8000aa6:	0f6a      	lsrs	r2, r5, #29
 8000aa8:	0a5b      	lsrs	r3, r3, #9
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	00ea      	lsls	r2, r5, #3
 8000aae:	4694      	mov	ip, r2
 8000ab0:	4693      	mov	fp, r2
 8000ab2:	4ac1      	ldr	r2, [pc, #772]	@ (8000db8 <__aeabi_dsub+0x354>)
 8000ab4:	9003      	str	r0, [sp, #12]
 8000ab6:	9302      	str	r3, [sp, #8]
 8000ab8:	4591      	cmp	r9, r2
 8000aba:	d100      	bne.n	8000abe <__aeabi_dsub+0x5a>
 8000abc:	e0cd      	b.n	8000c5a <__aeabi_dsub+0x1f6>
 8000abe:	2501      	movs	r5, #1
 8000ac0:	4069      	eors	r1, r5
 8000ac2:	464d      	mov	r5, r9
 8000ac4:	1b7d      	subs	r5, r7, r5
 8000ac6:	46aa      	mov	sl, r5
 8000ac8:	428e      	cmp	r6, r1
 8000aca:	d100      	bne.n	8000ace <__aeabi_dsub+0x6a>
 8000acc:	e080      	b.n	8000bd0 <__aeabi_dsub+0x16c>
 8000ace:	2d00      	cmp	r5, #0
 8000ad0:	dc00      	bgt.n	8000ad4 <__aeabi_dsub+0x70>
 8000ad2:	e335      	b.n	8001140 <__aeabi_dsub+0x6dc>
 8000ad4:	4649      	mov	r1, r9
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dsub+0x78>
 8000ada:	e0df      	b.n	8000c9c <__aeabi_dsub+0x238>
 8000adc:	4297      	cmp	r7, r2
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dsub+0x7e>
 8000ae0:	e194      	b.n	8000e0c <__aeabi_dsub+0x3a8>
 8000ae2:	4652      	mov	r2, sl
 8000ae4:	2501      	movs	r5, #1
 8000ae6:	2a38      	cmp	r2, #56	@ 0x38
 8000ae8:	dc19      	bgt.n	8000b1e <__aeabi_dsub+0xba>
 8000aea:	2280      	movs	r2, #128	@ 0x80
 8000aec:	9b02      	ldr	r3, [sp, #8]
 8000aee:	0412      	lsls	r2, r2, #16
 8000af0:	4313      	orrs	r3, r2
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	4652      	mov	r2, sl
 8000af6:	2a1f      	cmp	r2, #31
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dsub+0x98>
 8000afa:	e1e3      	b.n	8000ec4 <__aeabi_dsub+0x460>
 8000afc:	4653      	mov	r3, sl
 8000afe:	2220      	movs	r2, #32
 8000b00:	4661      	mov	r1, ip
 8000b02:	9d02      	ldr	r5, [sp, #8]
 8000b04:	1ad2      	subs	r2, r2, r3
 8000b06:	4095      	lsls	r5, r2
 8000b08:	40d9      	lsrs	r1, r3
 8000b0a:	430d      	orrs	r5, r1
 8000b0c:	4661      	mov	r1, ip
 8000b0e:	4091      	lsls	r1, r2
 8000b10:	000a      	movs	r2, r1
 8000b12:	1e51      	subs	r1, r2, #1
 8000b14:	418a      	sbcs	r2, r1
 8000b16:	4315      	orrs	r5, r2
 8000b18:	9a02      	ldr	r2, [sp, #8]
 8000b1a:	40da      	lsrs	r2, r3
 8000b1c:	1aa4      	subs	r4, r4, r2
 8000b1e:	1b45      	subs	r5, r0, r5
 8000b20:	42a8      	cmp	r0, r5
 8000b22:	4180      	sbcs	r0, r0
 8000b24:	4240      	negs	r0, r0
 8000b26:	1a24      	subs	r4, r4, r0
 8000b28:	0223      	lsls	r3, r4, #8
 8000b2a:	d400      	bmi.n	8000b2e <__aeabi_dsub+0xca>
 8000b2c:	e13d      	b.n	8000daa <__aeabi_dsub+0x346>
 8000b2e:	0264      	lsls	r4, r4, #9
 8000b30:	0a64      	lsrs	r4, r4, #9
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dsub+0xd4>
 8000b36:	e147      	b.n	8000dc8 <__aeabi_dsub+0x364>
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f000 fbcd 	bl	80012d8 <__clzsi2>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	3b08      	subs	r3, #8
 8000b42:	2120      	movs	r1, #32
 8000b44:	0028      	movs	r0, r5
 8000b46:	1aca      	subs	r2, r1, r3
 8000b48:	40d0      	lsrs	r0, r2
 8000b4a:	409c      	lsls	r4, r3
 8000b4c:	0002      	movs	r2, r0
 8000b4e:	409d      	lsls	r5, r3
 8000b50:	4322      	orrs	r2, r4
 8000b52:	429f      	cmp	r7, r3
 8000b54:	dd00      	ble.n	8000b58 <__aeabi_dsub+0xf4>
 8000b56:	e177      	b.n	8000e48 <__aeabi_dsub+0x3e4>
 8000b58:	1bd8      	subs	r0, r3, r7
 8000b5a:	3001      	adds	r0, #1
 8000b5c:	1a09      	subs	r1, r1, r0
 8000b5e:	002c      	movs	r4, r5
 8000b60:	408d      	lsls	r5, r1
 8000b62:	40c4      	lsrs	r4, r0
 8000b64:	1e6b      	subs	r3, r5, #1
 8000b66:	419d      	sbcs	r5, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	40c2      	lsrs	r2, r0
 8000b6c:	408b      	lsls	r3, r1
 8000b6e:	4325      	orrs	r5, r4
 8000b70:	2700      	movs	r7, #0
 8000b72:	0014      	movs	r4, r2
 8000b74:	431d      	orrs	r5, r3
 8000b76:	076b      	lsls	r3, r5, #29
 8000b78:	d009      	beq.n	8000b8e <__aeabi_dsub+0x12a>
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	402b      	ands	r3, r5
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d005      	beq.n	8000b8e <__aeabi_dsub+0x12a>
 8000b82:	1d2b      	adds	r3, r5, #4
 8000b84:	42ab      	cmp	r3, r5
 8000b86:	41ad      	sbcs	r5, r5
 8000b88:	426d      	negs	r5, r5
 8000b8a:	1964      	adds	r4, r4, r5
 8000b8c:	001d      	movs	r5, r3
 8000b8e:	0223      	lsls	r3, r4, #8
 8000b90:	d400      	bmi.n	8000b94 <__aeabi_dsub+0x130>
 8000b92:	e140      	b.n	8000e16 <__aeabi_dsub+0x3b2>
 8000b94:	4a88      	ldr	r2, [pc, #544]	@ (8000db8 <__aeabi_dsub+0x354>)
 8000b96:	3701      	adds	r7, #1
 8000b98:	4297      	cmp	r7, r2
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_dsub+0x13a>
 8000b9c:	e101      	b.n	8000da2 <__aeabi_dsub+0x33e>
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	4643      	mov	r3, r8
 8000ba2:	4986      	ldr	r1, [pc, #536]	@ (8000dbc <__aeabi_dsub+0x358>)
 8000ba4:	08ed      	lsrs	r5, r5, #3
 8000ba6:	4021      	ands	r1, r4
 8000ba8:	074a      	lsls	r2, r1, #29
 8000baa:	432a      	orrs	r2, r5
 8000bac:	057c      	lsls	r4, r7, #21
 8000bae:	024d      	lsls	r5, r1, #9
 8000bb0:	0b2d      	lsrs	r5, r5, #12
 8000bb2:	0d64      	lsrs	r4, r4, #21
 8000bb4:	401e      	ands	r6, r3
 8000bb6:	0524      	lsls	r4, r4, #20
 8000bb8:	432c      	orrs	r4, r5
 8000bba:	07f6      	lsls	r6, r6, #31
 8000bbc:	4334      	orrs	r4, r6
 8000bbe:	0010      	movs	r0, r2
 8000bc0:	0021      	movs	r1, r4
 8000bc2:	b005      	add	sp, #20
 8000bc4:	bcf0      	pop	{r4, r5, r6, r7}
 8000bc6:	46bb      	mov	fp, r7
 8000bc8:	46b2      	mov	sl, r6
 8000bca:	46a9      	mov	r9, r5
 8000bcc:	46a0      	mov	r8, r4
 8000bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	dc00      	bgt.n	8000bd6 <__aeabi_dsub+0x172>
 8000bd4:	e2d0      	b.n	8001178 <__aeabi_dsub+0x714>
 8000bd6:	4649      	mov	r1, r9
 8000bd8:	2900      	cmp	r1, #0
 8000bda:	d000      	beq.n	8000bde <__aeabi_dsub+0x17a>
 8000bdc:	e0d4      	b.n	8000d88 <__aeabi_dsub+0x324>
 8000bde:	4661      	mov	r1, ip
 8000be0:	9b02      	ldr	r3, [sp, #8]
 8000be2:	4319      	orrs	r1, r3
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dsub+0x184>
 8000be6:	e12b      	b.n	8000e40 <__aeabi_dsub+0x3dc>
 8000be8:	1e69      	subs	r1, r5, #1
 8000bea:	2d01      	cmp	r5, #1
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dsub+0x18c>
 8000bee:	e1d9      	b.n	8000fa4 <__aeabi_dsub+0x540>
 8000bf0:	4295      	cmp	r5, r2
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_dsub+0x192>
 8000bf4:	e10a      	b.n	8000e0c <__aeabi_dsub+0x3a8>
 8000bf6:	2501      	movs	r5, #1
 8000bf8:	2938      	cmp	r1, #56	@ 0x38
 8000bfa:	dc17      	bgt.n	8000c2c <__aeabi_dsub+0x1c8>
 8000bfc:	468a      	mov	sl, r1
 8000bfe:	4653      	mov	r3, sl
 8000c00:	2b1f      	cmp	r3, #31
 8000c02:	dd00      	ble.n	8000c06 <__aeabi_dsub+0x1a2>
 8000c04:	e1e7      	b.n	8000fd6 <__aeabi_dsub+0x572>
 8000c06:	2220      	movs	r2, #32
 8000c08:	1ad2      	subs	r2, r2, r3
 8000c0a:	9b02      	ldr	r3, [sp, #8]
 8000c0c:	4661      	mov	r1, ip
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	001d      	movs	r5, r3
 8000c12:	4653      	mov	r3, sl
 8000c14:	40d9      	lsrs	r1, r3
 8000c16:	4663      	mov	r3, ip
 8000c18:	4093      	lsls	r3, r2
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	430d      	orrs	r5, r1
 8000c1e:	1e51      	subs	r1, r2, #1
 8000c20:	418a      	sbcs	r2, r1
 8000c22:	4653      	mov	r3, sl
 8000c24:	4315      	orrs	r5, r2
 8000c26:	9a02      	ldr	r2, [sp, #8]
 8000c28:	40da      	lsrs	r2, r3
 8000c2a:	18a4      	adds	r4, r4, r2
 8000c2c:	182d      	adds	r5, r5, r0
 8000c2e:	4285      	cmp	r5, r0
 8000c30:	4180      	sbcs	r0, r0
 8000c32:	4240      	negs	r0, r0
 8000c34:	1824      	adds	r4, r4, r0
 8000c36:	0223      	lsls	r3, r4, #8
 8000c38:	d400      	bmi.n	8000c3c <__aeabi_dsub+0x1d8>
 8000c3a:	e0b6      	b.n	8000daa <__aeabi_dsub+0x346>
 8000c3c:	4b5e      	ldr	r3, [pc, #376]	@ (8000db8 <__aeabi_dsub+0x354>)
 8000c3e:	3701      	adds	r7, #1
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dsub+0x1e2>
 8000c44:	e0ad      	b.n	8000da2 <__aeabi_dsub+0x33e>
 8000c46:	2101      	movs	r1, #1
 8000c48:	4b5c      	ldr	r3, [pc, #368]	@ (8000dbc <__aeabi_dsub+0x358>)
 8000c4a:	086a      	lsrs	r2, r5, #1
 8000c4c:	401c      	ands	r4, r3
 8000c4e:	4029      	ands	r1, r5
 8000c50:	430a      	orrs	r2, r1
 8000c52:	07e5      	lsls	r5, r4, #31
 8000c54:	4315      	orrs	r5, r2
 8000c56:	0864      	lsrs	r4, r4, #1
 8000c58:	e78d      	b.n	8000b76 <__aeabi_dsub+0x112>
 8000c5a:	4a59      	ldr	r2, [pc, #356]	@ (8000dc0 <__aeabi_dsub+0x35c>)
 8000c5c:	9b02      	ldr	r3, [sp, #8]
 8000c5e:	4692      	mov	sl, r2
 8000c60:	4662      	mov	r2, ip
 8000c62:	44ba      	add	sl, r7
 8000c64:	431a      	orrs	r2, r3
 8000c66:	d02c      	beq.n	8000cc2 <__aeabi_dsub+0x25e>
 8000c68:	428e      	cmp	r6, r1
 8000c6a:	d02e      	beq.n	8000cca <__aeabi_dsub+0x266>
 8000c6c:	4652      	mov	r2, sl
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d060      	beq.n	8000d34 <__aeabi_dsub+0x2d0>
 8000c72:	2f00      	cmp	r7, #0
 8000c74:	d100      	bne.n	8000c78 <__aeabi_dsub+0x214>
 8000c76:	e0db      	b.n	8000e30 <__aeabi_dsub+0x3cc>
 8000c78:	4663      	mov	r3, ip
 8000c7a:	000e      	movs	r6, r1
 8000c7c:	9c02      	ldr	r4, [sp, #8]
 8000c7e:	08d8      	lsrs	r0, r3, #3
 8000c80:	0762      	lsls	r2, r4, #29
 8000c82:	4302      	orrs	r2, r0
 8000c84:	08e4      	lsrs	r4, r4, #3
 8000c86:	0013      	movs	r3, r2
 8000c88:	4323      	orrs	r3, r4
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dsub+0x22a>
 8000c8c:	e254      	b.n	8001138 <__aeabi_dsub+0x6d4>
 8000c8e:	2580      	movs	r5, #128	@ 0x80
 8000c90:	032d      	lsls	r5, r5, #12
 8000c92:	4325      	orrs	r5, r4
 8000c94:	032d      	lsls	r5, r5, #12
 8000c96:	4c48      	ldr	r4, [pc, #288]	@ (8000db8 <__aeabi_dsub+0x354>)
 8000c98:	0b2d      	lsrs	r5, r5, #12
 8000c9a:	e78c      	b.n	8000bb6 <__aeabi_dsub+0x152>
 8000c9c:	4661      	mov	r1, ip
 8000c9e:	9b02      	ldr	r3, [sp, #8]
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_dsub+0x242>
 8000ca4:	e0cc      	b.n	8000e40 <__aeabi_dsub+0x3dc>
 8000ca6:	0029      	movs	r1, r5
 8000ca8:	3901      	subs	r1, #1
 8000caa:	2d01      	cmp	r5, #1
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dsub+0x24c>
 8000cae:	e188      	b.n	8000fc2 <__aeabi_dsub+0x55e>
 8000cb0:	4295      	cmp	r5, r2
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dsub+0x252>
 8000cb4:	e0aa      	b.n	8000e0c <__aeabi_dsub+0x3a8>
 8000cb6:	2501      	movs	r5, #1
 8000cb8:	2938      	cmp	r1, #56	@ 0x38
 8000cba:	dd00      	ble.n	8000cbe <__aeabi_dsub+0x25a>
 8000cbc:	e72f      	b.n	8000b1e <__aeabi_dsub+0xba>
 8000cbe:	468a      	mov	sl, r1
 8000cc0:	e718      	b.n	8000af4 <__aeabi_dsub+0x90>
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4051      	eors	r1, r2
 8000cc6:	428e      	cmp	r6, r1
 8000cc8:	d1d0      	bne.n	8000c6c <__aeabi_dsub+0x208>
 8000cca:	4653      	mov	r3, sl
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_dsub+0x26e>
 8000cd0:	e0be      	b.n	8000e50 <__aeabi_dsub+0x3ec>
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_dsub+0x274>
 8000cd6:	e138      	b.n	8000f4a <__aeabi_dsub+0x4e6>
 8000cd8:	46ca      	mov	sl, r9
 8000cda:	0022      	movs	r2, r4
 8000cdc:	4302      	orrs	r2, r0
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_dsub+0x27e>
 8000ce0:	e1e2      	b.n	80010a8 <__aeabi_dsub+0x644>
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	1e59      	subs	r1, r3, #1
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dsub+0x288>
 8000cea:	e20d      	b.n	8001108 <__aeabi_dsub+0x6a4>
 8000cec:	4a32      	ldr	r2, [pc, #200]	@ (8000db8 <__aeabi_dsub+0x354>)
 8000cee:	4592      	cmp	sl, r2
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_dsub+0x290>
 8000cf2:	e1d2      	b.n	800109a <__aeabi_dsub+0x636>
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	2938      	cmp	r1, #56	@ 0x38
 8000cf8:	dc13      	bgt.n	8000d22 <__aeabi_dsub+0x2be>
 8000cfa:	291f      	cmp	r1, #31
 8000cfc:	dd00      	ble.n	8000d00 <__aeabi_dsub+0x29c>
 8000cfe:	e1ee      	b.n	80010de <__aeabi_dsub+0x67a>
 8000d00:	2220      	movs	r2, #32
 8000d02:	9b02      	ldr	r3, [sp, #8]
 8000d04:	1a52      	subs	r2, r2, r1
 8000d06:	0025      	movs	r5, r4
 8000d08:	0007      	movs	r7, r0
 8000d0a:	469a      	mov	sl, r3
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	4090      	lsls	r0, r2
 8000d10:	4095      	lsls	r5, r2
 8000d12:	40cf      	lsrs	r7, r1
 8000d14:	44a2      	add	sl, r4
 8000d16:	1e42      	subs	r2, r0, #1
 8000d18:	4190      	sbcs	r0, r2
 8000d1a:	4653      	mov	r3, sl
 8000d1c:	432f      	orrs	r7, r5
 8000d1e:	4307      	orrs	r7, r0
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	003d      	movs	r5, r7
 8000d24:	4465      	add	r5, ip
 8000d26:	4565      	cmp	r5, ip
 8000d28:	4192      	sbcs	r2, r2
 8000d2a:	9b02      	ldr	r3, [sp, #8]
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	464f      	mov	r7, r9
 8000d30:	18d4      	adds	r4, r2, r3
 8000d32:	e780      	b.n	8000c36 <__aeabi_dsub+0x1d2>
 8000d34:	4a23      	ldr	r2, [pc, #140]	@ (8000dc4 <__aeabi_dsub+0x360>)
 8000d36:	1c7d      	adds	r5, r7, #1
 8000d38:	4215      	tst	r5, r2
 8000d3a:	d000      	beq.n	8000d3e <__aeabi_dsub+0x2da>
 8000d3c:	e0aa      	b.n	8000e94 <__aeabi_dsub+0x430>
 8000d3e:	4662      	mov	r2, ip
 8000d40:	0025      	movs	r5, r4
 8000d42:	9b02      	ldr	r3, [sp, #8]
 8000d44:	4305      	orrs	r5, r0
 8000d46:	431a      	orrs	r2, r3
 8000d48:	2f00      	cmp	r7, #0
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_dsub+0x2ea>
 8000d4c:	e0f5      	b.n	8000f3a <__aeabi_dsub+0x4d6>
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dsub+0x2f0>
 8000d52:	e16b      	b.n	800102c <__aeabi_dsub+0x5c8>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	d100      	bne.n	8000d5a <__aeabi_dsub+0x2f6>
 8000d58:	e152      	b.n	8001000 <__aeabi_dsub+0x59c>
 8000d5a:	4663      	mov	r3, ip
 8000d5c:	1ac5      	subs	r5, r0, r3
 8000d5e:	9b02      	ldr	r3, [sp, #8]
 8000d60:	1ae2      	subs	r2, r4, r3
 8000d62:	42a8      	cmp	r0, r5
 8000d64:	419b      	sbcs	r3, r3
 8000d66:	425b      	negs	r3, r3
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	021a      	lsls	r2, r3, #8
 8000d6c:	d400      	bmi.n	8000d70 <__aeabi_dsub+0x30c>
 8000d6e:	e1d5      	b.n	800111c <__aeabi_dsub+0x6b8>
 8000d70:	4663      	mov	r3, ip
 8000d72:	1a1d      	subs	r5, r3, r0
 8000d74:	45ac      	cmp	ip, r5
 8000d76:	4192      	sbcs	r2, r2
 8000d78:	2601      	movs	r6, #1
 8000d7a:	9b02      	ldr	r3, [sp, #8]
 8000d7c:	4252      	negs	r2, r2
 8000d7e:	1b1c      	subs	r4, r3, r4
 8000d80:	4688      	mov	r8, r1
 8000d82:	1aa4      	subs	r4, r4, r2
 8000d84:	400e      	ands	r6, r1
 8000d86:	e6f6      	b.n	8000b76 <__aeabi_dsub+0x112>
 8000d88:	4297      	cmp	r7, r2
 8000d8a:	d03f      	beq.n	8000e0c <__aeabi_dsub+0x3a8>
 8000d8c:	4652      	mov	r2, sl
 8000d8e:	2501      	movs	r5, #1
 8000d90:	2a38      	cmp	r2, #56	@ 0x38
 8000d92:	dd00      	ble.n	8000d96 <__aeabi_dsub+0x332>
 8000d94:	e74a      	b.n	8000c2c <__aeabi_dsub+0x1c8>
 8000d96:	2280      	movs	r2, #128	@ 0x80
 8000d98:	9b02      	ldr	r3, [sp, #8]
 8000d9a:	0412      	lsls	r2, r2, #16
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	9302      	str	r3, [sp, #8]
 8000da0:	e72d      	b.n	8000bfe <__aeabi_dsub+0x19a>
 8000da2:	003c      	movs	r4, r7
 8000da4:	2500      	movs	r5, #0
 8000da6:	2200      	movs	r2, #0
 8000da8:	e705      	b.n	8000bb6 <__aeabi_dsub+0x152>
 8000daa:	2307      	movs	r3, #7
 8000dac:	402b      	ands	r3, r5
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d000      	beq.n	8000db4 <__aeabi_dsub+0x350>
 8000db2:	e6e2      	b.n	8000b7a <__aeabi_dsub+0x116>
 8000db4:	e06b      	b.n	8000e8e <__aeabi_dsub+0x42a>
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	000007ff 	.word	0x000007ff
 8000dbc:	ff7fffff 	.word	0xff7fffff
 8000dc0:	fffff801 	.word	0xfffff801
 8000dc4:	000007fe 	.word	0x000007fe
 8000dc8:	0028      	movs	r0, r5
 8000dca:	f000 fa85 	bl	80012d8 <__clzsi2>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	3318      	adds	r3, #24
 8000dd2:	2b1f      	cmp	r3, #31
 8000dd4:	dc00      	bgt.n	8000dd8 <__aeabi_dsub+0x374>
 8000dd6:	e6b4      	b.n	8000b42 <__aeabi_dsub+0xde>
 8000dd8:	002a      	movs	r2, r5
 8000dda:	3808      	subs	r0, #8
 8000ddc:	4082      	lsls	r2, r0
 8000dde:	429f      	cmp	r7, r3
 8000de0:	dd00      	ble.n	8000de4 <__aeabi_dsub+0x380>
 8000de2:	e0b9      	b.n	8000f58 <__aeabi_dsub+0x4f4>
 8000de4:	1bdb      	subs	r3, r3, r7
 8000de6:	1c58      	adds	r0, r3, #1
 8000de8:	281f      	cmp	r0, #31
 8000dea:	dc00      	bgt.n	8000dee <__aeabi_dsub+0x38a>
 8000dec:	e1a0      	b.n	8001130 <__aeabi_dsub+0x6cc>
 8000dee:	0015      	movs	r5, r2
 8000df0:	3b1f      	subs	r3, #31
 8000df2:	40dd      	lsrs	r5, r3
 8000df4:	2820      	cmp	r0, #32
 8000df6:	d005      	beq.n	8000e04 <__aeabi_dsub+0x3a0>
 8000df8:	2340      	movs	r3, #64	@ 0x40
 8000dfa:	1a1b      	subs	r3, r3, r0
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	1e53      	subs	r3, r2, #1
 8000e00:	419a      	sbcs	r2, r3
 8000e02:	4315      	orrs	r5, r2
 8000e04:	2307      	movs	r3, #7
 8000e06:	2700      	movs	r7, #0
 8000e08:	402b      	ands	r3, r5
 8000e0a:	e7d0      	b.n	8000dae <__aeabi_dsub+0x34a>
 8000e0c:	08c0      	lsrs	r0, r0, #3
 8000e0e:	0762      	lsls	r2, r4, #29
 8000e10:	4302      	orrs	r2, r0
 8000e12:	08e4      	lsrs	r4, r4, #3
 8000e14:	e737      	b.n	8000c86 <__aeabi_dsub+0x222>
 8000e16:	08ea      	lsrs	r2, r5, #3
 8000e18:	0763      	lsls	r3, r4, #29
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	4bd3      	ldr	r3, [pc, #844]	@ (800116c <__aeabi_dsub+0x708>)
 8000e1e:	08e4      	lsrs	r4, r4, #3
 8000e20:	429f      	cmp	r7, r3
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dsub+0x3c2>
 8000e24:	e72f      	b.n	8000c86 <__aeabi_dsub+0x222>
 8000e26:	0324      	lsls	r4, r4, #12
 8000e28:	0b25      	lsrs	r5, r4, #12
 8000e2a:	057c      	lsls	r4, r7, #21
 8000e2c:	0d64      	lsrs	r4, r4, #21
 8000e2e:	e6c2      	b.n	8000bb6 <__aeabi_dsub+0x152>
 8000e30:	46ca      	mov	sl, r9
 8000e32:	0022      	movs	r2, r4
 8000e34:	4302      	orrs	r2, r0
 8000e36:	d158      	bne.n	8000eea <__aeabi_dsub+0x486>
 8000e38:	4663      	mov	r3, ip
 8000e3a:	000e      	movs	r6, r1
 8000e3c:	9c02      	ldr	r4, [sp, #8]
 8000e3e:	9303      	str	r3, [sp, #12]
 8000e40:	9b03      	ldr	r3, [sp, #12]
 8000e42:	4657      	mov	r7, sl
 8000e44:	08da      	lsrs	r2, r3, #3
 8000e46:	e7e7      	b.n	8000e18 <__aeabi_dsub+0x3b4>
 8000e48:	4cc9      	ldr	r4, [pc, #804]	@ (8001170 <__aeabi_dsub+0x70c>)
 8000e4a:	1aff      	subs	r7, r7, r3
 8000e4c:	4014      	ands	r4, r2
 8000e4e:	e692      	b.n	8000b76 <__aeabi_dsub+0x112>
 8000e50:	4dc8      	ldr	r5, [pc, #800]	@ (8001174 <__aeabi_dsub+0x710>)
 8000e52:	1c7a      	adds	r2, r7, #1
 8000e54:	422a      	tst	r2, r5
 8000e56:	d000      	beq.n	8000e5a <__aeabi_dsub+0x3f6>
 8000e58:	e084      	b.n	8000f64 <__aeabi_dsub+0x500>
 8000e5a:	0022      	movs	r2, r4
 8000e5c:	4302      	orrs	r2, r0
 8000e5e:	2f00      	cmp	r7, #0
 8000e60:	d000      	beq.n	8000e64 <__aeabi_dsub+0x400>
 8000e62:	e0ef      	b.n	8001044 <__aeabi_dsub+0x5e0>
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dsub+0x406>
 8000e68:	e0e5      	b.n	8001036 <__aeabi_dsub+0x5d2>
 8000e6a:	4662      	mov	r2, ip
 8000e6c:	9902      	ldr	r1, [sp, #8]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dsub+0x410>
 8000e72:	e0c5      	b.n	8001000 <__aeabi_dsub+0x59c>
 8000e74:	4663      	mov	r3, ip
 8000e76:	18c5      	adds	r5, r0, r3
 8000e78:	468c      	mov	ip, r1
 8000e7a:	4285      	cmp	r5, r0
 8000e7c:	4180      	sbcs	r0, r0
 8000e7e:	4464      	add	r4, ip
 8000e80:	4240      	negs	r0, r0
 8000e82:	1824      	adds	r4, r4, r0
 8000e84:	0223      	lsls	r3, r4, #8
 8000e86:	d502      	bpl.n	8000e8e <__aeabi_dsub+0x42a>
 8000e88:	4bb9      	ldr	r3, [pc, #740]	@ (8001170 <__aeabi_dsub+0x70c>)
 8000e8a:	3701      	adds	r7, #1
 8000e8c:	401c      	ands	r4, r3
 8000e8e:	46ba      	mov	sl, r7
 8000e90:	9503      	str	r5, [sp, #12]
 8000e92:	e7d5      	b.n	8000e40 <__aeabi_dsub+0x3dc>
 8000e94:	4662      	mov	r2, ip
 8000e96:	1a85      	subs	r5, r0, r2
 8000e98:	42a8      	cmp	r0, r5
 8000e9a:	4192      	sbcs	r2, r2
 8000e9c:	4252      	negs	r2, r2
 8000e9e:	4691      	mov	r9, r2
 8000ea0:	9b02      	ldr	r3, [sp, #8]
 8000ea2:	1ae3      	subs	r3, r4, r3
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	464b      	mov	r3, r9
 8000ea8:	1ad2      	subs	r2, r2, r3
 8000eaa:	0013      	movs	r3, r2
 8000eac:	4691      	mov	r9, r2
 8000eae:	021a      	lsls	r2, r3, #8
 8000eb0:	d46c      	bmi.n	8000f8c <__aeabi_dsub+0x528>
 8000eb2:	464a      	mov	r2, r9
 8000eb4:	464c      	mov	r4, r9
 8000eb6:	432a      	orrs	r2, r5
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_dsub+0x458>
 8000eba:	e63a      	b.n	8000b32 <__aeabi_dsub+0xce>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	2500      	movs	r5, #0
 8000ec2:	e678      	b.n	8000bb6 <__aeabi_dsub+0x152>
 8000ec4:	9902      	ldr	r1, [sp, #8]
 8000ec6:	4653      	mov	r3, sl
 8000ec8:	000d      	movs	r5, r1
 8000eca:	3a20      	subs	r2, #32
 8000ecc:	40d5      	lsrs	r5, r2
 8000ece:	2b20      	cmp	r3, #32
 8000ed0:	d006      	beq.n	8000ee0 <__aeabi_dsub+0x47c>
 8000ed2:	2240      	movs	r2, #64	@ 0x40
 8000ed4:	1ad2      	subs	r2, r2, r3
 8000ed6:	000b      	movs	r3, r1
 8000ed8:	4093      	lsls	r3, r2
 8000eda:	4662      	mov	r2, ip
 8000edc:	431a      	orrs	r2, r3
 8000ede:	4693      	mov	fp, r2
 8000ee0:	465b      	mov	r3, fp
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	4193      	sbcs	r3, r2
 8000ee6:	431d      	orrs	r5, r3
 8000ee8:	e619      	b.n	8000b1e <__aeabi_dsub+0xba>
 8000eea:	4653      	mov	r3, sl
 8000eec:	1e5a      	subs	r2, r3, #1
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dsub+0x490>
 8000ef2:	e0c6      	b.n	8001082 <__aeabi_dsub+0x61e>
 8000ef4:	4e9d      	ldr	r6, [pc, #628]	@ (800116c <__aeabi_dsub+0x708>)
 8000ef6:	45b2      	cmp	sl, r6
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dsub+0x498>
 8000efa:	e6bd      	b.n	8000c78 <__aeabi_dsub+0x214>
 8000efc:	4688      	mov	r8, r1
 8000efe:	000e      	movs	r6, r1
 8000f00:	2501      	movs	r5, #1
 8000f02:	2a38      	cmp	r2, #56	@ 0x38
 8000f04:	dc10      	bgt.n	8000f28 <__aeabi_dsub+0x4c4>
 8000f06:	2a1f      	cmp	r2, #31
 8000f08:	dc7f      	bgt.n	800100a <__aeabi_dsub+0x5a6>
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	0025      	movs	r5, r4
 8000f0e:	1a89      	subs	r1, r1, r2
 8000f10:	0007      	movs	r7, r0
 8000f12:	4088      	lsls	r0, r1
 8000f14:	408d      	lsls	r5, r1
 8000f16:	40d7      	lsrs	r7, r2
 8000f18:	40d4      	lsrs	r4, r2
 8000f1a:	1e41      	subs	r1, r0, #1
 8000f1c:	4188      	sbcs	r0, r1
 8000f1e:	9b02      	ldr	r3, [sp, #8]
 8000f20:	433d      	orrs	r5, r7
 8000f22:	1b1b      	subs	r3, r3, r4
 8000f24:	4305      	orrs	r5, r0
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	4662      	mov	r2, ip
 8000f2a:	1b55      	subs	r5, r2, r5
 8000f2c:	45ac      	cmp	ip, r5
 8000f2e:	4192      	sbcs	r2, r2
 8000f30:	9b02      	ldr	r3, [sp, #8]
 8000f32:	4252      	negs	r2, r2
 8000f34:	464f      	mov	r7, r9
 8000f36:	1a9c      	subs	r4, r3, r2
 8000f38:	e5f6      	b.n	8000b28 <__aeabi_dsub+0xc4>
 8000f3a:	2d00      	cmp	r5, #0
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_dsub+0x4dc>
 8000f3e:	e0b7      	b.n	80010b0 <__aeabi_dsub+0x64c>
 8000f40:	2a00      	cmp	r2, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dsub+0x4e2>
 8000f44:	e0f0      	b.n	8001128 <__aeabi_dsub+0x6c4>
 8000f46:	2601      	movs	r6, #1
 8000f48:	400e      	ands	r6, r1
 8000f4a:	4663      	mov	r3, ip
 8000f4c:	9802      	ldr	r0, [sp, #8]
 8000f4e:	08d9      	lsrs	r1, r3, #3
 8000f50:	0742      	lsls	r2, r0, #29
 8000f52:	430a      	orrs	r2, r1
 8000f54:	08c4      	lsrs	r4, r0, #3
 8000f56:	e696      	b.n	8000c86 <__aeabi_dsub+0x222>
 8000f58:	4c85      	ldr	r4, [pc, #532]	@ (8001170 <__aeabi_dsub+0x70c>)
 8000f5a:	1aff      	subs	r7, r7, r3
 8000f5c:	4014      	ands	r4, r2
 8000f5e:	0762      	lsls	r2, r4, #29
 8000f60:	08e4      	lsrs	r4, r4, #3
 8000f62:	e760      	b.n	8000e26 <__aeabi_dsub+0x3c2>
 8000f64:	4981      	ldr	r1, [pc, #516]	@ (800116c <__aeabi_dsub+0x708>)
 8000f66:	428a      	cmp	r2, r1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_dsub+0x508>
 8000f6a:	e0c9      	b.n	8001100 <__aeabi_dsub+0x69c>
 8000f6c:	4663      	mov	r3, ip
 8000f6e:	18c1      	adds	r1, r0, r3
 8000f70:	4281      	cmp	r1, r0
 8000f72:	4180      	sbcs	r0, r0
 8000f74:	9b02      	ldr	r3, [sp, #8]
 8000f76:	4240      	negs	r0, r0
 8000f78:	18e3      	adds	r3, r4, r3
 8000f7a:	181b      	adds	r3, r3, r0
 8000f7c:	07dd      	lsls	r5, r3, #31
 8000f7e:	085c      	lsrs	r4, r3, #1
 8000f80:	2307      	movs	r3, #7
 8000f82:	0849      	lsrs	r1, r1, #1
 8000f84:	430d      	orrs	r5, r1
 8000f86:	0017      	movs	r7, r2
 8000f88:	402b      	ands	r3, r5
 8000f8a:	e710      	b.n	8000dae <__aeabi_dsub+0x34a>
 8000f8c:	4663      	mov	r3, ip
 8000f8e:	1a1d      	subs	r5, r3, r0
 8000f90:	45ac      	cmp	ip, r5
 8000f92:	4192      	sbcs	r2, r2
 8000f94:	2601      	movs	r6, #1
 8000f96:	9b02      	ldr	r3, [sp, #8]
 8000f98:	4252      	negs	r2, r2
 8000f9a:	1b1c      	subs	r4, r3, r4
 8000f9c:	4688      	mov	r8, r1
 8000f9e:	1aa4      	subs	r4, r4, r2
 8000fa0:	400e      	ands	r6, r1
 8000fa2:	e5c6      	b.n	8000b32 <__aeabi_dsub+0xce>
 8000fa4:	4663      	mov	r3, ip
 8000fa6:	18c5      	adds	r5, r0, r3
 8000fa8:	9b02      	ldr	r3, [sp, #8]
 8000faa:	4285      	cmp	r5, r0
 8000fac:	4180      	sbcs	r0, r0
 8000fae:	469c      	mov	ip, r3
 8000fb0:	4240      	negs	r0, r0
 8000fb2:	4464      	add	r4, ip
 8000fb4:	1824      	adds	r4, r4, r0
 8000fb6:	2701      	movs	r7, #1
 8000fb8:	0223      	lsls	r3, r4, #8
 8000fba:	d400      	bmi.n	8000fbe <__aeabi_dsub+0x55a>
 8000fbc:	e6f5      	b.n	8000daa <__aeabi_dsub+0x346>
 8000fbe:	2702      	movs	r7, #2
 8000fc0:	e641      	b.n	8000c46 <__aeabi_dsub+0x1e2>
 8000fc2:	4663      	mov	r3, ip
 8000fc4:	1ac5      	subs	r5, r0, r3
 8000fc6:	42a8      	cmp	r0, r5
 8000fc8:	4180      	sbcs	r0, r0
 8000fca:	9b02      	ldr	r3, [sp, #8]
 8000fcc:	4240      	negs	r0, r0
 8000fce:	1ae4      	subs	r4, r4, r3
 8000fd0:	2701      	movs	r7, #1
 8000fd2:	1a24      	subs	r4, r4, r0
 8000fd4:	e5a8      	b.n	8000b28 <__aeabi_dsub+0xc4>
 8000fd6:	9d02      	ldr	r5, [sp, #8]
 8000fd8:	4652      	mov	r2, sl
 8000fda:	002b      	movs	r3, r5
 8000fdc:	3a20      	subs	r2, #32
 8000fde:	40d3      	lsrs	r3, r2
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	4653      	mov	r3, sl
 8000fe4:	2b20      	cmp	r3, #32
 8000fe6:	d006      	beq.n	8000ff6 <__aeabi_dsub+0x592>
 8000fe8:	2240      	movs	r2, #64	@ 0x40
 8000fea:	1ad2      	subs	r2, r2, r3
 8000fec:	002b      	movs	r3, r5
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	4662      	mov	r2, ip
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	4693      	mov	fp, r2
 8000ff6:	465d      	mov	r5, fp
 8000ff8:	1e6b      	subs	r3, r5, #1
 8000ffa:	419d      	sbcs	r5, r3
 8000ffc:	430d      	orrs	r5, r1
 8000ffe:	e615      	b.n	8000c2c <__aeabi_dsub+0x1c8>
 8001000:	0762      	lsls	r2, r4, #29
 8001002:	08c0      	lsrs	r0, r0, #3
 8001004:	4302      	orrs	r2, r0
 8001006:	08e4      	lsrs	r4, r4, #3
 8001008:	e70d      	b.n	8000e26 <__aeabi_dsub+0x3c2>
 800100a:	0011      	movs	r1, r2
 800100c:	0027      	movs	r7, r4
 800100e:	3920      	subs	r1, #32
 8001010:	40cf      	lsrs	r7, r1
 8001012:	2a20      	cmp	r2, #32
 8001014:	d005      	beq.n	8001022 <__aeabi_dsub+0x5be>
 8001016:	2140      	movs	r1, #64	@ 0x40
 8001018:	1a8a      	subs	r2, r1, r2
 800101a:	4094      	lsls	r4, r2
 800101c:	0025      	movs	r5, r4
 800101e:	4305      	orrs	r5, r0
 8001020:	9503      	str	r5, [sp, #12]
 8001022:	9d03      	ldr	r5, [sp, #12]
 8001024:	1e6a      	subs	r2, r5, #1
 8001026:	4195      	sbcs	r5, r2
 8001028:	433d      	orrs	r5, r7
 800102a:	e77d      	b.n	8000f28 <__aeabi_dsub+0x4c4>
 800102c:	2a00      	cmp	r2, #0
 800102e:	d100      	bne.n	8001032 <__aeabi_dsub+0x5ce>
 8001030:	e744      	b.n	8000ebc <__aeabi_dsub+0x458>
 8001032:	2601      	movs	r6, #1
 8001034:	400e      	ands	r6, r1
 8001036:	4663      	mov	r3, ip
 8001038:	08d9      	lsrs	r1, r3, #3
 800103a:	9b02      	ldr	r3, [sp, #8]
 800103c:	075a      	lsls	r2, r3, #29
 800103e:	430a      	orrs	r2, r1
 8001040:	08dc      	lsrs	r4, r3, #3
 8001042:	e6f0      	b.n	8000e26 <__aeabi_dsub+0x3c2>
 8001044:	2a00      	cmp	r2, #0
 8001046:	d028      	beq.n	800109a <__aeabi_dsub+0x636>
 8001048:	4662      	mov	r2, ip
 800104a:	9f02      	ldr	r7, [sp, #8]
 800104c:	08c0      	lsrs	r0, r0, #3
 800104e:	433a      	orrs	r2, r7
 8001050:	d100      	bne.n	8001054 <__aeabi_dsub+0x5f0>
 8001052:	e6dc      	b.n	8000e0e <__aeabi_dsub+0x3aa>
 8001054:	0762      	lsls	r2, r4, #29
 8001056:	4310      	orrs	r0, r2
 8001058:	2280      	movs	r2, #128	@ 0x80
 800105a:	08e4      	lsrs	r4, r4, #3
 800105c:	0312      	lsls	r2, r2, #12
 800105e:	4214      	tst	r4, r2
 8001060:	d009      	beq.n	8001076 <__aeabi_dsub+0x612>
 8001062:	08fd      	lsrs	r5, r7, #3
 8001064:	4215      	tst	r5, r2
 8001066:	d106      	bne.n	8001076 <__aeabi_dsub+0x612>
 8001068:	4663      	mov	r3, ip
 800106a:	2601      	movs	r6, #1
 800106c:	002c      	movs	r4, r5
 800106e:	08d8      	lsrs	r0, r3, #3
 8001070:	077b      	lsls	r3, r7, #29
 8001072:	4318      	orrs	r0, r3
 8001074:	400e      	ands	r6, r1
 8001076:	0f42      	lsrs	r2, r0, #29
 8001078:	00c0      	lsls	r0, r0, #3
 800107a:	08c0      	lsrs	r0, r0, #3
 800107c:	0752      	lsls	r2, r2, #29
 800107e:	4302      	orrs	r2, r0
 8001080:	e601      	b.n	8000c86 <__aeabi_dsub+0x222>
 8001082:	4663      	mov	r3, ip
 8001084:	1a1d      	subs	r5, r3, r0
 8001086:	45ac      	cmp	ip, r5
 8001088:	4192      	sbcs	r2, r2
 800108a:	9b02      	ldr	r3, [sp, #8]
 800108c:	4252      	negs	r2, r2
 800108e:	1b1c      	subs	r4, r3, r4
 8001090:	000e      	movs	r6, r1
 8001092:	4688      	mov	r8, r1
 8001094:	2701      	movs	r7, #1
 8001096:	1aa4      	subs	r4, r4, r2
 8001098:	e546      	b.n	8000b28 <__aeabi_dsub+0xc4>
 800109a:	4663      	mov	r3, ip
 800109c:	08d9      	lsrs	r1, r3, #3
 800109e:	9b02      	ldr	r3, [sp, #8]
 80010a0:	075a      	lsls	r2, r3, #29
 80010a2:	430a      	orrs	r2, r1
 80010a4:	08dc      	lsrs	r4, r3, #3
 80010a6:	e5ee      	b.n	8000c86 <__aeabi_dsub+0x222>
 80010a8:	4663      	mov	r3, ip
 80010aa:	9c02      	ldr	r4, [sp, #8]
 80010ac:	9303      	str	r3, [sp, #12]
 80010ae:	e6c7      	b.n	8000e40 <__aeabi_dsub+0x3dc>
 80010b0:	08c0      	lsrs	r0, r0, #3
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dsub+0x654>
 80010b6:	e6aa      	b.n	8000e0e <__aeabi_dsub+0x3aa>
 80010b8:	0762      	lsls	r2, r4, #29
 80010ba:	4310      	orrs	r0, r2
 80010bc:	2280      	movs	r2, #128	@ 0x80
 80010be:	08e4      	lsrs	r4, r4, #3
 80010c0:	0312      	lsls	r2, r2, #12
 80010c2:	4214      	tst	r4, r2
 80010c4:	d0d7      	beq.n	8001076 <__aeabi_dsub+0x612>
 80010c6:	9f02      	ldr	r7, [sp, #8]
 80010c8:	08fd      	lsrs	r5, r7, #3
 80010ca:	4215      	tst	r5, r2
 80010cc:	d1d3      	bne.n	8001076 <__aeabi_dsub+0x612>
 80010ce:	4663      	mov	r3, ip
 80010d0:	2601      	movs	r6, #1
 80010d2:	08d8      	lsrs	r0, r3, #3
 80010d4:	077b      	lsls	r3, r7, #29
 80010d6:	002c      	movs	r4, r5
 80010d8:	4318      	orrs	r0, r3
 80010da:	400e      	ands	r6, r1
 80010dc:	e7cb      	b.n	8001076 <__aeabi_dsub+0x612>
 80010de:	000a      	movs	r2, r1
 80010e0:	0027      	movs	r7, r4
 80010e2:	3a20      	subs	r2, #32
 80010e4:	40d7      	lsrs	r7, r2
 80010e6:	2920      	cmp	r1, #32
 80010e8:	d005      	beq.n	80010f6 <__aeabi_dsub+0x692>
 80010ea:	2240      	movs	r2, #64	@ 0x40
 80010ec:	1a52      	subs	r2, r2, r1
 80010ee:	4094      	lsls	r4, r2
 80010f0:	0025      	movs	r5, r4
 80010f2:	4305      	orrs	r5, r0
 80010f4:	9503      	str	r5, [sp, #12]
 80010f6:	9d03      	ldr	r5, [sp, #12]
 80010f8:	1e6a      	subs	r2, r5, #1
 80010fa:	4195      	sbcs	r5, r2
 80010fc:	432f      	orrs	r7, r5
 80010fe:	e610      	b.n	8000d22 <__aeabi_dsub+0x2be>
 8001100:	0014      	movs	r4, r2
 8001102:	2500      	movs	r5, #0
 8001104:	2200      	movs	r2, #0
 8001106:	e556      	b.n	8000bb6 <__aeabi_dsub+0x152>
 8001108:	9b02      	ldr	r3, [sp, #8]
 800110a:	4460      	add	r0, ip
 800110c:	4699      	mov	r9, r3
 800110e:	4560      	cmp	r0, ip
 8001110:	4192      	sbcs	r2, r2
 8001112:	444c      	add	r4, r9
 8001114:	4252      	negs	r2, r2
 8001116:	0005      	movs	r5, r0
 8001118:	18a4      	adds	r4, r4, r2
 800111a:	e74c      	b.n	8000fb6 <__aeabi_dsub+0x552>
 800111c:	001a      	movs	r2, r3
 800111e:	001c      	movs	r4, r3
 8001120:	432a      	orrs	r2, r5
 8001122:	d000      	beq.n	8001126 <__aeabi_dsub+0x6c2>
 8001124:	e6b3      	b.n	8000e8e <__aeabi_dsub+0x42a>
 8001126:	e6c9      	b.n	8000ebc <__aeabi_dsub+0x458>
 8001128:	2480      	movs	r4, #128	@ 0x80
 800112a:	2600      	movs	r6, #0
 800112c:	0324      	lsls	r4, r4, #12
 800112e:	e5ae      	b.n	8000c8e <__aeabi_dsub+0x22a>
 8001130:	2120      	movs	r1, #32
 8001132:	2500      	movs	r5, #0
 8001134:	1a09      	subs	r1, r1, r0
 8001136:	e517      	b.n	8000b68 <__aeabi_dsub+0x104>
 8001138:	2200      	movs	r2, #0
 800113a:	2500      	movs	r5, #0
 800113c:	4c0b      	ldr	r4, [pc, #44]	@ (800116c <__aeabi_dsub+0x708>)
 800113e:	e53a      	b.n	8000bb6 <__aeabi_dsub+0x152>
 8001140:	2d00      	cmp	r5, #0
 8001142:	d100      	bne.n	8001146 <__aeabi_dsub+0x6e2>
 8001144:	e5f6      	b.n	8000d34 <__aeabi_dsub+0x2d0>
 8001146:	464b      	mov	r3, r9
 8001148:	1bda      	subs	r2, r3, r7
 800114a:	4692      	mov	sl, r2
 800114c:	2f00      	cmp	r7, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_dsub+0x6ee>
 8001150:	e66f      	b.n	8000e32 <__aeabi_dsub+0x3ce>
 8001152:	2a38      	cmp	r2, #56	@ 0x38
 8001154:	dc05      	bgt.n	8001162 <__aeabi_dsub+0x6fe>
 8001156:	2680      	movs	r6, #128	@ 0x80
 8001158:	0436      	lsls	r6, r6, #16
 800115a:	4334      	orrs	r4, r6
 800115c:	4688      	mov	r8, r1
 800115e:	000e      	movs	r6, r1
 8001160:	e6d1      	b.n	8000f06 <__aeabi_dsub+0x4a2>
 8001162:	4688      	mov	r8, r1
 8001164:	000e      	movs	r6, r1
 8001166:	2501      	movs	r5, #1
 8001168:	e6de      	b.n	8000f28 <__aeabi_dsub+0x4c4>
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	000007ff 	.word	0x000007ff
 8001170:	ff7fffff 	.word	0xff7fffff
 8001174:	000007fe 	.word	0x000007fe
 8001178:	2d00      	cmp	r5, #0
 800117a:	d100      	bne.n	800117e <__aeabi_dsub+0x71a>
 800117c:	e668      	b.n	8000e50 <__aeabi_dsub+0x3ec>
 800117e:	464b      	mov	r3, r9
 8001180:	1bd9      	subs	r1, r3, r7
 8001182:	2f00      	cmp	r7, #0
 8001184:	d101      	bne.n	800118a <__aeabi_dsub+0x726>
 8001186:	468a      	mov	sl, r1
 8001188:	e5a7      	b.n	8000cda <__aeabi_dsub+0x276>
 800118a:	2701      	movs	r7, #1
 800118c:	2938      	cmp	r1, #56	@ 0x38
 800118e:	dd00      	ble.n	8001192 <__aeabi_dsub+0x72e>
 8001190:	e5c7      	b.n	8000d22 <__aeabi_dsub+0x2be>
 8001192:	2280      	movs	r2, #128	@ 0x80
 8001194:	0412      	lsls	r2, r2, #16
 8001196:	4314      	orrs	r4, r2
 8001198:	e5af      	b.n	8000cfa <__aeabi_dsub+0x296>
 800119a:	46c0      	nop			@ (mov r8, r8)

0800119c <__aeabi_d2iz>:
 800119c:	000b      	movs	r3, r1
 800119e:	0002      	movs	r2, r0
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	4d16      	ldr	r5, [pc, #88]	@ (80011fc <__aeabi_d2iz+0x60>)
 80011a4:	030c      	lsls	r4, r1, #12
 80011a6:	b082      	sub	sp, #8
 80011a8:	0049      	lsls	r1, r1, #1
 80011aa:	2000      	movs	r0, #0
 80011ac:	9200      	str	r2, [sp, #0]
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	0b24      	lsrs	r4, r4, #12
 80011b2:	0d49      	lsrs	r1, r1, #21
 80011b4:	0fde      	lsrs	r6, r3, #31
 80011b6:	42a9      	cmp	r1, r5
 80011b8:	dd04      	ble.n	80011c4 <__aeabi_d2iz+0x28>
 80011ba:	4811      	ldr	r0, [pc, #68]	@ (8001200 <__aeabi_d2iz+0x64>)
 80011bc:	4281      	cmp	r1, r0
 80011be:	dd03      	ble.n	80011c8 <__aeabi_d2iz+0x2c>
 80011c0:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <__aeabi_d2iz+0x68>)
 80011c2:	18f0      	adds	r0, r6, r3
 80011c4:	b002      	add	sp, #8
 80011c6:	bd70      	pop	{r4, r5, r6, pc}
 80011c8:	2080      	movs	r0, #128	@ 0x80
 80011ca:	0340      	lsls	r0, r0, #13
 80011cc:	4320      	orrs	r0, r4
 80011ce:	4c0e      	ldr	r4, [pc, #56]	@ (8001208 <__aeabi_d2iz+0x6c>)
 80011d0:	1a64      	subs	r4, r4, r1
 80011d2:	2c1f      	cmp	r4, #31
 80011d4:	dd08      	ble.n	80011e8 <__aeabi_d2iz+0x4c>
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <__aeabi_d2iz+0x70>)
 80011d8:	1a5b      	subs	r3, r3, r1
 80011da:	40d8      	lsrs	r0, r3
 80011dc:	0003      	movs	r3, r0
 80011de:	4258      	negs	r0, r3
 80011e0:	2e00      	cmp	r6, #0
 80011e2:	d1ef      	bne.n	80011c4 <__aeabi_d2iz+0x28>
 80011e4:	0018      	movs	r0, r3
 80011e6:	e7ed      	b.n	80011c4 <__aeabi_d2iz+0x28>
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <__aeabi_d2iz+0x74>)
 80011ea:	9a00      	ldr	r2, [sp, #0]
 80011ec:	469c      	mov	ip, r3
 80011ee:	0003      	movs	r3, r0
 80011f0:	4461      	add	r1, ip
 80011f2:	408b      	lsls	r3, r1
 80011f4:	40e2      	lsrs	r2, r4
 80011f6:	4313      	orrs	r3, r2
 80011f8:	e7f1      	b.n	80011de <__aeabi_d2iz+0x42>
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	000003fe 	.word	0x000003fe
 8001200:	0000041d 	.word	0x0000041d
 8001204:	7fffffff 	.word	0x7fffffff
 8001208:	00000433 	.word	0x00000433
 800120c:	00000413 	.word	0x00000413
 8001210:	fffffbed 	.word	0xfffffbed

08001214 <__aeabi_ui2d>:
 8001214:	b510      	push	{r4, lr}
 8001216:	1e04      	subs	r4, r0, #0
 8001218:	d010      	beq.n	800123c <__aeabi_ui2d+0x28>
 800121a:	f000 f85d 	bl	80012d8 <__clzsi2>
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <__aeabi_ui2d+0x44>)
 8001220:	1a1b      	subs	r3, r3, r0
 8001222:	055b      	lsls	r3, r3, #21
 8001224:	0d5b      	lsrs	r3, r3, #21
 8001226:	280a      	cmp	r0, #10
 8001228:	dc0f      	bgt.n	800124a <__aeabi_ui2d+0x36>
 800122a:	220b      	movs	r2, #11
 800122c:	0021      	movs	r1, r4
 800122e:	1a12      	subs	r2, r2, r0
 8001230:	40d1      	lsrs	r1, r2
 8001232:	3015      	adds	r0, #21
 8001234:	030a      	lsls	r2, r1, #12
 8001236:	4084      	lsls	r4, r0
 8001238:	0b12      	lsrs	r2, r2, #12
 800123a:	e001      	b.n	8001240 <__aeabi_ui2d+0x2c>
 800123c:	2300      	movs	r3, #0
 800123e:	2200      	movs	r2, #0
 8001240:	051b      	lsls	r3, r3, #20
 8001242:	4313      	orrs	r3, r2
 8001244:	0020      	movs	r0, r4
 8001246:	0019      	movs	r1, r3
 8001248:	bd10      	pop	{r4, pc}
 800124a:	0022      	movs	r2, r4
 800124c:	380b      	subs	r0, #11
 800124e:	4082      	lsls	r2, r0
 8001250:	0312      	lsls	r2, r2, #12
 8001252:	2400      	movs	r4, #0
 8001254:	0b12      	lsrs	r2, r2, #12
 8001256:	e7f3      	b.n	8001240 <__aeabi_ui2d+0x2c>
 8001258:	0000041e 	.word	0x0000041e

0800125c <__aeabi_cdrcmple>:
 800125c:	4684      	mov	ip, r0
 800125e:	0010      	movs	r0, r2
 8001260:	4662      	mov	r2, ip
 8001262:	468c      	mov	ip, r1
 8001264:	0019      	movs	r1, r3
 8001266:	4663      	mov	r3, ip
 8001268:	e000      	b.n	800126c <__aeabi_cdcmpeq>
 800126a:	46c0      	nop			@ (mov r8, r8)

0800126c <__aeabi_cdcmpeq>:
 800126c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800126e:	f000 f915 	bl	800149c <__ledf2>
 8001272:	2800      	cmp	r0, #0
 8001274:	d401      	bmi.n	800127a <__aeabi_cdcmpeq+0xe>
 8001276:	2100      	movs	r1, #0
 8001278:	42c8      	cmn	r0, r1
 800127a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800127c <__aeabi_dcmpeq>:
 800127c:	b510      	push	{r4, lr}
 800127e:	f000 f855 	bl	800132c <__eqdf2>
 8001282:	4240      	negs	r0, r0
 8001284:	3001      	adds	r0, #1
 8001286:	bd10      	pop	{r4, pc}

08001288 <__aeabi_dcmplt>:
 8001288:	b510      	push	{r4, lr}
 800128a:	f000 f907 	bl	800149c <__ledf2>
 800128e:	2800      	cmp	r0, #0
 8001290:	db01      	blt.n	8001296 <__aeabi_dcmplt+0xe>
 8001292:	2000      	movs	r0, #0
 8001294:	bd10      	pop	{r4, pc}
 8001296:	2001      	movs	r0, #1
 8001298:	bd10      	pop	{r4, pc}
 800129a:	46c0      	nop			@ (mov r8, r8)

0800129c <__aeabi_dcmple>:
 800129c:	b510      	push	{r4, lr}
 800129e:	f000 f8fd 	bl	800149c <__ledf2>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	dd01      	ble.n	80012aa <__aeabi_dcmple+0xe>
 80012a6:	2000      	movs	r0, #0
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	2001      	movs	r0, #1
 80012ac:	bd10      	pop	{r4, pc}
 80012ae:	46c0      	nop			@ (mov r8, r8)

080012b0 <__aeabi_dcmpgt>:
 80012b0:	b510      	push	{r4, lr}
 80012b2:	f000 f87f 	bl	80013b4 <__gedf2>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	dc01      	bgt.n	80012be <__aeabi_dcmpgt+0xe>
 80012ba:	2000      	movs	r0, #0
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	2001      	movs	r0, #1
 80012c0:	bd10      	pop	{r4, pc}
 80012c2:	46c0      	nop			@ (mov r8, r8)

080012c4 <__aeabi_dcmpge>:
 80012c4:	b510      	push	{r4, lr}
 80012c6:	f000 f875 	bl	80013b4 <__gedf2>
 80012ca:	2800      	cmp	r0, #0
 80012cc:	da01      	bge.n	80012d2 <__aeabi_dcmpge+0xe>
 80012ce:	2000      	movs	r0, #0
 80012d0:	bd10      	pop	{r4, pc}
 80012d2:	2001      	movs	r0, #1
 80012d4:	bd10      	pop	{r4, pc}
 80012d6:	46c0      	nop			@ (mov r8, r8)

080012d8 <__clzsi2>:
 80012d8:	211c      	movs	r1, #28
 80012da:	2301      	movs	r3, #1
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	4298      	cmp	r0, r3
 80012e0:	d301      	bcc.n	80012e6 <__clzsi2+0xe>
 80012e2:	0c00      	lsrs	r0, r0, #16
 80012e4:	3910      	subs	r1, #16
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	4298      	cmp	r0, r3
 80012ea:	d301      	bcc.n	80012f0 <__clzsi2+0x18>
 80012ec:	0a00      	lsrs	r0, r0, #8
 80012ee:	3908      	subs	r1, #8
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	4298      	cmp	r0, r3
 80012f4:	d301      	bcc.n	80012fa <__clzsi2+0x22>
 80012f6:	0900      	lsrs	r0, r0, #4
 80012f8:	3904      	subs	r1, #4
 80012fa:	a202      	add	r2, pc, #8	@ (adr r2, 8001304 <__clzsi2+0x2c>)
 80012fc:	5c10      	ldrb	r0, [r2, r0]
 80012fe:	1840      	adds	r0, r0, r1
 8001300:	4770      	bx	lr
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	02020304 	.word	0x02020304
 8001308:	01010101 	.word	0x01010101
	...

08001314 <__clzdi2>:
 8001314:	b510      	push	{r4, lr}
 8001316:	2900      	cmp	r1, #0
 8001318:	d103      	bne.n	8001322 <__clzdi2+0xe>
 800131a:	f7ff ffdd 	bl	80012d8 <__clzsi2>
 800131e:	3020      	adds	r0, #32
 8001320:	e002      	b.n	8001328 <__clzdi2+0x14>
 8001322:	0008      	movs	r0, r1
 8001324:	f7ff ffd8 	bl	80012d8 <__clzsi2>
 8001328:	bd10      	pop	{r4, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)

0800132c <__eqdf2>:
 800132c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132e:	4657      	mov	r7, sl
 8001330:	46de      	mov	lr, fp
 8001332:	464e      	mov	r6, r9
 8001334:	4645      	mov	r5, r8
 8001336:	b5e0      	push	{r5, r6, r7, lr}
 8001338:	000d      	movs	r5, r1
 800133a:	0004      	movs	r4, r0
 800133c:	0fe8      	lsrs	r0, r5, #31
 800133e:	4683      	mov	fp, r0
 8001340:	0309      	lsls	r1, r1, #12
 8001342:	0fd8      	lsrs	r0, r3, #31
 8001344:	0b09      	lsrs	r1, r1, #12
 8001346:	4682      	mov	sl, r0
 8001348:	4819      	ldr	r0, [pc, #100]	@ (80013b0 <__eqdf2+0x84>)
 800134a:	468c      	mov	ip, r1
 800134c:	031f      	lsls	r7, r3, #12
 800134e:	0069      	lsls	r1, r5, #1
 8001350:	005e      	lsls	r6, r3, #1
 8001352:	0d49      	lsrs	r1, r1, #21
 8001354:	0b3f      	lsrs	r7, r7, #12
 8001356:	0d76      	lsrs	r6, r6, #21
 8001358:	4281      	cmp	r1, r0
 800135a:	d018      	beq.n	800138e <__eqdf2+0x62>
 800135c:	4286      	cmp	r6, r0
 800135e:	d00f      	beq.n	8001380 <__eqdf2+0x54>
 8001360:	2001      	movs	r0, #1
 8001362:	42b1      	cmp	r1, r6
 8001364:	d10d      	bne.n	8001382 <__eqdf2+0x56>
 8001366:	45bc      	cmp	ip, r7
 8001368:	d10b      	bne.n	8001382 <__eqdf2+0x56>
 800136a:	4294      	cmp	r4, r2
 800136c:	d109      	bne.n	8001382 <__eqdf2+0x56>
 800136e:	45d3      	cmp	fp, sl
 8001370:	d01c      	beq.n	80013ac <__eqdf2+0x80>
 8001372:	2900      	cmp	r1, #0
 8001374:	d105      	bne.n	8001382 <__eqdf2+0x56>
 8001376:	4660      	mov	r0, ip
 8001378:	4320      	orrs	r0, r4
 800137a:	1e43      	subs	r3, r0, #1
 800137c:	4198      	sbcs	r0, r3
 800137e:	e000      	b.n	8001382 <__eqdf2+0x56>
 8001380:	2001      	movs	r0, #1
 8001382:	bcf0      	pop	{r4, r5, r6, r7}
 8001384:	46bb      	mov	fp, r7
 8001386:	46b2      	mov	sl, r6
 8001388:	46a9      	mov	r9, r5
 800138a:	46a0      	mov	r8, r4
 800138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138e:	2001      	movs	r0, #1
 8001390:	428e      	cmp	r6, r1
 8001392:	d1f6      	bne.n	8001382 <__eqdf2+0x56>
 8001394:	4661      	mov	r1, ip
 8001396:	4339      	orrs	r1, r7
 8001398:	000f      	movs	r7, r1
 800139a:	4317      	orrs	r7, r2
 800139c:	4327      	orrs	r7, r4
 800139e:	d1f0      	bne.n	8001382 <__eqdf2+0x56>
 80013a0:	465b      	mov	r3, fp
 80013a2:	4652      	mov	r2, sl
 80013a4:	1a98      	subs	r0, r3, r2
 80013a6:	1e43      	subs	r3, r0, #1
 80013a8:	4198      	sbcs	r0, r3
 80013aa:	e7ea      	b.n	8001382 <__eqdf2+0x56>
 80013ac:	2000      	movs	r0, #0
 80013ae:	e7e8      	b.n	8001382 <__eqdf2+0x56>
 80013b0:	000007ff 	.word	0x000007ff

080013b4 <__gedf2>:
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	4657      	mov	r7, sl
 80013b8:	464e      	mov	r6, r9
 80013ba:	4645      	mov	r5, r8
 80013bc:	46de      	mov	lr, fp
 80013be:	b5e0      	push	{r5, r6, r7, lr}
 80013c0:	000d      	movs	r5, r1
 80013c2:	030f      	lsls	r7, r1, #12
 80013c4:	0b39      	lsrs	r1, r7, #12
 80013c6:	b083      	sub	sp, #12
 80013c8:	0004      	movs	r4, r0
 80013ca:	4680      	mov	r8, r0
 80013cc:	9101      	str	r1, [sp, #4]
 80013ce:	0058      	lsls	r0, r3, #1
 80013d0:	0fe9      	lsrs	r1, r5, #31
 80013d2:	4f31      	ldr	r7, [pc, #196]	@ (8001498 <__gedf2+0xe4>)
 80013d4:	0d40      	lsrs	r0, r0, #21
 80013d6:	468c      	mov	ip, r1
 80013d8:	006e      	lsls	r6, r5, #1
 80013da:	0319      	lsls	r1, r3, #12
 80013dc:	4682      	mov	sl, r0
 80013de:	4691      	mov	r9, r2
 80013e0:	0d76      	lsrs	r6, r6, #21
 80013e2:	0b09      	lsrs	r1, r1, #12
 80013e4:	0fd8      	lsrs	r0, r3, #31
 80013e6:	42be      	cmp	r6, r7
 80013e8:	d01f      	beq.n	800142a <__gedf2+0x76>
 80013ea:	45ba      	cmp	sl, r7
 80013ec:	d00f      	beq.n	800140e <__gedf2+0x5a>
 80013ee:	2e00      	cmp	r6, #0
 80013f0:	d12f      	bne.n	8001452 <__gedf2+0x9e>
 80013f2:	4655      	mov	r5, sl
 80013f4:	9e01      	ldr	r6, [sp, #4]
 80013f6:	4334      	orrs	r4, r6
 80013f8:	2d00      	cmp	r5, #0
 80013fa:	d127      	bne.n	800144c <__gedf2+0x98>
 80013fc:	430a      	orrs	r2, r1
 80013fe:	d03a      	beq.n	8001476 <__gedf2+0xc2>
 8001400:	2c00      	cmp	r4, #0
 8001402:	d145      	bne.n	8001490 <__gedf2+0xdc>
 8001404:	2800      	cmp	r0, #0
 8001406:	d11a      	bne.n	800143e <__gedf2+0x8a>
 8001408:	2001      	movs	r0, #1
 800140a:	4240      	negs	r0, r0
 800140c:	e017      	b.n	800143e <__gedf2+0x8a>
 800140e:	4311      	orrs	r1, r2
 8001410:	d13b      	bne.n	800148a <__gedf2+0xd6>
 8001412:	2e00      	cmp	r6, #0
 8001414:	d102      	bne.n	800141c <__gedf2+0x68>
 8001416:	9f01      	ldr	r7, [sp, #4]
 8001418:	4327      	orrs	r7, r4
 800141a:	d0f3      	beq.n	8001404 <__gedf2+0x50>
 800141c:	4584      	cmp	ip, r0
 800141e:	d109      	bne.n	8001434 <__gedf2+0x80>
 8001420:	4663      	mov	r3, ip
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <__gedf2+0x54>
 8001426:	4660      	mov	r0, ip
 8001428:	e009      	b.n	800143e <__gedf2+0x8a>
 800142a:	9f01      	ldr	r7, [sp, #4]
 800142c:	4327      	orrs	r7, r4
 800142e:	d12c      	bne.n	800148a <__gedf2+0xd6>
 8001430:	45b2      	cmp	sl, r6
 8001432:	d024      	beq.n	800147e <__gedf2+0xca>
 8001434:	4663      	mov	r3, ip
 8001436:	2002      	movs	r0, #2
 8001438:	3b01      	subs	r3, #1
 800143a:	4018      	ands	r0, r3
 800143c:	3801      	subs	r0, #1
 800143e:	b003      	add	sp, #12
 8001440:	bcf0      	pop	{r4, r5, r6, r7}
 8001442:	46bb      	mov	fp, r7
 8001444:	46b2      	mov	sl, r6
 8001446:	46a9      	mov	r9, r5
 8001448:	46a0      	mov	r8, r4
 800144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144c:	2c00      	cmp	r4, #0
 800144e:	d0d9      	beq.n	8001404 <__gedf2+0x50>
 8001450:	e7e4      	b.n	800141c <__gedf2+0x68>
 8001452:	4654      	mov	r4, sl
 8001454:	2c00      	cmp	r4, #0
 8001456:	d0ed      	beq.n	8001434 <__gedf2+0x80>
 8001458:	4584      	cmp	ip, r0
 800145a:	d1eb      	bne.n	8001434 <__gedf2+0x80>
 800145c:	4556      	cmp	r6, sl
 800145e:	dce9      	bgt.n	8001434 <__gedf2+0x80>
 8001460:	dbde      	blt.n	8001420 <__gedf2+0x6c>
 8001462:	9b01      	ldr	r3, [sp, #4]
 8001464:	428b      	cmp	r3, r1
 8001466:	d8e5      	bhi.n	8001434 <__gedf2+0x80>
 8001468:	d1da      	bne.n	8001420 <__gedf2+0x6c>
 800146a:	45c8      	cmp	r8, r9
 800146c:	d8e2      	bhi.n	8001434 <__gedf2+0x80>
 800146e:	2000      	movs	r0, #0
 8001470:	45c8      	cmp	r8, r9
 8001472:	d2e4      	bcs.n	800143e <__gedf2+0x8a>
 8001474:	e7d4      	b.n	8001420 <__gedf2+0x6c>
 8001476:	2000      	movs	r0, #0
 8001478:	2c00      	cmp	r4, #0
 800147a:	d0e0      	beq.n	800143e <__gedf2+0x8a>
 800147c:	e7da      	b.n	8001434 <__gedf2+0x80>
 800147e:	4311      	orrs	r1, r2
 8001480:	d103      	bne.n	800148a <__gedf2+0xd6>
 8001482:	4584      	cmp	ip, r0
 8001484:	d1d6      	bne.n	8001434 <__gedf2+0x80>
 8001486:	2000      	movs	r0, #0
 8001488:	e7d9      	b.n	800143e <__gedf2+0x8a>
 800148a:	2002      	movs	r0, #2
 800148c:	4240      	negs	r0, r0
 800148e:	e7d6      	b.n	800143e <__gedf2+0x8a>
 8001490:	4584      	cmp	ip, r0
 8001492:	d0e6      	beq.n	8001462 <__gedf2+0xae>
 8001494:	e7ce      	b.n	8001434 <__gedf2+0x80>
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	000007ff 	.word	0x000007ff

0800149c <__ledf2>:
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	4657      	mov	r7, sl
 80014a0:	464e      	mov	r6, r9
 80014a2:	4645      	mov	r5, r8
 80014a4:	46de      	mov	lr, fp
 80014a6:	b5e0      	push	{r5, r6, r7, lr}
 80014a8:	000d      	movs	r5, r1
 80014aa:	030f      	lsls	r7, r1, #12
 80014ac:	0004      	movs	r4, r0
 80014ae:	4680      	mov	r8, r0
 80014b0:	0fe8      	lsrs	r0, r5, #31
 80014b2:	0b39      	lsrs	r1, r7, #12
 80014b4:	4684      	mov	ip, r0
 80014b6:	b083      	sub	sp, #12
 80014b8:	0058      	lsls	r0, r3, #1
 80014ba:	4f30      	ldr	r7, [pc, #192]	@ (800157c <__ledf2+0xe0>)
 80014bc:	0d40      	lsrs	r0, r0, #21
 80014be:	9101      	str	r1, [sp, #4]
 80014c0:	031e      	lsls	r6, r3, #12
 80014c2:	0069      	lsls	r1, r5, #1
 80014c4:	4682      	mov	sl, r0
 80014c6:	4691      	mov	r9, r2
 80014c8:	0d49      	lsrs	r1, r1, #21
 80014ca:	0b36      	lsrs	r6, r6, #12
 80014cc:	0fd8      	lsrs	r0, r3, #31
 80014ce:	42b9      	cmp	r1, r7
 80014d0:	d020      	beq.n	8001514 <__ledf2+0x78>
 80014d2:	45ba      	cmp	sl, r7
 80014d4:	d00f      	beq.n	80014f6 <__ledf2+0x5a>
 80014d6:	2900      	cmp	r1, #0
 80014d8:	d12b      	bne.n	8001532 <__ledf2+0x96>
 80014da:	9901      	ldr	r1, [sp, #4]
 80014dc:	430c      	orrs	r4, r1
 80014de:	4651      	mov	r1, sl
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d137      	bne.n	8001554 <__ledf2+0xb8>
 80014e4:	4332      	orrs	r2, r6
 80014e6:	d038      	beq.n	800155a <__ledf2+0xbe>
 80014e8:	2c00      	cmp	r4, #0
 80014ea:	d144      	bne.n	8001576 <__ledf2+0xda>
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d119      	bne.n	8001524 <__ledf2+0x88>
 80014f0:	2001      	movs	r0, #1
 80014f2:	4240      	negs	r0, r0
 80014f4:	e016      	b.n	8001524 <__ledf2+0x88>
 80014f6:	4316      	orrs	r6, r2
 80014f8:	d113      	bne.n	8001522 <__ledf2+0x86>
 80014fa:	2900      	cmp	r1, #0
 80014fc:	d102      	bne.n	8001504 <__ledf2+0x68>
 80014fe:	9f01      	ldr	r7, [sp, #4]
 8001500:	4327      	orrs	r7, r4
 8001502:	d0f3      	beq.n	80014ec <__ledf2+0x50>
 8001504:	4584      	cmp	ip, r0
 8001506:	d020      	beq.n	800154a <__ledf2+0xae>
 8001508:	4663      	mov	r3, ip
 800150a:	2002      	movs	r0, #2
 800150c:	3b01      	subs	r3, #1
 800150e:	4018      	ands	r0, r3
 8001510:	3801      	subs	r0, #1
 8001512:	e007      	b.n	8001524 <__ledf2+0x88>
 8001514:	9f01      	ldr	r7, [sp, #4]
 8001516:	4327      	orrs	r7, r4
 8001518:	d103      	bne.n	8001522 <__ledf2+0x86>
 800151a:	458a      	cmp	sl, r1
 800151c:	d1f4      	bne.n	8001508 <__ledf2+0x6c>
 800151e:	4316      	orrs	r6, r2
 8001520:	d01f      	beq.n	8001562 <__ledf2+0xc6>
 8001522:	2002      	movs	r0, #2
 8001524:	b003      	add	sp, #12
 8001526:	bcf0      	pop	{r4, r5, r6, r7}
 8001528:	46bb      	mov	fp, r7
 800152a:	46b2      	mov	sl, r6
 800152c:	46a9      	mov	r9, r5
 800152e:	46a0      	mov	r8, r4
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	4654      	mov	r4, sl
 8001534:	2c00      	cmp	r4, #0
 8001536:	d0e7      	beq.n	8001508 <__ledf2+0x6c>
 8001538:	4584      	cmp	ip, r0
 800153a:	d1e5      	bne.n	8001508 <__ledf2+0x6c>
 800153c:	4551      	cmp	r1, sl
 800153e:	dce3      	bgt.n	8001508 <__ledf2+0x6c>
 8001540:	db03      	blt.n	800154a <__ledf2+0xae>
 8001542:	9b01      	ldr	r3, [sp, #4]
 8001544:	42b3      	cmp	r3, r6
 8001546:	d8df      	bhi.n	8001508 <__ledf2+0x6c>
 8001548:	d00f      	beq.n	800156a <__ledf2+0xce>
 800154a:	4663      	mov	r3, ip
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0cf      	beq.n	80014f0 <__ledf2+0x54>
 8001550:	4660      	mov	r0, ip
 8001552:	e7e7      	b.n	8001524 <__ledf2+0x88>
 8001554:	2c00      	cmp	r4, #0
 8001556:	d0c9      	beq.n	80014ec <__ledf2+0x50>
 8001558:	e7d4      	b.n	8001504 <__ledf2+0x68>
 800155a:	2000      	movs	r0, #0
 800155c:	2c00      	cmp	r4, #0
 800155e:	d0e1      	beq.n	8001524 <__ledf2+0x88>
 8001560:	e7d2      	b.n	8001508 <__ledf2+0x6c>
 8001562:	4584      	cmp	ip, r0
 8001564:	d1d0      	bne.n	8001508 <__ledf2+0x6c>
 8001566:	2000      	movs	r0, #0
 8001568:	e7dc      	b.n	8001524 <__ledf2+0x88>
 800156a:	45c8      	cmp	r8, r9
 800156c:	d8cc      	bhi.n	8001508 <__ledf2+0x6c>
 800156e:	2000      	movs	r0, #0
 8001570:	45c8      	cmp	r8, r9
 8001572:	d2d7      	bcs.n	8001524 <__ledf2+0x88>
 8001574:	e7e9      	b.n	800154a <__ledf2+0xae>
 8001576:	4584      	cmp	ip, r0
 8001578:	d0e3      	beq.n	8001542 <__ledf2+0xa6>
 800157a:	e7c5      	b.n	8001508 <__ledf2+0x6c>
 800157c:	000007ff 	.word	0x000007ff

08001580 <setPWM_Freq>:
uint16_t readValue = 0U;

LinkedList list;

void setPWM_Freq(uint32_t freq)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

	uint32_t tempARR = __HAL_TIM_GET_AUTORELOAD(&htim2);
 8001588:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <setPWM_Freq+0x38>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158e:	60fb      	str	r3, [r7, #12]
	uint32_t newPSC = ( ( SystemCoreClock / (freq * (tempARR) ) ) - 1 );
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <setPWM_Freq+0x3c>)
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4353      	muls	r3, r2
 800159a:	0019      	movs	r1, r3
 800159c:	f7fe fdb2 	bl	8000104 <__udivsi3>
 80015a0:	0003      	movs	r3, r0
 80015a2:	3b01      	subs	r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_PRESCALER(&htim2, newPSC);
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <setPWM_Freq+0x38>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	629a      	str	r2, [r3, #40]	@ 0x28

}
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b004      	add	sp, #16
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	2000010c 	.word	0x2000010c
 80015bc:	20000080 	.word	0x20000080

080015c0 <setPWM_DutyCycle>:

void setPWM_DutyCycle(uint32_t value)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

	uint32_t cycle = (value / 40.95);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fe23 	bl	8001214 <__aeabi_ui2d>
 80015ce:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <setPWM_DutyCycle+0x38>)
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <setPWM_DutyCycle+0x3c>)
 80015d2:	f7fe ff2d 	bl	8000430 <__aeabi_ddiv>
 80015d6:	0002      	movs	r2, r0
 80015d8:	000b      	movs	r3, r1
 80015da:	0010      	movs	r0, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	f7fe fe3d 	bl	800025c <__aeabi_d2uiz>
 80015e2:	0003      	movs	r3, r0
 80015e4:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, cycle);
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <setPWM_DutyCycle+0x40>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	9999999a 	.word	0x9999999a
 80015fc:	40447999 	.word	0x40447999
 8001600:	2000010c 	.word	0x2000010c

08001604 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

	if( rx_buffer != Default ) { rx_flag = STATE_ON;}
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <HAL_UART_RxCpltCallback+0x20>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b30      	cmp	r3, #48	@ 0x30
 8001612:	d002      	beq.n	800161a <HAL_UART_RxCpltCallback+0x16>
 8001614:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <HAL_UART_RxCpltCallback+0x24>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]

}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	20000002 	.word	0x20000002
 8001628:	200001ec 	.word	0x200001ec

0800162c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, greeting_led, sizeof(greeting_led), 500);
 8001634:	23fa      	movs	r3, #250	@ 0xfa
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4905      	ldr	r1, [pc, #20]	@ (8001650 <HAL_UART_TxCpltCallback+0x24>)
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	227a      	movs	r2, #122	@ 0x7a
 800163e:	f003 fb91 	bl	8004d64 <HAL_UART_Transmit>
	led_flag = STATE_ON;
 8001642:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <HAL_UART_TxCpltCallback+0x28>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
}
 8001648:	46c0      	nop			@ (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000004 	.word	0x20000004
 8001654:	20000003 	.word	0x20000003

08001658 <Led_GPIO_OutputInit>:

static void Led_GPIO_OutputInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	0018      	movs	r0, r3
 8001662:	2314      	movs	r3, #20
 8001664:	001a      	movs	r2, r3
 8001666:	2100      	movs	r1, #0
 8001668:	f005 fd44 	bl	80070f4 <memset>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2240      	movs	r2, #64	@ 0x40
 8001670:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2201      	movs	r2, #1
 8001676:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4a06      	ldr	r2, [pc, #24]	@ (80016a0 <Led_GPIO_OutputInit+0x48>)
 8001688:	0019      	movs	r1, r3
 800168a:	0010      	movs	r0, r2
 800168c:	f001 fc96 	bl	8002fbc <HAL_GPIO_Init>

	led_flag = STATE_OFF;
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <Led_GPIO_OutputInit+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b006      	add	sp, #24
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	50000800 	.word	0x50000800
 80016a4:	20000003 	.word	0x20000003

080016a8 <Led_TIM_OutputInit>:

static void Led_TIM_OutputInit(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	0018      	movs	r0, r3
 80016b2:	231c      	movs	r3, #28
 80016b4:	001a      	movs	r2, r3
 80016b6:	2100      	movs	r1, #0
 80016b8:	f005 fd1c 	bl	80070f4 <memset>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2260      	movs	r2, #96	@ 0x60
 80016c0:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016d4:	1d39      	adds	r1, r7, #4
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <Led_TIM_OutputInit+0x58>)
 80016d8:	2208      	movs	r2, #8
 80016da:	0018      	movs	r0, r3
 80016dc:	f002 fcce 	bl	800407c <HAL_TIM_PWM_ConfigChannel>
 80016e0:	1e03      	subs	r3, r0, #0
 80016e2:	d001      	beq.n	80016e8 <Led_TIM_OutputInit+0x40>
	{
	  Error_Handler();
 80016e4:	f000 fb18 	bl	8001d18 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim2);
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <Led_TIM_OutputInit+0x58>)
 80016ea:	0018      	movs	r0, r3
 80016ec:	f000 fbb6 	bl	8001e5c <HAL_TIM_MspPostInit>

	led_flag = STATE_ON;
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <Led_TIM_OutputInit+0x5c>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
}
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b008      	add	sp, #32
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	2000010c 	.word	0x2000010c
 8001704:	20000003 	.word	0x20000003

08001708 <LedControl>:

void LedControl(void)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b097      	sub	sp, #92	@ 0x5c
 800170c:	af00      	add	r7, sp, #0
	  if( rx_flag )
 800170e:	4b82      	ldr	r3, [pc, #520]	@ (8001918 <LedControl+0x210>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d100      	bne.n	8001718 <LedControl+0x10>
 8001716:	e0f5      	b.n	8001904 <LedControl+0x1fc>
	  {
		  switch(rx_buffer){
 8001718:	4b80      	ldr	r3, [pc, #512]	@ (800191c <LedControl+0x214>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b33      	cmp	r3, #51	@ 0x33
 800171e:	d100      	bne.n	8001722 <LedControl+0x1a>
 8001720:	e074      	b.n	800180c <LedControl+0x104>
 8001722:	dd00      	ble.n	8001726 <LedControl+0x1e>
 8001724:	e0da      	b.n	80018dc <LedControl+0x1d4>
 8001726:	2b31      	cmp	r3, #49	@ 0x31
 8001728:	d002      	beq.n	8001730 <LedControl+0x28>
 800172a:	2b32      	cmp	r3, #50	@ 0x32
 800172c:	d02d      	beq.n	800178a <LedControl+0x82>
 800172e:	e0d5      	b.n	80018dc <LedControl+0x1d4>

				case Option_1:

					if( led_flag )
 8001730:	4b7b      	ldr	r3, [pc, #492]	@ (8001920 <LedControl+0x218>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <LedControl+0x34>
					{
						Led_GPIO_OutputInit();
 8001738:	f7ff ff8e 	bl	8001658 <Led_GPIO_OutputInit>
					}

					uint8_t choice1[] = "\nChosen Option 1 - Led Toggle\n\r";
 800173c:	003b      	movs	r3, r7
 800173e:	4a79      	ldr	r2, [pc, #484]	@ (8001924 <LedControl+0x21c>)
 8001740:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001742:	c313      	stmia	r3!, {r0, r1, r4}
 8001744:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001746:	c313      	stmia	r3!, {r0, r1, r4}
 8001748:	ca03      	ldmia	r2!, {r0, r1}
 800174a:	c303      	stmia	r3!, {r0, r1}
					HAL_UART_Transmit(&huart2, choice1, sizeof(choice1), HAL_MAX_DELAY);
 800174c:	2301      	movs	r3, #1
 800174e:	425b      	negs	r3, r3
 8001750:	0039      	movs	r1, r7
 8001752:	4875      	ldr	r0, [pc, #468]	@ (8001928 <LedControl+0x220>)
 8001754:	2220      	movs	r2, #32
 8001756:	f003 fb05 	bl	8004d64 <HAL_UART_Transmit>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800175a:	4b74      	ldr	r3, [pc, #464]	@ (800192c <LedControl+0x224>)
 800175c:	2140      	movs	r1, #64	@ 0x40
 800175e:	0018      	movs	r0, r3
 8001760:	f001 fdca 	bl	80032f8 <HAL_GPIO_TogglePin>

					if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) ) {readValue = LED_ON;}
 8001764:	4b71      	ldr	r3, [pc, #452]	@ (800192c <LedControl+0x224>)
 8001766:	2140      	movs	r1, #64	@ 0x40
 8001768:	0018      	movs	r0, r3
 800176a:	f001 fd8b 	bl	8003284 <HAL_GPIO_ReadPin>
 800176e:	1e03      	subs	r3, r0, #0
 8001770:	d003      	beq.n	800177a <LedControl+0x72>
 8001772:	4b6f      	ldr	r3, [pc, #444]	@ (8001930 <LedControl+0x228>)
 8001774:	4a6f      	ldr	r2, [pc, #444]	@ (8001934 <LedControl+0x22c>)
 8001776:	801a      	strh	r2, [r3, #0]
 8001778:	e002      	b.n	8001780 <LedControl+0x78>
					else {readValue = LED_OFF;}
 800177a:	4b6d      	ldr	r3, [pc, #436]	@ (8001930 <LedControl+0x228>)
 800177c:	2200      	movs	r2, #0
 800177e:	801a      	strh	r2, [r3, #0]

					rx_flag = STATE_OFF;
 8001780:	4b65      	ldr	r3, [pc, #404]	@ (8001918 <LedControl+0x210>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]

					break;
 8001786:	46c0      	nop			@ (mov r8, r8)
	  }
	  else
	  {
		  HAL_UART_Receive_IT(&huart2, &rx_buffer, sizeof(rx_buffer));
	  }
}
 8001788:	e0c2      	b.n	8001910 <LedControl+0x208>
					if( led_flag )
 800178a:	4b65      	ldr	r3, [pc, #404]	@ (8001920 <LedControl+0x218>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <LedControl+0x8e>
						Led_GPIO_OutputInit();
 8001792:	f7ff ff61 	bl	8001658 <Led_GPIO_OutputInit>
					uint8_t choice2[] = "\nChosen Option 2 - Led Blinker\n\r";
 8001796:	003b      	movs	r3, r7
 8001798:	4a67      	ldr	r2, [pc, #412]	@ (8001938 <LedControl+0x230>)
 800179a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800179c:	c313      	stmia	r3!, {r0, r1, r4}
 800179e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017a0:	c313      	stmia	r3!, {r0, r1, r4}
 80017a2:	ca03      	ldmia	r2!, {r0, r1}
 80017a4:	c303      	stmia	r3!, {r0, r1}
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, choice2, sizeof(choice2), HAL_MAX_DELAY);
 80017aa:	2301      	movs	r3, #1
 80017ac:	425b      	negs	r3, r3
 80017ae:	0039      	movs	r1, r7
 80017b0:	485d      	ldr	r0, [pc, #372]	@ (8001928 <LedControl+0x220>)
 80017b2:	2221      	movs	r2, #33	@ 0x21
 80017b4:	f003 fad6 	bl	8004d64 <HAL_UART_Transmit>
					for( uint8_t count = 0; count < 10; count  ++)
 80017b8:	2357      	movs	r3, #87	@ 0x57
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e00d      	b.n	80017de <LedControl+0xd6>
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80017c2:	4b5a      	ldr	r3, [pc, #360]	@ (800192c <LedControl+0x224>)
 80017c4:	2140      	movs	r1, #64	@ 0x40
 80017c6:	0018      	movs	r0, r3
 80017c8:	f001 fd96 	bl	80032f8 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 80017cc:	2064      	movs	r0, #100	@ 0x64
 80017ce:	f000 fcaf 	bl	8002130 <HAL_Delay>
					for( uint8_t count = 0; count < 10; count  ++)
 80017d2:	2157      	movs	r1, #87	@ 0x57
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	3201      	adds	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	2357      	movs	r3, #87	@ 0x57
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b09      	cmp	r3, #9
 80017e6:	d9ec      	bls.n	80017c2 <LedControl+0xba>
					if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) ) {readValue = LED_ON;}
 80017e8:	4b50      	ldr	r3, [pc, #320]	@ (800192c <LedControl+0x224>)
 80017ea:	2140      	movs	r1, #64	@ 0x40
 80017ec:	0018      	movs	r0, r3
 80017ee:	f001 fd49 	bl	8003284 <HAL_GPIO_ReadPin>
 80017f2:	1e03      	subs	r3, r0, #0
 80017f4:	d003      	beq.n	80017fe <LedControl+0xf6>
 80017f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001930 <LedControl+0x228>)
 80017f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001934 <LedControl+0x22c>)
 80017fa:	801a      	strh	r2, [r3, #0]
 80017fc:	e002      	b.n	8001804 <LedControl+0xfc>
					else {readValue = LED_OFF;}
 80017fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001930 <LedControl+0x228>)
 8001800:	2200      	movs	r2, #0
 8001802:	801a      	strh	r2, [r3, #0]
					rx_flag = STATE_OFF;
 8001804:	4b44      	ldr	r3, [pc, #272]	@ (8001918 <LedControl+0x210>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
					break;
 800180a:	e07a      	b.n	8001902 <LedControl+0x1fa>
					if( !led_flag )
 800180c:	4b44      	ldr	r3, [pc, #272]	@ (8001920 <LedControl+0x218>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <LedControl+0x110>
						Led_TIM_OutputInit();
 8001814:	f7ff ff48 	bl	80016a8 <Led_TIM_OutputInit>
					uint8_t choice3[] = "\nChosen Option 3 - Led Slow Toggle\n\r";
 8001818:	003b      	movs	r3, r7
 800181a:	4a48      	ldr	r2, [pc, #288]	@ (800193c <LedControl+0x234>)
 800181c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800181e:	c313      	stmia	r3!, {r0, r1, r4}
 8001820:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001822:	c313      	stmia	r3!, {r0, r1, r4}
 8001824:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001826:	c313      	stmia	r3!, {r0, r1, r4}
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, choice3, sizeof(choice3), HAL_MAX_DELAY);
 800182c:	2301      	movs	r3, #1
 800182e:	425b      	negs	r3, r3
 8001830:	0039      	movs	r1, r7
 8001832:	483d      	ldr	r0, [pc, #244]	@ (8001928 <LedControl+0x220>)
 8001834:	2225      	movs	r2, #37	@ 0x25
 8001836:	f003 fa95 	bl	8004d64 <HAL_UART_Transmit>
					if( readValue == LED_OFF )
 800183a:	4b3d      	ldr	r3, [pc, #244]	@ (8001930 <LedControl+0x228>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d123      	bne.n	800188a <LedControl+0x182>
						while( readValue != LED_ON)
 8001842:	e01c      	b.n	800187e <LedControl+0x176>
							setPWM_DutyCycle(readValue);
 8001844:	4b3a      	ldr	r3, [pc, #232]	@ (8001930 <LedControl+0x228>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff feb9 	bl	80015c0 <setPWM_DutyCycle>
							readValue += 100;
 800184e:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <LedControl+0x228>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	3364      	adds	r3, #100	@ 0x64
 8001854:	b29a      	uxth	r2, r3
 8001856:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <LedControl+0x228>)
 8001858:	801a      	strh	r2, [r3, #0]
							HAL_Delay(20);
 800185a:	2014      	movs	r0, #20
 800185c:	f000 fc68 	bl	8002130 <HAL_Delay>
							if( readValue > 4000)
 8001860:	4b33      	ldr	r3, [pc, #204]	@ (8001930 <LedControl+0x228>)
 8001862:	881a      	ldrh	r2, [r3, #0]
 8001864:	23fa      	movs	r3, #250	@ 0xfa
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	429a      	cmp	r2, r3
 800186a:	d908      	bls.n	800187e <LedControl+0x176>
								readValue = LED_ON;
 800186c:	4b30      	ldr	r3, [pc, #192]	@ (8001930 <LedControl+0x228>)
 800186e:	4a31      	ldr	r2, [pc, #196]	@ (8001934 <LedControl+0x22c>)
 8001870:	801a      	strh	r2, [r3, #0]
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001872:	4b2e      	ldr	r3, [pc, #184]	@ (800192c <LedControl+0x224>)
 8001874:	2201      	movs	r2, #1
 8001876:	2140      	movs	r1, #64	@ 0x40
 8001878:	0018      	movs	r0, r3
 800187a:	f001 fd20 	bl	80032be <HAL_GPIO_WritePin>
						while( readValue != LED_ON)
 800187e:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <LedControl+0x228>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	4a2c      	ldr	r2, [pc, #176]	@ (8001934 <LedControl+0x22c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d1dd      	bne.n	8001844 <LedControl+0x13c>
 8001888:	e024      	b.n	80018d4 <LedControl+0x1cc>
					else if( readValue == LED_ON)
 800188a:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <LedControl+0x228>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	4a29      	ldr	r2, [pc, #164]	@ (8001934 <LedControl+0x22c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d11f      	bne.n	80018d4 <LedControl+0x1cc>
						while( readValue != LED_OFF)
 8001894:	e01a      	b.n	80018cc <LedControl+0x1c4>
							setPWM_DutyCycle(readValue);
 8001896:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <LedControl+0x228>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff fe90 	bl	80015c0 <setPWM_DutyCycle>
							readValue -= 100;
 80018a0:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <LedControl+0x228>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	3b64      	subs	r3, #100	@ 0x64
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <LedControl+0x228>)
 80018aa:	801a      	strh	r2, [r3, #0]
							HAL_Delay(20);
 80018ac:	2014      	movs	r0, #20
 80018ae:	f000 fc3f 	bl	8002130 <HAL_Delay>
							if( readValue < 100)
 80018b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <LedControl+0x228>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	2b63      	cmp	r3, #99	@ 0x63
 80018b8:	d808      	bhi.n	80018cc <LedControl+0x1c4>
								readValue = LED_OFF;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <LedControl+0x228>)
 80018bc:	2200      	movs	r2, #0
 80018be:	801a      	strh	r2, [r3, #0]
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80018c0:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <LedControl+0x224>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	2140      	movs	r1, #64	@ 0x40
 80018c6:	0018      	movs	r0, r3
 80018c8:	f001 fcf9 	bl	80032be <HAL_GPIO_WritePin>
						while( readValue != LED_OFF)
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <LedControl+0x228>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e0      	bne.n	8001896 <LedControl+0x18e>
					rx_flag = STATE_OFF;
 80018d4:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <LedControl+0x210>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
					break;
 80018da:	e012      	b.n	8001902 <LedControl+0x1fa>
					uint8_t repeat[] = "\n\rPlease Choose A Number\n\r Led Toggle - 1\n\r Led Blinker - 2\n\r Led Slow Toggle - 3\n\r";
 80018dc:	003a      	movs	r2, r7
 80018de:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <LedControl+0x238>)
 80018e0:	0010      	movs	r0, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	2354      	movs	r3, #84	@ 0x54
 80018e6:	001a      	movs	r2, r3
 80018e8:	f005 fc30 	bl	800714c <memcpy>
					HAL_UART_Transmit(&huart2, repeat, sizeof(repeat), HAL_MAX_DELAY);
 80018ec:	2301      	movs	r3, #1
 80018ee:	425b      	negs	r3, r3
 80018f0:	0039      	movs	r1, r7
 80018f2:	480d      	ldr	r0, [pc, #52]	@ (8001928 <LedControl+0x220>)
 80018f4:	2254      	movs	r2, #84	@ 0x54
 80018f6:	f003 fa35 	bl	8004d64 <HAL_UART_Transmit>
					rx_flag = STATE_OFF;
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <LedControl+0x210>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
}
 8001900:	e006      	b.n	8001910 <LedControl+0x208>
 8001902:	e005      	b.n	8001910 <LedControl+0x208>
		  HAL_UART_Receive_IT(&huart2, &rx_buffer, sizeof(rx_buffer));
 8001904:	4905      	ldr	r1, [pc, #20]	@ (800191c <LedControl+0x214>)
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <LedControl+0x220>)
 8001908:	2201      	movs	r2, #1
 800190a:	0018      	movs	r0, r3
 800190c:	f003 fb76 	bl	8004ffc <HAL_UART_Receive_IT>
}
 8001910:	46c0      	nop			@ (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b017      	add	sp, #92	@ 0x5c
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	200001ec 	.word	0x200001ec
 800191c:	20000002 	.word	0x20000002
 8001920:	20000003 	.word	0x20000003
 8001924:	08007178 	.word	0x08007178
 8001928:	20000158 	.word	0x20000158
 800192c:	50000800 	.word	0x50000800
 8001930:	200001ee 	.word	0x200001ee
 8001934:	00000fff 	.word	0x00000fff
 8001938:	08007198 	.word	0x08007198
 800193c:	080071bc 	.word	0x080071bc
 8001940:	080071e4 	.word	0x080071e4

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001948:	f000 fb6c 	bl	8002024 <HAL_Init>

  /* USER CODE BEGIN Init */
  InitializeList(&list);
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <main+0x50>)
 800194e:	0018      	movs	r0, r3
 8001950:	f000 f9e8 	bl	8001d24 <InitializeList>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001954:	f000 f82a 	bl	80019ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001958:	f000 f98a 	bl	8001c70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800195c:	f000 f954 	bl	8001c08 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001960:	f000 f86c 	bl	8001a3c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001964:	f000 f8d2 	bl	8001b0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <main+0x54>)
 800196a:	2108      	movs	r1, #8
 800196c:	0018      	movs	r0, r3
 800196e:	f002 faa7 	bl	8003ec0 <HAL_TIM_PWM_Start>
  setPWM_Freq(100000);
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <main+0x58>)
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff fe03 	bl	8001580 <setPWM_Freq>


  HAL_ADC_Start(&hadc1);
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <main+0x5c>)
 800197c:	0018      	movs	r0, r3
 800197e:	f000 fec7 	bl	8002710 <HAL_ADC_Start>
  HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001982:	4908      	ldr	r1, [pc, #32]	@ (80019a4 <main+0x60>)
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <main+0x64>)
 8001986:	2202      	movs	r2, #2
 8001988:	0018      	movs	r0, r3
 800198a:	f003 fa8f 	bl	8004eac <HAL_UART_Transmit_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  LedControl();
 800198e:	f7ff febb 	bl	8001708 <LedControl>
 8001992:	e7fc      	b.n	800198e <main+0x4a>
 8001994:	200001f0 	.word	0x200001f0
 8001998:	2000010c 	.word	0x2000010c
 800199c:	000186a0 	.word	0x000186a0
 80019a0:	200000a8 	.word	0x200000a8
 80019a4:	20000000 	.word	0x20000000
 80019a8:	20000158 	.word	0x20000158

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b093      	sub	sp, #76	@ 0x4c
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	2410      	movs	r4, #16
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	0018      	movs	r0, r3
 80019b8:	2338      	movs	r3, #56	@ 0x38
 80019ba:	001a      	movs	r2, r3
 80019bc:	2100      	movs	r1, #0
 80019be:	f005 fb99 	bl	80070f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c2:	003b      	movs	r3, r7
 80019c4:	0018      	movs	r0, r3
 80019c6:	2310      	movs	r3, #16
 80019c8:	001a      	movs	r2, r3
 80019ca:	2100      	movs	r1, #0
 80019cc:	f005 fb92 	bl	80070f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	0018      	movs	r0, r3
 80019d6:	f001 fcab 	bl	8003330 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2202      	movs	r2, #2
 80019de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2280      	movs	r2, #128	@ 0x80
 80019e4:	0052      	lsls	r2, r2, #1
 80019e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ee:	193b      	adds	r3, r7, r4
 80019f0:	2240      	movs	r2, #64	@ 0x40
 80019f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	0018      	movs	r0, r3
 80019fe:	f001 fce3 	bl	80033c8 <HAL_RCC_OscConfig>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d001      	beq.n	8001a0a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001a06:	f000 f987 	bl	8001d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0a:	003b      	movs	r3, r7
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a10:	003b      	movs	r3, r7
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a16:	003b      	movs	r3, r7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a1c:	003b      	movs	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a22:	003b      	movs	r3, r7
 8001a24:	2100      	movs	r1, #0
 8001a26:	0018      	movs	r0, r3
 8001a28:	f001 ffe8 	bl	80039fc <HAL_RCC_ClockConfig>
 8001a2c:	1e03      	subs	r3, r0, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001a30:	f000 f972 	bl	8001d18 <Error_Handler>
  }
}
 8001a34:	46c0      	nop			@ (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b013      	add	sp, #76	@ 0x4c
 8001a3a:	bd90      	pop	{r4, r7, pc}

08001a3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	0018      	movs	r0, r3
 8001a46:	230c      	movs	r3, #12
 8001a48:	001a      	movs	r2, r3
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	f005 fb52 	bl	80070f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a50:	4b2b      	ldr	r3, [pc, #172]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a52:	4a2c      	ldr	r2, [pc, #176]	@ (8001b04 <MX_ADC1_Init+0xc8>)
 8001a54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a56:	4b2a      	ldr	r3, [pc, #168]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a58:	2280      	movs	r2, #128	@ 0x80
 8001a5a:	05d2      	lsls	r2, r2, #23
 8001a5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a5e:	4b28      	ldr	r3, [pc, #160]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a64:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a6a:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a70:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a72:	2204      	movs	r2, #4
 8001a74:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a76:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001a7c:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a82:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001a9c:	222c      	movs	r2, #44	@ 0x2c
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001aae:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001ab6:	223c      	movs	r2, #60	@ 0x3c
 8001ab8:	2100      	movs	r1, #0
 8001aba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001abc:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f000 fc7b 	bl	80023c0 <HAL_ADC_Init>
 8001aca:	1e03      	subs	r3, r0, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001ace:	f000 f923 	bl	8001d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8001b08 <MX_ADC1_Init+0xcc>)
 8001ad6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae4:	1d3a      	adds	r2, r7, #4
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <MX_ADC1_Init+0xc4>)
 8001ae8:	0011      	movs	r1, r2
 8001aea:	0018      	movs	r0, r3
 8001aec:	f000 fe5e 	bl	80027ac <HAL_ADC_ConfigChannel>
 8001af0:	1e03      	subs	r3, r0, #0
 8001af2:	d001      	beq.n	8001af8 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8001af4:	f000 f910 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001af8:	46c0      	nop			@ (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200000a8 	.word	0x200000a8
 8001b04:	40012400 	.word	0x40012400
 8001b08:	24000200 	.word	0x24000200

08001b0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	@ 0x38
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b12:	2328      	movs	r3, #40	@ 0x28
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	0018      	movs	r0, r3
 8001b18:	2310      	movs	r3, #16
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	f005 fae9 	bl	80070f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b22:	231c      	movs	r3, #28
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	0018      	movs	r0, r3
 8001b28:	230c      	movs	r3, #12
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	f005 fae1 	bl	80070f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b32:	003b      	movs	r3, r7
 8001b34:	0018      	movs	r0, r3
 8001b36:	231c      	movs	r3, #28
 8001b38:	001a      	movs	r2, r3
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	f005 fada 	bl	80070f4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b40:	4b30      	ldr	r3, [pc, #192]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001b42:	2280      	movs	r2, #128	@ 0x80
 8001b44:	05d2      	lsls	r2, r2, #23
 8001b46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001b48:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001b4a:	2263      	movs	r2, #99	@ 0x63
 8001b4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001b54:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001b56:	2263      	movs	r2, #99	@ 0x63
 8001b58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b28      	ldr	r3, [pc, #160]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b66:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f002 f8f1 	bl	8003d50 <HAL_TIM_Base_Init>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b72:	f000 f8d1 	bl	8001d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b76:	2128      	movs	r1, #40	@ 0x28
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	2280      	movs	r2, #128	@ 0x80
 8001b7c:	0152      	lsls	r2, r2, #5
 8001b7e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b80:	187a      	adds	r2, r7, r1
 8001b82:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001b84:	0011      	movs	r1, r2
 8001b86:	0018      	movs	r0, r3
 8001b88:	f002 fb78 	bl	800427c <HAL_TIM_ConfigClockSource>
 8001b8c:	1e03      	subs	r3, r0, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001b90:	f000 f8c2 	bl	8001d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001b96:	0018      	movs	r0, r3
 8001b98:	f002 f932 	bl	8003e00 <HAL_TIM_PWM_Init>
 8001b9c:	1e03      	subs	r3, r0, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001ba0:	f000 f8ba 	bl	8001d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba4:	211c      	movs	r1, #28
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb2:	187a      	adds	r2, r7, r1
 8001bb4:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f003 f815 	bl	8004be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	1e03      	subs	r3, r0, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001bc2:	f000 f8a9 	bl	8001d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc6:	003b      	movs	r3, r7
 8001bc8:	2260      	movs	r2, #96	@ 0x60
 8001bca:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001bcc:	003b      	movs	r3, r7
 8001bce:	2200      	movs	r2, #0
 8001bd0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd2:	003b      	movs	r3, r7
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd8:	003b      	movs	r3, r7
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bde:	0039      	movs	r1, r7
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001be2:	2208      	movs	r2, #8
 8001be4:	0018      	movs	r0, r3
 8001be6:	f002 fa49 	bl	800407c <HAL_TIM_PWM_ConfigChannel>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001bee:	f000 f893 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <MX_TIM2_Init+0xf8>)
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f000 f931 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b00e      	add	sp, #56	@ 0x38
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	2000010c 	.word	0x2000010c

08001c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c0e:	4a17      	ldr	r2, [pc, #92]	@ (8001c6c <MX_USART2_UART_Init+0x64>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c14:	22e1      	movs	r2, #225	@ 0xe1
 8001c16:	0252      	lsls	r2, r2, #9
 8001c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <MX_USART2_UART_Init+0x60>)
 8001c52:	0018      	movs	r0, r3
 8001c54:	f003 f830 	bl	8004cb8 <HAL_UART_Init>
 8001c58:	1e03      	subs	r3, r0, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c5c:	f000 f85c 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	20000158 	.word	0x20000158
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b08b      	sub	sp, #44	@ 0x2c
 8001c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c76:	2414      	movs	r4, #20
 8001c78:	193b      	adds	r3, r7, r4
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	2314      	movs	r3, #20
 8001c7e:	001a      	movs	r2, r3
 8001c80:	2100      	movs	r1, #0
 8001c82:	f005 fa37 	bl	80070f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c86:	4b22      	ldr	r3, [pc, #136]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c8a:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c92:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c96:	2204      	movs	r2, #4
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001ca4:	2120      	movs	r1, #32
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001caa:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cae:	2220      	movs	r2, #32
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <MX_GPIO_Init+0xa0>)
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8001ce6:	193b      	adds	r3, r7, r4
 8001ce8:	2204      	movs	r2, #4
 8001cea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cec:	193b      	adds	r3, r7, r4
 8001cee:	2288      	movs	r2, #136	@ 0x88
 8001cf0:	0352      	lsls	r2, r2, #13
 8001cf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	193b      	adds	r3, r7, r4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	193b      	adds	r3, r7, r4
 8001cfc:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <MX_GPIO_Init+0xa4>)
 8001cfe:	0019      	movs	r1, r3
 8001d00:	0010      	movs	r0, r2
 8001d02:	f001 f95b 	bl	8002fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b00b      	add	sp, #44	@ 0x2c
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	40021000 	.word	0x40021000
 8001d14:	50001400 	.word	0x50001400

08001d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1c:	b672      	cpsid	i
}
 8001d1e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d20:	46c0      	nop			@ (mov r8, r8)
 8001d22:	e7fd      	b.n	8001d20 <Error_Handler+0x8>

08001d24 <InitializeList>:
#include "my_linked_list.h"

void InitializeList(LinkedList *list)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	list->head->data = 0;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
	list->head->next = NULL;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	605a      	str	r2, [r3, #4]

	list->tail->data = 0;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
	list->tail->next = NULL;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
}
 8001d4c:	46c0      	nop			@ (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_MspInit+0x44>)
 8001d5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_MspInit+0x44>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	430a      	orrs	r2, r1
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <HAL_MspInit+0x44>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_MspInit+0x44>)
 8001d74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <HAL_MspInit+0x44>)
 8001d78:	2180      	movs	r1, #128	@ 0x80
 8001d7a:	0549      	lsls	r1, r1, #21
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_MspInit+0x44>)
 8001d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	055b      	lsls	r3, r3, #21
 8001d88:	4013      	ands	r3, r2
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	40021000 	.word	0x40021000

08001d9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b08b      	sub	sp, #44	@ 0x2c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	2414      	movs	r4, #20
 8001da6:	193b      	adds	r3, r7, r4
 8001da8:	0018      	movs	r0, r3
 8001daa:	2314      	movs	r3, #20
 8001dac:	001a      	movs	r2, r3
 8001dae:	2100      	movs	r1, #0
 8001db0:	f005 f9a0 	bl	80070f4 <memset>
  if(hadc->Instance==ADC1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a17      	ldr	r2, [pc, #92]	@ (8001e18 <HAL_ADC_MspInit+0x7c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d128      	bne.n	8001e10 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001dbe:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001dc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001dc4:	2180      	movs	r1, #128	@ 0x80
 8001dc6:	0349      	lsls	r1, r1, #13
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dcc:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001dce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dd0:	2380      	movs	r3, #128	@ 0x80
 8001dd2:	035b      	lsls	r3, r3, #13
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dde:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001de0:	2102      	movs	r1, #2
 8001de2:	430a      	orrs	r2, r1
 8001de4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001de6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dea:	2202      	movs	r2, #2
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001df2:	193b      	adds	r3, r7, r4
 8001df4:	2202      	movs	r2, #2
 8001df6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df8:	193b      	adds	r3, r7, r4
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	193b      	adds	r3, r7, r4
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	193b      	adds	r3, r7, r4
 8001e06:	4a06      	ldr	r2, [pc, #24]	@ (8001e20 <HAL_ADC_MspInit+0x84>)
 8001e08:	0019      	movs	r1, r3
 8001e0a:	0010      	movs	r0, r2
 8001e0c:	f001 f8d6 	bl	8002fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e10:	46c0      	nop			@ (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b00b      	add	sp, #44	@ 0x2c
 8001e16:	bd90      	pop	{r4, r7, pc}
 8001e18:	40012400 	.word	0x40012400
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	50000400 	.word	0x50000400

08001e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	05db      	lsls	r3, r3, #23
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10b      	bne.n	8001e50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e38:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <HAL_TIM_Base_MspInit+0x34>)
 8001e3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_TIM_Base_MspInit+0x34>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	430a      	orrs	r2, r1
 8001e42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e44:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <HAL_TIM_Base_MspInit+0x34>)
 8001e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e50:	46c0      	nop			@ (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000

08001e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	240c      	movs	r4, #12
 8001e66:	193b      	adds	r3, r7, r4
 8001e68:	0018      	movs	r0, r3
 8001e6a:	2314      	movs	r3, #20
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	2100      	movs	r1, #0
 8001e70:	f005 f940 	bl	80070f4 <memset>
  if(htim->Instance==TIM2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	05db      	lsls	r3, r3, #23
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d121      	bne.n	8001ec4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_TIM_MspPostInit+0x70>)
 8001e82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_TIM_MspPostInit+0x70>)
 8001e86:	2104      	movs	r1, #4
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <HAL_TIM_MspPostInit+0x70>)
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e90:	2204      	movs	r2, #4
 8001e92:	4013      	ands	r3, r2
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e98:	0021      	movs	r1, r4
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	2240      	movs	r2, #64	@ 0x40
 8001e9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	187b      	adds	r3, r7, r1
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb8:	187b      	adds	r3, r7, r1
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <HAL_TIM_MspPostInit+0x74>)
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	0010      	movs	r0, r2
 8001ec0:	f001 f87c 	bl	8002fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ec4:	46c0      	nop			@ (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b009      	add	sp, #36	@ 0x24
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	50000800 	.word	0x50000800

08001ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b08b      	sub	sp, #44	@ 0x2c
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	2414      	movs	r4, #20
 8001ede:	193b      	adds	r3, r7, r4
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	2314      	movs	r3, #20
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	f005 f904 	bl	80070f4 <memset>
  if(huart->Instance==USART2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f70 <HAL_UART_MspInit+0x9c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d138      	bne.n	8001f68 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HAL_UART_MspInit+0xa0>)
 8001ef8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001efa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <HAL_UART_MspInit+0xa0>)
 8001efc:	2180      	movs	r1, #128	@ 0x80
 8001efe:	0289      	lsls	r1, r1, #10
 8001f00:	430a      	orrs	r2, r1
 8001f02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f04:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <HAL_UART_MspInit+0xa0>)
 8001f06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	029b      	lsls	r3, r3, #10
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_UART_MspInit+0xa0>)
 8001f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f16:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <HAL_UART_MspInit+0xa0>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <HAL_UART_MspInit+0xa0>)
 8001f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f22:	2201      	movs	r2, #1
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001f2a:	0021      	movs	r1, r4
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	220c      	movs	r2, #12
 8001f30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	187b      	adds	r3, r7, r1
 8001f34:	2202      	movs	r2, #2
 8001f36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	187b      	adds	r3, r7, r1
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	2201      	movs	r2, #1
 8001f48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	187a      	adds	r2, r7, r1
 8001f4c:	23a0      	movs	r3, #160	@ 0xa0
 8001f4e:	05db      	lsls	r3, r3, #23
 8001f50:	0011      	movs	r1, r2
 8001f52:	0018      	movs	r0, r3
 8001f54:	f001 f832 	bl	8002fbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	201c      	movs	r0, #28
 8001f5e:	f000 ff2f 	bl	8002dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f62:	201c      	movs	r0, #28
 8001f64:	f000 ff41 	bl	8002dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f68:	46c0      	nop			@ (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b00b      	add	sp, #44	@ 0x2c
 8001f6e:	bd90      	pop	{r4, r7, pc}
 8001f70:	40004400 	.word	0x40004400
 8001f74:	40021000 	.word	0x40021000

08001f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f7c:	46c0      	nop			@ (mov r8, r8)
 8001f7e:	e7fd      	b.n	8001f7c <NMI_Handler+0x4>

08001f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f84:	46c0      	nop			@ (mov r8, r8)
 8001f86:	e7fd      	b.n	8001f84 <HardFault_Handler+0x4>

08001f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f8c:	46c0      	nop			@ (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa0:	f000 f8aa 	bl	80020f8 <HAL_IncTick>
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
//
//  }
//
  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa4:	46c0      	nop			@ (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <USART2_IRQHandler+0x14>)
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f003 f880 	bl	80050b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fb8:	46c0      	nop			@ (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	20000158 	.word	0x20000158

08001fc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc8:	46c0      	nop			@ (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


  ldr   r0, =_estack
 8001fd0:	480d      	ldr	r0, [pc, #52]	@ (8002008 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fd4:	f7ff fff6 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd8:	480c      	ldr	r0, [pc, #48]	@ (800200c <LoopForever+0x6>)
  ldr r1, =_edata
 8001fda:	490d      	ldr	r1, [pc, #52]	@ (8002010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002014 <LoopForever+0xe>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe0:	e002      	b.n	8001fe8 <LoopCopyDataInit>

08001fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe6:	3304      	adds	r3, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fec:	d3f9      	bcc.n	8001fe2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fee:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800201c <LoopForever+0x16>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff4:	e001      	b.n	8001ffa <LoopFillZerobss>

08001ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff8:	3204      	adds	r2, #4

08001ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ffc:	d3fb      	bcc.n	8001ff6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ffe:	f005 f881 	bl	8007104 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002002:	f7ff fc9f 	bl	8001944 <main>

08002006 <LoopForever>:

LoopForever:
  b LoopForever
 8002006:	e7fe      	b.n	8002006 <LoopForever>
  ldr   r0, =_estack
 8002008:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002014:	08007530 	.word	0x08007530
  ldr r2, =_sbss
 8002018:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800201c:	200001fc 	.word	0x200001fc

08002020 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC1_IRQHandler>
	...

08002024 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <HAL_Init+0x3c>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_Init+0x3c>)
 8002036:	2180      	movs	r1, #128	@ 0x80
 8002038:	0049      	lsls	r1, r1, #1
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203e:	2000      	movs	r0, #0
 8002040:	f000 f810 	bl	8002064 <HAL_InitTick>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d003      	beq.n	8002050 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002048:	1dfb      	adds	r3, r7, #7
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	e001      	b.n	8002054 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002050:	f7ff fe80 	bl	8001d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002054:	1dfb      	adds	r3, r7, #7
 8002056:	781b      	ldrb	r3, [r3, #0]
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40022000 	.word	0x40022000

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800206c:	230f      	movs	r3, #15
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002074:	4b1d      	ldr	r3, [pc, #116]	@ (80020ec <HAL_InitTick+0x88>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02b      	beq.n	80020d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800207c:	4b1c      	ldr	r3, [pc, #112]	@ (80020f0 <HAL_InitTick+0x8c>)
 800207e:	681c      	ldr	r4, [r3, #0]
 8002080:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <HAL_InitTick+0x88>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	0019      	movs	r1, r3
 8002086:	23fa      	movs	r3, #250	@ 0xfa
 8002088:	0098      	lsls	r0, r3, #2
 800208a:	f7fe f83b 	bl	8000104 <__udivsi3>
 800208e:	0003      	movs	r3, r0
 8002090:	0019      	movs	r1, r3
 8002092:	0020      	movs	r0, r4
 8002094:	f7fe f836 	bl	8000104 <__udivsi3>
 8002098:	0003      	movs	r3, r0
 800209a:	0018      	movs	r0, r3
 800209c:	f000 feb5 	bl	8002e0a <HAL_SYSTICK_Config>
 80020a0:	1e03      	subs	r3, r0, #0
 80020a2:	d112      	bne.n	80020ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d80a      	bhi.n	80020c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	2301      	movs	r3, #1
 80020ae:	425b      	negs	r3, r3
 80020b0:	2200      	movs	r2, #0
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 fe84 	bl	8002dc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b8:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <HAL_InitTick+0x90>)
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e00d      	b.n	80020dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80020c0:	230f      	movs	r3, #15
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e008      	b.n	80020dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020ca:	230f      	movs	r3, #15
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e003      	b.n	80020dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020d4:	230f      	movs	r3, #15
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80020dc:	230f      	movs	r3, #15
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	781b      	ldrb	r3, [r3, #0]
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b005      	add	sp, #20
 80020e8:	bd90      	pop	{r4, r7, pc}
 80020ea:	46c0      	nop			@ (mov r8, r8)
 80020ec:	20000088 	.word	0x20000088
 80020f0:	20000080 	.word	0x20000080
 80020f4:	20000084 	.word	0x20000084

080020f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <HAL_IncTick+0x1c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	001a      	movs	r2, r3
 8002102:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <HAL_IncTick+0x20>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	18d2      	adds	r2, r2, r3
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <HAL_IncTick+0x20>)
 800210a:	601a      	str	r2, [r3, #0]
}
 800210c:	46c0      	nop			@ (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	20000088 	.word	0x20000088
 8002118:	200001f8 	.word	0x200001f8

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b02      	ldr	r3, [pc, #8]	@ (800212c <HAL_GetTick+0x10>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			@ (mov r8, r8)
 800212c:	200001f8 	.word	0x200001f8

08002130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff fff0 	bl	800211c <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3301      	adds	r3, #1
 8002148:	d005      	beq.n	8002156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214a:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <HAL_Delay+0x44>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	001a      	movs	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	189b      	adds	r3, r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	f7ff ffe0 	bl	800211c <HAL_GetTick>
 800215c:	0002      	movs	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d8f7      	bhi.n	8002158 <HAL_Delay+0x28>
  {
  }
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	20000088 	.word	0x20000088

08002178 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a05      	ldr	r2, [pc, #20]	@ (800219c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002188:	401a      	ands	r2, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	601a      	str	r2, [r3, #0]
}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	46bd      	mov	sp, r7
 8002196:	b002      	add	sp, #8
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	fe3fffff 	.word	0xfe3fffff

080021a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	23e0      	movs	r3, #224	@ 0xe0
 80021ae:	045b      	lsls	r3, r3, #17
 80021b0:	4013      	ands	r3, r2
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bd80      	pop	{r7, pc}

080021ba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	2104      	movs	r1, #4
 80021ce:	400a      	ands	r2, r1
 80021d0:	2107      	movs	r1, #7
 80021d2:	4091      	lsls	r1, r2
 80021d4:	000a      	movs	r2, r1
 80021d6:	43d2      	mvns	r2, r2
 80021d8:	401a      	ands	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2104      	movs	r1, #4
 80021de:	400b      	ands	r3, r1
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4099      	lsls	r1, r3
 80021e4:	000b      	movs	r3, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80021ec:	46c0      	nop			@ (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b004      	add	sp, #16
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	2104      	movs	r1, #4
 8002206:	400a      	ands	r2, r1
 8002208:	2107      	movs	r1, #7
 800220a:	4091      	lsls	r1, r2
 800220c:	000a      	movs	r2, r1
 800220e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2104      	movs	r1, #4
 8002214:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002216:	40da      	lsrs	r2, r3
 8002218:	0013      	movs	r3, r2
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b002      	add	sp, #8
 8002220:	bd80      	pop	{r7, pc}

08002222 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	211f      	movs	r1, #31
 8002236:	400a      	ands	r2, r1
 8002238:	210f      	movs	r1, #15
 800223a:	4091      	lsls	r1, r2
 800223c:	000a      	movs	r2, r1
 800223e:	43d2      	mvns	r2, r2
 8002240:	401a      	ands	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	0e9b      	lsrs	r3, r3, #26
 8002246:	210f      	movs	r1, #15
 8002248:	4019      	ands	r1, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	201f      	movs	r0, #31
 800224e:	4003      	ands	r3, r0
 8002250:	4099      	lsls	r1, r3
 8002252:	000b      	movs	r3, r1
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b004      	add	sp, #16
 8002260:	bd80      	pop	{r7, pc}

08002262 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	035b      	lsls	r3, r3, #13
 8002274:	0b5b      	lsrs	r3, r3, #13
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800227c:	46c0      	nop			@ (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}

08002284 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	0352      	lsls	r2, r2, #13
 8002296:	0b52      	lsrs	r2, r2, #13
 8002298:	43d2      	mvns	r2, r2
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022a0:	46c0      	nop			@ (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	0212      	lsls	r2, r2, #8
 80022bc:	43d2      	mvns	r2, r2
 80022be:	401a      	ands	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	400b      	ands	r3, r1
 80022c8:	4904      	ldr	r1, [pc, #16]	@ (80022dc <LL_ADC_SetChannelSamplingTime+0x34>)
 80022ca:	400b      	ands	r3, r1
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b004      	add	sp, #16
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	07ffff00 	.word	0x07ffff00

080022e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a05      	ldr	r2, [pc, #20]	@ (8002304 <LL_ADC_EnableInternalRegulator+0x24>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	2280      	movs	r2, #128	@ 0x80
 80022f2:	0552      	lsls	r2, r2, #21
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b002      	add	sp, #8
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	6fffffe8 	.word	0x6fffffe8

08002308 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	055b      	lsls	r3, r3, #21
 8002318:	401a      	ands	r2, r3
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	055b      	lsls	r3, r3, #21
 800231e:	429a      	cmp	r2, r3
 8002320:	d101      	bne.n	8002326 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002326:	2300      	movs	r3, #0
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a04      	ldr	r2, [pc, #16]	@ (8002350 <LL_ADC_Enable+0x20>)
 800233e:	4013      	ands	r3, r2
 8002340:	2201      	movs	r2, #1
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002348:	46c0      	nop			@ (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}
 8002350:	7fffffe8 	.word	0x7fffffe8

08002354 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <LL_ADC_IsEnabled+0x18>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <LL_ADC_IsEnabled+0x1a>
 800236c:	2300      	movs	r3, #0
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <LL_ADC_REG_StartConversion+0x20>)
 8002386:	4013      	ands	r3, r2
 8002388:	2204      	movs	r2, #4
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002390:	46c0      	nop			@ (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}
 8002398:	7fffffe8 	.word	0x7fffffe8

0800239c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2204      	movs	r2, #4
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d101      	bne.n	80023b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b002      	add	sp, #8
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c8:	231f      	movs	r3, #31
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e17f      	b.n	80026e6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10a      	bne.n	8002404 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7ff fcd3 	bl	8001d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2254      	movs	r2, #84	@ 0x54
 8002400:	2100      	movs	r1, #0
 8002402:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0018      	movs	r0, r3
 800240a:	f7ff ff7d 	bl	8002308 <LL_ADC_IsInternalRegulatorEnabled>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d115      	bne.n	800243e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	0018      	movs	r0, r3
 8002418:	f7ff ff62 	bl	80022e0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800241c:	4bb4      	ldr	r3, [pc, #720]	@ (80026f0 <HAL_ADC_Init+0x330>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	49b4      	ldr	r1, [pc, #720]	@ (80026f4 <HAL_ADC_Init+0x334>)
 8002422:	0018      	movs	r0, r3
 8002424:	f7fd fe6e 	bl	8000104 <__udivsi3>
 8002428:	0003      	movs	r3, r0
 800242a:	3301      	adds	r3, #1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002430:	e002      	b.n	8002438 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3b01      	subs	r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f9      	bne.n	8002432 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0018      	movs	r0, r3
 8002444:	f7ff ff60 	bl	8002308 <LL_ADC_IsInternalRegulatorEnabled>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	d10f      	bne.n	800246c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002450:	2210      	movs	r2, #16
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245c:	2201      	movs	r2, #1
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002464:	231f      	movs	r3, #31
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0018      	movs	r0, r3
 8002472:	f7ff ff93 	bl	800239c <LL_ADC_REG_IsConversionOngoing>
 8002476:	0003      	movs	r3, r0
 8002478:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247e:	2210      	movs	r2, #16
 8002480:	4013      	ands	r3, r2
 8002482:	d000      	beq.n	8002486 <HAL_ADC_Init+0xc6>
 8002484:	e122      	b.n	80026cc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d000      	beq.n	800248e <HAL_ADC_Init+0xce>
 800248c:	e11e      	b.n	80026cc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	4a99      	ldr	r2, [pc, #612]	@ (80026f8 <HAL_ADC_Init+0x338>)
 8002494:	4013      	ands	r3, r2
 8002496:	2202      	movs	r2, #2
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7ff ff56 	bl	8002354 <LL_ADC_IsEnabled>
 80024a8:	1e03      	subs	r3, r0, #0
 80024aa:	d000      	beq.n	80024ae <HAL_ADC_Init+0xee>
 80024ac:	e0ad      	b.n	800260a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7e1b      	ldrb	r3, [r3, #24]
 80024b6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80024b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7e5b      	ldrb	r3, [r3, #25]
 80024be:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7e9b      	ldrb	r3, [r3, #26]
 80024c6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_ADC_Init+0x118>
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	015b      	lsls	r3, r3, #5
 80024d6:	e000      	b.n	80024da <HAL_ADC_Init+0x11a>
 80024d8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024da:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024e0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	da04      	bge.n	80024f4 <HAL_ADC_Init+0x134>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	e001      	b.n	80024f8 <HAL_ADC_Init+0x138>
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80024f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	212c      	movs	r1, #44	@ 0x2c
 80024fe:	5c5b      	ldrb	r3, [r3, r1]
 8002500:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002502:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	5c9b      	ldrb	r3, [r3, r2]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d115      	bne.n	8002540 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7e9b      	ldrb	r3, [r3, #26]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	0252      	lsls	r2, r2, #9
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	e00b      	b.n	8002540 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252c:	2220      	movs	r2, #32
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002538:	2201      	movs	r2, #1
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800254c:	23e0      	movs	r3, #224	@ 0xe0
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002556:	4313      	orrs	r3, r2
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a65      	ldr	r2, [pc, #404]	@ (80026fc <HAL_ADC_Init+0x33c>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	430a      	orrs	r2, r1
 8002572:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0f9b      	lsrs	r3, r3, #30
 800257a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002580:	4313      	orrs	r3, r2
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	223c      	movs	r2, #60	@ 0x3c
 800258c:	5c9b      	ldrb	r3, [r3, r2]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d111      	bne.n	80025b6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	0f9b      	lsrs	r3, r3, #30
 8002598:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800259e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80025a4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80025aa:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	2201      	movs	r2, #1
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	4a50      	ldr	r2, [pc, #320]	@ (8002700 <HAL_ADC_Init+0x340>)
 80025be:	4013      	ands	r3, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	23c0      	movs	r3, #192	@ 0xc0
 80025d2:	061b      	lsls	r3, r3, #24
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d018      	beq.n	800260a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	05db      	lsls	r3, r3, #23
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d012      	beq.n	800260a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d00c      	beq.n	800260a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80025f0:	4b44      	ldr	r3, [pc, #272]	@ (8002704 <HAL_ADC_Init+0x344>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a44      	ldr	r2, [pc, #272]	@ (8002708 <HAL_ADC_Init+0x348>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	23f0      	movs	r3, #240	@ 0xf0
 8002600:	039b      	lsls	r3, r3, #14
 8002602:	401a      	ands	r2, r3
 8002604:	4b3f      	ldr	r3, [pc, #252]	@ (8002704 <HAL_ADC_Init+0x344>)
 8002606:	430a      	orrs	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002612:	001a      	movs	r2, r3
 8002614:	2100      	movs	r1, #0
 8002616:	f7ff fdd0 	bl	80021ba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002622:	493a      	ldr	r1, [pc, #232]	@ (800270c <HAL_ADC_Init+0x34c>)
 8002624:	001a      	movs	r2, r3
 8002626:	f7ff fdc8 	bl	80021ba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2110      	movs	r1, #16
 800263e:	4249      	negs	r1, r1
 8002640:	430a      	orrs	r2, r1
 8002642:	629a      	str	r2, [r3, #40]	@ 0x28
 8002644:	e018      	b.n	8002678 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	2380      	movs	r3, #128	@ 0x80
 800264c:	039b      	lsls	r3, r3, #14
 800264e:	429a      	cmp	r2, r3
 8002650:	d112      	bne.n	8002678 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	3b01      	subs	r3, #1
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	221c      	movs	r2, #28
 8002662:	4013      	ands	r3, r2
 8002664:	2210      	movs	r2, #16
 8002666:	4252      	negs	r2, r2
 8002668:	409a      	lsls	r2, r3
 800266a:	0011      	movs	r1, r2
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2100      	movs	r1, #0
 800267e:	0018      	movs	r0, r3
 8002680:	f7ff fdb8 	bl	80021f4 <LL_ADC_GetSamplingTimeCommonChannels>
 8002684:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800268a:	429a      	cmp	r2, r3
 800268c:	d10b      	bne.n	80026a6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002698:	2203      	movs	r2, #3
 800269a:	4393      	bics	r3, r2
 800269c:	2201      	movs	r2, #1
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026a4:	e01c      	b.n	80026e0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	2212      	movs	r2, #18
 80026ac:	4393      	bics	r3, r2
 80026ae:	2210      	movs	r2, #16
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	2201      	movs	r2, #1
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80026c2:	231f      	movs	r3, #31
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026ca:	e009      	b.n	80026e0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	2210      	movs	r2, #16
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80026d8:	231f      	movs	r3, #31
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80026e0:	231f      	movs	r3, #31
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	781b      	ldrb	r3, [r3, #0]
}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b008      	add	sp, #32
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	20000080 	.word	0x20000080
 80026f4:	00030d40 	.word	0x00030d40
 80026f8:	fffffefd 	.word	0xfffffefd
 80026fc:	ffde0201 	.word	0xffde0201
 8002700:	1ffffc02 	.word	0x1ffffc02
 8002704:	40012708 	.word	0x40012708
 8002708:	ffc3ffff 	.word	0xffc3ffff
 800270c:	07ffff04 	.word	0x07ffff04

08002710 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff fe3d 	bl	800239c <LL_ADC_REG_IsConversionOngoing>
 8002722:	1e03      	subs	r3, r0, #0
 8002724:	d135      	bne.n	8002792 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2254      	movs	r2, #84	@ 0x54
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_ADC_Start+0x24>
 8002730:	2302      	movs	r3, #2
 8002732:	e035      	b.n	80027a0 <HAL_ADC_Start+0x90>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2254      	movs	r2, #84	@ 0x54
 8002738:	2101      	movs	r1, #1
 800273a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800273c:	250f      	movs	r5, #15
 800273e:	197c      	adds	r4, r7, r5
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	0018      	movs	r0, r3
 8002744:	f000 fa0a 	bl	8002b5c <ADC_Enable>
 8002748:	0003      	movs	r3, r0
 800274a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800274c:	197b      	adds	r3, r7, r5
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d119      	bne.n	8002788 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	4a13      	ldr	r2, [pc, #76]	@ (80027a8 <HAL_ADC_Start+0x98>)
 800275a:	4013      	ands	r3, r2
 800275c:	2280      	movs	r2, #128	@ 0x80
 800275e:	0052      	lsls	r2, r2, #1
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	221c      	movs	r2, #28
 8002772:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2254      	movs	r2, #84	@ 0x54
 8002778:	2100      	movs	r1, #0
 800277a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff fdf9 	bl	8002378 <LL_ADC_REG_StartConversion>
 8002786:	e008      	b.n	800279a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2254      	movs	r2, #84	@ 0x54
 800278c:	2100      	movs	r1, #0
 800278e:	5499      	strb	r1, [r3, r2]
 8002790:	e003      	b.n	800279a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002792:	230f      	movs	r3, #15
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800279a:	230f      	movs	r3, #15
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	781b      	ldrb	r3, [r3, #0]
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bdb0      	pop	{r4, r5, r7, pc}
 80027a8:	fffff0fe 	.word	0xfffff0fe

080027ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b6:	2317      	movs	r3, #23
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2254      	movs	r2, #84	@ 0x54
 80027c6:	5c9b      	ldrb	r3, [r3, r2]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x24>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e1c0      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x3a6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2254      	movs	r2, #84	@ 0x54
 80027d4:	2101      	movs	r1, #1
 80027d6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff fddd 	bl	800239c <LL_ADC_REG_IsConversionOngoing>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d000      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x3c>
 80027e6:	e1a3      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d100      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x46>
 80027f0:	e143      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d004      	beq.n	8002808 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002802:	4ac1      	ldr	r2, [pc, #772]	@ (8002b08 <HAL_ADC_ConfigChannel+0x35c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d108      	bne.n	800281a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0019      	movs	r1, r3
 8002812:	0010      	movs	r0, r2
 8002814:	f7ff fd25 	bl	8002262 <LL_ADC_REG_SetSequencerChAdd>
 8002818:	e0c9      	b.n	80029ae <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	211f      	movs	r1, #31
 8002824:	400b      	ands	r3, r1
 8002826:	210f      	movs	r1, #15
 8002828:	4099      	lsls	r1, r3
 800282a:	000b      	movs	r3, r1
 800282c:	43db      	mvns	r3, r3
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	035b      	lsls	r3, r3, #13
 8002838:	0b5b      	lsrs	r3, r3, #13
 800283a:	d105      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x9c>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	221f      	movs	r2, #31
 8002844:	4013      	ands	r3, r2
 8002846:	e098      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	d000      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xa8>
 8002852:	e091      	b.n	8002978 <HAL_ADC_ConfigChannel+0x1cc>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2202      	movs	r2, #2
 800285a:	4013      	ands	r3, r2
 800285c:	d000      	beq.n	8002860 <HAL_ADC_ConfigChannel+0xb4>
 800285e:	e089      	b.n	8002974 <HAL_ADC_ConfigChannel+0x1c8>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2204      	movs	r2, #4
 8002866:	4013      	ands	r3, r2
 8002868:	d000      	beq.n	800286c <HAL_ADC_ConfigChannel+0xc0>
 800286a:	e081      	b.n	8002970 <HAL_ADC_ConfigChannel+0x1c4>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2208      	movs	r2, #8
 8002872:	4013      	ands	r3, r2
 8002874:	d000      	beq.n	8002878 <HAL_ADC_ConfigChannel+0xcc>
 8002876:	e079      	b.n	800296c <HAL_ADC_ConfigChannel+0x1c0>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2210      	movs	r2, #16
 800287e:	4013      	ands	r3, r2
 8002880:	d000      	beq.n	8002884 <HAL_ADC_ConfigChannel+0xd8>
 8002882:	e071      	b.n	8002968 <HAL_ADC_ConfigChannel+0x1bc>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2220      	movs	r2, #32
 800288a:	4013      	ands	r3, r2
 800288c:	d000      	beq.n	8002890 <HAL_ADC_ConfigChannel+0xe4>
 800288e:	e069      	b.n	8002964 <HAL_ADC_ConfigChannel+0x1b8>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2240      	movs	r2, #64	@ 0x40
 8002896:	4013      	ands	r3, r2
 8002898:	d000      	beq.n	800289c <HAL_ADC_ConfigChannel+0xf0>
 800289a:	e061      	b.n	8002960 <HAL_ADC_ConfigChannel+0x1b4>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	4013      	ands	r3, r2
 80028a4:	d000      	beq.n	80028a8 <HAL_ADC_ConfigChannel+0xfc>
 80028a6:	e059      	b.n	800295c <HAL_ADC_ConfigChannel+0x1b0>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	d151      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1ac>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	2380      	movs	r3, #128	@ 0x80
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	d149      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1a8>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4013      	ands	r3, r2
 80028ca:	d141      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x1a4>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	4013      	ands	r3, r2
 80028d6:	d139      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1a0>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	2380      	movs	r3, #128	@ 0x80
 80028de:	015b      	lsls	r3, r3, #5
 80028e0:	4013      	ands	r3, r2
 80028e2:	d131      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x19c>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	019b      	lsls	r3, r3, #6
 80028ec:	4013      	ands	r3, r2
 80028ee:	d129      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x198>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	01db      	lsls	r3, r3, #7
 80028f8:	4013      	ands	r3, r2
 80028fa:	d121      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x194>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	4013      	ands	r3, r2
 8002906:	d119      	bne.n	800293c <HAL_ADC_ConfigChannel+0x190>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	025b      	lsls	r3, r3, #9
 8002910:	4013      	ands	r3, r2
 8002912:	d111      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x18c>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	029b      	lsls	r3, r3, #10
 800291c:	4013      	ands	r3, r2
 800291e:	d109      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x188>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	02db      	lsls	r3, r3, #11
 8002928:	4013      	ands	r3, r2
 800292a:	d001      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x184>
 800292c:	2312      	movs	r3, #18
 800292e:	e024      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002930:	2300      	movs	r3, #0
 8002932:	e022      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002934:	2311      	movs	r3, #17
 8002936:	e020      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002938:	2310      	movs	r3, #16
 800293a:	e01e      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 800293c:	230f      	movs	r3, #15
 800293e:	e01c      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002940:	230e      	movs	r3, #14
 8002942:	e01a      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002944:	230d      	movs	r3, #13
 8002946:	e018      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002948:	230c      	movs	r3, #12
 800294a:	e016      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 800294c:	230b      	movs	r3, #11
 800294e:	e014      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002950:	230a      	movs	r3, #10
 8002952:	e012      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002954:	2309      	movs	r3, #9
 8002956:	e010      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002958:	2308      	movs	r3, #8
 800295a:	e00e      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 800295c:	2307      	movs	r3, #7
 800295e:	e00c      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002960:	2306      	movs	r3, #6
 8002962:	e00a      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002964:	2305      	movs	r3, #5
 8002966:	e008      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002968:	2304      	movs	r3, #4
 800296a:	e006      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 800296c:	2303      	movs	r3, #3
 800296e:	e004      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002970:	2302      	movs	r3, #2
 8002972:	e002      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002978:	2300      	movs	r3, #0
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	6852      	ldr	r2, [r2, #4]
 800297e:	201f      	movs	r0, #31
 8002980:	4002      	ands	r2, r0
 8002982:	4093      	lsls	r3, r2
 8002984:	000a      	movs	r2, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	429a      	cmp	r2, r3
 800299a:	d808      	bhi.n	80029ae <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	001a      	movs	r2, r3
 80029aa:	f7ff fc3a 	bl	8002222 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	001a      	movs	r2, r3
 80029bc:	f7ff fc74 	bl	80022a8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db00      	blt.n	80029ca <HAL_ADC_ConfigChannel+0x21e>
 80029c8:	e0bc      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ca:	4b50      	ldr	r3, [pc, #320]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff fbe7 	bl	80021a0 <LL_ADC_GetCommonPathInternalCh>
 80029d2:	0003      	movs	r3, r0
 80029d4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a4d      	ldr	r2, [pc, #308]	@ (8002b10 <HAL_ADC_ConfigChannel+0x364>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d122      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029e8:	d11d      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2280      	movs	r2, #128	@ 0x80
 80029ee:	0412      	lsls	r2, r2, #16
 80029f0:	4313      	orrs	r3, r2
 80029f2:	4a46      	ldr	r2, [pc, #280]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 80029f4:	0019      	movs	r1, r3
 80029f6:	0010      	movs	r0, r2
 80029f8:	f7ff fbbe 	bl	8002178 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029fc:	4b45      	ldr	r3, [pc, #276]	@ (8002b14 <HAL_ADC_ConfigChannel+0x368>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4945      	ldr	r1, [pc, #276]	@ (8002b18 <HAL_ADC_ConfigChannel+0x36c>)
 8002a02:	0018      	movs	r0, r3
 8002a04:	f7fd fb7e 	bl	8000104 <__udivsi3>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	189b      	adds	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a16:	e002      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f9      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a24:	e08e      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b1c <HAL_ADC_ConfigChannel+0x370>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10e      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	045b      	lsls	r3, r3, #17
 8002a36:	4013      	ands	r3, r2
 8002a38:	d109      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2280      	movs	r2, #128	@ 0x80
 8002a3e:	0452      	lsls	r2, r2, #17
 8002a40:	4313      	orrs	r3, r2
 8002a42:	4a32      	ldr	r2, [pc, #200]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002a44:	0019      	movs	r1, r3
 8002a46:	0010      	movs	r0, r2
 8002a48:	f7ff fb96 	bl	8002178 <LL_ADC_SetCommonPathInternalCh>
 8002a4c:	e07a      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a33      	ldr	r2, [pc, #204]	@ (8002b20 <HAL_ADC_ConfigChannel+0x374>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d000      	beq.n	8002a5a <HAL_ADC_ConfigChannel+0x2ae>
 8002a58:	e074      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	03db      	lsls	r3, r3, #15
 8002a60:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a62:	d000      	beq.n	8002a66 <HAL_ADC_ConfigChannel+0x2ba>
 8002a64:	e06e      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2280      	movs	r2, #128	@ 0x80
 8002a6a:	03d2      	lsls	r2, r2, #15
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4a27      	ldr	r2, [pc, #156]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002a70:	0019      	movs	r1, r3
 8002a72:	0010      	movs	r0, r2
 8002a74:	f7ff fb80 	bl	8002178 <LL_ADC_SetCommonPathInternalCh>
 8002a78:	e064      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b08 <HAL_ADC_ConfigChannel+0x35c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d107      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0019      	movs	r1, r3
 8002a9a:	0010      	movs	r0, r2
 8002a9c:	f7ff fbf2 	bl	8002284 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	da4d      	bge.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa8:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f7ff fb78 	bl	80021a0 <LL_ADC_GetCommonPathInternalCh>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a15      	ldr	r2, [pc, #84]	@ (8002b10 <HAL_ADC_ConfigChannel+0x364>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d108      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4a18      	ldr	r2, [pc, #96]	@ (8002b24 <HAL_ADC_ConfigChannel+0x378>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	4a11      	ldr	r2, [pc, #68]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	0010      	movs	r0, r2
 8002aca:	f7ff fb55 	bl	8002178 <LL_ADC_SetCommonPathInternalCh>
 8002ace:	e039      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a11      	ldr	r2, [pc, #68]	@ (8002b1c <HAL_ADC_ConfigChannel+0x370>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <HAL_ADC_ConfigChannel+0x37c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	0010      	movs	r0, r2
 8002ae6:	f7ff fb47 	bl	8002178 <LL_ADC_SetCommonPathInternalCh>
 8002aea:	e02b      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0b      	ldr	r2, [pc, #44]	@ (8002b20 <HAL_ADC_ConfigChannel+0x374>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d126      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4a0c      	ldr	r2, [pc, #48]	@ (8002b2c <HAL_ADC_ConfigChannel+0x380>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	4a03      	ldr	r2, [pc, #12]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002afe:	0019      	movs	r1, r3
 8002b00:	0010      	movs	r0, r2
 8002b02:	f7ff fb39 	bl	8002178 <LL_ADC_SetCommonPathInternalCh>
 8002b06:	e01d      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
 8002b08:	80000004 	.word	0x80000004
 8002b0c:	40012708 	.word	0x40012708
 8002b10:	b0001000 	.word	0xb0001000
 8002b14:	20000080 	.word	0x20000080
 8002b18:	00030d40 	.word	0x00030d40
 8002b1c:	b8004000 	.word	0xb8004000
 8002b20:	b4002000 	.word	0xb4002000
 8002b24:	ff7fffff 	.word	0xff7fffff
 8002b28:	feffffff 	.word	0xfeffffff
 8002b2c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	2220      	movs	r2, #32
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b3c:	2317      	movs	r3, #23
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2254      	movs	r2, #84	@ 0x54
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002b4c:	2317      	movs	r3, #23
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b006      	add	sp, #24
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			@ (mov r8, r8)

08002b5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7ff fbf1 	bl	8002354 <LL_ADC_IsEnabled>
 8002b72:	1e03      	subs	r3, r0, #0
 8002b74:	d000      	beq.n	8002b78 <ADC_Enable+0x1c>
 8002b76:	e069      	b.n	8002c4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	4a36      	ldr	r2, [pc, #216]	@ (8002c58 <ADC_Enable+0xfc>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	d00d      	beq.n	8002ba0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	2210      	movs	r2, #16
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b94:	2201      	movs	r2, #1
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e056      	b.n	8002c4e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7ff fbc3 	bl	8002330 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002baa:	4b2c      	ldr	r3, [pc, #176]	@ (8002c5c <ADC_Enable+0x100>)
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff faf7 	bl	80021a0 <LL_ADC_GetCommonPathInternalCh>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	041b      	lsls	r3, r3, #16
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d00f      	beq.n	8002bdc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bbc:	4b28      	ldr	r3, [pc, #160]	@ (8002c60 <ADC_Enable+0x104>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4928      	ldr	r1, [pc, #160]	@ (8002c64 <ADC_Enable+0x108>)
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7fd fa9e 	bl	8000104 <__udivsi3>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002bcc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bce:	e002      	b.n	8002bd6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f9      	bne.n	8002bd0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7e5b      	ldrb	r3, [r3, #25]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d033      	beq.n	8002c4c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002be4:	f7ff fa9a 	bl	800211c <HAL_GetTick>
 8002be8:	0003      	movs	r3, r0
 8002bea:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bec:	e027      	b.n	8002c3e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7ff fbae 	bl	8002354 <LL_ADC_IsEnabled>
 8002bf8:	1e03      	subs	r3, r0, #0
 8002bfa:	d104      	bne.n	8002c06 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7ff fb95 	bl	8002330 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c06:	f7ff fa89 	bl	800211c <HAL_GetTick>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d914      	bls.n	8002c3e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d00d      	beq.n	8002c3e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	2210      	movs	r2, #16
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c32:	2201      	movs	r2, #1
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e007      	b.n	8002c4e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2201      	movs	r2, #1
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d1d0      	bne.n	8002bee <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b004      	add	sp, #16
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	80000017 	.word	0x80000017
 8002c5c:	40012708 	.word	0x40012708
 8002c60:	20000080 	.word	0x20000080
 8002c64:	00030d40 	.word	0x00030d40

08002c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	0002      	movs	r2, r0
 8002c70:	1dfb      	adds	r3, r7, #7
 8002c72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c7a:	d809      	bhi.n	8002c90 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7c:	1dfb      	adds	r3, r7, #7
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	001a      	movs	r2, r3
 8002c82:	231f      	movs	r3, #31
 8002c84:	401a      	ands	r2, r3
 8002c86:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <__NVIC_EnableIRQ+0x30>)
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4091      	lsls	r1, r2
 8002c8c:	000a      	movs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	e000e100 	.word	0xe000e100

08002c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	1dfb      	adds	r3, r7, #7
 8002ca8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002caa:	1dfb      	adds	r3, r7, #7
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cb0:	d828      	bhi.n	8002d04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8002d70 <__NVIC_SetPriority+0xd4>)
 8002cb4:	1dfb      	adds	r3, r7, #7
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	33c0      	adds	r3, #192	@ 0xc0
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	589b      	ldr	r3, [r3, r2]
 8002cc2:	1dfa      	adds	r2, r7, #7
 8002cc4:	7812      	ldrb	r2, [r2, #0]
 8002cc6:	0011      	movs	r1, r2
 8002cc8:	2203      	movs	r2, #3
 8002cca:	400a      	ands	r2, r1
 8002ccc:	00d2      	lsls	r2, r2, #3
 8002cce:	21ff      	movs	r1, #255	@ 0xff
 8002cd0:	4091      	lsls	r1, r2
 8002cd2:	000a      	movs	r2, r1
 8002cd4:	43d2      	mvns	r2, r2
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	019b      	lsls	r3, r3, #6
 8002cde:	22ff      	movs	r2, #255	@ 0xff
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	1dfb      	adds	r3, r7, #7
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	2303      	movs	r3, #3
 8002cea:	4003      	ands	r3, r0
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cf0:	481f      	ldr	r0, [pc, #124]	@ (8002d70 <__NVIC_SetPriority+0xd4>)
 8002cf2:	1dfb      	adds	r3, r7, #7
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b25b      	sxtb	r3, r3
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	33c0      	adds	r3, #192	@ 0xc0
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d02:	e031      	b.n	8002d68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d04:	4a1b      	ldr	r2, [pc, #108]	@ (8002d74 <__NVIC_SetPriority+0xd8>)
 8002d06:	1dfb      	adds	r3, r7, #7
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	230f      	movs	r3, #15
 8002d0e:	400b      	ands	r3, r1
 8002d10:	3b08      	subs	r3, #8
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	3306      	adds	r3, #6
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	18d3      	adds	r3, r2, r3
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1dfa      	adds	r2, r7, #7
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	0011      	movs	r1, r2
 8002d24:	2203      	movs	r2, #3
 8002d26:	400a      	ands	r2, r1
 8002d28:	00d2      	lsls	r2, r2, #3
 8002d2a:	21ff      	movs	r1, #255	@ 0xff
 8002d2c:	4091      	lsls	r1, r2
 8002d2e:	000a      	movs	r2, r1
 8002d30:	43d2      	mvns	r2, r2
 8002d32:	401a      	ands	r2, r3
 8002d34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	019b      	lsls	r3, r3, #6
 8002d3a:	22ff      	movs	r2, #255	@ 0xff
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	1dfb      	adds	r3, r7, #7
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	0018      	movs	r0, r3
 8002d44:	2303      	movs	r3, #3
 8002d46:	4003      	ands	r3, r0
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d4c:	4809      	ldr	r0, [pc, #36]	@ (8002d74 <__NVIC_SetPriority+0xd8>)
 8002d4e:	1dfb      	adds	r3, r7, #7
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	001c      	movs	r4, r3
 8002d54:	230f      	movs	r3, #15
 8002d56:	4023      	ands	r3, r4
 8002d58:	3b08      	subs	r3, #8
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	3306      	adds	r3, #6
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	18c3      	adds	r3, r0, r3
 8002d64:	3304      	adds	r3, #4
 8002d66:	601a      	str	r2, [r3, #0]
}
 8002d68:	46c0      	nop			@ (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b003      	add	sp, #12
 8002d6e:	bd90      	pop	{r4, r7, pc}
 8002d70:	e000e100 	.word	0xe000e100
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	1e5a      	subs	r2, r3, #1
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	045b      	lsls	r3, r3, #17
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d301      	bcc.n	8002d90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e010      	b.n	8002db2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d90:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <SysTick_Config+0x44>)
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	3a01      	subs	r2, #1
 8002d96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d98:	2301      	movs	r3, #1
 8002d9a:	425b      	negs	r3, r3
 8002d9c:	2103      	movs	r1, #3
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f7ff ff7c 	bl	8002c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da4:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <SysTick_Config+0x44>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002daa:	4b04      	ldr	r3, [pc, #16]	@ (8002dbc <SysTick_Config+0x44>)
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b002      	add	sp, #8
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	e000e010 	.word	0xe000e010

08002dc0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	210f      	movs	r1, #15
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	1c02      	adds	r2, r0, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	b25b      	sxtb	r3, r3
 8002dda:	0011      	movs	r1, r2
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7ff ff5d 	bl	8002c9c <__NVIC_SetPriority>
}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b004      	add	sp, #16
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	0002      	movs	r2, r0
 8002df2:	1dfb      	adds	r3, r7, #7
 8002df4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df6:	1dfb      	adds	r3, r7, #7
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7ff ff33 	bl	8002c68 <__NVIC_EnableIRQ>
}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b002      	add	sp, #8
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7ff ffaf 	bl	8002d78 <SysTick_Config>
 8002e1a:	0003      	movs	r3, r0
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b002      	add	sp, #8
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e050      	b.n	8002ed8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2225      	movs	r2, #37	@ 0x25
 8002e3a:	5c9b      	ldrb	r3, [r3, r2]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d008      	beq.n	8002e54 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2204      	movs	r2, #4
 8002e46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	@ 0x24
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e041      	b.n	8002ed8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	210e      	movs	r1, #14
 8002e60:	438a      	bics	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	491c      	ldr	r1, [pc, #112]	@ (8002ee0 <HAL_DMA_Abort+0xbc>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2101      	movs	r1, #1
 8002e80:	438a      	bics	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002e84:	4b17      	ldr	r3, [pc, #92]	@ (8002ee4 <HAL_DMA_Abort+0xc0>)
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	221c      	movs	r2, #28
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2201      	movs	r2, #1
 8002e92:	409a      	lsls	r2, r3
 8002e94:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <HAL_DMA_Abort+0xc0>)
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ea2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00c      	beq.n	8002ec6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb6:	490a      	ldr	r1, [pc, #40]	@ (8002ee0 <HAL_DMA_Abort+0xbc>)
 8002eb8:	400a      	ands	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ec4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2225      	movs	r2, #37	@ 0x25
 8002eca:	2101      	movs	r1, #1
 8002ecc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2224      	movs	r2, #36	@ 0x24
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b002      	add	sp, #8
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	fffffeff 	.word	0xfffffeff
 8002ee4:	40020000 	.word	0x40020000

08002ee8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef0:	210f      	movs	r1, #15
 8002ef2:	187b      	adds	r3, r7, r1
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2225      	movs	r2, #37	@ 0x25
 8002efc:	5c9b      	ldrb	r3, [r3, r2]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d006      	beq.n	8002f12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2204      	movs	r2, #4
 8002f08:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e049      	b.n	8002fa6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	210e      	movs	r1, #14
 8002f1e:	438a      	bics	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	438a      	bics	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3c:	491d      	ldr	r1, [pc, #116]	@ (8002fb4 <HAL_DMA_Abort_IT+0xcc>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002f42:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <HAL_DMA_Abort_IT+0xd0>)
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	221c      	movs	r2, #28
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2201      	movs	r2, #1
 8002f50:	409a      	lsls	r2, r3
 8002f52:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <HAL_DMA_Abort_IT+0xd0>)
 8002f54:	430a      	orrs	r2, r1
 8002f56:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f60:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f74:	490f      	ldr	r1, [pc, #60]	@ (8002fb4 <HAL_DMA_Abort_IT+0xcc>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002f82:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2225      	movs	r2, #37	@ 0x25
 8002f88:	2101      	movs	r1, #1
 8002f8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	@ 0x24
 8002f90:	2100      	movs	r1, #0
 8002f92:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	0010      	movs	r0, r2
 8002fa4:	4798      	blx	r3
    }
  }
  return status;
 8002fa6:	230f      	movs	r3, #15
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	781b      	ldrb	r3, [r3, #0]
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b004      	add	sp, #16
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	fffffeff 	.word	0xfffffeff
 8002fb8:	40020000 	.word	0x40020000

08002fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fca:	e147      	b.n	800325c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4091      	lsls	r1, r2
 8002fd6:	000a      	movs	r2, r1
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d100      	bne.n	8002fe4 <HAL_GPIO_Init+0x28>
 8002fe2:	e138      	b.n	8003256 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d005      	beq.n	8002ffc <HAL_GPIO_Init+0x40>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d130      	bne.n	800305e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	409a      	lsls	r2, r3
 800300a:	0013      	movs	r3, r2
 800300c:	43da      	mvns	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	409a      	lsls	r2, r3
 800301e:	0013      	movs	r3, r2
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003032:	2201      	movs	r2, #1
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	409a      	lsls	r2, r3
 8003038:	0013      	movs	r3, r2
 800303a:	43da      	mvns	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	2201      	movs	r2, #1
 800304a:	401a      	ands	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	409a      	lsls	r2, r3
 8003050:	0013      	movs	r3, r2
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2203      	movs	r2, #3
 8003064:	4013      	ands	r3, r2
 8003066:	2b03      	cmp	r3, #3
 8003068:	d017      	beq.n	800309a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2203      	movs	r2, #3
 8003076:	409a      	lsls	r2, r3
 8003078:	0013      	movs	r3, r2
 800307a:	43da      	mvns	r2, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	409a      	lsls	r2, r3
 800308c:	0013      	movs	r3, r2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2203      	movs	r2, #3
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d123      	bne.n	80030ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	08da      	lsrs	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3208      	adds	r2, #8
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	58d3      	ldr	r3, [r2, r3]
 80030b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2207      	movs	r2, #7
 80030b8:	4013      	ands	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	220f      	movs	r2, #15
 80030be:	409a      	lsls	r2, r3
 80030c0:	0013      	movs	r3, r2
 80030c2:	43da      	mvns	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2107      	movs	r1, #7
 80030d2:	400b      	ands	r3, r1
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	409a      	lsls	r2, r3
 80030d8:	0013      	movs	r3, r2
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	08da      	lsrs	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3208      	adds	r2, #8
 80030e8:	0092      	lsls	r2, r2, #2
 80030ea:	6939      	ldr	r1, [r7, #16]
 80030ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	2203      	movs	r2, #3
 80030fa:	409a      	lsls	r2, r3
 80030fc:	0013      	movs	r3, r2
 80030fe:	43da      	mvns	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2203      	movs	r2, #3
 800310c:	401a      	ands	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	409a      	lsls	r2, r3
 8003114:	0013      	movs	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	23c0      	movs	r3, #192	@ 0xc0
 8003128:	029b      	lsls	r3, r3, #10
 800312a:	4013      	ands	r3, r2
 800312c:	d100      	bne.n	8003130 <HAL_GPIO_Init+0x174>
 800312e:	e092      	b.n	8003256 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003130:	4a50      	ldr	r2, [pc, #320]	@ (8003274 <HAL_GPIO_Init+0x2b8>)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3318      	adds	r3, #24
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	589b      	ldr	r3, [r3, r2]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2203      	movs	r2, #3
 8003142:	4013      	ands	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	220f      	movs	r2, #15
 8003148:	409a      	lsls	r2, r3
 800314a:	0013      	movs	r3, r2
 800314c:	43da      	mvns	r2, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	23a0      	movs	r3, #160	@ 0xa0
 8003158:	05db      	lsls	r3, r3, #23
 800315a:	429a      	cmp	r2, r3
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x1ca>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a45      	ldr	r2, [pc, #276]	@ (8003278 <HAL_GPIO_Init+0x2bc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x1c6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a44      	ldr	r2, [pc, #272]	@ (800327c <HAL_GPIO_Init+0x2c0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x1c2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a43      	ldr	r2, [pc, #268]	@ (8003280 <HAL_GPIO_Init+0x2c4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x1be>
 8003176:	2303      	movs	r3, #3
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x1cc>
 800317a:	2305      	movs	r3, #5
 800317c:	e004      	b.n	8003188 <HAL_GPIO_Init+0x1cc>
 800317e:	2302      	movs	r3, #2
 8003180:	e002      	b.n	8003188 <HAL_GPIO_Init+0x1cc>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_GPIO_Init+0x1cc>
 8003186:	2300      	movs	r3, #0
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	2103      	movs	r1, #3
 800318c:	400a      	ands	r2, r1
 800318e:	00d2      	lsls	r2, r2, #3
 8003190:	4093      	lsls	r3, r2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003198:	4936      	ldr	r1, [pc, #216]	@ (8003274 <HAL_GPIO_Init+0x2b8>)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	3318      	adds	r3, #24
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a6:	4b33      	ldr	r3, [pc, #204]	@ (8003274 <HAL_GPIO_Init+0x2b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43da      	mvns	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	2380      	movs	r3, #128	@ 0x80
 80031bc:	035b      	lsls	r3, r3, #13
 80031be:	4013      	ands	r3, r2
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003274 <HAL_GPIO_Init+0x2b8>)
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80031d0:	4b28      	ldr	r3, [pc, #160]	@ (8003274 <HAL_GPIO_Init+0x2b8>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43da      	mvns	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	039b      	lsls	r3, r3, #14
 80031e8:	4013      	ands	r3, r2
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003274 <HAL_GPIO_Init+0x2b8>)
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003274 <HAL_GPIO_Init+0x2b8>)
 80031fc:	2384      	movs	r3, #132	@ 0x84
 80031fe:	58d3      	ldr	r3, [r2, r3]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43da      	mvns	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	029b      	lsls	r3, r3, #10
 8003214:	4013      	ands	r3, r2
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003220:	4914      	ldr	r1, [pc, #80]	@ (8003274 <HAL_GPIO_Init+0x2b8>)
 8003222:	2284      	movs	r2, #132	@ 0x84
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003228:	4a12      	ldr	r2, [pc, #72]	@ (8003274 <HAL_GPIO_Init+0x2b8>)
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	58d3      	ldr	r3, [r2, r3]
 800322e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	43da      	mvns	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	025b      	lsls	r3, r3, #9
 8003242:	4013      	ands	r3, r2
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800324e:	4909      	ldr	r1, [pc, #36]	@ (8003274 <HAL_GPIO_Init+0x2b8>)
 8003250:	2280      	movs	r2, #128	@ 0x80
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	3301      	adds	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	40da      	lsrs	r2, r3
 8003264:	1e13      	subs	r3, r2, #0
 8003266:	d000      	beq.n	800326a <HAL_GPIO_Init+0x2ae>
 8003268:	e6b0      	b.n	8002fcc <HAL_GPIO_Init+0x10>
  }
}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b006      	add	sp, #24
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021800 	.word	0x40021800
 8003278:	50000400 	.word	0x50000400
 800327c:	50000800 	.word	0x50000800
 8003280:	50000c00 	.word	0x50000c00

08003284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	000a      	movs	r2, r1
 800328e:	1cbb      	adds	r3, r7, #2
 8003290:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	1cba      	adds	r2, r7, #2
 8003298:	8812      	ldrh	r2, [r2, #0]
 800329a:	4013      	ands	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800329e:	230f      	movs	r3, #15
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e003      	b.n	80032b0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032a8:	230f      	movs	r3, #15
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80032b0:	230f      	movs	r3, #15
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	781b      	ldrb	r3, [r3, #0]
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b004      	add	sp, #16
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	0008      	movs	r0, r1
 80032c8:	0011      	movs	r1, r2
 80032ca:	1cbb      	adds	r3, r7, #2
 80032cc:	1c02      	adds	r2, r0, #0
 80032ce:	801a      	strh	r2, [r3, #0]
 80032d0:	1c7b      	adds	r3, r7, #1
 80032d2:	1c0a      	adds	r2, r1, #0
 80032d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032d6:	1c7b      	adds	r3, r7, #1
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032de:	1cbb      	adds	r3, r7, #2
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032e6:	e003      	b.n	80032f0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032e8:	1cbb      	adds	r3, r7, #2
 80032ea:	881a      	ldrh	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032f0:	46c0      	nop			@ (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	000a      	movs	r2, r1
 8003302:	1cbb      	adds	r3, r7, #2
 8003304:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800330c:	1cbb      	adds	r3, r7, #2
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4013      	ands	r3, r2
 8003314:	041a      	lsls	r2, r3, #16
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	43db      	mvns	r3, r3
 800331a:	1cb9      	adds	r1, r7, #2
 800331c:	8809      	ldrh	r1, [r1, #0]
 800331e:	400b      	ands	r3, r1
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	619a      	str	r2, [r3, #24]
}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003338:	4b19      	ldr	r3, [pc, #100]	@ (80033a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a19      	ldr	r2, [pc, #100]	@ (80033a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800333e:	4013      	ands	r3, r2
 8003340:	0019      	movs	r1, r3
 8003342:	4b17      	ldr	r3, [pc, #92]	@ (80033a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	429a      	cmp	r2, r3
 8003352:	d11f      	bne.n	8003394 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003354:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	0013      	movs	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	189b      	adds	r3, r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4912      	ldr	r1, [pc, #72]	@ (80033ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003362:	0018      	movs	r0, r3
 8003364:	f7fc fece 	bl	8000104 <__udivsi3>
 8003368:	0003      	movs	r3, r0
 800336a:	3301      	adds	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800336e:	e008      	b.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3b01      	subs	r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e001      	b.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e009      	b.n	8003396 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003382:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	401a      	ands	r2, r3
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	429a      	cmp	r2, r3
 8003392:	d0ed      	beq.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b004      	add	sp, #16
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	40007000 	.word	0x40007000
 80033a4:	fffff9ff 	.word	0xfffff9ff
 80033a8:	20000080 	.word	0x20000080
 80033ac:	000f4240 	.word	0x000f4240

080033b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	23e0      	movs	r3, #224	@ 0xe0
 80033ba:	01db      	lsls	r3, r3, #7
 80033bc:	4013      	ands	r3, r2
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000

080033c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e2fe      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	4013      	ands	r3, r2
 80033e2:	d100      	bne.n	80033e6 <HAL_RCC_OscConfig+0x1e>
 80033e4:	e07c      	b.n	80034e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e6:	4bc3      	ldr	r3, [pc, #780]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2238      	movs	r2, #56	@ 0x38
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f0:	4bc0      	ldr	r3, [pc, #768]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2203      	movs	r2, #3
 80033f6:	4013      	ands	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d102      	bne.n	8003406 <HAL_RCC_OscConfig+0x3e>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d002      	beq.n	800340c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d10b      	bne.n	8003424 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340c:	4bb9      	ldr	r3, [pc, #740]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	4013      	ands	r3, r2
 8003416:	d062      	beq.n	80034de <HAL_RCC_OscConfig+0x116>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d15e      	bne.n	80034de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e2d9      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	2380      	movs	r3, #128	@ 0x80
 800342a:	025b      	lsls	r3, r3, #9
 800342c:	429a      	cmp	r2, r3
 800342e:	d107      	bne.n	8003440 <HAL_RCC_OscConfig+0x78>
 8003430:	4bb0      	ldr	r3, [pc, #704]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4baf      	ldr	r3, [pc, #700]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003436:	2180      	movs	r1, #128	@ 0x80
 8003438:	0249      	lsls	r1, r1, #9
 800343a:	430a      	orrs	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e020      	b.n	8003482 <HAL_RCC_OscConfig+0xba>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	23a0      	movs	r3, #160	@ 0xa0
 8003446:	02db      	lsls	r3, r3, #11
 8003448:	429a      	cmp	r2, r3
 800344a:	d10e      	bne.n	800346a <HAL_RCC_OscConfig+0xa2>
 800344c:	4ba9      	ldr	r3, [pc, #676]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4ba8      	ldr	r3, [pc, #672]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003452:	2180      	movs	r1, #128	@ 0x80
 8003454:	02c9      	lsls	r1, r1, #11
 8003456:	430a      	orrs	r2, r1
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	4ba6      	ldr	r3, [pc, #664]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4ba5      	ldr	r3, [pc, #660]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003460:	2180      	movs	r1, #128	@ 0x80
 8003462:	0249      	lsls	r1, r1, #9
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e00b      	b.n	8003482 <HAL_RCC_OscConfig+0xba>
 800346a:	4ba2      	ldr	r3, [pc, #648]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4ba1      	ldr	r3, [pc, #644]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003470:	49a1      	ldr	r1, [pc, #644]	@ (80036f8 <HAL_RCC_OscConfig+0x330>)
 8003472:	400a      	ands	r2, r1
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	4b9f      	ldr	r3, [pc, #636]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b9e      	ldr	r3, [pc, #632]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800347c:	499f      	ldr	r1, [pc, #636]	@ (80036fc <HAL_RCC_OscConfig+0x334>)
 800347e:	400a      	ands	r2, r1
 8003480:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d014      	beq.n	80034b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348a:	f7fe fe47 	bl	800211c <HAL_GetTick>
 800348e:	0003      	movs	r3, r0
 8003490:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fe42 	bl	800211c <HAL_GetTick>
 8003498:	0002      	movs	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	@ 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e298      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a6:	4b93      	ldr	r3, [pc, #588]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	2380      	movs	r3, #128	@ 0x80
 80034ac:	029b      	lsls	r3, r3, #10
 80034ae:	4013      	ands	r3, r2
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0xcc>
 80034b2:	e015      	b.n	80034e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe fe32 	bl	800211c <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034be:	f7fe fe2d 	bl	800211c <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	@ 0x64
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e283      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034d0:	4b88      	ldr	r3, [pc, #544]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2380      	movs	r3, #128	@ 0x80
 80034d6:	029b      	lsls	r3, r3, #10
 80034d8:	4013      	ands	r3, r2
 80034da:	d1f0      	bne.n	80034be <HAL_RCC_OscConfig+0xf6>
 80034dc:	e000      	b.n	80034e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2202      	movs	r2, #2
 80034e6:	4013      	ands	r3, r2
 80034e8:	d100      	bne.n	80034ec <HAL_RCC_OscConfig+0x124>
 80034ea:	e099      	b.n	8003620 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ec:	4b81      	ldr	r3, [pc, #516]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2238      	movs	r2, #56	@ 0x38
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f6:	4b7f      	ldr	r3, [pc, #508]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2203      	movs	r2, #3
 80034fc:	4013      	ands	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b10      	cmp	r3, #16
 8003504:	d102      	bne.n	800350c <HAL_RCC_OscConfig+0x144>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d002      	beq.n	8003512 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d135      	bne.n	800357e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003512:	4b78      	ldr	r3, [pc, #480]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4013      	ands	r3, r2
 800351c:	d005      	beq.n	800352a <HAL_RCC_OscConfig+0x162>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e256      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352a:	4b72      	ldr	r3, [pc, #456]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4a74      	ldr	r2, [pc, #464]	@ (8003700 <HAL_RCC_OscConfig+0x338>)
 8003530:	4013      	ands	r3, r2
 8003532:	0019      	movs	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	021a      	lsls	r2, r3, #8
 800353a:	4b6e      	ldr	r3, [pc, #440]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800353c:	430a      	orrs	r2, r1
 800353e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d112      	bne.n	800356c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003546:	4b6b      	ldr	r3, [pc, #428]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a6e      	ldr	r2, [pc, #440]	@ (8003704 <HAL_RCC_OscConfig+0x33c>)
 800354c:	4013      	ands	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	4b67      	ldr	r3, [pc, #412]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800355a:	4b66      	ldr	r3, [pc, #408]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	0adb      	lsrs	r3, r3, #11
 8003560:	2207      	movs	r2, #7
 8003562:	4013      	ands	r3, r2
 8003564:	4a68      	ldr	r2, [pc, #416]	@ (8003708 <HAL_RCC_OscConfig+0x340>)
 8003566:	40da      	lsrs	r2, r3
 8003568:	4b68      	ldr	r3, [pc, #416]	@ (800370c <HAL_RCC_OscConfig+0x344>)
 800356a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800356c:	4b68      	ldr	r3, [pc, #416]	@ (8003710 <HAL_RCC_OscConfig+0x348>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0018      	movs	r0, r3
 8003572:	f7fe fd77 	bl	8002064 <HAL_InitTick>
 8003576:	1e03      	subs	r3, r0, #0
 8003578:	d051      	beq.n	800361e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e22c      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d030      	beq.n	80035e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003586:	4b5b      	ldr	r3, [pc, #364]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a5e      	ldr	r2, [pc, #376]	@ (8003704 <HAL_RCC_OscConfig+0x33c>)
 800358c:	4013      	ands	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	4b57      	ldr	r3, [pc, #348]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800359a:	4b56      	ldr	r3, [pc, #344]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4b55      	ldr	r3, [pc, #340]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80035a0:	2180      	movs	r1, #128	@ 0x80
 80035a2:	0049      	lsls	r1, r1, #1
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fdb8 	bl	800211c <HAL_GetTick>
 80035ac:	0003      	movs	r3, r0
 80035ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b2:	f7fe fdb3 	bl	800211c <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e209      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035c4:	4b4b      	ldr	r3, [pc, #300]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	2380      	movs	r3, #128	@ 0x80
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4013      	ands	r3, r2
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d0:	4b48      	ldr	r3, [pc, #288]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003700 <HAL_RCC_OscConfig+0x338>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	4b44      	ldr	r3, [pc, #272]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	e01b      	b.n	8003620 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80035e8:	4b42      	ldr	r3, [pc, #264]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b41      	ldr	r3, [pc, #260]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80035ee:	4949      	ldr	r1, [pc, #292]	@ (8003714 <HAL_RCC_OscConfig+0x34c>)
 80035f0:	400a      	ands	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe fd92 	bl	800211c <HAL_GetTick>
 80035f8:	0003      	movs	r3, r0
 80035fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fe:	f7fe fd8d 	bl	800211c <HAL_GetTick>
 8003602:	0002      	movs	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e1e3      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003610:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	2380      	movs	r3, #128	@ 0x80
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4013      	ands	r3, r2
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x236>
 800361c:	e000      	b.n	8003620 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800361e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2208      	movs	r2, #8
 8003626:	4013      	ands	r3, r2
 8003628:	d047      	beq.n	80036ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800362a:	4b32      	ldr	r3, [pc, #200]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2238      	movs	r2, #56	@ 0x38
 8003630:	4013      	ands	r3, r2
 8003632:	2b18      	cmp	r3, #24
 8003634:	d10a      	bne.n	800364c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003636:	4b2f      	ldr	r3, [pc, #188]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363a:	2202      	movs	r2, #2
 800363c:	4013      	ands	r3, r2
 800363e:	d03c      	beq.n	80036ba <HAL_RCC_OscConfig+0x2f2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d138      	bne.n	80036ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e1c5      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d019      	beq.n	8003688 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003654:	4b27      	ldr	r3, [pc, #156]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 8003656:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003658:	4b26      	ldr	r3, [pc, #152]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800365a:	2101      	movs	r1, #1
 800365c:	430a      	orrs	r2, r1
 800365e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe fd5c 	bl	800211c <HAL_GetTick>
 8003664:	0003      	movs	r3, r0
 8003666:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800366a:	f7fe fd57 	bl	800211c <HAL_GetTick>
 800366e:	0002      	movs	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1ad      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800367c:	4b1d      	ldr	r3, [pc, #116]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800367e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003680:	2202      	movs	r2, #2
 8003682:	4013      	ands	r3, r2
 8003684:	d0f1      	beq.n	800366a <HAL_RCC_OscConfig+0x2a2>
 8003686:	e018      	b.n	80036ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003688:	4b1a      	ldr	r3, [pc, #104]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800368a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800368c:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 800368e:	2101      	movs	r1, #1
 8003690:	438a      	bics	r2, r1
 8003692:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe fd42 	bl	800211c <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369e:	f7fe fd3d 	bl	800211c <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e193      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036b0:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80036b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b4:	2202      	movs	r2, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	d1f1      	bne.n	800369e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2204      	movs	r2, #4
 80036c0:	4013      	ands	r3, r2
 80036c2:	d100      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2fe>
 80036c4:	e0c6      	b.n	8003854 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c6:	231f      	movs	r3, #31
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80036ce:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2238      	movs	r2, #56	@ 0x38
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d11e      	bne.n	8003718 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_RCC_OscConfig+0x32c>)
 80036dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036de:	2202      	movs	r2, #2
 80036e0:	4013      	ands	r3, r2
 80036e2:	d100      	bne.n	80036e6 <HAL_RCC_OscConfig+0x31e>
 80036e4:	e0b6      	b.n	8003854 <HAL_RCC_OscConfig+0x48c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d000      	beq.n	80036f0 <HAL_RCC_OscConfig+0x328>
 80036ee:	e0b1      	b.n	8003854 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e171      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
 80036f4:	40021000 	.word	0x40021000
 80036f8:	fffeffff 	.word	0xfffeffff
 80036fc:	fffbffff 	.word	0xfffbffff
 8003700:	ffff80ff 	.word	0xffff80ff
 8003704:	ffffc7ff 	.word	0xffffc7ff
 8003708:	00f42400 	.word	0x00f42400
 800370c:	20000080 	.word	0x20000080
 8003710:	20000084 	.word	0x20000084
 8003714:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003718:	4bb1      	ldr	r3, [pc, #708]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 800371a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800371c:	2380      	movs	r3, #128	@ 0x80
 800371e:	055b      	lsls	r3, r3, #21
 8003720:	4013      	ands	r3, r2
 8003722:	d101      	bne.n	8003728 <HAL_RCC_OscConfig+0x360>
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x362>
 8003728:	2300      	movs	r3, #0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d011      	beq.n	8003752 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	4bac      	ldr	r3, [pc, #688]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 8003730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003732:	4bab      	ldr	r3, [pc, #684]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 8003734:	2180      	movs	r1, #128	@ 0x80
 8003736:	0549      	lsls	r1, r1, #21
 8003738:	430a      	orrs	r2, r1
 800373a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800373c:	4ba8      	ldr	r3, [pc, #672]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 800373e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003740:	2380      	movs	r3, #128	@ 0x80
 8003742:	055b      	lsls	r3, r3, #21
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800374a:	231f      	movs	r3, #31
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003752:	4ba4      	ldr	r3, [pc, #656]	@ (80039e4 <HAL_RCC_OscConfig+0x61c>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	2380      	movs	r3, #128	@ 0x80
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4013      	ands	r3, r2
 800375c:	d11a      	bne.n	8003794 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800375e:	4ba1      	ldr	r3, [pc, #644]	@ (80039e4 <HAL_RCC_OscConfig+0x61c>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4ba0      	ldr	r3, [pc, #640]	@ (80039e4 <HAL_RCC_OscConfig+0x61c>)
 8003764:	2180      	movs	r1, #128	@ 0x80
 8003766:	0049      	lsls	r1, r1, #1
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800376c:	f7fe fcd6 	bl	800211c <HAL_GetTick>
 8003770:	0003      	movs	r3, r0
 8003772:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fe fcd1 	bl	800211c <HAL_GetTick>
 800377a:	0002      	movs	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e127      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003788:	4b96      	ldr	r3, [pc, #600]	@ (80039e4 <HAL_RCC_OscConfig+0x61c>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	2380      	movs	r3, #128	@ 0x80
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4013      	ands	r3, r2
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x3e2>
 800379c:	4b90      	ldr	r3, [pc, #576]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 800379e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037a0:	4b8f      	ldr	r3, [pc, #572]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80037a2:	2101      	movs	r1, #1
 80037a4:	430a      	orrs	r2, r1
 80037a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x41c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x404>
 80037b2:	4b8b      	ldr	r3, [pc, #556]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80037b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037b6:	4b8a      	ldr	r3, [pc, #552]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80037b8:	2104      	movs	r1, #4
 80037ba:	430a      	orrs	r2, r1
 80037bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037be:	4b88      	ldr	r3, [pc, #544]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80037c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037c2:	4b87      	ldr	r3, [pc, #540]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80037c4:	2101      	movs	r1, #1
 80037c6:	430a      	orrs	r2, r1
 80037c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0x41c>
 80037cc:	4b84      	ldr	r3, [pc, #528]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80037ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037d0:	4b83      	ldr	r3, [pc, #524]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80037d2:	2101      	movs	r1, #1
 80037d4:	438a      	bics	r2, r1
 80037d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037d8:	4b81      	ldr	r3, [pc, #516]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80037da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037dc:	4b80      	ldr	r3, [pc, #512]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80037de:	2104      	movs	r1, #4
 80037e0:	438a      	bics	r2, r1
 80037e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d014      	beq.n	8003816 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fc96 	bl	800211c <HAL_GetTick>
 80037f0:	0003      	movs	r3, r0
 80037f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f4:	e009      	b.n	800380a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fe fc91 	bl	800211c <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	4a79      	ldr	r2, [pc, #484]	@ (80039e8 <HAL_RCC_OscConfig+0x620>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0e6      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380a:	4b75      	ldr	r3, [pc, #468]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 800380c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380e:	2202      	movs	r2, #2
 8003810:	4013      	ands	r3, r2
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x42e>
 8003814:	e013      	b.n	800383e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003816:	f7fe fc81 	bl	800211c <HAL_GetTick>
 800381a:	0003      	movs	r3, r0
 800381c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800381e:	e009      	b.n	8003834 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fe fc7c 	bl	800211c <HAL_GetTick>
 8003824:	0002      	movs	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	4a6f      	ldr	r2, [pc, #444]	@ (80039e8 <HAL_RCC_OscConfig+0x620>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0d1      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003834:	4b6a      	ldr	r3, [pc, #424]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 8003836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003838:	2202      	movs	r2, #2
 800383a:	4013      	ands	r3, r2
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800383e:	231f      	movs	r3, #31
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b65      	ldr	r3, [pc, #404]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 800384a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800384c:	4b64      	ldr	r3, [pc, #400]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 800384e:	4967      	ldr	r1, [pc, #412]	@ (80039ec <HAL_RCC_OscConfig+0x624>)
 8003850:	400a      	ands	r2, r1
 8003852:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d100      	bne.n	800385e <HAL_RCC_OscConfig+0x496>
 800385c:	e0bb      	b.n	80039d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800385e:	4b60      	ldr	r3, [pc, #384]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2238      	movs	r2, #56	@ 0x38
 8003864:	4013      	ands	r3, r2
 8003866:	2b10      	cmp	r3, #16
 8003868:	d100      	bne.n	800386c <HAL_RCC_OscConfig+0x4a4>
 800386a:	e07b      	b.n	8003964 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d156      	bne.n	8003922 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b5a      	ldr	r3, [pc, #360]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b59      	ldr	r3, [pc, #356]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 800387a:	495d      	ldr	r1, [pc, #372]	@ (80039f0 <HAL_RCC_OscConfig+0x628>)
 800387c:	400a      	ands	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fe fc4c 	bl	800211c <HAL_GetTick>
 8003884:	0003      	movs	r3, r0
 8003886:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388a:	f7fe fc47 	bl	800211c <HAL_GetTick>
 800388e:	0002      	movs	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e09d      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800389c:	4b50      	ldr	r3, [pc, #320]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	2380      	movs	r3, #128	@ 0x80
 80038a2:	049b      	lsls	r3, r3, #18
 80038a4:	4013      	ands	r3, r2
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a8:	4b4d      	ldr	r3, [pc, #308]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a51      	ldr	r2, [pc, #324]	@ (80039f4 <HAL_RCC_OscConfig+0x62c>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1a      	ldr	r2, [r3, #32]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d4:	431a      	orrs	r2, r3
 80038d6:	4b42      	ldr	r3, [pc, #264]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80038d8:	430a      	orrs	r2, r1
 80038da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038dc:	4b40      	ldr	r3, [pc, #256]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b3f      	ldr	r3, [pc, #252]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80038e2:	2180      	movs	r1, #128	@ 0x80
 80038e4:	0449      	lsls	r1, r1, #17
 80038e6:	430a      	orrs	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80038ea:	4b3d      	ldr	r3, [pc, #244]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	4b3c      	ldr	r3, [pc, #240]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 80038f0:	2180      	movs	r1, #128	@ 0x80
 80038f2:	0549      	lsls	r1, r1, #21
 80038f4:	430a      	orrs	r2, r1
 80038f6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe fc10 	bl	800211c <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003902:	f7fe fc0b 	bl	800211c <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e061      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003914:	4b32      	ldr	r3, [pc, #200]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	049b      	lsls	r3, r3, #18
 800391c:	4013      	ands	r3, r2
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x53a>
 8003920:	e059      	b.n	80039d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b2f      	ldr	r3, [pc, #188]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b2e      	ldr	r3, [pc, #184]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 8003928:	4931      	ldr	r1, [pc, #196]	@ (80039f0 <HAL_RCC_OscConfig+0x628>)
 800392a:	400a      	ands	r2, r1
 800392c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fe fbf5 	bl	800211c <HAL_GetTick>
 8003932:	0003      	movs	r3, r0
 8003934:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003938:	f7fe fbf0 	bl	800211c <HAL_GetTick>
 800393c:	0002      	movs	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e046      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394a:	4b25      	ldr	r3, [pc, #148]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	049b      	lsls	r3, r3, #18
 8003952:	4013      	ands	r3, r2
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003956:	4b22      	ldr	r3, [pc, #136]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	4b21      	ldr	r3, [pc, #132]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 800395c:	4926      	ldr	r1, [pc, #152]	@ (80039f8 <HAL_RCC_OscConfig+0x630>)
 800395e:	400a      	ands	r2, r1
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	e038      	b.n	80039d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e033      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003970:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <HAL_RCC_OscConfig+0x618>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2203      	movs	r2, #3
 800397a:	401a      	ands	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	429a      	cmp	r2, r3
 8003982:	d126      	bne.n	80039d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2270      	movs	r2, #112	@ 0x70
 8003988:	401a      	ands	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d11f      	bne.n	80039d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	23fe      	movs	r3, #254	@ 0xfe
 8003996:	01db      	lsls	r3, r3, #7
 8003998:	401a      	ands	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d116      	bne.n	80039d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	23f8      	movs	r3, #248	@ 0xf8
 80039a8:	039b      	lsls	r3, r3, #14
 80039aa:	401a      	ands	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d10e      	bne.n	80039d2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	23e0      	movs	r3, #224	@ 0xe0
 80039b8:	051b      	lsls	r3, r3, #20
 80039ba:	401a      	ands	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d106      	bne.n	80039d2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	0f5b      	lsrs	r3, r3, #29
 80039c8:	075a      	lsls	r2, r3, #29
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d001      	beq.n	80039d6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b008      	add	sp, #32
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40007000 	.word	0x40007000
 80039e8:	00001388 	.word	0x00001388
 80039ec:	efffffff 	.word	0xefffffff
 80039f0:	feffffff 	.word	0xfeffffff
 80039f4:	11c1808c 	.word	0x11c1808c
 80039f8:	eefefffc 	.word	0xeefefffc

080039fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0e9      	b.n	8003be4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a10:	4b76      	ldr	r3, [pc, #472]	@ (8003bec <HAL_RCC_ClockConfig+0x1f0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2207      	movs	r2, #7
 8003a16:	4013      	ands	r3, r2
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d91e      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b73      	ldr	r3, [pc, #460]	@ (8003bec <HAL_RCC_ClockConfig+0x1f0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2207      	movs	r2, #7
 8003a24:	4393      	bics	r3, r2
 8003a26:	0019      	movs	r1, r3
 8003a28:	4b70      	ldr	r3, [pc, #448]	@ (8003bec <HAL_RCC_ClockConfig+0x1f0>)
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a30:	f7fe fb74 	bl	800211c <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a38:	e009      	b.n	8003a4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3a:	f7fe fb6f 	bl	800211c <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	4a6a      	ldr	r2, [pc, #424]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0ca      	b.n	8003be4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a4e:	4b67      	ldr	r3, [pc, #412]	@ (8003bec <HAL_RCC_ClockConfig+0x1f0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2207      	movs	r2, #7
 8003a54:	4013      	ands	r3, r2
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d1ee      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2202      	movs	r2, #2
 8003a62:	4013      	ands	r3, r2
 8003a64:	d015      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d006      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a70:	4b60      	ldr	r3, [pc, #384]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003a76:	21e0      	movs	r1, #224	@ 0xe0
 8003a78:	01c9      	lsls	r1, r1, #7
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	4a5d      	ldr	r2, [pc, #372]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1fc>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	0019      	movs	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	4b59      	ldr	r3, [pc, #356]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2201      	movs	r2, #1
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d057      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa4:	4b53      	ldr	r3, [pc, #332]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	2380      	movs	r3, #128	@ 0x80
 8003aaa:	029b      	lsls	r3, r3, #10
 8003aac:	4013      	ands	r3, r2
 8003aae:	d12b      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e097      	b.n	8003be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abc:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	049b      	lsls	r3, r3, #18
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d11f      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e08b      	b.n	8003be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad4:	4b47      	ldr	r3, [pc, #284]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4013      	ands	r3, r2
 8003ade:	d113      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e07f      	b.n	8003be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aec:	4b41      	ldr	r3, [pc, #260]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af0:	2202      	movs	r2, #2
 8003af2:	4013      	ands	r3, r2
 8003af4:	d108      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e074      	b.n	8003be4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afa:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	2202      	movs	r2, #2
 8003b00:	4013      	ands	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e06d      	b.n	8003be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b08:	4b3a      	ldr	r3, [pc, #232]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	4393      	bics	r3, r2
 8003b10:	0019      	movs	r1, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	4b37      	ldr	r3, [pc, #220]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fe fafe 	bl	800211c <HAL_GetTick>
 8003b20:	0003      	movs	r3, r0
 8003b22:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b24:	e009      	b.n	8003b3a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b26:	f7fe faf9 	bl	800211c <HAL_GetTick>
 8003b2a:	0002      	movs	r2, r0
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	4a2f      	ldr	r2, [pc, #188]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e054      	b.n	8003be4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2238      	movs	r2, #56	@ 0x38
 8003b40:	401a      	ands	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d1ec      	bne.n	8003b26 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b27      	ldr	r3, [pc, #156]	@ (8003bec <HAL_RCC_ClockConfig+0x1f0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2207      	movs	r2, #7
 8003b52:	4013      	ands	r3, r2
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d21e      	bcs.n	8003b98 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b24      	ldr	r3, [pc, #144]	@ (8003bec <HAL_RCC_ClockConfig+0x1f0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2207      	movs	r2, #7
 8003b60:	4393      	bics	r3, r2
 8003b62:	0019      	movs	r1, r3
 8003b64:	4b21      	ldr	r3, [pc, #132]	@ (8003bec <HAL_RCC_ClockConfig+0x1f0>)
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b6c:	f7fe fad6 	bl	800211c <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b74:	e009      	b.n	8003b8a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b76:	f7fe fad1 	bl	800211c <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e02c      	b.n	8003be4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b8a:	4b18      	ldr	r3, [pc, #96]	@ (8003bec <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2207      	movs	r2, #7
 8003b90:	4013      	ands	r3, r2
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba2:	4b14      	ldr	r3, [pc, #80]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	4a15      	ldr	r2, [pc, #84]	@ (8003bfc <HAL_RCC_ClockConfig+0x200>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	4b10      	ldr	r3, [pc, #64]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003bb6:	f000 f829 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003bba:	0001      	movs	r1, r0
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	220f      	movs	r2, #15
 8003bc4:	401a      	ands	r2, r3
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c00 <HAL_RCC_ClockConfig+0x204>)
 8003bc8:	0092      	lsls	r2, r2, #2
 8003bca:	58d3      	ldr	r3, [r2, r3]
 8003bcc:	221f      	movs	r2, #31
 8003bce:	4013      	ands	r3, r2
 8003bd0:	000a      	movs	r2, r1
 8003bd2:	40da      	lsrs	r2, r3
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <HAL_RCC_ClockConfig+0x208>)
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <HAL_RCC_ClockConfig+0x20c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7fe fa41 	bl	8002064 <HAL_InitTick>
 8003be2:	0003      	movs	r3, r0
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b004      	add	sp, #16
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40022000 	.word	0x40022000
 8003bf0:	00001388 	.word	0x00001388
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	fffff0ff 	.word	0xfffff0ff
 8003bfc:	ffff8fff 	.word	0xffff8fff
 8003c00:	08007454 	.word	0x08007454
 8003c04:	20000080 	.word	0x20000080
 8003c08:	20000084 	.word	0x20000084

08003c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c12:	4b3c      	ldr	r3, [pc, #240]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2238      	movs	r2, #56	@ 0x38
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d10f      	bne.n	8003c3c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003c1c:	4b39      	ldr	r3, [pc, #228]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0adb      	lsrs	r3, r3, #11
 8003c22:	2207      	movs	r2, #7
 8003c24:	4013      	ands	r3, r2
 8003c26:	2201      	movs	r2, #1
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	0013      	movs	r3, r2
 8003c2c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003c2e:	6839      	ldr	r1, [r7, #0]
 8003c30:	4835      	ldr	r0, [pc, #212]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c32:	f7fc fa67 	bl	8000104 <__udivsi3>
 8003c36:	0003      	movs	r3, r0
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	e05d      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c3c:	4b31      	ldr	r3, [pc, #196]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2238      	movs	r2, #56	@ 0x38
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d102      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c48:	4b30      	ldr	r3, [pc, #192]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x100>)
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	e054      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2238      	movs	r2, #56	@ 0x38
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d138      	bne.n	8003ccc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2203      	movs	r2, #3
 8003c60:	4013      	ands	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c64:	4b27      	ldr	r3, [pc, #156]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	2207      	movs	r2, #7
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d10d      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	4824      	ldr	r0, [pc, #144]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x100>)
 8003c7c:	f7fc fa42 	bl	8000104 <__udivsi3>
 8003c80:	0003      	movs	r3, r0
 8003c82:	0019      	movs	r1, r3
 8003c84:	4b1f      	ldr	r3, [pc, #124]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	227f      	movs	r2, #127	@ 0x7f
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	434b      	muls	r3, r1
 8003c90:	617b      	str	r3, [r7, #20]
        break;
 8003c92:	e00d      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	481c      	ldr	r0, [pc, #112]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c98:	f7fc fa34 	bl	8000104 <__udivsi3>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	4b18      	ldr	r3, [pc, #96]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	227f      	movs	r2, #127	@ 0x7f
 8003ca8:	4013      	ands	r3, r2
 8003caa:	434b      	muls	r3, r1
 8003cac:	617b      	str	r3, [r7, #20]
        break;
 8003cae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003cb0:	4b14      	ldr	r3, [pc, #80]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	0f5b      	lsrs	r3, r3, #29
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	4013      	ands	r3, r2
 8003cba:	3301      	adds	r3, #1
 8003cbc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	6978      	ldr	r0, [r7, #20]
 8003cc2:	f7fc fa1f 	bl	8000104 <__udivsi3>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	e015      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2238      	movs	r2, #56	@ 0x38
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d103      	bne.n	8003ce0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003cd8:	2380      	movs	r3, #128	@ 0x80
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ce0:	4b08      	ldr	r3, [pc, #32]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2238      	movs	r2, #56	@ 0x38
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b18      	cmp	r3, #24
 8003cea:	d103      	bne.n	8003cf4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003cec:	23fa      	movs	r3, #250	@ 0xfa
 8003cee:	01db      	lsls	r3, r3, #7
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e001      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cf8:	693b      	ldr	r3, [r7, #16]
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b006      	add	sp, #24
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	40021000 	.word	0x40021000
 8003d08:	00f42400 	.word	0x00f42400
 8003d0c:	007a1200 	.word	0x007a1200

08003d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d14:	4b02      	ldr	r3, [pc, #8]	@ (8003d20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d16:	681b      	ldr	r3, [r3, #0]
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	20000080 	.word	0x20000080

08003d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d24:	b5b0      	push	{r4, r5, r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d28:	f7ff fff2 	bl	8003d10 <HAL_RCC_GetHCLKFreq>
 8003d2c:	0004      	movs	r4, r0
 8003d2e:	f7ff fb3f 	bl	80033b0 <LL_RCC_GetAPB1Prescaler>
 8003d32:	0003      	movs	r3, r0
 8003d34:	0b1a      	lsrs	r2, r3, #12
 8003d36:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d38:	0092      	lsls	r2, r2, #2
 8003d3a:	58d3      	ldr	r3, [r2, r3]
 8003d3c:	221f      	movs	r2, #31
 8003d3e:	4013      	ands	r3, r2
 8003d40:	40dc      	lsrs	r4, r3
 8003d42:	0023      	movs	r3, r4
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	08007494 	.word	0x08007494

08003d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e04a      	b.n	8003df8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	223d      	movs	r2, #61	@ 0x3d
 8003d66:	5c9b      	ldrb	r3, [r3, r2]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	223c      	movs	r2, #60	@ 0x3c
 8003d72:	2100      	movs	r1, #0
 8003d74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7fe f853 	bl	8001e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	223d      	movs	r2, #61	@ 0x3d
 8003d82:	2102      	movs	r1, #2
 8003d84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	0019      	movs	r1, r3
 8003d90:	0010      	movs	r0, r2
 8003d92:	f000 fb49 	bl	8004428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2248      	movs	r2, #72	@ 0x48
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	223e      	movs	r2, #62	@ 0x3e
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	223f      	movs	r2, #63	@ 0x3f
 8003daa:	2101      	movs	r1, #1
 8003dac:	5499      	strb	r1, [r3, r2]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2240      	movs	r2, #64	@ 0x40
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2241      	movs	r2, #65	@ 0x41
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2242      	movs	r2, #66	@ 0x42
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2243      	movs	r2, #67	@ 0x43
 8003dca:	2101      	movs	r1, #1
 8003dcc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2244      	movs	r2, #68	@ 0x44
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2245      	movs	r2, #69	@ 0x45
 8003dda:	2101      	movs	r1, #1
 8003ddc:	5499      	strb	r1, [r3, r2]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2246      	movs	r2, #70	@ 0x46
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2247      	movs	r2, #71	@ 0x47
 8003dea:	2101      	movs	r1, #1
 8003dec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	223d      	movs	r2, #61	@ 0x3d
 8003df2:	2101      	movs	r1, #1
 8003df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b002      	add	sp, #8
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e04a      	b.n	8003ea8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	223d      	movs	r2, #61	@ 0x3d
 8003e16:	5c9b      	ldrb	r3, [r3, r2]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	223c      	movs	r2, #60	@ 0x3c
 8003e22:	2100      	movs	r1, #0
 8003e24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f000 f841 	bl	8003eb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	223d      	movs	r2, #61	@ 0x3d
 8003e32:	2102      	movs	r1, #2
 8003e34:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	0019      	movs	r1, r3
 8003e40:	0010      	movs	r0, r2
 8003e42:	f000 faf1 	bl	8004428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2248      	movs	r2, #72	@ 0x48
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	223e      	movs	r2, #62	@ 0x3e
 8003e52:	2101      	movs	r1, #1
 8003e54:	5499      	strb	r1, [r3, r2]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	223f      	movs	r2, #63	@ 0x3f
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	5499      	strb	r1, [r3, r2]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2240      	movs	r2, #64	@ 0x40
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2241      	movs	r2, #65	@ 0x41
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2242      	movs	r2, #66	@ 0x42
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2243      	movs	r2, #67	@ 0x43
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2244      	movs	r2, #68	@ 0x44
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2245      	movs	r2, #69	@ 0x45
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2246      	movs	r2, #70	@ 0x46
 8003e92:	2101      	movs	r1, #1
 8003e94:	5499      	strb	r1, [r3, r2]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2247      	movs	r2, #71	@ 0x47
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	223d      	movs	r2, #61	@ 0x3d
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b002      	add	sp, #8
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003eb8:	46c0      	nop			@ (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d108      	bne.n	8003ee2 <HAL_TIM_PWM_Start+0x22>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	223e      	movs	r2, #62	@ 0x3e
 8003ed4:	5c9b      	ldrb	r3, [r3, r2]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	1e5a      	subs	r2, r3, #1
 8003edc:	4193      	sbcs	r3, r2
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	e037      	b.n	8003f52 <HAL_TIM_PWM_Start+0x92>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d108      	bne.n	8003efa <HAL_TIM_PWM_Start+0x3a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	223f      	movs	r2, #63	@ 0x3f
 8003eec:	5c9b      	ldrb	r3, [r3, r2]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	4193      	sbcs	r3, r2
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	e02b      	b.n	8003f52 <HAL_TIM_PWM_Start+0x92>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d108      	bne.n	8003f12 <HAL_TIM_PWM_Start+0x52>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2240      	movs	r2, #64	@ 0x40
 8003f04:	5c9b      	ldrb	r3, [r3, r2]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	1e5a      	subs	r2, r3, #1
 8003f0c:	4193      	sbcs	r3, r2
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	e01f      	b.n	8003f52 <HAL_TIM_PWM_Start+0x92>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b0c      	cmp	r3, #12
 8003f16:	d108      	bne.n	8003f2a <HAL_TIM_PWM_Start+0x6a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2241      	movs	r2, #65	@ 0x41
 8003f1c:	5c9b      	ldrb	r3, [r3, r2]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	1e5a      	subs	r2, r3, #1
 8003f24:	4193      	sbcs	r3, r2
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	e013      	b.n	8003f52 <HAL_TIM_PWM_Start+0x92>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d108      	bne.n	8003f42 <HAL_TIM_PWM_Start+0x82>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2242      	movs	r2, #66	@ 0x42
 8003f34:	5c9b      	ldrb	r3, [r3, r2]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	1e5a      	subs	r2, r3, #1
 8003f3c:	4193      	sbcs	r3, r2
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	e007      	b.n	8003f52 <HAL_TIM_PWM_Start+0x92>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2243      	movs	r2, #67	@ 0x43
 8003f46:	5c9b      	ldrb	r3, [r3, r2]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	1e5a      	subs	r2, r3, #1
 8003f4e:	4193      	sbcs	r3, r2
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e081      	b.n	800405e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <HAL_TIM_PWM_Start+0xaa>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	223e      	movs	r2, #62	@ 0x3e
 8003f64:	2102      	movs	r1, #2
 8003f66:	5499      	strb	r1, [r3, r2]
 8003f68:	e023      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xf2>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_PWM_Start+0xba>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	223f      	movs	r2, #63	@ 0x3f
 8003f74:	2102      	movs	r1, #2
 8003f76:	5499      	strb	r1, [r3, r2]
 8003f78:	e01b      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xf2>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_PWM_Start+0xca>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2240      	movs	r2, #64	@ 0x40
 8003f84:	2102      	movs	r1, #2
 8003f86:	5499      	strb	r1, [r3, r2]
 8003f88:	e013      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xf2>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Start+0xda>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2241      	movs	r2, #65	@ 0x41
 8003f94:	2102      	movs	r1, #2
 8003f96:	5499      	strb	r1, [r3, r2]
 8003f98:	e00b      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xf2>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Start+0xea>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2242      	movs	r2, #66	@ 0x42
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	5499      	strb	r1, [r3, r2]
 8003fa8:	e003      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xf2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2243      	movs	r2, #67	@ 0x43
 8003fae:	2102      	movs	r1, #2
 8003fb0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6839      	ldr	r1, [r7, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f000 fdf0 	bl	8004ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a28      	ldr	r2, [pc, #160]	@ (8004068 <HAL_TIM_PWM_Start+0x1a8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_TIM_PWM_Start+0x11e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a27      	ldr	r2, [pc, #156]	@ (800406c <HAL_TIM_PWM_Start+0x1ac>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIM_PWM_Start+0x11e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a25      	ldr	r2, [pc, #148]	@ (8004070 <HAL_TIM_PWM_Start+0x1b0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0x122>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_TIM_PWM_Start+0x124>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2180      	movs	r1, #128	@ 0x80
 8003ff4:	0209      	lsls	r1, r1, #8
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8004068 <HAL_TIM_PWM_Start+0x1a8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00a      	beq.n	800401a <HAL_TIM_PWM_Start+0x15a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	2380      	movs	r3, #128	@ 0x80
 800400a:	05db      	lsls	r3, r3, #23
 800400c:	429a      	cmp	r2, r3
 800400e:	d004      	beq.n	800401a <HAL_TIM_PWM_Start+0x15a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a17      	ldr	r2, [pc, #92]	@ (8004074 <HAL_TIM_PWM_Start+0x1b4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d116      	bne.n	8004048 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4a15      	ldr	r2, [pc, #84]	@ (8004078 <HAL_TIM_PWM_Start+0x1b8>)
 8004022:	4013      	ands	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b06      	cmp	r3, #6
 800402a:	d016      	beq.n	800405a <HAL_TIM_PWM_Start+0x19a>
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	2380      	movs	r3, #128	@ 0x80
 8004030:	025b      	lsls	r3, r3, #9
 8004032:	429a      	cmp	r2, r3
 8004034:	d011      	beq.n	800405a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2101      	movs	r1, #1
 8004042:	430a      	orrs	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	e008      	b.n	800405a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2101      	movs	r1, #1
 8004054:	430a      	orrs	r2, r1
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e000      	b.n	800405c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	b004      	add	sp, #16
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800
 8004074:	40000400 	.word	0x40000400
 8004078:	00010007 	.word	0x00010007

0800407c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004088:	2317      	movs	r3, #23
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	223c      	movs	r2, #60	@ 0x3c
 8004094:	5c9b      	ldrb	r3, [r3, r2]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_TIM_PWM_ConfigChannel+0x22>
 800409a:	2302      	movs	r3, #2
 800409c:	e0e5      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	223c      	movs	r2, #60	@ 0x3c
 80040a2:	2101      	movs	r1, #1
 80040a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b14      	cmp	r3, #20
 80040aa:	d900      	bls.n	80040ae <HAL_TIM_PWM_ConfigChannel+0x32>
 80040ac:	e0d1      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	009a      	lsls	r2, r3, #2
 80040b2:	4b70      	ldr	r3, [pc, #448]	@ (8004274 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80040b4:	18d3      	adds	r3, r2, r3
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	0011      	movs	r1, r2
 80040c2:	0018      	movs	r0, r3
 80040c4:	f000 fa34 	bl	8004530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2108      	movs	r1, #8
 80040d4:	430a      	orrs	r2, r1
 80040d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2104      	movs	r1, #4
 80040e4:	438a      	bics	r2, r1
 80040e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6999      	ldr	r1, [r3, #24]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	619a      	str	r2, [r3, #24]
      break;
 80040fa:	e0af      	b.n	800425c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	0011      	movs	r1, r2
 8004104:	0018      	movs	r0, r3
 8004106:	f000 fa93 	bl	8004630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699a      	ldr	r2, [r3, #24]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2180      	movs	r1, #128	@ 0x80
 8004116:	0109      	lsls	r1, r1, #4
 8004118:	430a      	orrs	r2, r1
 800411a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4954      	ldr	r1, [pc, #336]	@ (8004278 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004128:	400a      	ands	r2, r1
 800412a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6999      	ldr	r1, [r3, #24]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	021a      	lsls	r2, r3, #8
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	619a      	str	r2, [r3, #24]
      break;
 8004140:	e08c      	b.n	800425c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	0011      	movs	r1, r2
 800414a:	0018      	movs	r0, r3
 800414c:	f000 faee 	bl	800472c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2108      	movs	r1, #8
 800415c:	430a      	orrs	r2, r1
 800415e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2104      	movs	r1, #4
 800416c:	438a      	bics	r2, r1
 800416e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69d9      	ldr	r1, [r3, #28]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	61da      	str	r2, [r3, #28]
      break;
 8004182:	e06b      	b.n	800425c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	0011      	movs	r1, r2
 800418c:	0018      	movs	r0, r3
 800418e:	f000 fb4f 	bl	8004830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2180      	movs	r1, #128	@ 0x80
 800419e:	0109      	lsls	r1, r1, #4
 80041a0:	430a      	orrs	r2, r1
 80041a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4932      	ldr	r1, [pc, #200]	@ (8004278 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80041b0:	400a      	ands	r2, r1
 80041b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69d9      	ldr	r1, [r3, #28]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	021a      	lsls	r2, r3, #8
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	61da      	str	r2, [r3, #28]
      break;
 80041c8:	e048      	b.n	800425c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	0011      	movs	r1, r2
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 fb90 	bl	80048f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2108      	movs	r1, #8
 80041e4:	430a      	orrs	r2, r1
 80041e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2104      	movs	r1, #4
 80041f4:	438a      	bics	r2, r1
 80041f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800420a:	e027      	b.n	800425c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	0011      	movs	r1, r2
 8004214:	0018      	movs	r0, r3
 8004216:	f000 fbc9 	bl	80049ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2180      	movs	r1, #128	@ 0x80
 8004226:	0109      	lsls	r1, r1, #4
 8004228:	430a      	orrs	r2, r1
 800422a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4910      	ldr	r1, [pc, #64]	@ (8004278 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004238:	400a      	ands	r2, r1
 800423a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	021a      	lsls	r2, r3, #8
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004250:	e004      	b.n	800425c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004252:	2317      	movs	r3, #23
 8004254:	18fb      	adds	r3, r7, r3
 8004256:	2201      	movs	r2, #1
 8004258:	701a      	strb	r2, [r3, #0]
      break;
 800425a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	223c      	movs	r2, #60	@ 0x3c
 8004260:	2100      	movs	r1, #0
 8004262:	5499      	strb	r1, [r3, r2]

  return status;
 8004264:	2317      	movs	r3, #23
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	781b      	ldrb	r3, [r3, #0]
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b006      	add	sp, #24
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	080074b4 	.word	0x080074b4
 8004278:	fffffbff 	.word	0xfffffbff

0800427c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	230f      	movs	r3, #15
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	223c      	movs	r2, #60	@ 0x3c
 8004292:	5c9b      	ldrb	r3, [r3, r2]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_TIM_ConfigClockSource+0x20>
 8004298:	2302      	movs	r3, #2
 800429a:	e0bc      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x19a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	223c      	movs	r2, #60	@ 0x3c
 80042a0:	2101      	movs	r1, #1
 80042a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	223d      	movs	r2, #61	@ 0x3d
 80042a8:	2102      	movs	r1, #2
 80042aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4a5a      	ldr	r2, [pc, #360]	@ (8004420 <HAL_TIM_ConfigClockSource+0x1a4>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a59      	ldr	r2, [pc, #356]	@ (8004424 <HAL_TIM_ConfigClockSource+0x1a8>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2280      	movs	r2, #128	@ 0x80
 80042d2:	0192      	lsls	r2, r2, #6
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d040      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xde>
 80042d8:	2280      	movs	r2, #128	@ 0x80
 80042da:	0192      	lsls	r2, r2, #6
 80042dc:	4293      	cmp	r3, r2
 80042de:	d900      	bls.n	80042e2 <HAL_TIM_ConfigClockSource+0x66>
 80042e0:	e088      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x178>
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	0152      	lsls	r2, r2, #5
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d100      	bne.n	80042ec <HAL_TIM_ConfigClockSource+0x70>
 80042ea:	e088      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x182>
 80042ec:	2280      	movs	r2, #128	@ 0x80
 80042ee:	0152      	lsls	r2, r2, #5
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d900      	bls.n	80042f6 <HAL_TIM_ConfigClockSource+0x7a>
 80042f4:	e07e      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x178>
 80042f6:	2b70      	cmp	r3, #112	@ 0x70
 80042f8:	d018      	beq.n	800432c <HAL_TIM_ConfigClockSource+0xb0>
 80042fa:	d900      	bls.n	80042fe <HAL_TIM_ConfigClockSource+0x82>
 80042fc:	e07a      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x178>
 80042fe:	2b60      	cmp	r3, #96	@ 0x60
 8004300:	d04f      	beq.n	80043a2 <HAL_TIM_ConfigClockSource+0x126>
 8004302:	d900      	bls.n	8004306 <HAL_TIM_ConfigClockSource+0x8a>
 8004304:	e076      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x178>
 8004306:	2b50      	cmp	r3, #80	@ 0x50
 8004308:	d03b      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x106>
 800430a:	d900      	bls.n	800430e <HAL_TIM_ConfigClockSource+0x92>
 800430c:	e072      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x178>
 800430e:	2b40      	cmp	r3, #64	@ 0x40
 8004310:	d057      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x146>
 8004312:	d900      	bls.n	8004316 <HAL_TIM_ConfigClockSource+0x9a>
 8004314:	e06e      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x178>
 8004316:	2b30      	cmp	r3, #48	@ 0x30
 8004318:	d063      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x166>
 800431a:	d86b      	bhi.n	80043f4 <HAL_TIM_ConfigClockSource+0x178>
 800431c:	2b20      	cmp	r3, #32
 800431e:	d060      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x166>
 8004320:	d868      	bhi.n	80043f4 <HAL_TIM_ConfigClockSource+0x178>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d05d      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x166>
 8004326:	2b10      	cmp	r3, #16
 8004328:	d05b      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x166>
 800432a:	e063      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800433c:	f000 fc10 	bl	8004b60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2277      	movs	r2, #119	@ 0x77
 800434c:	4313      	orrs	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	609a      	str	r2, [r3, #8]
      break;
 8004358:	e052      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	f000 fbf9 	bl	8004b60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2180      	movs	r1, #128	@ 0x80
 800437a:	01c9      	lsls	r1, r1, #7
 800437c:	430a      	orrs	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
      break;
 8004380:	e03e      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800438e:	001a      	movs	r2, r3
 8004390:	f000 fb6a 	bl	8004a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2150      	movs	r1, #80	@ 0x50
 800439a:	0018      	movs	r0, r3
 800439c:	f000 fbc4 	bl	8004b28 <TIM_ITRx_SetConfig>
      break;
 80043a0:	e02e      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ae:	001a      	movs	r2, r3
 80043b0:	f000 fb88 	bl	8004ac4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2160      	movs	r1, #96	@ 0x60
 80043ba:	0018      	movs	r0, r3
 80043bc:	f000 fbb4 	bl	8004b28 <TIM_ITRx_SetConfig>
      break;
 80043c0:	e01e      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	001a      	movs	r2, r3
 80043d0:	f000 fb4a 	bl	8004a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2140      	movs	r1, #64	@ 0x40
 80043da:	0018      	movs	r0, r3
 80043dc:	f000 fba4 	bl	8004b28 <TIM_ITRx_SetConfig>
      break;
 80043e0:	e00e      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	0019      	movs	r1, r3
 80043ec:	0010      	movs	r0, r2
 80043ee:	f000 fb9b 	bl	8004b28 <TIM_ITRx_SetConfig>
      break;
 80043f2:	e005      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80043f4:	230f      	movs	r3, #15
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
      break;
 80043fc:	e000      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80043fe:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	223d      	movs	r2, #61	@ 0x3d
 8004404:	2101      	movs	r1, #1
 8004406:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	223c      	movs	r2, #60	@ 0x3c
 800440c:	2100      	movs	r1, #0
 800440e:	5499      	strb	r1, [r3, r2]

  return status;
 8004410:	230f      	movs	r3, #15
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	781b      	ldrb	r3, [r3, #0]
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b004      	add	sp, #16
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	ffceff88 	.word	0xffceff88
 8004424:	ffff00ff 	.word	0xffff00ff

08004428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a37      	ldr	r2, [pc, #220]	@ (8004518 <TIM_Base_SetConfig+0xf0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d008      	beq.n	8004452 <TIM_Base_SetConfig+0x2a>
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	2380      	movs	r3, #128	@ 0x80
 8004444:	05db      	lsls	r3, r3, #23
 8004446:	429a      	cmp	r2, r3
 8004448:	d003      	beq.n	8004452 <TIM_Base_SetConfig+0x2a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a33      	ldr	r2, [pc, #204]	@ (800451c <TIM_Base_SetConfig+0xf4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d108      	bne.n	8004464 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2270      	movs	r2, #112	@ 0x70
 8004456:	4393      	bics	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a2c      	ldr	r2, [pc, #176]	@ (8004518 <TIM_Base_SetConfig+0xf0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d014      	beq.n	8004496 <TIM_Base_SetConfig+0x6e>
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	2380      	movs	r3, #128	@ 0x80
 8004470:	05db      	lsls	r3, r3, #23
 8004472:	429a      	cmp	r2, r3
 8004474:	d00f      	beq.n	8004496 <TIM_Base_SetConfig+0x6e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a28      	ldr	r2, [pc, #160]	@ (800451c <TIM_Base_SetConfig+0xf4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00b      	beq.n	8004496 <TIM_Base_SetConfig+0x6e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a27      	ldr	r2, [pc, #156]	@ (8004520 <TIM_Base_SetConfig+0xf8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d007      	beq.n	8004496 <TIM_Base_SetConfig+0x6e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a26      	ldr	r2, [pc, #152]	@ (8004524 <TIM_Base_SetConfig+0xfc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d003      	beq.n	8004496 <TIM_Base_SetConfig+0x6e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a25      	ldr	r2, [pc, #148]	@ (8004528 <TIM_Base_SetConfig+0x100>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d108      	bne.n	80044a8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a24      	ldr	r2, [pc, #144]	@ (800452c <TIM_Base_SetConfig+0x104>)
 800449a:	4013      	ands	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2280      	movs	r2, #128	@ 0x80
 80044ac:	4393      	bics	r3, r2
 80044ae:	001a      	movs	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a11      	ldr	r2, [pc, #68]	@ (8004518 <TIM_Base_SetConfig+0xf0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d007      	beq.n	80044e6 <TIM_Base_SetConfig+0xbe>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a12      	ldr	r2, [pc, #72]	@ (8004524 <TIM_Base_SetConfig+0xfc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d003      	beq.n	80044e6 <TIM_Base_SetConfig+0xbe>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a11      	ldr	r2, [pc, #68]	@ (8004528 <TIM_Base_SetConfig+0x100>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d103      	bne.n	80044ee <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2201      	movs	r2, #1
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d106      	bne.n	800450e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2201      	movs	r2, #1
 8004506:	4393      	bics	r3, r2
 8004508:	001a      	movs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	611a      	str	r2, [r3, #16]
  }
}
 800450e:	46c0      	nop			@ (mov r8, r8)
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bd80      	pop	{r7, pc}
 8004516:	46c0      	nop			@ (mov r8, r8)
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40000400 	.word	0x40000400
 8004520:	40002000 	.word	0x40002000
 8004524:	40014400 	.word	0x40014400
 8004528:	40014800 	.word	0x40014800
 800452c:	fffffcff 	.word	0xfffffcff

08004530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	2201      	movs	r2, #1
 8004546:	4393      	bics	r3, r2
 8004548:	001a      	movs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4a2e      	ldr	r2, [pc, #184]	@ (8004618 <TIM_OC1_SetConfig+0xe8>)
 800455e:	4013      	ands	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2203      	movs	r2, #3
 8004566:	4393      	bics	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2202      	movs	r2, #2
 8004578:	4393      	bics	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a24      	ldr	r2, [pc, #144]	@ (800461c <TIM_OC1_SetConfig+0xec>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d007      	beq.n	800459e <TIM_OC1_SetConfig+0x6e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a23      	ldr	r2, [pc, #140]	@ (8004620 <TIM_OC1_SetConfig+0xf0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d003      	beq.n	800459e <TIM_OC1_SetConfig+0x6e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a22      	ldr	r2, [pc, #136]	@ (8004624 <TIM_OC1_SetConfig+0xf4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d10c      	bne.n	80045b8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2208      	movs	r2, #8
 80045a2:	4393      	bics	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2204      	movs	r2, #4
 80045b4:	4393      	bics	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a18      	ldr	r2, [pc, #96]	@ (800461c <TIM_OC1_SetConfig+0xec>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <TIM_OC1_SetConfig+0xa0>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a17      	ldr	r2, [pc, #92]	@ (8004620 <TIM_OC1_SetConfig+0xf0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_OC1_SetConfig+0xa0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a16      	ldr	r2, [pc, #88]	@ (8004624 <TIM_OC1_SetConfig+0xf4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4a15      	ldr	r2, [pc, #84]	@ (8004628 <TIM_OC1_SetConfig+0xf8>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4a14      	ldr	r2, [pc, #80]	@ (800462c <TIM_OC1_SetConfig+0xfc>)
 80045dc:	4013      	ands	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b006      	add	sp, #24
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	fffeff8f 	.word	0xfffeff8f
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40014400 	.word	0x40014400
 8004624:	40014800 	.word	0x40014800
 8004628:	fffffeff 	.word	0xfffffeff
 800462c:	fffffdff 	.word	0xfffffdff

08004630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	2210      	movs	r2, #16
 8004646:	4393      	bics	r3, r2
 8004648:	001a      	movs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a2c      	ldr	r2, [pc, #176]	@ (8004710 <TIM_OC2_SetConfig+0xe0>)
 800465e:	4013      	ands	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a2b      	ldr	r2, [pc, #172]	@ (8004714 <TIM_OC2_SetConfig+0xe4>)
 8004666:	4013      	ands	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2220      	movs	r2, #32
 800467a:	4393      	bics	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a22      	ldr	r2, [pc, #136]	@ (8004718 <TIM_OC2_SetConfig+0xe8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d10d      	bne.n	80046ae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2280      	movs	r2, #128	@ 0x80
 8004696:	4393      	bics	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2240      	movs	r2, #64	@ 0x40
 80046aa:	4393      	bics	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a19      	ldr	r2, [pc, #100]	@ (8004718 <TIM_OC2_SetConfig+0xe8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d007      	beq.n	80046c6 <TIM_OC2_SetConfig+0x96>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a18      	ldr	r2, [pc, #96]	@ (800471c <TIM_OC2_SetConfig+0xec>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <TIM_OC2_SetConfig+0x96>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a17      	ldr	r2, [pc, #92]	@ (8004720 <TIM_OC2_SetConfig+0xf0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d113      	bne.n	80046ee <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4a16      	ldr	r2, [pc, #88]	@ (8004724 <TIM_OC2_SetConfig+0xf4>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4a15      	ldr	r2, [pc, #84]	@ (8004728 <TIM_OC2_SetConfig+0xf8>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	621a      	str	r2, [r3, #32]
}
 8004708:	46c0      	nop			@ (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	b006      	add	sp, #24
 800470e:	bd80      	pop	{r7, pc}
 8004710:	feff8fff 	.word	0xfeff8fff
 8004714:	fffffcff 	.word	0xfffffcff
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40014400 	.word	0x40014400
 8004720:	40014800 	.word	0x40014800
 8004724:	fffffbff 	.word	0xfffffbff
 8004728:	fffff7ff 	.word	0xfffff7ff

0800472c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	4a31      	ldr	r2, [pc, #196]	@ (8004808 <TIM_OC3_SetConfig+0xdc>)
 8004742:	401a      	ands	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a2d      	ldr	r2, [pc, #180]	@ (800480c <TIM_OC3_SetConfig+0xe0>)
 8004758:	4013      	ands	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2203      	movs	r2, #3
 8004760:	4393      	bics	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	4a27      	ldr	r2, [pc, #156]	@ (8004810 <TIM_OC3_SetConfig+0xe4>)
 8004772:	4013      	ands	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a23      	ldr	r2, [pc, #140]	@ (8004814 <TIM_OC3_SetConfig+0xe8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d10d      	bne.n	80047a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	4a22      	ldr	r2, [pc, #136]	@ (8004818 <TIM_OC3_SetConfig+0xec>)
 800478e:	4013      	ands	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	4a1e      	ldr	r2, [pc, #120]	@ (800481c <TIM_OC3_SetConfig+0xf0>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004814 <TIM_OC3_SetConfig+0xe8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d007      	beq.n	80047be <TIM_OC3_SetConfig+0x92>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <TIM_OC3_SetConfig+0xf4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d003      	beq.n	80047be <TIM_OC3_SetConfig+0x92>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004824 <TIM_OC3_SetConfig+0xf8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d113      	bne.n	80047e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4a19      	ldr	r2, [pc, #100]	@ (8004828 <TIM_OC3_SetConfig+0xfc>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4a18      	ldr	r2, [pc, #96]	@ (800482c <TIM_OC3_SetConfig+0x100>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	621a      	str	r2, [r3, #32]
}
 8004800:	46c0      	nop			@ (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	b006      	add	sp, #24
 8004806:	bd80      	pop	{r7, pc}
 8004808:	fffffeff 	.word	0xfffffeff
 800480c:	fffeff8f 	.word	0xfffeff8f
 8004810:	fffffdff 	.word	0xfffffdff
 8004814:	40012c00 	.word	0x40012c00
 8004818:	fffff7ff 	.word	0xfffff7ff
 800481c:	fffffbff 	.word	0xfffffbff
 8004820:	40014400 	.word	0x40014400
 8004824:	40014800 	.word	0x40014800
 8004828:	ffffefff 	.word	0xffffefff
 800482c:	ffffdfff 	.word	0xffffdfff

08004830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	4a24      	ldr	r2, [pc, #144]	@ (80048d8 <TIM_OC4_SetConfig+0xa8>)
 8004846:	401a      	ands	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a20      	ldr	r2, [pc, #128]	@ (80048dc <TIM_OC4_SetConfig+0xac>)
 800485c:	4013      	ands	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a1f      	ldr	r2, [pc, #124]	@ (80048e0 <TIM_OC4_SetConfig+0xb0>)
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <TIM_OC4_SetConfig+0xb4>)
 8004878:	4013      	ands	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	031b      	lsls	r3, r3, #12
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a17      	ldr	r2, [pc, #92]	@ (80048e8 <TIM_OC4_SetConfig+0xb8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <TIM_OC4_SetConfig+0x70>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a16      	ldr	r2, [pc, #88]	@ (80048ec <TIM_OC4_SetConfig+0xbc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d003      	beq.n	80048a0 <TIM_OC4_SetConfig+0x70>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a15      	ldr	r2, [pc, #84]	@ (80048f0 <TIM_OC4_SetConfig+0xc0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d109      	bne.n	80048b4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4a14      	ldr	r2, [pc, #80]	@ (80048f4 <TIM_OC4_SetConfig+0xc4>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	019b      	lsls	r3, r3, #6
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b006      	add	sp, #24
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			@ (mov r8, r8)
 80048d8:	ffffefff 	.word	0xffffefff
 80048dc:	feff8fff 	.word	0xfeff8fff
 80048e0:	fffffcff 	.word	0xfffffcff
 80048e4:	ffffdfff 	.word	0xffffdfff
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40014400 	.word	0x40014400
 80048f0:	40014800 	.word	0x40014800
 80048f4:	ffffbfff 	.word	0xffffbfff

080048f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	4a21      	ldr	r2, [pc, #132]	@ (8004994 <TIM_OC5_SetConfig+0x9c>)
 800490e:	401a      	ands	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4a1d      	ldr	r2, [pc, #116]	@ (8004998 <TIM_OC5_SetConfig+0xa0>)
 8004924:	4013      	ands	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4a19      	ldr	r2, [pc, #100]	@ (800499c <TIM_OC5_SetConfig+0xa4>)
 8004936:	4013      	ands	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a15      	ldr	r2, [pc, #84]	@ (80049a0 <TIM_OC5_SetConfig+0xa8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <TIM_OC5_SetConfig+0x66>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a14      	ldr	r2, [pc, #80]	@ (80049a4 <TIM_OC5_SetConfig+0xac>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_OC5_SetConfig+0x66>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a13      	ldr	r2, [pc, #76]	@ (80049a8 <TIM_OC5_SetConfig+0xb0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d109      	bne.n	8004972 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	4a0c      	ldr	r2, [pc, #48]	@ (8004994 <TIM_OC5_SetConfig+0x9c>)
 8004962:	4013      	ands	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	621a      	str	r2, [r3, #32]
}
 800498c:	46c0      	nop			@ (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b006      	add	sp, #24
 8004992:	bd80      	pop	{r7, pc}
 8004994:	fffeffff 	.word	0xfffeffff
 8004998:	fffeff8f 	.word	0xfffeff8f
 800499c:	fffdffff 	.word	0xfffdffff
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	40014400 	.word	0x40014400
 80049a8:	40014800 	.word	0x40014800

080049ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4a22      	ldr	r2, [pc, #136]	@ (8004a4c <TIM_OC6_SetConfig+0xa0>)
 80049c2:	401a      	ands	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a50 <TIM_OC6_SetConfig+0xa4>)
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004a54 <TIM_OC6_SetConfig+0xa8>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	051b      	lsls	r3, r3, #20
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a16      	ldr	r2, [pc, #88]	@ (8004a58 <TIM_OC6_SetConfig+0xac>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d007      	beq.n	8004a14 <TIM_OC6_SetConfig+0x68>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a15      	ldr	r2, [pc, #84]	@ (8004a5c <TIM_OC6_SetConfig+0xb0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d003      	beq.n	8004a14 <TIM_OC6_SetConfig+0x68>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a14      	ldr	r2, [pc, #80]	@ (8004a60 <TIM_OC6_SetConfig+0xb4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d109      	bne.n	8004a28 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	4a13      	ldr	r2, [pc, #76]	@ (8004a64 <TIM_OC6_SetConfig+0xb8>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	029b      	lsls	r3, r3, #10
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b006      	add	sp, #24
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	ffefffff 	.word	0xffefffff
 8004a50:	feff8fff 	.word	0xfeff8fff
 8004a54:	ffdfffff 	.word	0xffdfffff
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800
 8004a64:	fffbffff 	.word	0xfffbffff

08004a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	4393      	bics	r3, r2
 8004a82:	001a      	movs	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	22f0      	movs	r2, #240	@ 0xf0
 8004a92:	4393      	bics	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	220a      	movs	r2, #10
 8004aa4:	4393      	bics	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	621a      	str	r2, [r3, #32]
}
 8004abc:	46c0      	nop			@ (mov r8, r8)
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b006      	add	sp, #24
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	2210      	movs	r2, #16
 8004adc:	4393      	bics	r3, r2
 8004ade:	001a      	movs	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4a0d      	ldr	r2, [pc, #52]	@ (8004b24 <TIM_TI2_ConfigInputStage+0x60>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	031b      	lsls	r3, r3, #12
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	22a0      	movs	r2, #160	@ 0xa0
 8004b00:	4393      	bics	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b006      	add	sp, #24
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	ffff0fff 	.word	0xffff0fff

08004b28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a08      	ldr	r2, [pc, #32]	@ (8004b5c <TIM_ITRx_SetConfig+0x34>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	2207      	movs	r2, #7
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	609a      	str	r2, [r3, #8]
}
 8004b52:	46c0      	nop			@ (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b004      	add	sp, #16
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	ffcfff8f 	.word	0xffcfff8f

08004b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	4a09      	ldr	r2, [pc, #36]	@ (8004b9c <TIM_ETR_SetConfig+0x3c>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	021a      	lsls	r2, r3, #8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	46c0      	nop			@ (mov r8, r8)
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b006      	add	sp, #24
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	ffff00ff 	.word	0xffff00ff

08004ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	221f      	movs	r2, #31
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	0013      	movs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	43d2      	mvns	r2, r2
 8004bc2:	401a      	ands	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	211f      	movs	r1, #31
 8004bd0:	400b      	ands	r3, r1
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4099      	lsls	r1, r3
 8004bd6:	000b      	movs	r3, r1
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	46c0      	nop			@ (mov r8, r8)
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b006      	add	sp, #24
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	223c      	movs	r2, #60	@ 0x3c
 8004bf6:	5c9b      	ldrb	r3, [r3, r2]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e050      	b.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	223c      	movs	r2, #60	@ 0x3c
 8004c04:	2101      	movs	r1, #1
 8004c06:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	223d      	movs	r2, #61	@ 0x3d
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a21      	ldr	r2, [pc, #132]	@ (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d108      	bne.n	8004c3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4a20      	ldr	r2, [pc, #128]	@ (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2270      	movs	r2, #112	@ 0x70
 8004c40:	4393      	bics	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a14      	ldr	r2, [pc, #80]	@ (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00a      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	2380      	movs	r3, #128	@ 0x80
 8004c66:	05db      	lsls	r3, r3, #23
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d004      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a10      	ldr	r2, [pc, #64]	@ (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d10c      	bne.n	8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2280      	movs	r2, #128	@ 0x80
 8004c7a:	4393      	bics	r3, r2
 8004c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	223d      	movs	r2, #61	@ 0x3d
 8004c94:	2101      	movs	r1, #1
 8004c96:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	223c      	movs	r2, #60	@ 0x3c
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b004      	add	sp, #16
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	ff0fffff 	.word	0xff0fffff
 8004cb4:	40000400 	.word	0x40000400

08004cb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e046      	b.n	8004d58 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2288      	movs	r2, #136	@ 0x88
 8004cce:	589b      	ldr	r3, [r3, r2]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d107      	bne.n	8004ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2284      	movs	r2, #132	@ 0x84
 8004cd8:	2100      	movs	r1, #0
 8004cda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f7fd f8f8 	bl	8001ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2288      	movs	r2, #136	@ 0x88
 8004ce8:	2124      	movs	r1, #36	@ 0x24
 8004cea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	438a      	bics	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	0018      	movs	r0, r3
 8004d08:	f000 ff88 	bl	8005c1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f000 fd0c 	bl	800572c <UART_SetConfig>
 8004d14:	0003      	movs	r3, r0
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e01c      	b.n	8004d58 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	490d      	ldr	r1, [pc, #52]	@ (8004d60 <HAL_UART_Init+0xa8>)
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	212a      	movs	r1, #42	@ 0x2a
 8004d3a:	438a      	bics	r2, r1
 8004d3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f001 f817 	bl	8005d84 <UART_CheckIdleState>
 8004d56:	0003      	movs	r3, r0
}
 8004d58:	0018      	movs	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b002      	add	sp, #8
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	ffffb7ff 	.word	0xffffb7ff

08004d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08a      	sub	sp, #40	@ 0x28
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	1dbb      	adds	r3, r7, #6
 8004d72:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2288      	movs	r2, #136	@ 0x88
 8004d78:	589b      	ldr	r3, [r3, r2]
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d000      	beq.n	8004d80 <HAL_UART_Transmit+0x1c>
 8004d7e:	e090      	b.n	8004ea2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_UART_Transmit+0x2a>
 8004d86:	1dbb      	adds	r3, r7, #6
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e088      	b.n	8004ea4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	015b      	lsls	r3, r3, #5
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d109      	bne.n	8004db2 <HAL_UART_Transmit+0x4e>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d105      	bne.n	8004db2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2201      	movs	r2, #1
 8004daa:	4013      	ands	r3, r2
 8004dac:	d001      	beq.n	8004db2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e078      	b.n	8004ea4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2290      	movs	r2, #144	@ 0x90
 8004db6:	2100      	movs	r1, #0
 8004db8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2288      	movs	r2, #136	@ 0x88
 8004dbe:	2121      	movs	r1, #33	@ 0x21
 8004dc0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dc2:	f7fd f9ab 	bl	800211c <HAL_GetTick>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1dba      	adds	r2, r7, #6
 8004dce:	2154      	movs	r1, #84	@ 0x54
 8004dd0:	8812      	ldrh	r2, [r2, #0]
 8004dd2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	1dba      	adds	r2, r7, #6
 8004dd8:	2156      	movs	r1, #86	@ 0x56
 8004dda:	8812      	ldrh	r2, [r2, #0]
 8004ddc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	2380      	movs	r3, #128	@ 0x80
 8004de4:	015b      	lsls	r3, r3, #5
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d108      	bne.n	8004dfc <HAL_UART_Transmit+0x98>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	e003      	b.n	8004e04 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e04:	e030      	b.n	8004e68 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	0013      	movs	r3, r2
 8004e10:	2200      	movs	r2, #0
 8004e12:	2180      	movs	r1, #128	@ 0x80
 8004e14:	f001 f860 	bl	8005ed8 <UART_WaitOnFlagUntilTimeout>
 8004e18:	1e03      	subs	r3, r0, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2288      	movs	r2, #136	@ 0x88
 8004e20:	2120      	movs	r1, #32
 8004e22:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e03d      	b.n	8004ea4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10b      	bne.n	8004e46 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	001a      	movs	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	05d2      	lsls	r2, r2, #23
 8004e3a:	0dd2      	lsrs	r2, r2, #23
 8004e3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	3302      	adds	r3, #2
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	e007      	b.n	8004e56 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	781a      	ldrb	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	3301      	adds	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2256      	movs	r2, #86	@ 0x56
 8004e5a:	5a9b      	ldrh	r3, [r3, r2]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b299      	uxth	r1, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2256      	movs	r2, #86	@ 0x56
 8004e66:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2256      	movs	r2, #86	@ 0x56
 8004e6c:	5a9b      	ldrh	r3, [r3, r2]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1c8      	bne.n	8004e06 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	0013      	movs	r3, r2
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2140      	movs	r1, #64	@ 0x40
 8004e82:	f001 f829 	bl	8005ed8 <UART_WaitOnFlagUntilTimeout>
 8004e86:	1e03      	subs	r3, r0, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2288      	movs	r2, #136	@ 0x88
 8004e8e:	2120      	movs	r1, #32
 8004e90:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e006      	b.n	8004ea4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2288      	movs	r2, #136	@ 0x88
 8004e9a:	2120      	movs	r1, #32
 8004e9c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b008      	add	sp, #32
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08c      	sub	sp, #48	@ 0x30
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	1dbb      	adds	r3, r7, #6
 8004eb8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2288      	movs	r2, #136	@ 0x88
 8004ebe:	589b      	ldr	r3, [r3, r2]
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d000      	beq.n	8004ec6 <HAL_UART_Transmit_IT+0x1a>
 8004ec4:	e08d      	b.n	8004fe2 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_UART_Transmit_IT+0x28>
 8004ecc:	1dbb      	adds	r3, r7, #6
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e085      	b.n	8004fe4 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	2380      	movs	r3, #128	@ 0x80
 8004ede:	015b      	lsls	r3, r3, #5
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d109      	bne.n	8004ef8 <HAL_UART_Transmit_IT+0x4c>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d001      	beq.n	8004ef8 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e075      	b.n	8004fe4 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1dba      	adds	r2, r7, #6
 8004f02:	2154      	movs	r1, #84	@ 0x54
 8004f04:	8812      	ldrh	r2, [r2, #0]
 8004f06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	1dba      	adds	r2, r7, #6
 8004f0c:	2156      	movs	r1, #86	@ 0x56
 8004f0e:	8812      	ldrh	r2, [r2, #0]
 8004f10:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2290      	movs	r2, #144	@ 0x90
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2288      	movs	r2, #136	@ 0x88
 8004f24:	2121      	movs	r1, #33	@ 0x21
 8004f26:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004f2c:	2380      	movs	r3, #128	@ 0x80
 8004f2e:	059b      	lsls	r3, r3, #22
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d12a      	bne.n	8004f8a <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	2380      	movs	r3, #128	@ 0x80
 8004f3a:	015b      	lsls	r3, r3, #5
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d107      	bne.n	8004f50 <HAL_UART_Transmit_IT+0xa4>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d103      	bne.n	8004f50 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a28      	ldr	r2, [pc, #160]	@ (8004fec <HAL_UART_Transmit_IT+0x140>)
 8004f4c:	679a      	str	r2, [r3, #120]	@ 0x78
 8004f4e:	e002      	b.n	8004f56 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4a27      	ldr	r2, [pc, #156]	@ (8004ff0 <HAL_UART_Transmit_IT+0x144>)
 8004f54:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f56:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5a:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f5c:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f60:	2301      	movs	r3, #1
 8004f62:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	f383 8810 	msr	PRIMASK, r3
}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2180      	movs	r1, #128	@ 0x80
 8004f78:	0409      	lsls	r1, r1, #16
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	f383 8810 	msr	PRIMASK, r3
}
 8004f88:	e029      	b.n	8004fde <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	2380      	movs	r3, #128	@ 0x80
 8004f90:	015b      	lsls	r3, r3, #5
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d107      	bne.n	8004fa6 <HAL_UART_Transmit_IT+0xfa>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4a14      	ldr	r2, [pc, #80]	@ (8004ff4 <HAL_UART_Transmit_IT+0x148>)
 8004fa2:	679a      	str	r2, [r3, #120]	@ 0x78
 8004fa4:	e002      	b.n	8004fac <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4a13      	ldr	r2, [pc, #76]	@ (8004ff8 <HAL_UART_Transmit_IT+0x14c>)
 8004faa:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fac:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb0:	613b      	str	r3, [r7, #16]
  return(result);
 8004fb2:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f383 8810 	msr	PRIMASK, r3
}
 8004fc0:	46c0      	nop			@ (mov r8, r8)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2180      	movs	r1, #128	@ 0x80
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f383 8810 	msr	PRIMASK, r3
}
 8004fdc:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
  }
}
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b00c      	add	sp, #48	@ 0x30
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	08006559 	.word	0x08006559
 8004ff0:	0800646d 	.word	0x0800646d
 8004ff4:	080063af 	.word	0x080063af
 8004ff8:	080062fb 	.word	0x080062fb

08004ffc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	1dbb      	adds	r3, r7, #6
 8005008:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	228c      	movs	r2, #140	@ 0x8c
 800500e:	589b      	ldr	r3, [r3, r2]
 8005010:	2b20      	cmp	r3, #32
 8005012:	d14a      	bne.n	80050aa <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_UART_Receive_IT+0x26>
 800501a:	1dbb      	adds	r3, r7, #6
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e042      	b.n	80050ac <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	2380      	movs	r3, #128	@ 0x80
 800502c:	015b      	lsls	r3, r3, #5
 800502e:	429a      	cmp	r2, r3
 8005030:	d109      	bne.n	8005046 <HAL_UART_Receive_IT+0x4a>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d105      	bne.n	8005046 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2201      	movs	r2, #1
 800503e:	4013      	ands	r3, r2
 8005040:	d001      	beq.n	8005046 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e032      	b.n	80050ac <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a18      	ldr	r2, [pc, #96]	@ (80050b4 <HAL_UART_Receive_IT+0xb8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d020      	beq.n	8005098 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	2380      	movs	r3, #128	@ 0x80
 800505e:	041b      	lsls	r3, r3, #16
 8005060:	4013      	ands	r3, r2
 8005062:	d019      	beq.n	8005098 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005064:	f3ef 8310 	mrs	r3, PRIMASK
 8005068:	613b      	str	r3, [r7, #16]
  return(result);
 800506a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	2301      	movs	r3, #1
 8005070:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f383 8810 	msr	PRIMASK, r3
}
 8005078:	46c0      	nop			@ (mov r8, r8)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2180      	movs	r1, #128	@ 0x80
 8005086:	04c9      	lsls	r1, r1, #19
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f383 8810 	msr	PRIMASK, r3
}
 8005096:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005098:	1dbb      	adds	r3, r7, #6
 800509a:	881a      	ldrh	r2, [r3, #0]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	0018      	movs	r0, r3
 80050a2:	f000 ff89 	bl	8005fb8 <UART_Start_Receive_IT>
 80050a6:	0003      	movs	r3, r0
 80050a8:	e000      	b.n	80050ac <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
  }
}
 80050ac:	0018      	movs	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b008      	add	sp, #32
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40008000 	.word	0x40008000

080050b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050b8:	b5b0      	push	{r4, r5, r7, lr}
 80050ba:	b0aa      	sub	sp, #168	@ 0xa8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	22a4      	movs	r2, #164	@ 0xa4
 80050c8:	18b9      	adds	r1, r7, r2
 80050ca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	20a0      	movs	r0, #160	@ 0xa0
 80050d4:	1839      	adds	r1, r7, r0
 80050d6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	249c      	movs	r4, #156	@ 0x9c
 80050e0:	1939      	adds	r1, r7, r4
 80050e2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050e4:	0011      	movs	r1, r2
 80050e6:	18bb      	adds	r3, r7, r2
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4aa2      	ldr	r2, [pc, #648]	@ (8005374 <HAL_UART_IRQHandler+0x2bc>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	2298      	movs	r2, #152	@ 0x98
 80050f0:	18bd      	adds	r5, r7, r2
 80050f2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80050f4:	18bb      	adds	r3, r7, r2
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d11a      	bne.n	8005132 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050fc:	187b      	adds	r3, r7, r1
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2220      	movs	r2, #32
 8005102:	4013      	ands	r3, r2
 8005104:	d015      	beq.n	8005132 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005106:	183b      	adds	r3, r7, r0
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2220      	movs	r2, #32
 800510c:	4013      	ands	r3, r2
 800510e:	d105      	bne.n	800511c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005110:	193b      	adds	r3, r7, r4
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	2380      	movs	r3, #128	@ 0x80
 8005116:	055b      	lsls	r3, r3, #21
 8005118:	4013      	ands	r3, r2
 800511a:	d00a      	beq.n	8005132 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005120:	2b00      	cmp	r3, #0
 8005122:	d100      	bne.n	8005126 <HAL_UART_IRQHandler+0x6e>
 8005124:	e2dc      	b.n	80056e0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	0010      	movs	r0, r2
 800512e:	4798      	blx	r3
      }
      return;
 8005130:	e2d6      	b.n	80056e0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005132:	2398      	movs	r3, #152	@ 0x98
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d100      	bne.n	800513e <HAL_UART_IRQHandler+0x86>
 800513c:	e122      	b.n	8005384 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800513e:	239c      	movs	r3, #156	@ 0x9c
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a8c      	ldr	r2, [pc, #560]	@ (8005378 <HAL_UART_IRQHandler+0x2c0>)
 8005146:	4013      	ands	r3, r2
 8005148:	d106      	bne.n	8005158 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800514a:	23a0      	movs	r3, #160	@ 0xa0
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a8a      	ldr	r2, [pc, #552]	@ (800537c <HAL_UART_IRQHandler+0x2c4>)
 8005152:	4013      	ands	r3, r2
 8005154:	d100      	bne.n	8005158 <HAL_UART_IRQHandler+0xa0>
 8005156:	e115      	b.n	8005384 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005158:	23a4      	movs	r3, #164	@ 0xa4
 800515a:	18fb      	adds	r3, r7, r3
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2201      	movs	r2, #1
 8005160:	4013      	ands	r3, r2
 8005162:	d012      	beq.n	800518a <HAL_UART_IRQHandler+0xd2>
 8005164:	23a0      	movs	r3, #160	@ 0xa0
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	2380      	movs	r3, #128	@ 0x80
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4013      	ands	r3, r2
 8005170:	d00b      	beq.n	800518a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2201      	movs	r2, #1
 8005178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2290      	movs	r2, #144	@ 0x90
 800517e:	589b      	ldr	r3, [r3, r2]
 8005180:	2201      	movs	r2, #1
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2190      	movs	r1, #144	@ 0x90
 8005188:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800518a:	23a4      	movs	r3, #164	@ 0xa4
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2202      	movs	r2, #2
 8005192:	4013      	ands	r3, r2
 8005194:	d011      	beq.n	80051ba <HAL_UART_IRQHandler+0x102>
 8005196:	239c      	movs	r3, #156	@ 0x9c
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2201      	movs	r2, #1
 800519e:	4013      	ands	r3, r2
 80051a0:	d00b      	beq.n	80051ba <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2202      	movs	r2, #2
 80051a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2290      	movs	r2, #144	@ 0x90
 80051ae:	589b      	ldr	r3, [r3, r2]
 80051b0:	2204      	movs	r2, #4
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2190      	movs	r1, #144	@ 0x90
 80051b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051ba:	23a4      	movs	r3, #164	@ 0xa4
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2204      	movs	r2, #4
 80051c2:	4013      	ands	r3, r2
 80051c4:	d011      	beq.n	80051ea <HAL_UART_IRQHandler+0x132>
 80051c6:	239c      	movs	r3, #156	@ 0x9c
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2201      	movs	r2, #1
 80051ce:	4013      	ands	r3, r2
 80051d0:	d00b      	beq.n	80051ea <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2204      	movs	r2, #4
 80051d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2290      	movs	r2, #144	@ 0x90
 80051de:	589b      	ldr	r3, [r3, r2]
 80051e0:	2202      	movs	r2, #2
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2190      	movs	r1, #144	@ 0x90
 80051e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051ea:	23a4      	movs	r3, #164	@ 0xa4
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2208      	movs	r2, #8
 80051f2:	4013      	ands	r3, r2
 80051f4:	d017      	beq.n	8005226 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051f6:	23a0      	movs	r3, #160	@ 0xa0
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2220      	movs	r2, #32
 80051fe:	4013      	ands	r3, r2
 8005200:	d105      	bne.n	800520e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005202:	239c      	movs	r3, #156	@ 0x9c
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a5b      	ldr	r2, [pc, #364]	@ (8005378 <HAL_UART_IRQHandler+0x2c0>)
 800520a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800520c:	d00b      	beq.n	8005226 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2208      	movs	r2, #8
 8005214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2290      	movs	r2, #144	@ 0x90
 800521a:	589b      	ldr	r3, [r3, r2]
 800521c:	2208      	movs	r2, #8
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2190      	movs	r1, #144	@ 0x90
 8005224:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005226:	23a4      	movs	r3, #164	@ 0xa4
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	2380      	movs	r3, #128	@ 0x80
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	4013      	ands	r3, r2
 8005232:	d013      	beq.n	800525c <HAL_UART_IRQHandler+0x1a4>
 8005234:	23a0      	movs	r3, #160	@ 0xa0
 8005236:	18fb      	adds	r3, r7, r3
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	2380      	movs	r3, #128	@ 0x80
 800523c:	04db      	lsls	r3, r3, #19
 800523e:	4013      	ands	r3, r2
 8005240:	d00c      	beq.n	800525c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2280      	movs	r2, #128	@ 0x80
 8005248:	0112      	lsls	r2, r2, #4
 800524a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2290      	movs	r2, #144	@ 0x90
 8005250:	589b      	ldr	r3, [r3, r2]
 8005252:	2220      	movs	r2, #32
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2190      	movs	r1, #144	@ 0x90
 800525a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2290      	movs	r2, #144	@ 0x90
 8005260:	589b      	ldr	r3, [r3, r2]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d100      	bne.n	8005268 <HAL_UART_IRQHandler+0x1b0>
 8005266:	e23d      	b.n	80056e4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005268:	23a4      	movs	r3, #164	@ 0xa4
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2220      	movs	r2, #32
 8005270:	4013      	ands	r3, r2
 8005272:	d015      	beq.n	80052a0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005274:	23a0      	movs	r3, #160	@ 0xa0
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2220      	movs	r2, #32
 800527c:	4013      	ands	r3, r2
 800527e:	d106      	bne.n	800528e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005280:	239c      	movs	r3, #156	@ 0x9c
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	2380      	movs	r3, #128	@ 0x80
 8005288:	055b      	lsls	r3, r3, #21
 800528a:	4013      	ands	r3, r2
 800528c:	d008      	beq.n	80052a0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	0010      	movs	r0, r2
 800529e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2290      	movs	r2, #144	@ 0x90
 80052a4:	589b      	ldr	r3, [r3, r2]
 80052a6:	2194      	movs	r1, #148	@ 0x94
 80052a8:	187a      	adds	r2, r7, r1
 80052aa:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2240      	movs	r2, #64	@ 0x40
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b40      	cmp	r3, #64	@ 0x40
 80052b8:	d004      	beq.n	80052c4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052ba:	187b      	adds	r3, r7, r1
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2228      	movs	r2, #40	@ 0x28
 80052c0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052c2:	d04c      	beq.n	800535e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	0018      	movs	r0, r3
 80052c8:	f000 ff9a 	bl	8006200 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2240      	movs	r2, #64	@ 0x40
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b40      	cmp	r3, #64	@ 0x40
 80052d8:	d13c      	bne.n	8005354 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052da:	f3ef 8310 	mrs	r3, PRIMASK
 80052de:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80052e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e2:	2090      	movs	r0, #144	@ 0x90
 80052e4:	183a      	adds	r2, r7, r0
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	2301      	movs	r3, #1
 80052ea:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ee:	f383 8810 	msr	PRIMASK, r3
}
 80052f2:	46c0      	nop			@ (mov r8, r8)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2140      	movs	r1, #64	@ 0x40
 8005300:	438a      	bics	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	183b      	adds	r3, r7, r0
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800530c:	f383 8810 	msr	PRIMASK, r3
}
 8005310:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2280      	movs	r2, #128	@ 0x80
 8005316:	589b      	ldr	r3, [r3, r2]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d016      	beq.n	800534a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2280      	movs	r2, #128	@ 0x80
 8005320:	589b      	ldr	r3, [r3, r2]
 8005322:	4a17      	ldr	r2, [pc, #92]	@ (8005380 <HAL_UART_IRQHandler+0x2c8>)
 8005324:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2280      	movs	r2, #128	@ 0x80
 800532a:	589b      	ldr	r3, [r3, r2]
 800532c:	0018      	movs	r0, r3
 800532e:	f7fd fddb 	bl	8002ee8 <HAL_DMA_Abort_IT>
 8005332:	1e03      	subs	r3, r0, #0
 8005334:	d01c      	beq.n	8005370 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2280      	movs	r2, #128	@ 0x80
 800533a:	589b      	ldr	r3, [r3, r2]
 800533c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	2180      	movs	r1, #128	@ 0x80
 8005342:	5852      	ldr	r2, [r2, r1]
 8005344:	0010      	movs	r0, r2
 8005346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	e012      	b.n	8005370 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	0018      	movs	r0, r3
 800534e:	f000 f9d9 	bl	8005704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005352:	e00d      	b.n	8005370 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	0018      	movs	r0, r3
 8005358:	f000 f9d4 	bl	8005704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	e008      	b.n	8005370 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	0018      	movs	r0, r3
 8005362:	f000 f9cf 	bl	8005704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2290      	movs	r2, #144	@ 0x90
 800536a:	2100      	movs	r1, #0
 800536c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800536e:	e1b9      	b.n	80056e4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005370:	46c0      	nop			@ (mov r8, r8)
    return;
 8005372:	e1b7      	b.n	80056e4 <HAL_UART_IRQHandler+0x62c>
 8005374:	0000080f 	.word	0x0000080f
 8005378:	10000001 	.word	0x10000001
 800537c:	04000120 	.word	0x04000120
 8005380:	080062cd 	.word	0x080062cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d000      	beq.n	800538e <HAL_UART_IRQHandler+0x2d6>
 800538c:	e13e      	b.n	800560c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800538e:	23a4      	movs	r3, #164	@ 0xa4
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2210      	movs	r2, #16
 8005396:	4013      	ands	r3, r2
 8005398:	d100      	bne.n	800539c <HAL_UART_IRQHandler+0x2e4>
 800539a:	e137      	b.n	800560c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800539c:	23a0      	movs	r3, #160	@ 0xa0
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2210      	movs	r2, #16
 80053a4:	4013      	ands	r3, r2
 80053a6:	d100      	bne.n	80053aa <HAL_UART_IRQHandler+0x2f2>
 80053a8:	e130      	b.n	800560c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2210      	movs	r2, #16
 80053b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2240      	movs	r2, #64	@ 0x40
 80053ba:	4013      	ands	r3, r2
 80053bc:	2b40      	cmp	r3, #64	@ 0x40
 80053be:	d000      	beq.n	80053c2 <HAL_UART_IRQHandler+0x30a>
 80053c0:	e0a4      	b.n	800550c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2280      	movs	r2, #128	@ 0x80
 80053c6:	589b      	ldr	r3, [r3, r2]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	217e      	movs	r1, #126	@ 0x7e
 80053ce:	187b      	adds	r3, r7, r1
 80053d0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80053d2:	187b      	adds	r3, r7, r1
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d100      	bne.n	80053dc <HAL_UART_IRQHandler+0x324>
 80053da:	e185      	b.n	80056e8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	225c      	movs	r2, #92	@ 0x5c
 80053e0:	5a9b      	ldrh	r3, [r3, r2]
 80053e2:	187a      	adds	r2, r7, r1
 80053e4:	8812      	ldrh	r2, [r2, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d300      	bcc.n	80053ec <HAL_UART_IRQHandler+0x334>
 80053ea:	e17d      	b.n	80056e8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	187a      	adds	r2, r7, r1
 80053f0:	215e      	movs	r1, #94	@ 0x5e
 80053f2:	8812      	ldrh	r2, [r2, #0]
 80053f4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2280      	movs	r2, #128	@ 0x80
 80053fa:	589b      	ldr	r3, [r3, r2]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2220      	movs	r2, #32
 8005402:	4013      	ands	r3, r2
 8005404:	d170      	bne.n	80054e8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005406:	f3ef 8310 	mrs	r3, PRIMASK
 800540a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800540c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800540e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005410:	2301      	movs	r3, #1
 8005412:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005416:	f383 8810 	msr	PRIMASK, r3
}
 800541a:	46c0      	nop			@ (mov r8, r8)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	49b4      	ldr	r1, [pc, #720]	@ (80056f8 <HAL_UART_IRQHandler+0x640>)
 8005428:	400a      	ands	r2, r1
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800542e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005432:	f383 8810 	msr	PRIMASK, r3
}
 8005436:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005438:	f3ef 8310 	mrs	r3, PRIMASK
 800543c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800543e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005440:	677b      	str	r3, [r7, #116]	@ 0x74
 8005442:	2301      	movs	r3, #1
 8005444:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005448:	f383 8810 	msr	PRIMASK, r3
}
 800544c:	46c0      	nop			@ (mov r8, r8)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2101      	movs	r1, #1
 800545a:	438a      	bics	r2, r1
 800545c:	609a      	str	r2, [r3, #8]
 800545e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005460:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005464:	f383 8810 	msr	PRIMASK, r3
}
 8005468:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546a:	f3ef 8310 	mrs	r3, PRIMASK
 800546e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005472:	673b      	str	r3, [r7, #112]	@ 0x70
 8005474:	2301      	movs	r3, #1
 8005476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800547a:	f383 8810 	msr	PRIMASK, r3
}
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2140      	movs	r1, #64	@ 0x40
 800548c:	438a      	bics	r2, r1
 800548e:	609a      	str	r2, [r3, #8]
 8005490:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005492:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005496:	f383 8810 	msr	PRIMASK, r3
}
 800549a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	228c      	movs	r2, #140	@ 0x8c
 80054a0:	2120      	movs	r1, #32
 80054a2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054aa:	f3ef 8310 	mrs	r3, PRIMASK
 80054ae:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80054b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054b4:	2301      	movs	r3, #1
 80054b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054ba:	f383 8810 	msr	PRIMASK, r3
}
 80054be:	46c0      	nop			@ (mov r8, r8)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2110      	movs	r1, #16
 80054cc:	438a      	bics	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054d6:	f383 8810 	msr	PRIMASK, r3
}
 80054da:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2280      	movs	r2, #128	@ 0x80
 80054e0:	589b      	ldr	r3, [r3, r2]
 80054e2:	0018      	movs	r0, r3
 80054e4:	f7fd fc9e 	bl	8002e24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	225c      	movs	r2, #92	@ 0x5c
 80054f2:	5a9a      	ldrh	r2, [r3, r2]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	215e      	movs	r1, #94	@ 0x5e
 80054f8:	5a5b      	ldrh	r3, [r3, r1]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	b29a      	uxth	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0011      	movs	r1, r2
 8005504:	0018      	movs	r0, r3
 8005506:	f000 f905 	bl	8005714 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800550a:	e0ed      	b.n	80056e8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	225c      	movs	r2, #92	@ 0x5c
 8005510:	5a99      	ldrh	r1, [r3, r2]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	225e      	movs	r2, #94	@ 0x5e
 8005516:	5a9b      	ldrh	r3, [r3, r2]
 8005518:	b29a      	uxth	r2, r3
 800551a:	208e      	movs	r0, #142	@ 0x8e
 800551c:	183b      	adds	r3, r7, r0
 800551e:	1a8a      	subs	r2, r1, r2
 8005520:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	225e      	movs	r2, #94	@ 0x5e
 8005526:	5a9b      	ldrh	r3, [r3, r2]
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d100      	bne.n	8005530 <HAL_UART_IRQHandler+0x478>
 800552e:	e0dd      	b.n	80056ec <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005530:	183b      	adds	r3, r7, r0
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d100      	bne.n	800553a <HAL_UART_IRQHandler+0x482>
 8005538:	e0d8      	b.n	80056ec <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800553a:	f3ef 8310 	mrs	r3, PRIMASK
 800553e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005540:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005542:	2488      	movs	r4, #136	@ 0x88
 8005544:	193a      	adds	r2, r7, r4
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	2301      	movs	r3, #1
 800554a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f383 8810 	msr	PRIMASK, r3
}
 8005552:	46c0      	nop			@ (mov r8, r8)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4967      	ldr	r1, [pc, #412]	@ (80056fc <HAL_UART_IRQHandler+0x644>)
 8005560:	400a      	ands	r2, r1
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	193b      	adds	r3, r7, r4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f383 8810 	msr	PRIMASK, r3
}
 8005570:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005572:	f3ef 8310 	mrs	r3, PRIMASK
 8005576:	61bb      	str	r3, [r7, #24]
  return(result);
 8005578:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800557a:	2484      	movs	r4, #132	@ 0x84
 800557c:	193a      	adds	r2, r7, r4
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	2301      	movs	r3, #1
 8005582:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f383 8810 	msr	PRIMASK, r3
}
 800558a:	46c0      	nop			@ (mov r8, r8)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	495a      	ldr	r1, [pc, #360]	@ (8005700 <HAL_UART_IRQHandler+0x648>)
 8005598:	400a      	ands	r2, r1
 800559a:	609a      	str	r2, [r3, #8]
 800559c:	193b      	adds	r3, r7, r4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	f383 8810 	msr	PRIMASK, r3
}
 80055a8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	228c      	movs	r2, #140	@ 0x8c
 80055ae:	2120      	movs	r1, #32
 80055b0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055be:	f3ef 8310 	mrs	r3, PRIMASK
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c6:	2480      	movs	r4, #128	@ 0x80
 80055c8:	193a      	adds	r2, r7, r4
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	2301      	movs	r3, #1
 80055ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	f383 8810 	msr	PRIMASK, r3
}
 80055d6:	46c0      	nop			@ (mov r8, r8)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2110      	movs	r1, #16
 80055e4:	438a      	bics	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	193b      	adds	r3, r7, r4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f0:	f383 8810 	msr	PRIMASK, r3
}
 80055f4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055fc:	183b      	adds	r3, r7, r0
 80055fe:	881a      	ldrh	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	0011      	movs	r1, r2
 8005604:	0018      	movs	r0, r3
 8005606:	f000 f885 	bl	8005714 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800560a:	e06f      	b.n	80056ec <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800560c:	23a4      	movs	r3, #164	@ 0xa4
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	2380      	movs	r3, #128	@ 0x80
 8005614:	035b      	lsls	r3, r3, #13
 8005616:	4013      	ands	r3, r2
 8005618:	d010      	beq.n	800563c <HAL_UART_IRQHandler+0x584>
 800561a:	239c      	movs	r3, #156	@ 0x9c
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2380      	movs	r3, #128	@ 0x80
 8005622:	03db      	lsls	r3, r3, #15
 8005624:	4013      	ands	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2280      	movs	r2, #128	@ 0x80
 800562e:	0352      	lsls	r2, r2, #13
 8005630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	0018      	movs	r0, r3
 8005636:	f001 fd45 	bl	80070c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800563a:	e05a      	b.n	80056f2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800563c:	23a4      	movs	r3, #164	@ 0xa4
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2280      	movs	r2, #128	@ 0x80
 8005644:	4013      	ands	r3, r2
 8005646:	d016      	beq.n	8005676 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005648:	23a0      	movs	r3, #160	@ 0xa0
 800564a:	18fb      	adds	r3, r7, r3
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2280      	movs	r2, #128	@ 0x80
 8005650:	4013      	ands	r3, r2
 8005652:	d106      	bne.n	8005662 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005654:	239c      	movs	r3, #156	@ 0x9c
 8005656:	18fb      	adds	r3, r7, r3
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	2380      	movs	r3, #128	@ 0x80
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	4013      	ands	r3, r2
 8005660:	d009      	beq.n	8005676 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005666:	2b00      	cmp	r3, #0
 8005668:	d042      	beq.n	80056f0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	0010      	movs	r0, r2
 8005672:	4798      	blx	r3
    }
    return;
 8005674:	e03c      	b.n	80056f0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005676:	23a4      	movs	r3, #164	@ 0xa4
 8005678:	18fb      	adds	r3, r7, r3
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2240      	movs	r2, #64	@ 0x40
 800567e:	4013      	ands	r3, r2
 8005680:	d00a      	beq.n	8005698 <HAL_UART_IRQHandler+0x5e0>
 8005682:	23a0      	movs	r3, #160	@ 0xa0
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2240      	movs	r2, #64	@ 0x40
 800568a:	4013      	ands	r3, r2
 800568c:	d004      	beq.n	8005698 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	0018      	movs	r0, r3
 8005692:	f000 ffdb 	bl	800664c <UART_EndTransmit_IT>
    return;
 8005696:	e02c      	b.n	80056f2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005698:	23a4      	movs	r3, #164	@ 0xa4
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	2380      	movs	r3, #128	@ 0x80
 80056a0:	041b      	lsls	r3, r3, #16
 80056a2:	4013      	ands	r3, r2
 80056a4:	d00b      	beq.n	80056be <HAL_UART_IRQHandler+0x606>
 80056a6:	23a0      	movs	r3, #160	@ 0xa0
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	2380      	movs	r3, #128	@ 0x80
 80056ae:	05db      	lsls	r3, r3, #23
 80056b0:	4013      	ands	r3, r2
 80056b2:	d004      	beq.n	80056be <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	0018      	movs	r0, r3
 80056b8:	f001 fd14 	bl	80070e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056bc:	e019      	b.n	80056f2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80056be:	23a4      	movs	r3, #164	@ 0xa4
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	2380      	movs	r3, #128	@ 0x80
 80056c6:	045b      	lsls	r3, r3, #17
 80056c8:	4013      	ands	r3, r2
 80056ca:	d012      	beq.n	80056f2 <HAL_UART_IRQHandler+0x63a>
 80056cc:	23a0      	movs	r3, #160	@ 0xa0
 80056ce:	18fb      	adds	r3, r7, r3
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	da0d      	bge.n	80056f2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0018      	movs	r0, r3
 80056da:	f001 fcfb 	bl	80070d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056de:	e008      	b.n	80056f2 <HAL_UART_IRQHandler+0x63a>
      return;
 80056e0:	46c0      	nop			@ (mov r8, r8)
 80056e2:	e006      	b.n	80056f2 <HAL_UART_IRQHandler+0x63a>
    return;
 80056e4:	46c0      	nop			@ (mov r8, r8)
 80056e6:	e004      	b.n	80056f2 <HAL_UART_IRQHandler+0x63a>
      return;
 80056e8:	46c0      	nop			@ (mov r8, r8)
 80056ea:	e002      	b.n	80056f2 <HAL_UART_IRQHandler+0x63a>
      return;
 80056ec:	46c0      	nop			@ (mov r8, r8)
 80056ee:	e000      	b.n	80056f2 <HAL_UART_IRQHandler+0x63a>
    return;
 80056f0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b02a      	add	sp, #168	@ 0xa8
 80056f6:	bdb0      	pop	{r4, r5, r7, pc}
 80056f8:	fffffeff 	.word	0xfffffeff
 80056fc:	fffffedf 	.word	0xfffffedf
 8005700:	effffffe 	.word	0xeffffffe

08005704 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800570c:	46c0      	nop			@ (mov r8, r8)
 800570e:	46bd      	mov	sp, r7
 8005710:	b002      	add	sp, #8
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	000a      	movs	r2, r1
 800571e:	1cbb      	adds	r3, r7, #2
 8005720:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	46bd      	mov	sp, r7
 8005726:	b002      	add	sp, #8
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800572c:	b5b0      	push	{r4, r5, r7, lr}
 800572e:	b090      	sub	sp, #64	@ 0x40
 8005730:	af00      	add	r7, sp, #0
 8005732:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005734:	231a      	movs	r3, #26
 8005736:	2220      	movs	r2, #32
 8005738:	189b      	adds	r3, r3, r2
 800573a:	19db      	adds	r3, r3, r7
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	431a      	orrs	r2, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	431a      	orrs	r2, r3
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	4313      	orrs	r3, r2
 8005756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4ac4      	ldr	r2, [pc, #784]	@ (8005a70 <UART_SetConfig+0x344>)
 8005760:	4013      	ands	r3, r2
 8005762:	0019      	movs	r1, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576a:	430b      	orrs	r3, r1
 800576c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4abf      	ldr	r2, [pc, #764]	@ (8005a74 <UART_SetConfig+0x348>)
 8005776:	4013      	ands	r3, r2
 8005778:	0018      	movs	r0, r3
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	68d9      	ldr	r1, [r3, #12]
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	0003      	movs	r3, r0
 8005784:	430b      	orrs	r3, r1
 8005786:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4ab9      	ldr	r2, [pc, #740]	@ (8005a78 <UART_SetConfig+0x34c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d004      	beq.n	80057a2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800579e:	4313      	orrs	r3, r2
 80057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	4ab4      	ldr	r2, [pc, #720]	@ (8005a7c <UART_SetConfig+0x350>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	0019      	movs	r1, r3
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b4:	430b      	orrs	r3, r1
 80057b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	220f      	movs	r2, #15
 80057c0:	4393      	bics	r3, r2
 80057c2:	0018      	movs	r0, r3
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	0003      	movs	r3, r0
 80057ce:	430b      	orrs	r3, r1
 80057d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4aaa      	ldr	r2, [pc, #680]	@ (8005a80 <UART_SetConfig+0x354>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d131      	bne.n	8005840 <UART_SetConfig+0x114>
 80057dc:	4ba9      	ldr	r3, [pc, #676]	@ (8005a84 <UART_SetConfig+0x358>)
 80057de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e0:	2203      	movs	r2, #3
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d01d      	beq.n	8005824 <UART_SetConfig+0xf8>
 80057e8:	d823      	bhi.n	8005832 <UART_SetConfig+0x106>
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d00c      	beq.n	8005808 <UART_SetConfig+0xdc>
 80057ee:	d820      	bhi.n	8005832 <UART_SetConfig+0x106>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <UART_SetConfig+0xce>
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d00e      	beq.n	8005816 <UART_SetConfig+0xea>
 80057f8:	e01b      	b.n	8005832 <UART_SetConfig+0x106>
 80057fa:	231b      	movs	r3, #27
 80057fc:	2220      	movs	r2, #32
 80057fe:	189b      	adds	r3, r3, r2
 8005800:	19db      	adds	r3, r3, r7
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	e071      	b.n	80058ec <UART_SetConfig+0x1c0>
 8005808:	231b      	movs	r3, #27
 800580a:	2220      	movs	r2, #32
 800580c:	189b      	adds	r3, r3, r2
 800580e:	19db      	adds	r3, r3, r7
 8005810:	2202      	movs	r2, #2
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	e06a      	b.n	80058ec <UART_SetConfig+0x1c0>
 8005816:	231b      	movs	r3, #27
 8005818:	2220      	movs	r2, #32
 800581a:	189b      	adds	r3, r3, r2
 800581c:	19db      	adds	r3, r3, r7
 800581e:	2204      	movs	r2, #4
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	e063      	b.n	80058ec <UART_SetConfig+0x1c0>
 8005824:	231b      	movs	r3, #27
 8005826:	2220      	movs	r2, #32
 8005828:	189b      	adds	r3, r3, r2
 800582a:	19db      	adds	r3, r3, r7
 800582c:	2208      	movs	r2, #8
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e05c      	b.n	80058ec <UART_SetConfig+0x1c0>
 8005832:	231b      	movs	r3, #27
 8005834:	2220      	movs	r2, #32
 8005836:	189b      	adds	r3, r3, r2
 8005838:	19db      	adds	r3, r3, r7
 800583a:	2210      	movs	r2, #16
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	e055      	b.n	80058ec <UART_SetConfig+0x1c0>
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a90      	ldr	r2, [pc, #576]	@ (8005a88 <UART_SetConfig+0x35c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d106      	bne.n	8005858 <UART_SetConfig+0x12c>
 800584a:	231b      	movs	r3, #27
 800584c:	2220      	movs	r2, #32
 800584e:	189b      	adds	r3, r3, r2
 8005850:	19db      	adds	r3, r3, r7
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e049      	b.n	80058ec <UART_SetConfig+0x1c0>
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a86      	ldr	r2, [pc, #536]	@ (8005a78 <UART_SetConfig+0x34c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d13e      	bne.n	80058e0 <UART_SetConfig+0x1b4>
 8005862:	4b88      	ldr	r3, [pc, #544]	@ (8005a84 <UART_SetConfig+0x358>)
 8005864:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005866:	23c0      	movs	r3, #192	@ 0xc0
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	4013      	ands	r3, r2
 800586c:	22c0      	movs	r2, #192	@ 0xc0
 800586e:	0112      	lsls	r2, r2, #4
 8005870:	4293      	cmp	r3, r2
 8005872:	d027      	beq.n	80058c4 <UART_SetConfig+0x198>
 8005874:	22c0      	movs	r2, #192	@ 0xc0
 8005876:	0112      	lsls	r2, r2, #4
 8005878:	4293      	cmp	r3, r2
 800587a:	d82a      	bhi.n	80058d2 <UART_SetConfig+0x1a6>
 800587c:	2280      	movs	r2, #128	@ 0x80
 800587e:	0112      	lsls	r2, r2, #4
 8005880:	4293      	cmp	r3, r2
 8005882:	d011      	beq.n	80058a8 <UART_SetConfig+0x17c>
 8005884:	2280      	movs	r2, #128	@ 0x80
 8005886:	0112      	lsls	r2, r2, #4
 8005888:	4293      	cmp	r3, r2
 800588a:	d822      	bhi.n	80058d2 <UART_SetConfig+0x1a6>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <UART_SetConfig+0x16e>
 8005890:	2280      	movs	r2, #128	@ 0x80
 8005892:	00d2      	lsls	r2, r2, #3
 8005894:	4293      	cmp	r3, r2
 8005896:	d00e      	beq.n	80058b6 <UART_SetConfig+0x18a>
 8005898:	e01b      	b.n	80058d2 <UART_SetConfig+0x1a6>
 800589a:	231b      	movs	r3, #27
 800589c:	2220      	movs	r2, #32
 800589e:	189b      	adds	r3, r3, r2
 80058a0:	19db      	adds	r3, r3, r7
 80058a2:	2200      	movs	r2, #0
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	e021      	b.n	80058ec <UART_SetConfig+0x1c0>
 80058a8:	231b      	movs	r3, #27
 80058aa:	2220      	movs	r2, #32
 80058ac:	189b      	adds	r3, r3, r2
 80058ae:	19db      	adds	r3, r3, r7
 80058b0:	2202      	movs	r2, #2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	e01a      	b.n	80058ec <UART_SetConfig+0x1c0>
 80058b6:	231b      	movs	r3, #27
 80058b8:	2220      	movs	r2, #32
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	19db      	adds	r3, r3, r7
 80058be:	2204      	movs	r2, #4
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	e013      	b.n	80058ec <UART_SetConfig+0x1c0>
 80058c4:	231b      	movs	r3, #27
 80058c6:	2220      	movs	r2, #32
 80058c8:	189b      	adds	r3, r3, r2
 80058ca:	19db      	adds	r3, r3, r7
 80058cc:	2208      	movs	r2, #8
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	e00c      	b.n	80058ec <UART_SetConfig+0x1c0>
 80058d2:	231b      	movs	r3, #27
 80058d4:	2220      	movs	r2, #32
 80058d6:	189b      	adds	r3, r3, r2
 80058d8:	19db      	adds	r3, r3, r7
 80058da:	2210      	movs	r2, #16
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	e005      	b.n	80058ec <UART_SetConfig+0x1c0>
 80058e0:	231b      	movs	r3, #27
 80058e2:	2220      	movs	r2, #32
 80058e4:	189b      	adds	r3, r3, r2
 80058e6:	19db      	adds	r3, r3, r7
 80058e8:	2210      	movs	r2, #16
 80058ea:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a61      	ldr	r2, [pc, #388]	@ (8005a78 <UART_SetConfig+0x34c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d000      	beq.n	80058f8 <UART_SetConfig+0x1cc>
 80058f6:	e092      	b.n	8005a1e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058f8:	231b      	movs	r3, #27
 80058fa:	2220      	movs	r2, #32
 80058fc:	189b      	adds	r3, r3, r2
 80058fe:	19db      	adds	r3, r3, r7
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b08      	cmp	r3, #8
 8005904:	d015      	beq.n	8005932 <UART_SetConfig+0x206>
 8005906:	dc18      	bgt.n	800593a <UART_SetConfig+0x20e>
 8005908:	2b04      	cmp	r3, #4
 800590a:	d00d      	beq.n	8005928 <UART_SetConfig+0x1fc>
 800590c:	dc15      	bgt.n	800593a <UART_SetConfig+0x20e>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <UART_SetConfig+0x1ec>
 8005912:	2b02      	cmp	r3, #2
 8005914:	d005      	beq.n	8005922 <UART_SetConfig+0x1f6>
 8005916:	e010      	b.n	800593a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005918:	f7fe fa04 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 800591c:	0003      	movs	r3, r0
 800591e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005920:	e014      	b.n	800594c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005922:	4b5a      	ldr	r3, [pc, #360]	@ (8005a8c <UART_SetConfig+0x360>)
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005926:	e011      	b.n	800594c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005928:	f7fe f970 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 800592c:	0003      	movs	r3, r0
 800592e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005930:	e00c      	b.n	800594c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005932:	2380      	movs	r3, #128	@ 0x80
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005938:	e008      	b.n	800594c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800593e:	231a      	movs	r3, #26
 8005940:	2220      	movs	r2, #32
 8005942:	189b      	adds	r3, r3, r2
 8005944:	19db      	adds	r3, r3, r7
 8005946:	2201      	movs	r2, #1
 8005948:	701a      	strb	r2, [r3, #0]
        break;
 800594a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800594c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594e:	2b00      	cmp	r3, #0
 8005950:	d100      	bne.n	8005954 <UART_SetConfig+0x228>
 8005952:	e147      	b.n	8005be4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005958:	4b4d      	ldr	r3, [pc, #308]	@ (8005a90 <UART_SetConfig+0x364>)
 800595a:	0052      	lsls	r2, r2, #1
 800595c:	5ad3      	ldrh	r3, [r2, r3]
 800595e:	0019      	movs	r1, r3
 8005960:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005962:	f7fa fbcf 	bl	8000104 <__udivsi3>
 8005966:	0003      	movs	r3, r0
 8005968:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	0013      	movs	r3, r2
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	189b      	adds	r3, r3, r2
 8005974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005976:	429a      	cmp	r2, r3
 8005978:	d305      	bcc.n	8005986 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005982:	429a      	cmp	r2, r3
 8005984:	d906      	bls.n	8005994 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005986:	231a      	movs	r3, #26
 8005988:	2220      	movs	r2, #32
 800598a:	189b      	adds	r3, r3, r2
 800598c:	19db      	adds	r3, r3, r7
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	e127      	b.n	8005be4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	2300      	movs	r3, #0
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005a90 <UART_SetConfig+0x364>)
 80059a2:	0052      	lsls	r2, r2, #1
 80059a4:	5ad3      	ldrh	r3, [r2, r3]
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	69b8      	ldr	r0, [r7, #24]
 80059b2:	69f9      	ldr	r1, [r7, #28]
 80059b4:	f7fa fc32 	bl	800021c <__aeabi_uldivmod>
 80059b8:	0002      	movs	r2, r0
 80059ba:	000b      	movs	r3, r1
 80059bc:	0e11      	lsrs	r1, r2, #24
 80059be:	021d      	lsls	r5, r3, #8
 80059c0:	430d      	orrs	r5, r1
 80059c2:	0214      	lsls	r4, r2, #8
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	60bb      	str	r3, [r7, #8]
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68b8      	ldr	r0, [r7, #8]
 80059d2:	68f9      	ldr	r1, [r7, #12]
 80059d4:	1900      	adds	r0, r0, r4
 80059d6:	4169      	adcs	r1, r5
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	603b      	str	r3, [r7, #0]
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f7fa fc19 	bl	800021c <__aeabi_uldivmod>
 80059ea:	0002      	movs	r2, r0
 80059ec:	000b      	movs	r3, r1
 80059ee:	0013      	movs	r3, r2
 80059f0:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f4:	23c0      	movs	r3, #192	@ 0xc0
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d309      	bcc.n	8005a10 <UART_SetConfig+0x2e4>
 80059fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059fe:	2380      	movs	r3, #128	@ 0x80
 8005a00:	035b      	lsls	r3, r3, #13
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d204      	bcs.n	8005a10 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a0c:	60da      	str	r2, [r3, #12]
 8005a0e:	e0e9      	b.n	8005be4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005a10:	231a      	movs	r3, #26
 8005a12:	2220      	movs	r2, #32
 8005a14:	189b      	adds	r3, r3, r2
 8005a16:	19db      	adds	r3, r3, r7
 8005a18:	2201      	movs	r2, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	e0e2      	b.n	8005be4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	69da      	ldr	r2, [r3, #28]
 8005a22:	2380      	movs	r3, #128	@ 0x80
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d000      	beq.n	8005a2c <UART_SetConfig+0x300>
 8005a2a:	e083      	b.n	8005b34 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005a2c:	231b      	movs	r3, #27
 8005a2e:	2220      	movs	r2, #32
 8005a30:	189b      	adds	r3, r3, r2
 8005a32:	19db      	adds	r3, r3, r7
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d015      	beq.n	8005a66 <UART_SetConfig+0x33a>
 8005a3a:	dc2b      	bgt.n	8005a94 <UART_SetConfig+0x368>
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d00d      	beq.n	8005a5c <UART_SetConfig+0x330>
 8005a40:	dc28      	bgt.n	8005a94 <UART_SetConfig+0x368>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <UART_SetConfig+0x320>
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d005      	beq.n	8005a56 <UART_SetConfig+0x32a>
 8005a4a:	e023      	b.n	8005a94 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a4c:	f7fe f96a 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 8005a50:	0003      	movs	r3, r0
 8005a52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a54:	e027      	b.n	8005aa6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <UART_SetConfig+0x360>)
 8005a58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a5a:	e024      	b.n	8005aa6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a5c:	f7fe f8d6 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8005a60:	0003      	movs	r3, r0
 8005a62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a64:	e01f      	b.n	8005aa6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a66:	2380      	movs	r3, #128	@ 0x80
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a6c:	e01b      	b.n	8005aa6 <UART_SetConfig+0x37a>
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	cfff69f3 	.word	0xcfff69f3
 8005a74:	ffffcfff 	.word	0xffffcfff
 8005a78:	40008000 	.word	0x40008000
 8005a7c:	11fff4ff 	.word	0x11fff4ff
 8005a80:	40013800 	.word	0x40013800
 8005a84:	40021000 	.word	0x40021000
 8005a88:	40004400 	.word	0x40004400
 8005a8c:	00f42400 	.word	0x00f42400
 8005a90:	08007508 	.word	0x08007508
      default:
        pclk = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005a98:	231a      	movs	r3, #26
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	189b      	adds	r3, r3, r2
 8005a9e:	19db      	adds	r3, r3, r7
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
        break;
 8005aa4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d100      	bne.n	8005aae <UART_SetConfig+0x382>
 8005aac:	e09a      	b.n	8005be4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ab2:	4b58      	ldr	r3, [pc, #352]	@ (8005c14 <UART_SetConfig+0x4e8>)
 8005ab4:	0052      	lsls	r2, r2, #1
 8005ab6:	5ad3      	ldrh	r3, [r2, r3]
 8005ab8:	0019      	movs	r1, r3
 8005aba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005abc:	f7fa fb22 	bl	8000104 <__udivsi3>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	005a      	lsls	r2, r3, #1
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	18d2      	adds	r2, r2, r3
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	0019      	movs	r1, r3
 8005ad2:	0010      	movs	r0, r2
 8005ad4:	f7fa fb16 	bl	8000104 <__udivsi3>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	2b0f      	cmp	r3, #15
 8005ae0:	d921      	bls.n	8005b26 <UART_SetConfig+0x3fa>
 8005ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae4:	2380      	movs	r3, #128	@ 0x80
 8005ae6:	025b      	lsls	r3, r3, #9
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d21c      	bcs.n	8005b26 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	200e      	movs	r0, #14
 8005af2:	2420      	movs	r4, #32
 8005af4:	1903      	adds	r3, r0, r4
 8005af6:	19db      	adds	r3, r3, r7
 8005af8:	210f      	movs	r1, #15
 8005afa:	438a      	bics	r2, r1
 8005afc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2207      	movs	r2, #7
 8005b06:	4013      	ands	r3, r2
 8005b08:	b299      	uxth	r1, r3
 8005b0a:	1903      	adds	r3, r0, r4
 8005b0c:	19db      	adds	r3, r3, r7
 8005b0e:	1902      	adds	r2, r0, r4
 8005b10:	19d2      	adds	r2, r2, r7
 8005b12:	8812      	ldrh	r2, [r2, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	1902      	adds	r2, r0, r4
 8005b1e:	19d2      	adds	r2, r2, r7
 8005b20:	8812      	ldrh	r2, [r2, #0]
 8005b22:	60da      	str	r2, [r3, #12]
 8005b24:	e05e      	b.n	8005be4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005b26:	231a      	movs	r3, #26
 8005b28:	2220      	movs	r2, #32
 8005b2a:	189b      	adds	r3, r3, r2
 8005b2c:	19db      	adds	r3, r3, r7
 8005b2e:	2201      	movs	r2, #1
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e057      	b.n	8005be4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b34:	231b      	movs	r3, #27
 8005b36:	2220      	movs	r2, #32
 8005b38:	189b      	adds	r3, r3, r2
 8005b3a:	19db      	adds	r3, r3, r7
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d015      	beq.n	8005b6e <UART_SetConfig+0x442>
 8005b42:	dc18      	bgt.n	8005b76 <UART_SetConfig+0x44a>
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d00d      	beq.n	8005b64 <UART_SetConfig+0x438>
 8005b48:	dc15      	bgt.n	8005b76 <UART_SetConfig+0x44a>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <UART_SetConfig+0x428>
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d005      	beq.n	8005b5e <UART_SetConfig+0x432>
 8005b52:	e010      	b.n	8005b76 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b54:	f7fe f8e6 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 8005b58:	0003      	movs	r3, r0
 8005b5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b5c:	e014      	b.n	8005b88 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005c18 <UART_SetConfig+0x4ec>)
 8005b60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b62:	e011      	b.n	8005b88 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b64:	f7fe f852 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b6c:	e00c      	b.n	8005b88 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6e:	2380      	movs	r3, #128	@ 0x80
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b74:	e008      	b.n	8005b88 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005b7a:	231a      	movs	r3, #26
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	189b      	adds	r3, r3, r2
 8005b80:	19db      	adds	r3, r3, r7
 8005b82:	2201      	movs	r2, #1
 8005b84:	701a      	strb	r2, [r3, #0]
        break;
 8005b86:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d02a      	beq.n	8005be4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b92:	4b20      	ldr	r3, [pc, #128]	@ (8005c14 <UART_SetConfig+0x4e8>)
 8005b94:	0052      	lsls	r2, r2, #1
 8005b96:	5ad3      	ldrh	r3, [r2, r3]
 8005b98:	0019      	movs	r1, r3
 8005b9a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005b9c:	f7fa fab2 	bl	8000104 <__udivsi3>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	001a      	movs	r2, r3
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	18d2      	adds	r2, r2, r3
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	0019      	movs	r1, r3
 8005bb2:	0010      	movs	r0, r2
 8005bb4:	f7fa faa6 	bl	8000104 <__udivsi3>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	2b0f      	cmp	r3, #15
 8005bc0:	d90a      	bls.n	8005bd8 <UART_SetConfig+0x4ac>
 8005bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc4:	2380      	movs	r3, #128	@ 0x80
 8005bc6:	025b      	lsls	r3, r3, #9
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d205      	bcs.n	8005bd8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60da      	str	r2, [r3, #12]
 8005bd6:	e005      	b.n	8005be4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd8:	231a      	movs	r3, #26
 8005bda:	2220      	movs	r2, #32
 8005bdc:	189b      	adds	r3, r3, r2
 8005bde:	19db      	adds	r3, r3, r7
 8005be0:	2201      	movs	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be6:	226a      	movs	r2, #106	@ 0x6a
 8005be8:	2101      	movs	r1, #1
 8005bea:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	2268      	movs	r2, #104	@ 0x68
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c00:	231a      	movs	r3, #26
 8005c02:	2220      	movs	r2, #32
 8005c04:	189b      	adds	r3, r3, r2
 8005c06:	19db      	adds	r3, r3, r7
 8005c08:	781b      	ldrb	r3, [r3, #0]
}
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b010      	add	sp, #64	@ 0x40
 8005c10:	bdb0      	pop	{r4, r5, r7, pc}
 8005c12:	46c0      	nop			@ (mov r8, r8)
 8005c14:	08007508 	.word	0x08007508
 8005c18:	00f42400 	.word	0x00f42400

08005c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c28:	2208      	movs	r2, #8
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	4a4a      	ldr	r2, [pc, #296]	@ (8005d60 <UART_AdvFeatureConfig+0x144>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	0019      	movs	r1, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	d00b      	beq.n	8005c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	4a43      	ldr	r2, [pc, #268]	@ (8005d64 <UART_AdvFeatureConfig+0x148>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	0019      	movs	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d00b      	beq.n	8005c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4a3b      	ldr	r2, [pc, #236]	@ (8005d68 <UART_AdvFeatureConfig+0x14c>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8e:	2204      	movs	r2, #4
 8005c90:	4013      	ands	r3, r2
 8005c92:	d00b      	beq.n	8005cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	4a34      	ldr	r2, [pc, #208]	@ (8005d6c <UART_AdvFeatureConfig+0x150>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	0019      	movs	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb0:	2210      	movs	r2, #16
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d00b      	beq.n	8005cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8005d70 <UART_AdvFeatureConfig+0x154>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	0019      	movs	r1, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	d00b      	beq.n	8005cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	4a25      	ldr	r2, [pc, #148]	@ (8005d74 <UART_AdvFeatureConfig+0x158>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	0019      	movs	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf4:	2240      	movs	r2, #64	@ 0x40
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d01d      	beq.n	8005d36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	4a1d      	ldr	r2, [pc, #116]	@ (8005d78 <UART_AdvFeatureConfig+0x15c>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	0019      	movs	r1, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d16:	2380      	movs	r3, #128	@ 0x80
 8005d18:	035b      	lsls	r3, r3, #13
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d10b      	bne.n	8005d36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	4a15      	ldr	r2, [pc, #84]	@ (8005d7c <UART_AdvFeatureConfig+0x160>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	0019      	movs	r1, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	2280      	movs	r2, #128	@ 0x80
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d00b      	beq.n	8005d58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	4a0e      	ldr	r2, [pc, #56]	@ (8005d80 <UART_AdvFeatureConfig+0x164>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	605a      	str	r2, [r3, #4]
  }
}
 8005d58:	46c0      	nop			@ (mov r8, r8)
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b002      	add	sp, #8
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	ffff7fff 	.word	0xffff7fff
 8005d64:	fffdffff 	.word	0xfffdffff
 8005d68:	fffeffff 	.word	0xfffeffff
 8005d6c:	fffbffff 	.word	0xfffbffff
 8005d70:	ffffefff 	.word	0xffffefff
 8005d74:	ffffdfff 	.word	0xffffdfff
 8005d78:	ffefffff 	.word	0xffefffff
 8005d7c:	ff9fffff 	.word	0xff9fffff
 8005d80:	fff7ffff 	.word	0xfff7ffff

08005d84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b092      	sub	sp, #72	@ 0x48
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2290      	movs	r2, #144	@ 0x90
 8005d90:	2100      	movs	r1, #0
 8005d92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d94:	f7fc f9c2 	bl	800211c <HAL_GetTick>
 8005d98:	0003      	movs	r3, r0
 8005d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2208      	movs	r2, #8
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d12d      	bne.n	8005e06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dac:	2280      	movs	r2, #128	@ 0x80
 8005dae:	0391      	lsls	r1, r2, #14
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4a47      	ldr	r2, [pc, #284]	@ (8005ed0 <UART_CheckIdleState+0x14c>)
 8005db4:	9200      	str	r2, [sp, #0]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f000 f88e 	bl	8005ed8 <UART_WaitOnFlagUntilTimeout>
 8005dbc:	1e03      	subs	r3, r0, #0
 8005dbe:	d022      	beq.n	8005e06 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dca:	2301      	movs	r3, #1
 8005dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd0:	f383 8810 	msr	PRIMASK, r3
}
 8005dd4:	46c0      	nop			@ (mov r8, r8)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2180      	movs	r1, #128	@ 0x80
 8005de2:	438a      	bics	r2, r1
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dec:	f383 8810 	msr	PRIMASK, r3
}
 8005df0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2288      	movs	r2, #136	@ 0x88
 8005df6:	2120      	movs	r1, #32
 8005df8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2284      	movs	r2, #132	@ 0x84
 8005dfe:	2100      	movs	r1, #0
 8005e00:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e060      	b.n	8005ec8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d146      	bne.n	8005ea2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e16:	2280      	movs	r2, #128	@ 0x80
 8005e18:	03d1      	lsls	r1, r2, #15
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed0 <UART_CheckIdleState+0x14c>)
 8005e1e:	9200      	str	r2, [sp, #0]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f000 f859 	bl	8005ed8 <UART_WaitOnFlagUntilTimeout>
 8005e26:	1e03      	subs	r3, r0, #0
 8005e28:	d03b      	beq.n	8005ea2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e30:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e34:	2301      	movs	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f383 8810 	msr	PRIMASK, r3
}
 8005e3e:	46c0      	nop			@ (mov r8, r8)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4922      	ldr	r1, [pc, #136]	@ (8005ed4 <UART_CheckIdleState+0x150>)
 8005e4c:	400a      	ands	r2, r1
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f383 8810 	msr	PRIMASK, r3
}
 8005e5a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e60:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e62:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e66:	2301      	movs	r3, #1
 8005e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f383 8810 	msr	PRIMASK, r3
}
 8005e70:	46c0      	nop			@ (mov r8, r8)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	438a      	bics	r2, r1
 8005e80:	609a      	str	r2, [r3, #8]
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	f383 8810 	msr	PRIMASK, r3
}
 8005e8c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	228c      	movs	r2, #140	@ 0x8c
 8005e92:	2120      	movs	r1, #32
 8005e94:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2284      	movs	r2, #132	@ 0x84
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e012      	b.n	8005ec8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2288      	movs	r2, #136	@ 0x88
 8005ea6:	2120      	movs	r1, #32
 8005ea8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	228c      	movs	r2, #140	@ 0x8c
 8005eae:	2120      	movs	r1, #32
 8005eb0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2284      	movs	r2, #132	@ 0x84
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	0018      	movs	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b010      	add	sp, #64	@ 0x40
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	01ffffff 	.word	0x01ffffff
 8005ed4:	fffffedf 	.word	0xfffffedf

08005ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	1dfb      	adds	r3, r7, #7
 8005ee6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee8:	e051      	b.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	3301      	adds	r3, #1
 8005eee:	d04e      	beq.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef0:	f7fc f914 	bl	800211c <HAL_GetTick>
 8005ef4:	0002      	movs	r2, r0
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d302      	bcc.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e051      	b.n	8005fae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2204      	movs	r2, #4
 8005f12:	4013      	ands	r3, r2
 8005f14:	d03b      	beq.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b80      	cmp	r3, #128	@ 0x80
 8005f1a:	d038      	beq.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b40      	cmp	r3, #64	@ 0x40
 8005f20:	d035      	beq.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d111      	bne.n	8005f54 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2208      	movs	r2, #8
 8005f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f000 f960 	bl	8006200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2290      	movs	r2, #144	@ 0x90
 8005f44:	2108      	movs	r1, #8
 8005f46:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2284      	movs	r2, #132	@ 0x84
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e02c      	b.n	8005fae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69da      	ldr	r2, [r3, #28]
 8005f5a:	2380      	movs	r3, #128	@ 0x80
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	401a      	ands	r2, r3
 8005f60:	2380      	movs	r3, #128	@ 0x80
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d112      	bne.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2280      	movs	r2, #128	@ 0x80
 8005f6e:	0112      	lsls	r2, r2, #4
 8005f70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f000 f943 	bl	8006200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2290      	movs	r2, #144	@ 0x90
 8005f7e:	2120      	movs	r1, #32
 8005f80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2284      	movs	r2, #132	@ 0x84
 8005f86:	2100      	movs	r1, #0
 8005f88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e00f      	b.n	8005fae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	4013      	ands	r3, r2
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	425a      	negs	r2, r3
 8005f9e:	4153      	adcs	r3, r2
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	001a      	movs	r2, r3
 8005fa4:	1dfb      	adds	r3, r7, #7
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d09e      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	0018      	movs	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b004      	add	sp, #16
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b098      	sub	sp, #96	@ 0x60
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	1dbb      	adds	r3, r7, #6
 8005fc4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	1dba      	adds	r2, r7, #6
 8005fd0:	215c      	movs	r1, #92	@ 0x5c
 8005fd2:	8812      	ldrh	r2, [r2, #0]
 8005fd4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1dba      	adds	r2, r7, #6
 8005fda:	215e      	movs	r1, #94	@ 0x5e
 8005fdc:	8812      	ldrh	r2, [r2, #0]
 8005fde:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	2380      	movs	r3, #128	@ 0x80
 8005fec:	015b      	lsls	r3, r3, #5
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d10d      	bne.n	800600e <UART_Start_Receive_IT+0x56>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <UART_Start_Receive_IT+0x4c>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2260      	movs	r2, #96	@ 0x60
 8005ffe:	497b      	ldr	r1, [pc, #492]	@ (80061ec <UART_Start_Receive_IT+0x234>)
 8006000:	5299      	strh	r1, [r3, r2]
 8006002:	e02e      	b.n	8006062 <UART_Start_Receive_IT+0xaa>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2260      	movs	r2, #96	@ 0x60
 8006008:	21ff      	movs	r1, #255	@ 0xff
 800600a:	5299      	strh	r1, [r3, r2]
 800600c:	e029      	b.n	8006062 <UART_Start_Receive_IT+0xaa>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10d      	bne.n	8006032 <UART_Start_Receive_IT+0x7a>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <UART_Start_Receive_IT+0x70>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2260      	movs	r2, #96	@ 0x60
 8006022:	21ff      	movs	r1, #255	@ 0xff
 8006024:	5299      	strh	r1, [r3, r2]
 8006026:	e01c      	b.n	8006062 <UART_Start_Receive_IT+0xaa>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2260      	movs	r2, #96	@ 0x60
 800602c:	217f      	movs	r1, #127	@ 0x7f
 800602e:	5299      	strh	r1, [r3, r2]
 8006030:	e017      	b.n	8006062 <UART_Start_Receive_IT+0xaa>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	2380      	movs	r3, #128	@ 0x80
 8006038:	055b      	lsls	r3, r3, #21
 800603a:	429a      	cmp	r2, r3
 800603c:	d10d      	bne.n	800605a <UART_Start_Receive_IT+0xa2>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <UART_Start_Receive_IT+0x98>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2260      	movs	r2, #96	@ 0x60
 800604a:	217f      	movs	r1, #127	@ 0x7f
 800604c:	5299      	strh	r1, [r3, r2]
 800604e:	e008      	b.n	8006062 <UART_Start_Receive_IT+0xaa>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2260      	movs	r2, #96	@ 0x60
 8006054:	213f      	movs	r1, #63	@ 0x3f
 8006056:	5299      	strh	r1, [r3, r2]
 8006058:	e003      	b.n	8006062 <UART_Start_Receive_IT+0xaa>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2260      	movs	r2, #96	@ 0x60
 800605e:	2100      	movs	r1, #0
 8006060:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2290      	movs	r2, #144	@ 0x90
 8006066:	2100      	movs	r1, #0
 8006068:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	228c      	movs	r2, #140	@ 0x8c
 800606e:	2122      	movs	r1, #34	@ 0x22
 8006070:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006072:	f3ef 8310 	mrs	r3, PRIMASK
 8006076:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8006078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800607c:	2301      	movs	r3, #1
 800607e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006082:	f383 8810 	msr	PRIMASK, r3
}
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2101      	movs	r1, #1
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
 8006098:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800609a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800609e:	f383 8810 	msr	PRIMASK, r3
}
 80060a2:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80060a8:	2380      	movs	r3, #128	@ 0x80
 80060aa:	059b      	lsls	r3, r3, #22
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d150      	bne.n	8006152 <UART_Start_Receive_IT+0x19a>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2268      	movs	r2, #104	@ 0x68
 80060b4:	5a9b      	ldrh	r3, [r3, r2]
 80060b6:	1dba      	adds	r2, r7, #6
 80060b8:	8812      	ldrh	r2, [r2, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d349      	bcc.n	8006152 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	2380      	movs	r3, #128	@ 0x80
 80060c4:	015b      	lsls	r3, r3, #5
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d107      	bne.n	80060da <UART_Start_Receive_IT+0x122>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4a46      	ldr	r2, [pc, #280]	@ (80061f0 <UART_Start_Receive_IT+0x238>)
 80060d6:	675a      	str	r2, [r3, #116]	@ 0x74
 80060d8:	e002      	b.n	80060e0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a45      	ldr	r2, [pc, #276]	@ (80061f4 <UART_Start_Receive_IT+0x23c>)
 80060de:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d019      	beq.n	800611c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e8:	f3ef 8310 	mrs	r3, PRIMASK
 80060ec:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80060ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060f2:	2301      	movs	r3, #1
 80060f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f8:	f383 8810 	msr	PRIMASK, r3
}
 80060fc:	46c0      	nop			@ (mov r8, r8)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2180      	movs	r1, #128	@ 0x80
 800610a:	0049      	lsls	r1, r1, #1
 800610c:	430a      	orrs	r2, r1
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006116:	f383 8810 	msr	PRIMASK, r3
}
 800611a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800611c:	f3ef 8310 	mrs	r3, PRIMASK
 8006120:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8006122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006124:	657b      	str	r3, [r7, #84]	@ 0x54
 8006126:	2301      	movs	r3, #1
 8006128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612c:	f383 8810 	msr	PRIMASK, r3
}
 8006130:	46c0      	nop			@ (mov r8, r8)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2180      	movs	r1, #128	@ 0x80
 800613e:	0549      	lsls	r1, r1, #21
 8006140:	430a      	orrs	r2, r1
 8006142:	609a      	str	r2, [r3, #8]
 8006144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006146:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	f383 8810 	msr	PRIMASK, r3
}
 800614e:	46c0      	nop			@ (mov r8, r8)
 8006150:	e047      	b.n	80061e2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	2380      	movs	r3, #128	@ 0x80
 8006158:	015b      	lsls	r3, r3, #5
 800615a:	429a      	cmp	r2, r3
 800615c:	d107      	bne.n	800616e <UART_Start_Receive_IT+0x1b6>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a23      	ldr	r2, [pc, #140]	@ (80061f8 <UART_Start_Receive_IT+0x240>)
 800616a:	675a      	str	r2, [r3, #116]	@ 0x74
 800616c:	e002      	b.n	8006174 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a22      	ldr	r2, [pc, #136]	@ (80061fc <UART_Start_Receive_IT+0x244>)
 8006172:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d019      	beq.n	80061b0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617c:	f3ef 8310 	mrs	r3, PRIMASK
 8006180:	61fb      	str	r3, [r7, #28]
  return(result);
 8006182:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006184:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006186:	2301      	movs	r3, #1
 8006188:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	f383 8810 	msr	PRIMASK, r3
}
 8006190:	46c0      	nop			@ (mov r8, r8)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2190      	movs	r1, #144	@ 0x90
 800619e:	0049      	lsls	r1, r1, #1
 80061a0:	430a      	orrs	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	f383 8810 	msr	PRIMASK, r3
}
 80061ae:	e018      	b.n	80061e2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b0:	f3ef 8310 	mrs	r3, PRIMASK
 80061b4:	613b      	str	r3, [r7, #16]
  return(result);
 80061b6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80061ba:	2301      	movs	r3, #1
 80061bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f383 8810 	msr	PRIMASK, r3
}
 80061c4:	46c0      	nop			@ (mov r8, r8)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2120      	movs	r1, #32
 80061d2:	430a      	orrs	r2, r1
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f383 8810 	msr	PRIMASK, r3
}
 80061e0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	0018      	movs	r0, r3
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b018      	add	sp, #96	@ 0x60
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	000001ff 	.word	0x000001ff
 80061f0:	08006d6d 	.word	0x08006d6d
 80061f4:	08006a2d 	.word	0x08006a2d
 80061f8:	08006869 	.word	0x08006869
 80061fc:	080066a5 	.word	0x080066a5

08006200 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08e      	sub	sp, #56	@ 0x38
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006208:	f3ef 8310 	mrs	r3, PRIMASK
 800620c:	617b      	str	r3, [r7, #20]
  return(result);
 800620e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006210:	637b      	str	r3, [r7, #52]	@ 0x34
 8006212:	2301      	movs	r3, #1
 8006214:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	f383 8810 	msr	PRIMASK, r3
}
 800621c:	46c0      	nop			@ (mov r8, r8)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4926      	ldr	r1, [pc, #152]	@ (80062c4 <UART_EndRxTransfer+0xc4>)
 800622a:	400a      	ands	r2, r1
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	f383 8810 	msr	PRIMASK, r3
}
 8006238:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800623a:	f3ef 8310 	mrs	r3, PRIMASK
 800623e:	623b      	str	r3, [r7, #32]
  return(result);
 8006240:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006242:	633b      	str	r3, [r7, #48]	@ 0x30
 8006244:	2301      	movs	r3, #1
 8006246:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	f383 8810 	msr	PRIMASK, r3
}
 800624e:	46c0      	nop			@ (mov r8, r8)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	491b      	ldr	r1, [pc, #108]	@ (80062c8 <UART_EndRxTransfer+0xc8>)
 800625c:	400a      	ands	r2, r1
 800625e:	609a      	str	r2, [r3, #8]
 8006260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006262:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006266:	f383 8810 	msr	PRIMASK, r3
}
 800626a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d118      	bne.n	80062a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006274:	f3ef 8310 	mrs	r3, PRIMASK
 8006278:	60bb      	str	r3, [r7, #8]
  return(result);
 800627a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800627c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800627e:	2301      	movs	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f383 8810 	msr	PRIMASK, r3
}
 8006288:	46c0      	nop			@ (mov r8, r8)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2110      	movs	r1, #16
 8006296:	438a      	bics	r2, r1
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f383 8810 	msr	PRIMASK, r3
}
 80062a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	228c      	movs	r2, #140	@ 0x8c
 80062aa:	2120      	movs	r1, #32
 80062ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062ba:	46c0      	nop			@ (mov r8, r8)
 80062bc:	46bd      	mov	sp, r7
 80062be:	b00e      	add	sp, #56	@ 0x38
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	fffffedf 	.word	0xfffffedf
 80062c8:	effffffe 	.word	0xeffffffe

080062cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	225e      	movs	r2, #94	@ 0x5e
 80062de:	2100      	movs	r1, #0
 80062e0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2256      	movs	r2, #86	@ 0x56
 80062e6:	2100      	movs	r1, #0
 80062e8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7ff fa09 	bl	8005704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062f2:	46c0      	nop			@ (mov r8, r8)
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b004      	add	sp, #16
 80062f8:	bd80      	pop	{r7, pc}

080062fa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b08a      	sub	sp, #40	@ 0x28
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2288      	movs	r2, #136	@ 0x88
 8006306:	589b      	ldr	r3, [r3, r2]
 8006308:	2b21      	cmp	r3, #33	@ 0x21
 800630a:	d14c      	bne.n	80063a6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2256      	movs	r2, #86	@ 0x56
 8006310:	5a9b      	ldrh	r3, [r3, r2]
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d132      	bne.n	800637e <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006318:	f3ef 8310 	mrs	r3, PRIMASK
 800631c:	60bb      	str	r3, [r7, #8]
  return(result);
 800631e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006320:	627b      	str	r3, [r7, #36]	@ 0x24
 8006322:	2301      	movs	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f383 8810 	msr	PRIMASK, r3
}
 800632c:	46c0      	nop			@ (mov r8, r8)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2180      	movs	r1, #128	@ 0x80
 800633a:	438a      	bics	r2, r1
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f383 8810 	msr	PRIMASK, r3
}
 8006348:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800634a:	f3ef 8310 	mrs	r3, PRIMASK
 800634e:	617b      	str	r3, [r7, #20]
  return(result);
 8006350:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006352:	623b      	str	r3, [r7, #32]
 8006354:	2301      	movs	r3, #1
 8006356:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	f383 8810 	msr	PRIMASK, r3
}
 800635e:	46c0      	nop			@ (mov r8, r8)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2140      	movs	r1, #64	@ 0x40
 800636c:	430a      	orrs	r2, r1
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f383 8810 	msr	PRIMASK, r3
}
 800637a:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800637c:	e013      	b.n	80063a6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2256      	movs	r2, #86	@ 0x56
 8006398:	5a9b      	ldrh	r3, [r3, r2]
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b299      	uxth	r1, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2256      	movs	r2, #86	@ 0x56
 80063a4:	5299      	strh	r1, [r3, r2]
}
 80063a6:	46c0      	nop			@ (mov r8, r8)
 80063a8:	46bd      	mov	sp, r7
 80063aa:	b00a      	add	sp, #40	@ 0x28
 80063ac:	bd80      	pop	{r7, pc}

080063ae <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b08c      	sub	sp, #48	@ 0x30
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2288      	movs	r2, #136	@ 0x88
 80063ba:	589b      	ldr	r3, [r3, r2]
 80063bc:	2b21      	cmp	r3, #33	@ 0x21
 80063be:	d151      	bne.n	8006464 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2256      	movs	r2, #86	@ 0x56
 80063c4:	5a9b      	ldrh	r3, [r3, r2]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d132      	bne.n	8006432 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063cc:	f3ef 8310 	mrs	r3, PRIMASK
 80063d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80063d2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80063d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063d6:	2301      	movs	r3, #1
 80063d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f383 8810 	msr	PRIMASK, r3
}
 80063e0:	46c0      	nop			@ (mov r8, r8)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2180      	movs	r1, #128	@ 0x80
 80063ee:	438a      	bics	r2, r1
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f383 8810 	msr	PRIMASK, r3
}
 80063fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006402:	61bb      	str	r3, [r7, #24]
  return(result);
 8006404:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006406:	627b      	str	r3, [r7, #36]	@ 0x24
 8006408:	2301      	movs	r3, #1
 800640a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f383 8810 	msr	PRIMASK, r3
}
 8006412:	46c0      	nop			@ (mov r8, r8)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2140      	movs	r1, #64	@ 0x40
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	f383 8810 	msr	PRIMASK, r3
}
 800642e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006430:	e018      	b.n	8006464 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006436:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	001a      	movs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	05d2      	lsls	r2, r2, #23
 8006444:	0dd2      	lsrs	r2, r2, #23
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800644c:	1c9a      	adds	r2, r3, #2
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2256      	movs	r2, #86	@ 0x56
 8006456:	5a9b      	ldrh	r3, [r3, r2]
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b299      	uxth	r1, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2256      	movs	r2, #86	@ 0x56
 8006462:	5299      	strh	r1, [r3, r2]
}
 8006464:	46c0      	nop			@ (mov r8, r8)
 8006466:	46bd      	mov	sp, r7
 8006468:	b00c      	add	sp, #48	@ 0x30
 800646a:	bd80      	pop	{r7, pc}

0800646c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	@ 0x30
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2288      	movs	r2, #136	@ 0x88
 8006478:	589b      	ldr	r3, [r3, r2]
 800647a:	2b21      	cmp	r3, #33	@ 0x21
 800647c:	d165      	bne.n	800654a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800647e:	232e      	movs	r3, #46	@ 0x2e
 8006480:	18fb      	adds	r3, r7, r3
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	216a      	movs	r1, #106	@ 0x6a
 8006486:	5a52      	ldrh	r2, [r2, r1]
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	e059      	b.n	8006540 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2256      	movs	r2, #86	@ 0x56
 8006490:	5a9b      	ldrh	r3, [r3, r2]
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d133      	bne.n	8006500 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006498:	f3ef 8310 	mrs	r3, PRIMASK
 800649c:	60fb      	str	r3, [r7, #12]
  return(result);
 800649e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80064a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064a2:	2301      	movs	r3, #1
 80064a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f383 8810 	msr	PRIMASK, r3
}
 80064ac:	46c0      	nop			@ (mov r8, r8)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4926      	ldr	r1, [pc, #152]	@ (8006554 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80064ba:	400a      	ands	r2, r1
 80064bc:	609a      	str	r2, [r3, #8]
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f383 8810 	msr	PRIMASK, r3
}
 80064c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ca:	f3ef 8310 	mrs	r3, PRIMASK
 80064ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80064d0:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d4:	2301      	movs	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f383 8810 	msr	PRIMASK, r3
}
 80064de:	46c0      	nop			@ (mov r8, r8)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2140      	movs	r1, #64	@ 0x40
 80064ec:	430a      	orrs	r2, r1
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	f383 8810 	msr	PRIMASK, r3
}
 80064fa:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80064fc:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80064fe:	e024      	b.n	800654a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	2280      	movs	r2, #128	@ 0x80
 8006508:	4013      	ands	r3, r2
 800650a:	d013      	beq.n	8006534 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006510:	781a      	ldrb	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2256      	movs	r2, #86	@ 0x56
 8006526:	5a9b      	ldrh	r3, [r3, r2]
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b299      	uxth	r1, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2256      	movs	r2, #86	@ 0x56
 8006532:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006534:	212e      	movs	r1, #46	@ 0x2e
 8006536:	187b      	adds	r3, r7, r1
 8006538:	881a      	ldrh	r2, [r3, #0]
 800653a:	187b      	adds	r3, r7, r1
 800653c:	3a01      	subs	r2, #1
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	232e      	movs	r3, #46	@ 0x2e
 8006542:	18fb      	adds	r3, r7, r3
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1a0      	bne.n	800648c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	46bd      	mov	sp, r7
 800654e:	b00c      	add	sp, #48	@ 0x30
 8006550:	bd80      	pop	{r7, pc}
 8006552:	46c0      	nop			@ (mov r8, r8)
 8006554:	ff7fffff 	.word	0xff7fffff

08006558 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08c      	sub	sp, #48	@ 0x30
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2288      	movs	r2, #136	@ 0x88
 8006564:	589b      	ldr	r3, [r3, r2]
 8006566:	2b21      	cmp	r3, #33	@ 0x21
 8006568:	d16a      	bne.n	8006640 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800656a:	232e      	movs	r3, #46	@ 0x2e
 800656c:	18fb      	adds	r3, r7, r3
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	216a      	movs	r1, #106	@ 0x6a
 8006572:	5a52      	ldrh	r2, [r2, r1]
 8006574:	801a      	strh	r2, [r3, #0]
 8006576:	e05e      	b.n	8006636 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2256      	movs	r2, #86	@ 0x56
 800657c:	5a9b      	ldrh	r3, [r3, r2]
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d133      	bne.n	80065ec <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006584:	f3ef 8310 	mrs	r3, PRIMASK
 8006588:	60bb      	str	r3, [r7, #8]
  return(result);
 800658a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
 800658e:	2301      	movs	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f383 8810 	msr	PRIMASK, r3
}
 8006598:	46c0      	nop			@ (mov r8, r8)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4928      	ldr	r1, [pc, #160]	@ (8006648 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80065a6:	400a      	ands	r2, r1
 80065a8:	609a      	str	r2, [r3, #8]
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f383 8810 	msr	PRIMASK, r3
}
 80065b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ba:	617b      	str	r3, [r7, #20]
  return(result);
 80065bc:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065be:	623b      	str	r3, [r7, #32]
 80065c0:	2301      	movs	r3, #1
 80065c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f383 8810 	msr	PRIMASK, r3
}
 80065ca:	46c0      	nop			@ (mov r8, r8)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2140      	movs	r1, #64	@ 0x40
 80065d8:	430a      	orrs	r2, r1
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f383 8810 	msr	PRIMASK, r3
}
 80065e6:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80065e8:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80065ea:	e029      	b.n	8006640 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	2280      	movs	r2, #128	@ 0x80
 80065f4:	4013      	ands	r3, r2
 80065f6:	d018      	beq.n	800662a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80065fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	001a      	movs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	05d2      	lsls	r2, r2, #23
 800660a:	0dd2      	lsrs	r2, r2, #23
 800660c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006612:	1c9a      	adds	r2, r3, #2
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2256      	movs	r2, #86	@ 0x56
 800661c:	5a9b      	ldrh	r3, [r3, r2]
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b299      	uxth	r1, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2256      	movs	r2, #86	@ 0x56
 8006628:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800662a:	212e      	movs	r1, #46	@ 0x2e
 800662c:	187b      	adds	r3, r7, r1
 800662e:	881a      	ldrh	r2, [r3, #0]
 8006630:	187b      	adds	r3, r7, r1
 8006632:	3a01      	subs	r2, #1
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	232e      	movs	r3, #46	@ 0x2e
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d19b      	bne.n	8006578 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8006640:	46c0      	nop			@ (mov r8, r8)
 8006642:	46bd      	mov	sp, r7
 8006644:	b00c      	add	sp, #48	@ 0x30
 8006646:	bd80      	pop	{r7, pc}
 8006648:	ff7fffff 	.word	0xff7fffff

0800664c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006654:	f3ef 8310 	mrs	r3, PRIMASK
 8006658:	60bb      	str	r3, [r7, #8]
  return(result);
 800665a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	2301      	movs	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f383 8810 	msr	PRIMASK, r3
}
 8006668:	46c0      	nop			@ (mov r8, r8)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2140      	movs	r1, #64	@ 0x40
 8006676:	438a      	bics	r2, r1
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f383 8810 	msr	PRIMASK, r3
}
 8006684:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2288      	movs	r2, #136	@ 0x88
 800668a:	2120      	movs	r1, #32
 800668c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	0018      	movs	r0, r3
 8006698:	f7fa ffc8 	bl	800162c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669c:	46c0      	nop			@ (mov r8, r8)
 800669e:	46bd      	mov	sp, r7
 80066a0:	b006      	add	sp, #24
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b094      	sub	sp, #80	@ 0x50
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066ac:	204e      	movs	r0, #78	@ 0x4e
 80066ae:	183b      	adds	r3, r7, r0
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	2160      	movs	r1, #96	@ 0x60
 80066b4:	5a52      	ldrh	r2, [r2, r1]
 80066b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	228c      	movs	r2, #140	@ 0x8c
 80066bc:	589b      	ldr	r3, [r3, r2]
 80066be:	2b22      	cmp	r3, #34	@ 0x22
 80066c0:	d000      	beq.n	80066c4 <UART_RxISR_8BIT+0x20>
 80066c2:	e0bf      	b.n	8006844 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066ca:	214c      	movs	r1, #76	@ 0x4c
 80066cc:	187b      	adds	r3, r7, r1
 80066ce:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	183b      	adds	r3, r7, r0
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b2d9      	uxtb	r1, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e0:	400a      	ands	r2, r1
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	225e      	movs	r2, #94	@ 0x5e
 80066f4:	5a9b      	ldrh	r3, [r3, r2]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b299      	uxth	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	225e      	movs	r2, #94	@ 0x5e
 8006700:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	225e      	movs	r2, #94	@ 0x5e
 8006706:	5a9b      	ldrh	r3, [r3, r2]
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d000      	beq.n	8006710 <UART_RxISR_8BIT+0x6c>
 800670e:	e0a1      	b.n	8006854 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006710:	f3ef 8310 	mrs	r3, PRIMASK
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800671a:	2301      	movs	r3, #1
 800671c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800671e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006720:	f383 8810 	msr	PRIMASK, r3
}
 8006724:	46c0      	nop			@ (mov r8, r8)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	494a      	ldr	r1, [pc, #296]	@ (800685c <UART_RxISR_8BIT+0x1b8>)
 8006732:	400a      	ands	r2, r1
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673c:	f383 8810 	msr	PRIMASK, r3
}
 8006740:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006742:	f3ef 8310 	mrs	r3, PRIMASK
 8006746:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674a:	647b      	str	r3, [r7, #68]	@ 0x44
 800674c:	2301      	movs	r3, #1
 800674e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006752:	f383 8810 	msr	PRIMASK, r3
}
 8006756:	46c0      	nop			@ (mov r8, r8)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2101      	movs	r1, #1
 8006764:	438a      	bics	r2, r1
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800676a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676e:	f383 8810 	msr	PRIMASK, r3
}
 8006772:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	228c      	movs	r2, #140	@ 0x8c
 8006778:	2120      	movs	r1, #32
 800677a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a34      	ldr	r2, [pc, #208]	@ (8006860 <UART_RxISR_8BIT+0x1bc>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d01f      	beq.n	80067d2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	2380      	movs	r3, #128	@ 0x80
 800679a:	041b      	lsls	r3, r3, #16
 800679c:	4013      	ands	r3, r2
 800679e:	d018      	beq.n	80067d2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067a0:	f3ef 8310 	mrs	r3, PRIMASK
 80067a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80067a6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80067aa:	2301      	movs	r3, #1
 80067ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f383 8810 	msr	PRIMASK, r3
}
 80067b4:	46c0      	nop			@ (mov r8, r8)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4928      	ldr	r1, [pc, #160]	@ (8006864 <UART_RxISR_8BIT+0x1c0>)
 80067c2:	400a      	ands	r2, r1
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	f383 8810 	msr	PRIMASK, r3
}
 80067d0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d12f      	bne.n	800683a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e0:	f3ef 8310 	mrs	r3, PRIMASK
 80067e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80067e6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ea:	2301      	movs	r3, #1
 80067ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f383 8810 	msr	PRIMASK, r3
}
 80067f4:	46c0      	nop			@ (mov r8, r8)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2110      	movs	r1, #16
 8006802:	438a      	bics	r2, r1
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006808:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f383 8810 	msr	PRIMASK, r3
}
 8006810:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	2210      	movs	r2, #16
 800681a:	4013      	ands	r3, r2
 800681c:	2b10      	cmp	r3, #16
 800681e:	d103      	bne.n	8006828 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2210      	movs	r2, #16
 8006826:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	225c      	movs	r2, #92	@ 0x5c
 800682c:	5a9a      	ldrh	r2, [r3, r2]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	0011      	movs	r1, r2
 8006832:	0018      	movs	r0, r3
 8006834:	f7fe ff6e 	bl	8005714 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006838:	e00c      	b.n	8006854 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	0018      	movs	r0, r3
 800683e:	f7fa fee1 	bl	8001604 <HAL_UART_RxCpltCallback>
}
 8006842:	e007      	b.n	8006854 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2108      	movs	r1, #8
 8006850:	430a      	orrs	r2, r1
 8006852:	619a      	str	r2, [r3, #24]
}
 8006854:	46c0      	nop			@ (mov r8, r8)
 8006856:	46bd      	mov	sp, r7
 8006858:	b014      	add	sp, #80	@ 0x50
 800685a:	bd80      	pop	{r7, pc}
 800685c:	fffffedf 	.word	0xfffffedf
 8006860:	40008000 	.word	0x40008000
 8006864:	fbffffff 	.word	0xfbffffff

08006868 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b094      	sub	sp, #80	@ 0x50
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006870:	204e      	movs	r0, #78	@ 0x4e
 8006872:	183b      	adds	r3, r7, r0
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	2160      	movs	r1, #96	@ 0x60
 8006878:	5a52      	ldrh	r2, [r2, r1]
 800687a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	228c      	movs	r2, #140	@ 0x8c
 8006880:	589b      	ldr	r3, [r3, r2]
 8006882:	2b22      	cmp	r3, #34	@ 0x22
 8006884:	d000      	beq.n	8006888 <UART_RxISR_16BIT+0x20>
 8006886:	e0bf      	b.n	8006a08 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800688e:	214c      	movs	r1, #76	@ 0x4c
 8006890:	187b      	adds	r3, r7, r1
 8006892:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006898:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800689a:	187b      	adds	r3, r7, r1
 800689c:	183a      	adds	r2, r7, r0
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	8812      	ldrh	r2, [r2, #0]
 80068a2:	4013      	ands	r3, r2
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ae:	1c9a      	adds	r2, r3, #2
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	225e      	movs	r2, #94	@ 0x5e
 80068b8:	5a9b      	ldrh	r3, [r3, r2]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b299      	uxth	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	225e      	movs	r2, #94	@ 0x5e
 80068c4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	225e      	movs	r2, #94	@ 0x5e
 80068ca:	5a9b      	ldrh	r3, [r3, r2]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d000      	beq.n	80068d4 <UART_RxISR_16BIT+0x6c>
 80068d2:	e0a1      	b.n	8006a18 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068d4:	f3ef 8310 	mrs	r3, PRIMASK
 80068d8:	623b      	str	r3, [r7, #32]
  return(result);
 80068da:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80068de:	2301      	movs	r3, #1
 80068e0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	f383 8810 	msr	PRIMASK, r3
}
 80068e8:	46c0      	nop			@ (mov r8, r8)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	494a      	ldr	r1, [pc, #296]	@ (8006a20 <UART_RxISR_16BIT+0x1b8>)
 80068f6:	400a      	ands	r2, r1
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006900:	f383 8810 	msr	PRIMASK, r3
}
 8006904:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006906:	f3ef 8310 	mrs	r3, PRIMASK
 800690a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800690c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006910:	2301      	movs	r3, #1
 8006912:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	f383 8810 	msr	PRIMASK, r3
}
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2101      	movs	r1, #1
 8006928:	438a      	bics	r2, r1
 800692a:	609a      	str	r2, [r3, #8]
 800692c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800692e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006932:	f383 8810 	msr	PRIMASK, r3
}
 8006936:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	228c      	movs	r2, #140	@ 0x8c
 800693c:	2120      	movs	r1, #32
 800693e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a34      	ldr	r2, [pc, #208]	@ (8006a24 <UART_RxISR_16BIT+0x1bc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d01f      	beq.n	8006996 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	2380      	movs	r3, #128	@ 0x80
 800695e:	041b      	lsls	r3, r3, #16
 8006960:	4013      	ands	r3, r2
 8006962:	d018      	beq.n	8006996 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006964:	f3ef 8310 	mrs	r3, PRIMASK
 8006968:	617b      	str	r3, [r7, #20]
  return(result);
 800696a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800696e:	2301      	movs	r3, #1
 8006970:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f383 8810 	msr	PRIMASK, r3
}
 8006978:	46c0      	nop			@ (mov r8, r8)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4928      	ldr	r1, [pc, #160]	@ (8006a28 <UART_RxISR_16BIT+0x1c0>)
 8006986:	400a      	ands	r2, r1
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800698c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	f383 8810 	msr	PRIMASK, r3
}
 8006994:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800699a:	2b01      	cmp	r3, #1
 800699c:	d12f      	bne.n	80069fe <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a4:	f3ef 8310 	mrs	r3, PRIMASK
 80069a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80069aa:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069ae:	2301      	movs	r3, #1
 80069b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f383 8810 	msr	PRIMASK, r3
}
 80069b8:	46c0      	nop			@ (mov r8, r8)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2110      	movs	r1, #16
 80069c6:	438a      	bics	r2, r1
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f383 8810 	msr	PRIMASK, r3
}
 80069d4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	2210      	movs	r2, #16
 80069de:	4013      	ands	r3, r2
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	d103      	bne.n	80069ec <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2210      	movs	r2, #16
 80069ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	225c      	movs	r2, #92	@ 0x5c
 80069f0:	5a9a      	ldrh	r2, [r3, r2]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	0011      	movs	r1, r2
 80069f6:	0018      	movs	r0, r3
 80069f8:	f7fe fe8c 	bl	8005714 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069fc:	e00c      	b.n	8006a18 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	0018      	movs	r0, r3
 8006a02:	f7fa fdff 	bl	8001604 <HAL_UART_RxCpltCallback>
}
 8006a06:	e007      	b.n	8006a18 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699a      	ldr	r2, [r3, #24]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2108      	movs	r1, #8
 8006a14:	430a      	orrs	r2, r1
 8006a16:	619a      	str	r2, [r3, #24]
}
 8006a18:	46c0      	nop			@ (mov r8, r8)
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	b014      	add	sp, #80	@ 0x50
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	fffffedf 	.word	0xfffffedf
 8006a24:	40008000 	.word	0x40008000
 8006a28:	fbffffff 	.word	0xfbffffff

08006a2c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b0a0      	sub	sp, #128	@ 0x80
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006a34:	237a      	movs	r3, #122	@ 0x7a
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	2160      	movs	r1, #96	@ 0x60
 8006a3c:	5a52      	ldrh	r2, [r2, r1]
 8006a3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	228c      	movs	r2, #140	@ 0x8c
 8006a5c:	589b      	ldr	r3, [r3, r2]
 8006a5e:	2b22      	cmp	r3, #34	@ 0x22
 8006a60:	d000      	beq.n	8006a64 <UART_RxISR_8BIT_FIFOEN+0x38>
 8006a62:	e16a      	b.n	8006d3a <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006a64:	236e      	movs	r3, #110	@ 0x6e
 8006a66:	18fb      	adds	r3, r7, r3
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	2168      	movs	r1, #104	@ 0x68
 8006a6c:	5a52      	ldrh	r2, [r2, r1]
 8006a6e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a70:	e111      	b.n	8006c96 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a78:	216c      	movs	r1, #108	@ 0x6c
 8006a7a:	187b      	adds	r3, r7, r1
 8006a7c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a7e:	187b      	adds	r3, r7, r1
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	237a      	movs	r3, #122	@ 0x7a
 8006a86:	18fb      	adds	r3, r7, r3
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b2d9      	uxtb	r1, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a90:	400a      	ands	r2, r1
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	225e      	movs	r2, #94	@ 0x5e
 8006aa4:	5a9b      	ldrh	r3, [r3, r2]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b299      	uxth	r1, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	225e      	movs	r2, #94	@ 0x5e
 8006ab0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006aba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006abc:	2207      	movs	r2, #7
 8006abe:	4013      	ands	r3, r2
 8006ac0:	d049      	beq.n	8006b56 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ac2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	d010      	beq.n	8006aec <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006aca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006acc:	2380      	movs	r3, #128	@ 0x80
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	d00b      	beq.n	8006aec <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2290      	movs	r2, #144	@ 0x90
 8006ae0:	589b      	ldr	r3, [r3, r2]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2190      	movs	r1, #144	@ 0x90
 8006aea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006aee:	2202      	movs	r2, #2
 8006af0:	4013      	ands	r3, r2
 8006af2:	d00f      	beq.n	8006b14 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006af4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006af6:	2201      	movs	r2, #1
 8006af8:	4013      	ands	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2202      	movs	r2, #2
 8006b02:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2290      	movs	r2, #144	@ 0x90
 8006b08:	589b      	ldr	r3, [r3, r2]
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2190      	movs	r1, #144	@ 0x90
 8006b12:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b16:	2204      	movs	r2, #4
 8006b18:	4013      	ands	r3, r2
 8006b1a:	d00f      	beq.n	8006b3c <UART_RxISR_8BIT_FIFOEN+0x110>
 8006b1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b1e:	2201      	movs	r2, #1
 8006b20:	4013      	ands	r3, r2
 8006b22:	d00b      	beq.n	8006b3c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2204      	movs	r2, #4
 8006b2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2290      	movs	r2, #144	@ 0x90
 8006b30:	589b      	ldr	r3, [r3, r2]
 8006b32:	2202      	movs	r2, #2
 8006b34:	431a      	orrs	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2190      	movs	r1, #144	@ 0x90
 8006b3a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2290      	movs	r2, #144	@ 0x90
 8006b40:	589b      	ldr	r3, [r3, r2]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f7fe fddb 	bl	8005704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2290      	movs	r2, #144	@ 0x90
 8006b52:	2100      	movs	r1, #0
 8006b54:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	225e      	movs	r2, #94	@ 0x5e
 8006b5a:	5a9b      	ldrh	r3, [r3, r2]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d000      	beq.n	8006b64 <UART_RxISR_8BIT_FIFOEN+0x138>
 8006b62:	e098      	b.n	8006c96 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b64:	f3ef 8310 	mrs	r3, PRIMASK
 8006b68:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b6e:	2301      	movs	r3, #1
 8006b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b74:	f383 8810 	msr	PRIMASK, r3
}
 8006b78:	46c0      	nop			@ (mov r8, r8)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4973      	ldr	r1, [pc, #460]	@ (8006d54 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8006b86:	400a      	ands	r2, r1
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b8c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b90:	f383 8810 	msr	PRIMASK, r3
}
 8006b94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b96:	f3ef 8310 	mrs	r3, PRIMASK
 8006b9a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8006b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ba6:	f383 8810 	msr	PRIMASK, r3
}
 8006baa:	46c0      	nop			@ (mov r8, r8)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4968      	ldr	r1, [pc, #416]	@ (8006d58 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8006bb8:	400a      	ands	r2, r1
 8006bba:	609a      	str	r2, [r3, #8]
 8006bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc2:	f383 8810 	msr	PRIMASK, r3
}
 8006bc6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	228c      	movs	r2, #140	@ 0x8c
 8006bcc:	2120      	movs	r1, #32
 8006bce:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a5e      	ldr	r2, [pc, #376]	@ (8006d5c <UART_RxISR_8BIT_FIFOEN+0x330>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01f      	beq.n	8006c26 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	2380      	movs	r3, #128	@ 0x80
 8006bee:	041b      	lsls	r3, r3, #16
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bfe:	2301      	movs	r3, #1
 8006c00:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	f383 8810 	msr	PRIMASK, r3
}
 8006c08:	46c0      	nop			@ (mov r8, r8)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4952      	ldr	r1, [pc, #328]	@ (8006d60 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8006c16:	400a      	ands	r2, r1
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c20:	f383 8810 	msr	PRIMASK, r3
}
 8006c24:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d12f      	bne.n	8006c8e <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c34:	f3ef 8310 	mrs	r3, PRIMASK
 8006c38:	623b      	str	r3, [r7, #32]
  return(result);
 8006c3a:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c3e:	2301      	movs	r3, #1
 8006c40:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	f383 8810 	msr	PRIMASK, r3
}
 8006c48:	46c0      	nop			@ (mov r8, r8)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2110      	movs	r1, #16
 8006c56:	438a      	bics	r2, r1
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c60:	f383 8810 	msr	PRIMASK, r3
}
 8006c64:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	2210      	movs	r2, #16
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	d103      	bne.n	8006c7c <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2210      	movs	r2, #16
 8006c7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	225c      	movs	r2, #92	@ 0x5c
 8006c80:	5a9a      	ldrh	r2, [r3, r2]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	0011      	movs	r1, r2
 8006c86:	0018      	movs	r0, r3
 8006c88:	f7fe fd44 	bl	8005714 <HAL_UARTEx_RxEventCallback>
 8006c8c:	e003      	b.n	8006c96 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	0018      	movs	r0, r3
 8006c92:	f7fa fcb7 	bl	8001604 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c96:	236e      	movs	r3, #110	@ 0x6e
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <UART_RxISR_8BIT_FIFOEN+0x27e>
 8006ca0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	d000      	beq.n	8006caa <UART_RxISR_8BIT_FIFOEN+0x27e>
 8006ca8:	e6e3      	b.n	8006a72 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006caa:	205a      	movs	r0, #90	@ 0x5a
 8006cac:	183b      	adds	r3, r7, r0
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	215e      	movs	r1, #94	@ 0x5e
 8006cb2:	5a52      	ldrh	r2, [r2, r1]
 8006cb4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006cb6:	0001      	movs	r1, r0
 8006cb8:	187b      	adds	r3, r7, r1
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d044      	beq.n	8006d4a <UART_RxISR_8BIT_FIFOEN+0x31e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2268      	movs	r2, #104	@ 0x68
 8006cc4:	5a9b      	ldrh	r3, [r3, r2]
 8006cc6:	187a      	adds	r2, r7, r1
 8006cc8:	8812      	ldrh	r2, [r2, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d23d      	bcs.n	8006d4a <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cce:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cd8:	2301      	movs	r3, #1
 8006cda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f383 8810 	msr	PRIMASK, r3
}
 8006ce2:	46c0      	nop			@ (mov r8, r8)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	491d      	ldr	r1, [pc, #116]	@ (8006d64 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8006cf0:	400a      	ands	r2, r1
 8006cf2:	609a      	str	r2, [r3, #8]
 8006cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f383 8810 	msr	PRIMASK, r3
}
 8006cfe:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a19      	ldr	r2, [pc, #100]	@ (8006d68 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8006d04:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d06:	f3ef 8310 	mrs	r3, PRIMASK
 8006d0a:	617b      	str	r3, [r7, #20]
  return(result);
 8006d0c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d10:	2301      	movs	r3, #1
 8006d12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f383 8810 	msr	PRIMASK, r3
}
 8006d1a:	46c0      	nop			@ (mov r8, r8)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2120      	movs	r1, #32
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	f383 8810 	msr	PRIMASK, r3
}
 8006d36:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d38:	e007      	b.n	8006d4a <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699a      	ldr	r2, [r3, #24]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2108      	movs	r1, #8
 8006d46:	430a      	orrs	r2, r1
 8006d48:	619a      	str	r2, [r3, #24]
}
 8006d4a:	46c0      	nop			@ (mov r8, r8)
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b020      	add	sp, #128	@ 0x80
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	46c0      	nop			@ (mov r8, r8)
 8006d54:	fffffeff 	.word	0xfffffeff
 8006d58:	effffffe 	.word	0xeffffffe
 8006d5c:	40008000 	.word	0x40008000
 8006d60:	fbffffff 	.word	0xfbffffff
 8006d64:	efffffff 	.word	0xefffffff
 8006d68:	080066a5 	.word	0x080066a5

08006d6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b0a2      	sub	sp, #136	@ 0x88
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006d74:	2382      	movs	r3, #130	@ 0x82
 8006d76:	18fb      	adds	r3, r7, r3
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	2160      	movs	r1, #96	@ 0x60
 8006d7c:	5a52      	ldrh	r2, [r2, r1]
 8006d7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	2284      	movs	r2, #132	@ 0x84
 8006d88:	18ba      	adds	r2, r7, r2
 8006d8a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	228c      	movs	r2, #140	@ 0x8c
 8006da0:	589b      	ldr	r3, [r3, r2]
 8006da2:	2b22      	cmp	r3, #34	@ 0x22
 8006da4:	d000      	beq.n	8006da8 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8006da6:	e174      	b.n	8007092 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006da8:	2376      	movs	r3, #118	@ 0x76
 8006daa:	18fb      	adds	r3, r7, r3
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	2168      	movs	r1, #104	@ 0x68
 8006db0:	5a52      	ldrh	r2, [r2, r1]
 8006db2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006db4:	e119      	b.n	8006fea <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dbc:	2174      	movs	r1, #116	@ 0x74
 8006dbe:	187b      	adds	r3, r7, r1
 8006dc0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc6:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8006dc8:	187b      	adds	r3, r7, r1
 8006dca:	2282      	movs	r2, #130	@ 0x82
 8006dcc:	18ba      	adds	r2, r7, r2
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	8812      	ldrh	r2, [r2, #0]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dde:	1c9a      	adds	r2, r3, #2
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	225e      	movs	r2, #94	@ 0x5e
 8006de8:	5a9b      	ldrh	r3, [r3, r2]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b299      	uxth	r1, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	225e      	movs	r2, #94	@ 0x5e
 8006df4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	2184      	movs	r1, #132	@ 0x84
 8006dfe:	187a      	adds	r2, r7, r1
 8006e00:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006e02:	187b      	adds	r3, r7, r1
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2207      	movs	r2, #7
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d04e      	beq.n	8006eaa <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e0c:	187b      	adds	r3, r7, r1
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2201      	movs	r2, #1
 8006e12:	4013      	ands	r3, r2
 8006e14:	d010      	beq.n	8006e38 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8006e16:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006e18:	2380      	movs	r3, #128	@ 0x80
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	d00b      	beq.n	8006e38 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2201      	movs	r2, #1
 8006e26:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2290      	movs	r2, #144	@ 0x90
 8006e2c:	589b      	ldr	r3, [r3, r2]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2190      	movs	r1, #144	@ 0x90
 8006e36:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e38:	2384      	movs	r3, #132	@ 0x84
 8006e3a:	18fb      	adds	r3, r7, r3
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	4013      	ands	r3, r2
 8006e42:	d00f      	beq.n	8006e64 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e46:	2201      	movs	r2, #1
 8006e48:	4013      	ands	r3, r2
 8006e4a:	d00b      	beq.n	8006e64 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2202      	movs	r2, #2
 8006e52:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2290      	movs	r2, #144	@ 0x90
 8006e58:	589b      	ldr	r3, [r3, r2]
 8006e5a:	2204      	movs	r2, #4
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2190      	movs	r1, #144	@ 0x90
 8006e62:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e64:	2384      	movs	r3, #132	@ 0x84
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	d00f      	beq.n	8006e90 <UART_RxISR_16BIT_FIFOEN+0x124>
 8006e70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e72:	2201      	movs	r2, #1
 8006e74:	4013      	ands	r3, r2
 8006e76:	d00b      	beq.n	8006e90 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2204      	movs	r2, #4
 8006e7e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2290      	movs	r2, #144	@ 0x90
 8006e84:	589b      	ldr	r3, [r3, r2]
 8006e86:	2202      	movs	r2, #2
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2190      	movs	r1, #144	@ 0x90
 8006e8e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2290      	movs	r2, #144	@ 0x90
 8006e94:	589b      	ldr	r3, [r3, r2]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7fe fc31 	bl	8005704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2290      	movs	r2, #144	@ 0x90
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	225e      	movs	r2, #94	@ 0x5e
 8006eae:	5a9b      	ldrh	r3, [r3, r2]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d000      	beq.n	8006eb8 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8006eb6:	e098      	b.n	8006fea <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ec0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec8:	f383 8810 	msr	PRIMASK, r3
}
 8006ecc:	46c0      	nop			@ (mov r8, r8)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4974      	ldr	r1, [pc, #464]	@ (80070ac <UART_RxISR_16BIT_FIFOEN+0x340>)
 8006eda:	400a      	ands	r2, r1
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ee4:	f383 8810 	msr	PRIMASK, r3
}
 8006ee8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eea:	f3ef 8310 	mrs	r3, PRIMASK
 8006eee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006efa:	f383 8810 	msr	PRIMASK, r3
}
 8006efe:	46c0      	nop			@ (mov r8, r8)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4969      	ldr	r1, [pc, #420]	@ (80070b0 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8006f0c:	400a      	ands	r2, r1
 8006f0e:	609a      	str	r2, [r3, #8]
 8006f10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f12:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f16:	f383 8810 	msr	PRIMASK, r3
}
 8006f1a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	228c      	movs	r2, #140	@ 0x8c
 8006f20:	2120      	movs	r1, #32
 8006f22:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a5f      	ldr	r2, [pc, #380]	@ (80070b4 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01f      	beq.n	8006f7a <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	2380      	movs	r3, #128	@ 0x80
 8006f42:	041b      	lsls	r3, r3, #16
 8006f44:	4013      	ands	r3, r2
 8006f46:	d018      	beq.n	8006f7a <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f48:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f50:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f52:	2301      	movs	r3, #1
 8006f54:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f58:	f383 8810 	msr	PRIMASK, r3
}
 8006f5c:	46c0      	nop			@ (mov r8, r8)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4953      	ldr	r1, [pc, #332]	@ (80070b8 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8006f6a:	400a      	ands	r2, r1
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f70:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f74:	f383 8810 	msr	PRIMASK, r3
}
 8006f78:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d12f      	bne.n	8006fe2 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f88:	f3ef 8310 	mrs	r3, PRIMASK
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f90:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f92:	2301      	movs	r3, #1
 8006f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f98:	f383 8810 	msr	PRIMASK, r3
}
 8006f9c:	46c0      	nop			@ (mov r8, r8)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2110      	movs	r1, #16
 8006faa:	438a      	bics	r2, r1
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb4:	f383 8810 	msr	PRIMASK, r3
}
 8006fb8:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	2210      	movs	r2, #16
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b10      	cmp	r3, #16
 8006fc6:	d103      	bne.n	8006fd0 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2210      	movs	r2, #16
 8006fce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	225c      	movs	r2, #92	@ 0x5c
 8006fd4:	5a9a      	ldrh	r2, [r3, r2]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	0011      	movs	r1, r2
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f7fe fb9a 	bl	8005714 <HAL_UARTEx_RxEventCallback>
 8006fe0:	e003      	b.n	8006fea <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f7fa fb0d 	bl	8001604 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fea:	2376      	movs	r3, #118	@ 0x76
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d006      	beq.n	8007002 <UART_RxISR_16BIT_FIFOEN+0x296>
 8006ff4:	2384      	movs	r3, #132	@ 0x84
 8006ff6:	18fb      	adds	r3, r7, r3
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	d000      	beq.n	8007002 <UART_RxISR_16BIT_FIFOEN+0x296>
 8007000:	e6d9      	b.n	8006db6 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007002:	205e      	movs	r0, #94	@ 0x5e
 8007004:	183b      	adds	r3, r7, r0
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	215e      	movs	r1, #94	@ 0x5e
 800700a:	5a52      	ldrh	r2, [r2, r1]
 800700c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800700e:	0001      	movs	r1, r0
 8007010:	187b      	adds	r3, r7, r1
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d044      	beq.n	80070a2 <UART_RxISR_16BIT_FIFOEN+0x336>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2268      	movs	r2, #104	@ 0x68
 800701c:	5a9b      	ldrh	r3, [r3, r2]
 800701e:	187a      	adds	r2, r7, r1
 8007020:	8812      	ldrh	r2, [r2, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d23d      	bcs.n	80070a2 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007026:	f3ef 8310 	mrs	r3, PRIMASK
 800702a:	60fb      	str	r3, [r7, #12]
  return(result);
 800702c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800702e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007030:	2301      	movs	r3, #1
 8007032:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f383 8810 	msr	PRIMASK, r3
}
 800703a:	46c0      	nop			@ (mov r8, r8)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	491d      	ldr	r1, [pc, #116]	@ (80070bc <UART_RxISR_16BIT_FIFOEN+0x350>)
 8007048:	400a      	ands	r2, r1
 800704a:	609a      	str	r2, [r3, #8]
 800704c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800704e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f383 8810 	msr	PRIMASK, r3
}
 8007056:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a19      	ldr	r2, [pc, #100]	@ (80070c0 <UART_RxISR_16BIT_FIFOEN+0x354>)
 800705c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800705e:	f3ef 8310 	mrs	r3, PRIMASK
 8007062:	61bb      	str	r3, [r7, #24]
  return(result);
 8007064:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007066:	657b      	str	r3, [r7, #84]	@ 0x54
 8007068:	2301      	movs	r3, #1
 800706a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	f383 8810 	msr	PRIMASK, r3
}
 8007072:	46c0      	nop			@ (mov r8, r8)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2120      	movs	r1, #32
 8007080:	430a      	orrs	r2, r1
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007086:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	f383 8810 	msr	PRIMASK, r3
}
 800708e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007090:	e007      	b.n	80070a2 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	699a      	ldr	r2, [r3, #24]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2108      	movs	r1, #8
 800709e:	430a      	orrs	r2, r1
 80070a0:	619a      	str	r2, [r3, #24]
}
 80070a2:	46c0      	nop			@ (mov r8, r8)
 80070a4:	46bd      	mov	sp, r7
 80070a6:	b022      	add	sp, #136	@ 0x88
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	46c0      	nop			@ (mov r8, r8)
 80070ac:	fffffeff 	.word	0xfffffeff
 80070b0:	effffffe 	.word	0xeffffffe
 80070b4:	40008000 	.word	0x40008000
 80070b8:	fbffffff 	.word	0xfbffffff
 80070bc:	efffffff 	.word	0xefffffff
 80070c0:	08006869 	.word	0x08006869

080070c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070cc:	46c0      	nop			@ (mov r8, r8)
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b002      	add	sp, #8
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80070dc:	46c0      	nop			@ (mov r8, r8)
 80070de:	46bd      	mov	sp, r7
 80070e0:	b002      	add	sp, #8
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070ec:	46c0      	nop			@ (mov r8, r8)
 80070ee:	46bd      	mov	sp, r7
 80070f0:	b002      	add	sp, #8
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <memset>:
 80070f4:	0003      	movs	r3, r0
 80070f6:	1882      	adds	r2, r0, r2
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d100      	bne.n	80070fe <memset+0xa>
 80070fc:	4770      	bx	lr
 80070fe:	7019      	strb	r1, [r3, #0]
 8007100:	3301      	adds	r3, #1
 8007102:	e7f9      	b.n	80070f8 <memset+0x4>

08007104 <__libc_init_array>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	2600      	movs	r6, #0
 8007108:	4c0c      	ldr	r4, [pc, #48]	@ (800713c <__libc_init_array+0x38>)
 800710a:	4d0d      	ldr	r5, [pc, #52]	@ (8007140 <__libc_init_array+0x3c>)
 800710c:	1b64      	subs	r4, r4, r5
 800710e:	10a4      	asrs	r4, r4, #2
 8007110:	42a6      	cmp	r6, r4
 8007112:	d109      	bne.n	8007128 <__libc_init_array+0x24>
 8007114:	2600      	movs	r6, #0
 8007116:	f000 f823 	bl	8007160 <_init>
 800711a:	4c0a      	ldr	r4, [pc, #40]	@ (8007144 <__libc_init_array+0x40>)
 800711c:	4d0a      	ldr	r5, [pc, #40]	@ (8007148 <__libc_init_array+0x44>)
 800711e:	1b64      	subs	r4, r4, r5
 8007120:	10a4      	asrs	r4, r4, #2
 8007122:	42a6      	cmp	r6, r4
 8007124:	d105      	bne.n	8007132 <__libc_init_array+0x2e>
 8007126:	bd70      	pop	{r4, r5, r6, pc}
 8007128:	00b3      	lsls	r3, r6, #2
 800712a:	58eb      	ldr	r3, [r5, r3]
 800712c:	4798      	blx	r3
 800712e:	3601      	adds	r6, #1
 8007130:	e7ee      	b.n	8007110 <__libc_init_array+0xc>
 8007132:	00b3      	lsls	r3, r6, #2
 8007134:	58eb      	ldr	r3, [r5, r3]
 8007136:	4798      	blx	r3
 8007138:	3601      	adds	r6, #1
 800713a:	e7f2      	b.n	8007122 <__libc_init_array+0x1e>
 800713c:	08007528 	.word	0x08007528
 8007140:	08007528 	.word	0x08007528
 8007144:	0800752c 	.word	0x0800752c
 8007148:	08007528 	.word	0x08007528

0800714c <memcpy>:
 800714c:	2300      	movs	r3, #0
 800714e:	b510      	push	{r4, lr}
 8007150:	429a      	cmp	r2, r3
 8007152:	d100      	bne.n	8007156 <memcpy+0xa>
 8007154:	bd10      	pop	{r4, pc}
 8007156:	5ccc      	ldrb	r4, [r1, r3]
 8007158:	54c4      	strb	r4, [r0, r3]
 800715a:	3301      	adds	r3, #1
 800715c:	e7f8      	b.n	8007150 <memcpy+0x4>
	...

08007160 <_init>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	46c0      	nop			@ (mov r8, r8)
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr

0800716c <_fini>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	46c0      	nop			@ (mov r8, r8)
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr
