
HAL_TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08006574  08006574  00007574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d4  080069d4  0000826c  2**0
                  CONTENTS
  4 .ARM          00000008  080069d4  080069d4  000079d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069dc  080069dc  0000826c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069dc  080069dc  000079dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069e0  080069e0  000079e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000026c  20000000  080069e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000026c  08006c50  0000826c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08006c50  00008530  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000826c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001328f  00000000  00000000  00008294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273c  00000000  00000000  0001b523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001dc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7f  00000000  00000000  0001ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018690  00000000  00000000  0001fad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140f7  00000000  00000000  00038167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d5be  00000000  00000000  0004c25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e981c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004190  00000000  00000000  000e9860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ed9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000026c 	.word	0x2000026c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800655c 	.word	0x0800655c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000270 	.word	0x20000270
 8000100:	0800655c 	.word	0x0800655c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8d8 	bl	8000430 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8d3 	bl	8000430 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzsi2>:
 80003f4:	211c      	movs	r1, #28
 80003f6:	2301      	movs	r3, #1
 80003f8:	041b      	lsls	r3, r3, #16
 80003fa:	4298      	cmp	r0, r3
 80003fc:	d301      	bcc.n	8000402 <__clzsi2+0xe>
 80003fe:	0c00      	lsrs	r0, r0, #16
 8000400:	3910      	subs	r1, #16
 8000402:	0a1b      	lsrs	r3, r3, #8
 8000404:	4298      	cmp	r0, r3
 8000406:	d301      	bcc.n	800040c <__clzsi2+0x18>
 8000408:	0a00      	lsrs	r0, r0, #8
 800040a:	3908      	subs	r1, #8
 800040c:	091b      	lsrs	r3, r3, #4
 800040e:	4298      	cmp	r0, r3
 8000410:	d301      	bcc.n	8000416 <__clzsi2+0x22>
 8000412:	0900      	lsrs	r0, r0, #4
 8000414:	3904      	subs	r1, #4
 8000416:	a202      	add	r2, pc, #8	@ (adr r2, 8000420 <__clzsi2+0x2c>)
 8000418:	5c10      	ldrb	r0, [r2, r0]
 800041a:	1840      	adds	r0, r0, r1
 800041c:	4770      	bx	lr
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	02020304 	.word	0x02020304
 8000424:	01010101 	.word	0x01010101
	...

08000430 <__clzdi2>:
 8000430:	b510      	push	{r4, lr}
 8000432:	2900      	cmp	r1, #0
 8000434:	d103      	bne.n	800043e <__clzdi2+0xe>
 8000436:	f7ff ffdd 	bl	80003f4 <__clzsi2>
 800043a:	3020      	adds	r0, #32
 800043c:	e002      	b.n	8000444 <__clzdi2+0x14>
 800043e:	0008      	movs	r0, r1
 8000440:	f7ff ffd8 	bl	80003f4 <__clzsi2>
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <HAL_UART_RxCpltCallback>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, cycle);

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]

	if( rx_buffer != Default ) { rx_flag = STATE_ON;}
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <HAL_UART_RxCpltCallback+0x20>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b30      	cmp	r3, #48	@ 0x30
 8000456:	d002      	beq.n	800045e <HAL_UART_RxCpltCallback+0x16>
 8000458:	4b04      	ldr	r3, [pc, #16]	@ (800046c <HAL_UART_RxCpltCallback+0x24>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]

}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b002      	add	sp, #8
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	20000000 	.word	0x20000000
 800046c:	200003cc 	.word	0x200003cc

08000470 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	b002      	add	sp, #8
 800047e:	bd80      	pop	{r7, pc}

08000480 <LinkedListControl>:
		  HAL_UART_Receive_IT(&huart2, &rx_buffer, sizeof(rx_buffer));
	  }
}

void LinkedListControl(void)
{
 8000480:	b5b0      	push	{r4, r5, r7, lr}
 8000482:	b09e      	sub	sp, #120	@ 0x78
 8000484:	af00      	add	r7, sp, #0

	if( rx_flag )
 8000486:	4be1      	ldr	r3, [pc, #900]	@ (800080c <LinkedListControl+0x38c>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d100      	bne.n	8000490 <LinkedListControl+0x10>
 800048e:	e2c4      	b.n	8000a1a <LinkedListControl+0x59a>
	{

		switch(rx_buffer){
 8000490:	4bdf      	ldr	r3, [pc, #892]	@ (8000810 <LinkedListControl+0x390>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b34      	cmp	r3, #52	@ 0x34
 8000496:	d100      	bne.n	800049a <LinkedListControl+0x1a>
 8000498:	e25a      	b.n	8000950 <LinkedListControl+0x4d0>
 800049a:	dd00      	ble.n	800049e <LinkedListControl+0x1e>
 800049c:	e296      	b.n	80009cc <LinkedListControl+0x54c>
 800049e:	2b33      	cmp	r3, #51	@ 0x33
 80004a0:	d100      	bne.n	80004a4 <LinkedListControl+0x24>
 80004a2:	e163      	b.n	800076c <LinkedListControl+0x2ec>
 80004a4:	dd00      	ble.n	80004a8 <LinkedListControl+0x28>
 80004a6:	e291      	b.n	80009cc <LinkedListControl+0x54c>
 80004a8:	2b31      	cmp	r3, #49	@ 0x31
 80004aa:	d003      	beq.n	80004b4 <LinkedListControl+0x34>
 80004ac:	2b32      	cmp	r3, #50	@ 0x32
 80004ae:	d100      	bne.n	80004b2 <LinkedListControl+0x32>
 80004b0:	e0ad      	b.n	800060e <LinkedListControl+0x18e>
 80004b2:	e28b      	b.n	80009cc <LinkedListControl+0x54c>

		case Option_1:

			uint8_t choice1[] = "\n\n\n Chosen Option 1 - Add to Head\n\r";
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4ad7      	ldr	r2, [pc, #860]	@ (8000814 <LinkedListControl+0x394>)
 80004b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004ba:	c313      	stmia	r3!, {r0, r1, r4}
 80004bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004be:	c313      	stmia	r3!, {r0, r1, r4}
 80004c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004c2:	c313      	stmia	r3!, {r0, r1, r4}
			HAL_UART_Transmit(&huart2, choice1, sizeof(choice1), 500);
 80004c4:	23fa      	movs	r3, #250	@ 0xfa
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	1d39      	adds	r1, r7, #4
 80004ca:	48d3      	ldr	r0, [pc, #844]	@ (8000818 <LinkedListControl+0x398>)
 80004cc:	2224      	movs	r2, #36	@ 0x24
 80004ce:	f003 fe71 	bl	80041b4 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart2, askVar, sizeof(askVar), 500);
 80004d2:	23fa      	movs	r3, #250	@ 0xfa
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	49d1      	ldr	r1, [pc, #836]	@ (800081c <LinkedListControl+0x39c>)
 80004d8:	48cf      	ldr	r0, [pc, #828]	@ (8000818 <LinkedListControl+0x398>)
 80004da:	2236      	movs	r2, #54	@ 0x36
 80004dc:	f003 fe6a 	bl	80041b4 <HAL_UART_Transmit>

			status_flag = HAL_UART_Receive(&huart2, var, sizeof(var), HAL_MAX_DELAY);
 80004e0:	2301      	movs	r3, #1
 80004e2:	425b      	negs	r3, r3
 80004e4:	49ce      	ldr	r1, [pc, #824]	@ (8000820 <LinkedListControl+0x3a0>)
 80004e6:	48cc      	ldr	r0, [pc, #816]	@ (8000818 <LinkedListControl+0x398>)
 80004e8:	2204      	movs	r2, #4
 80004ea:	f003 ff07 	bl	80042fc <HAL_UART_Receive>
 80004ee:	0003      	movs	r3, r0
 80004f0:	001a      	movs	r2, r3
 80004f2:	4bcc      	ldr	r3, [pc, #816]	@ (8000824 <LinkedListControl+0x3a4>)
 80004f4:	701a      	strb	r2, [r3, #0]

			// Control for Receive function
			varDec = GetDecimal(&huart2, var, sizeof(var));
 80004f6:	49ca      	ldr	r1, [pc, #808]	@ (8000820 <LinkedListControl+0x3a0>)
 80004f8:	4bc7      	ldr	r3, [pc, #796]	@ (8000818 <LinkedListControl+0x398>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fcaf 	bl	8000e60 <GetDecimal>
 8000502:	0003      	movs	r3, r0
 8000504:	001a      	movs	r2, r3
 8000506:	4bc8      	ldr	r3, [pc, #800]	@ (8000828 <LinkedListControl+0x3a8>)
 8000508:	701a      	strb	r2, [r3, #0]

			if( status_flag == HAL_OK && var[0] != 0 && varDec)
 800050a:	4bc6      	ldr	r3, [pc, #792]	@ (8000824 <LinkedListControl+0x3a4>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d144      	bne.n	800059c <LinkedListControl+0x11c>
 8000512:	4bc3      	ldr	r3, [pc, #780]	@ (8000820 <LinkedListControl+0x3a0>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d040      	beq.n	800059c <LinkedListControl+0x11c>
 800051a:	4bc3      	ldr	r3, [pc, #780]	@ (8000828 <LinkedListControl+0x3a8>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d03c      	beq.n	800059c <LinkedListControl+0x11c>
			{
				// Add node to the head of list
				AddHead(&list, varDec);
 8000522:	4bc1      	ldr	r3, [pc, #772]	@ (8000828 <LinkedListControl+0x3a8>)
 8000524:	781a      	ldrb	r2, [r3, #0]
 8000526:	4bc1      	ldr	r3, [pc, #772]	@ (800082c <LinkedListControl+0x3ac>)
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fd4e 	bl	8000fcc <AddHead>

				// Control for if node added
				if( GetNode(&list, 1)->data == GetDecimal(&huart2, var, sizeof(var)) )
 8000530:	4bbe      	ldr	r3, [pc, #760]	@ (800082c <LinkedListControl+0x3ac>)
 8000532:	2101      	movs	r1, #1
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fdb3 	bl	80010a0 <GetNode>
 800053a:	0003      	movs	r3, r0
 800053c:	781c      	ldrb	r4, [r3, #0]
 800053e:	49b8      	ldr	r1, [pc, #736]	@ (8000820 <LinkedListControl+0x3a0>)
 8000540:	4bb5      	ldr	r3, [pc, #724]	@ (8000818 <LinkedListControl+0x398>)
 8000542:	2204      	movs	r2, #4
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fc8b 	bl	8000e60 <GetDecimal>
 800054a:	0003      	movs	r3, r0
 800054c:	429c      	cmp	r4, r3
 800054e:	d112      	bne.n	8000576 <LinkedListControl+0xf6>
				{
					uint8_t result1[] = "\n Data successfully added to the head\n\r";
 8000550:	2534      	movs	r5, #52	@ 0x34
 8000552:	197b      	adds	r3, r7, r5
 8000554:	4ab6      	ldr	r2, [pc, #728]	@ (8000830 <LinkedListControl+0x3b0>)
 8000556:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000558:	c313      	stmia	r3!, {r0, r1, r4}
 800055a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800055c:	c313      	stmia	r3!, {r0, r1, r4}
 800055e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000560:	c313      	stmia	r3!, {r0, r1, r4}
 8000562:	6812      	ldr	r2, [r2, #0]
 8000564:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, result1, sizeof(result1), 500);
 8000566:	23fa      	movs	r3, #250	@ 0xfa
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	1979      	adds	r1, r7, r5
 800056c:	48aa      	ldr	r0, [pc, #680]	@ (8000818 <LinkedListControl+0x398>)
 800056e:	2228      	movs	r2, #40	@ 0x28
 8000570:	f003 fe20 	bl	80041b4 <HAL_UART_Transmit>
				if( GetNode(&list, 1)->data == GetDecimal(&huart2, var, sizeof(var)) )
 8000574:	e024      	b.n	80005c0 <LinkedListControl+0x140>
				}
				else
				{
					uint8_t errorADD[] = "\n ERROR: Node couldn't added to the list \n\r";
 8000576:	2534      	movs	r5, #52	@ 0x34
 8000578:	197b      	adds	r3, r7, r5
 800057a:	4aae      	ldr	r2, [pc, #696]	@ (8000834 <LinkedListControl+0x3b4>)
 800057c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800057e:	c313      	stmia	r3!, {r0, r1, r4}
 8000580:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000582:	c313      	stmia	r3!, {r0, r1, r4}
 8000584:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000586:	c313      	stmia	r3!, {r0, r1, r4}
 8000588:	ca03      	ldmia	r2!, {r0, r1}
 800058a:	c303      	stmia	r3!, {r0, r1}
					HAL_UART_Transmit(&huart2, errorADD, sizeof(errorADD), 500);
 800058c:	23fa      	movs	r3, #250	@ 0xfa
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	1979      	adds	r1, r7, r5
 8000592:	48a1      	ldr	r0, [pc, #644]	@ (8000818 <LinkedListControl+0x398>)
 8000594:	222c      	movs	r2, #44	@ 0x2c
 8000596:	f003 fe0d 	bl	80041b4 <HAL_UART_Transmit>
				if( GetNode(&list, 1)->data == GetDecimal(&huart2, var, sizeof(var)) )
 800059a:	e011      	b.n	80005c0 <LinkedListControl+0x140>
				}
			}
			else
			{
				uint8_t errorReceive[] = "\n ERROR: Data receiving error \n\r";
 800059c:	2534      	movs	r5, #52	@ 0x34
 800059e:	197b      	adds	r3, r7, r5
 80005a0:	4aa5      	ldr	r2, [pc, #660]	@ (8000838 <LinkedListControl+0x3b8>)
 80005a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005a4:	c313      	stmia	r3!, {r0, r1, r4}
 80005a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005a8:	c313      	stmia	r3!, {r0, r1, r4}
 80005aa:	ca03      	ldmia	r2!, {r0, r1}
 80005ac:	c303      	stmia	r3!, {r0, r1}
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, errorReceive, sizeof(errorReceive), 500);
 80005b2:	23fa      	movs	r3, #250	@ 0xfa
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	1979      	adds	r1, r7, r5
 80005b8:	4897      	ldr	r0, [pc, #604]	@ (8000818 <LinkedListControl+0x398>)
 80005ba:	2221      	movs	r2, #33	@ 0x21
 80005bc:	f003 fdfa 	bl	80041b4 <HAL_UART_Transmit>
			}

			HAL_UART_Transmit(&huart2, repeat, sizeof(repeat), 500);
 80005c0:	23fa      	movs	r3, #250	@ 0xfa
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	499d      	ldr	r1, [pc, #628]	@ (800083c <LinkedListControl+0x3bc>)
 80005c6:	4894      	ldr	r0, [pc, #592]	@ (8000818 <LinkedListControl+0x398>)
 80005c8:	2274      	movs	r2, #116	@ 0x74
 80005ca:	f003 fdf3 	bl	80041b4 <HAL_UART_Transmit>

			// Reset variables

			for(uint8_t i = 0; i < sizeof(var); i++)
 80005ce:	2377      	movs	r3, #119	@ 0x77
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	e00a      	b.n	80005ee <LinkedListControl+0x16e>
			{
				var[i] = 0;
 80005d8:	2077      	movs	r0, #119	@ 0x77
 80005da:	183b      	adds	r3, r7, r0
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	4a90      	ldr	r2, [pc, #576]	@ (8000820 <LinkedListControl+0x3a0>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < sizeof(var); i++)
 80005e4:	183b      	adds	r3, r7, r0
 80005e6:	781a      	ldrb	r2, [r3, #0]
 80005e8:	183b      	adds	r3, r7, r0
 80005ea:	3201      	adds	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	2377      	movs	r3, #119	@ 0x77
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ef      	bls.n	80005d8 <LinkedListControl+0x158>
			}
			rx_flag = STATE_OFF;
 80005f8:	4b84      	ldr	r3, [pc, #528]	@ (800080c <LinkedListControl+0x38c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
			rx_buffer = Default;
 80005fe:	4b84      	ldr	r3, [pc, #528]	@ (8000810 <LinkedListControl+0x390>)
 8000600:	2230      	movs	r2, #48	@ 0x30
 8000602:	701a      	strb	r2, [r3, #0]
			status_flag = STATE_OFF;
 8000604:	4b87      	ldr	r3, [pc, #540]	@ (8000824 <LinkedListControl+0x3a4>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]

			break;
 800060a:	46c0      	nop			@ (mov r8, r8)
	else
	{
		HAL_UART_Receive_IT(&huart2, &rx_buffer, sizeof(rx_buffer));
		HAL_Delay(100);
	}
}
 800060c:	e20e      	b.n	8000a2c <LinkedListControl+0x5ac>
			uint8_t choice2[] = "\n\n\n Chosen Option 2 - Add to Tail\n\r";
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4a8b      	ldr	r2, [pc, #556]	@ (8000840 <LinkedListControl+0x3c0>)
 8000612:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000614:	c313      	stmia	r3!, {r0, r1, r4}
 8000616:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000618:	c313      	stmia	r3!, {r0, r1, r4}
 800061a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800061c:	c313      	stmia	r3!, {r0, r1, r4}
			HAL_UART_Transmit(&huart2, choice2, sizeof(choice2), 500);
 800061e:	23fa      	movs	r3, #250	@ 0xfa
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	1d39      	adds	r1, r7, #4
 8000624:	487c      	ldr	r0, [pc, #496]	@ (8000818 <LinkedListControl+0x398>)
 8000626:	2224      	movs	r2, #36	@ 0x24
 8000628:	f003 fdc4 	bl	80041b4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, askVar, sizeof(askVar), 500);
 800062c:	23fa      	movs	r3, #250	@ 0xfa
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	497a      	ldr	r1, [pc, #488]	@ (800081c <LinkedListControl+0x39c>)
 8000632:	4879      	ldr	r0, [pc, #484]	@ (8000818 <LinkedListControl+0x398>)
 8000634:	2236      	movs	r2, #54	@ 0x36
 8000636:	f003 fdbd 	bl	80041b4 <HAL_UART_Transmit>
			status_flag = HAL_UART_Receive(&huart2, var, sizeof(var), HAL_MAX_DELAY);
 800063a:	2301      	movs	r3, #1
 800063c:	425b      	negs	r3, r3
 800063e:	4978      	ldr	r1, [pc, #480]	@ (8000820 <LinkedListControl+0x3a0>)
 8000640:	4875      	ldr	r0, [pc, #468]	@ (8000818 <LinkedListControl+0x398>)
 8000642:	2204      	movs	r2, #4
 8000644:	f003 fe5a 	bl	80042fc <HAL_UART_Receive>
 8000648:	0003      	movs	r3, r0
 800064a:	001a      	movs	r2, r3
 800064c:	4b75      	ldr	r3, [pc, #468]	@ (8000824 <LinkedListControl+0x3a4>)
 800064e:	701a      	strb	r2, [r3, #0]
			varDec = GetDecimal(&huart2, var, sizeof(var));
 8000650:	4973      	ldr	r1, [pc, #460]	@ (8000820 <LinkedListControl+0x3a0>)
 8000652:	4b71      	ldr	r3, [pc, #452]	@ (8000818 <LinkedListControl+0x398>)
 8000654:	2204      	movs	r2, #4
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fc02 	bl	8000e60 <GetDecimal>
 800065c:	0003      	movs	r3, r0
 800065e:	001a      	movs	r2, r3
 8000660:	4b71      	ldr	r3, [pc, #452]	@ (8000828 <LinkedListControl+0x3a8>)
 8000662:	701a      	strb	r2, [r3, #0]
			if( status_flag == HAL_OK && var[0] != 0 && varDec)
 8000664:	4b6f      	ldr	r3, [pc, #444]	@ (8000824 <LinkedListControl+0x3a4>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d147      	bne.n	80006fc <LinkedListControl+0x27c>
 800066c:	4b6c      	ldr	r3, [pc, #432]	@ (8000820 <LinkedListControl+0x3a0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d043      	beq.n	80006fc <LinkedListControl+0x27c>
 8000674:	4b6c      	ldr	r3, [pc, #432]	@ (8000828 <LinkedListControl+0x3a8>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d03f      	beq.n	80006fc <LinkedListControl+0x27c>
				AddTail(&list, varDec);
 800067c:	4b6a      	ldr	r3, [pc, #424]	@ (8000828 <LinkedListControl+0x3a8>)
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	4b6a      	ldr	r3, [pc, #424]	@ (800082c <LinkedListControl+0x3ac>)
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fcdb 	bl	8001040 <AddTail>
				if( GetNode(&list, list.tail->index)->data == GetDecimal(&huart2, var, sizeof(var)) )
 800068a:	4b68      	ldr	r3, [pc, #416]	@ (800082c <LinkedListControl+0x3ac>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	785a      	ldrb	r2, [r3, #1]
 8000690:	4b66      	ldr	r3, [pc, #408]	@ (800082c <LinkedListControl+0x3ac>)
 8000692:	0011      	movs	r1, r2
 8000694:	0018      	movs	r0, r3
 8000696:	f000 fd03 	bl	80010a0 <GetNode>
 800069a:	0003      	movs	r3, r0
 800069c:	781c      	ldrb	r4, [r3, #0]
 800069e:	4960      	ldr	r1, [pc, #384]	@ (8000820 <LinkedListControl+0x3a0>)
 80006a0:	4b5d      	ldr	r3, [pc, #372]	@ (8000818 <LinkedListControl+0x398>)
 80006a2:	2204      	movs	r2, #4
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fbdb 	bl	8000e60 <GetDecimal>
 80006aa:	0003      	movs	r3, r0
 80006ac:	429c      	cmp	r4, r3
 80006ae:	d112      	bne.n	80006d6 <LinkedListControl+0x256>
					uint8_t result1[] = "\n Data successfully added to the tail\n\r";
 80006b0:	2534      	movs	r5, #52	@ 0x34
 80006b2:	197b      	adds	r3, r7, r5
 80006b4:	4a63      	ldr	r2, [pc, #396]	@ (8000844 <LinkedListControl+0x3c4>)
 80006b6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006b8:	c313      	stmia	r3!, {r0, r1, r4}
 80006ba:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006bc:	c313      	stmia	r3!, {r0, r1, r4}
 80006be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006c0:	c313      	stmia	r3!, {r0, r1, r4}
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, result1, sizeof(result1), 500);
 80006c6:	23fa      	movs	r3, #250	@ 0xfa
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	1979      	adds	r1, r7, r5
 80006cc:	4852      	ldr	r0, [pc, #328]	@ (8000818 <LinkedListControl+0x398>)
 80006ce:	2228      	movs	r2, #40	@ 0x28
 80006d0:	f003 fd70 	bl	80041b4 <HAL_UART_Transmit>
				if( GetNode(&list, list.tail->index)->data == GetDecimal(&huart2, var, sizeof(var)) )
 80006d4:	e024      	b.n	8000720 <LinkedListControl+0x2a0>
					uint8_t errorADD[] = "\n ERROR: Node couldn't added to the list \n\r";
 80006d6:	2534      	movs	r5, #52	@ 0x34
 80006d8:	197b      	adds	r3, r7, r5
 80006da:	4a56      	ldr	r2, [pc, #344]	@ (8000834 <LinkedListControl+0x3b4>)
 80006dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006de:	c313      	stmia	r3!, {r0, r1, r4}
 80006e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006e2:	c313      	stmia	r3!, {r0, r1, r4}
 80006e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006e6:	c313      	stmia	r3!, {r0, r1, r4}
 80006e8:	ca03      	ldmia	r2!, {r0, r1}
 80006ea:	c303      	stmia	r3!, {r0, r1}
					HAL_UART_Transmit(&huart2, errorADD, sizeof(errorADD), 500);
 80006ec:	23fa      	movs	r3, #250	@ 0xfa
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	1979      	adds	r1, r7, r5
 80006f2:	4849      	ldr	r0, [pc, #292]	@ (8000818 <LinkedListControl+0x398>)
 80006f4:	222c      	movs	r2, #44	@ 0x2c
 80006f6:	f003 fd5d 	bl	80041b4 <HAL_UART_Transmit>
				if( GetNode(&list, list.tail->index)->data == GetDecimal(&huart2, var, sizeof(var)) )
 80006fa:	e011      	b.n	8000720 <LinkedListControl+0x2a0>
				uint8_t errorReceive[] = "\n ERROR: Data receiving error \n\r";
 80006fc:	2534      	movs	r5, #52	@ 0x34
 80006fe:	197b      	adds	r3, r7, r5
 8000700:	4a4d      	ldr	r2, [pc, #308]	@ (8000838 <LinkedListControl+0x3b8>)
 8000702:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000704:	c313      	stmia	r3!, {r0, r1, r4}
 8000706:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000708:	c313      	stmia	r3!, {r0, r1, r4}
 800070a:	ca03      	ldmia	r2!, {r0, r1}
 800070c:	c303      	stmia	r3!, {r0, r1}
 800070e:	7812      	ldrb	r2, [r2, #0]
 8000710:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, errorReceive, sizeof(errorReceive), 500);
 8000712:	23fa      	movs	r3, #250	@ 0xfa
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	1979      	adds	r1, r7, r5
 8000718:	483f      	ldr	r0, [pc, #252]	@ (8000818 <LinkedListControl+0x398>)
 800071a:	2221      	movs	r2, #33	@ 0x21
 800071c:	f003 fd4a 	bl	80041b4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, repeat, sizeof(repeat), 500);
 8000720:	23fa      	movs	r3, #250	@ 0xfa
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	4945      	ldr	r1, [pc, #276]	@ (800083c <LinkedListControl+0x3bc>)
 8000726:	483c      	ldr	r0, [pc, #240]	@ (8000818 <LinkedListControl+0x398>)
 8000728:	2274      	movs	r2, #116	@ 0x74
 800072a:	f003 fd43 	bl	80041b4 <HAL_UART_Transmit>
			for(uint8_t i = 0; i < sizeof(var); i++)
 800072e:	2376      	movs	r3, #118	@ 0x76
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
 8000736:	e00a      	b.n	800074e <LinkedListControl+0x2ce>
				var[i] = 0;
 8000738:	2076      	movs	r0, #118	@ 0x76
 800073a:	183b      	adds	r3, r7, r0
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4a38      	ldr	r2, [pc, #224]	@ (8000820 <LinkedListControl+0x3a0>)
 8000740:	2100      	movs	r1, #0
 8000742:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < sizeof(var); i++)
 8000744:	183b      	adds	r3, r7, r0
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	183b      	adds	r3, r7, r0
 800074a:	3201      	adds	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	2376      	movs	r3, #118	@ 0x76
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d9ef      	bls.n	8000738 <LinkedListControl+0x2b8>
			rx_flag = STATE_OFF;
 8000758:	4b2c      	ldr	r3, [pc, #176]	@ (800080c <LinkedListControl+0x38c>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
			rx_buffer = Default;
 800075e:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <LinkedListControl+0x390>)
 8000760:	2230      	movs	r2, #48	@ 0x30
 8000762:	701a      	strb	r2, [r3, #0]
			status_flag = STATE_OFF;
 8000764:	4b2f      	ldr	r3, [pc, #188]	@ (8000824 <LinkedListControl+0x3a4>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
			break;
 800076a:	e155      	b.n	8000a18 <LinkedListControl+0x598>
			uint8_t choice3[] = "\n\n\n Chosen Option 3 - Delete Selected Node\n\r";
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4a36      	ldr	r2, [pc, #216]	@ (8000848 <LinkedListControl+0x3c8>)
 8000770:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000772:	c313      	stmia	r3!, {r0, r1, r4}
 8000774:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000776:	c313      	stmia	r3!, {r0, r1, r4}
 8000778:	ca13      	ldmia	r2!, {r0, r1, r4}
 800077a:	c313      	stmia	r3!, {r0, r1, r4}
 800077c:	ca03      	ldmia	r2!, {r0, r1}
 800077e:	c303      	stmia	r3!, {r0, r1}
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, choice3, sizeof(choice3), 500);
 8000784:	23fa      	movs	r3, #250	@ 0xfa
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	4823      	ldr	r0, [pc, #140]	@ (8000818 <LinkedListControl+0x398>)
 800078c:	222d      	movs	r2, #45	@ 0x2d
 800078e:	f003 fd11 	bl	80041b4 <HAL_UART_Transmit>
			if( IsEmpty(&list) )
 8000792:	4b26      	ldr	r3, [pc, #152]	@ (800082c <LinkedListControl+0x3ac>)
 8000794:	0018      	movs	r0, r3
 8000796:	f000 fd1d 	bl	80011d4 <IsEmpty>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d058      	beq.n	8000850 <LinkedListControl+0x3d0>
				uint8_t empty[] = "\n ERROR: Cannot use Delete operation. List is Empty.\n\r";
 800079e:	2434      	movs	r4, #52	@ 0x34
 80007a0:	193a      	adds	r2, r7, r4
 80007a2:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <LinkedListControl+0x3cc>)
 80007a4:	0010      	movs	r0, r2
 80007a6:	0019      	movs	r1, r3
 80007a8:	2337      	movs	r3, #55	@ 0x37
 80007aa:	001a      	movs	r2, r3
 80007ac:	f005 fe82 	bl	80064b4 <memcpy>
				HAL_UART_Transmit(&huart2, empty, sizeof(empty), 500);
 80007b0:	23fa      	movs	r3, #250	@ 0xfa
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	1939      	adds	r1, r7, r4
 80007b6:	4818      	ldr	r0, [pc, #96]	@ (8000818 <LinkedListControl+0x398>)
 80007b8:	2237      	movs	r2, #55	@ 0x37
 80007ba:	f003 fcfb 	bl	80041b4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, repeat, sizeof(repeat), 500);
 80007be:	23fa      	movs	r3, #250	@ 0xfa
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	491e      	ldr	r1, [pc, #120]	@ (800083c <LinkedListControl+0x3bc>)
 80007c4:	4814      	ldr	r0, [pc, #80]	@ (8000818 <LinkedListControl+0x398>)
 80007c6:	2274      	movs	r2, #116	@ 0x74
 80007c8:	f003 fcf4 	bl	80041b4 <HAL_UART_Transmit>
				for(uint8_t i = 0; i < sizeof(var); i++)
 80007cc:	2375      	movs	r3, #117	@ 0x75
 80007ce:	18fb      	adds	r3, r7, r3
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	e00a      	b.n	80007ec <LinkedListControl+0x36c>
					var[i] = 0;
 80007d6:	2075      	movs	r0, #117	@ 0x75
 80007d8:	183b      	adds	r3, r7, r0
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4a10      	ldr	r2, [pc, #64]	@ (8000820 <LinkedListControl+0x3a0>)
 80007de:	2100      	movs	r1, #0
 80007e0:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i = 0; i < sizeof(var); i++)
 80007e2:	183b      	adds	r3, r7, r0
 80007e4:	781a      	ldrb	r2, [r3, #0]
 80007e6:	183b      	adds	r3, r7, r0
 80007e8:	3201      	adds	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	2375      	movs	r3, #117	@ 0x75
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d9ef      	bls.n	80007d6 <LinkedListControl+0x356>
				rx_flag = STATE_OFF;
 80007f6:	4b05      	ldr	r3, [pc, #20]	@ (800080c <LinkedListControl+0x38c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
				rx_buffer = Default;
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <LinkedListControl+0x390>)
 80007fe:	2230      	movs	r2, #48	@ 0x30
 8000800:	701a      	strb	r2, [r3, #0]
				status_flag = STATE_OFF;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <LinkedListControl+0x3a4>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	e110      	b.n	8000a2c <LinkedListControl+0x5ac>
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	200003cc 	.word	0x200003cc
 8000810:	20000000 	.word	0x20000000
 8000814:	08006634 	.word	0x08006634
 8000818:	20000338 	.word	0x20000338
 800081c:	20000004 	.word	0x20000004
 8000820:	200003d0 	.word	0x200003d0
 8000824:	200003cd 	.word	0x200003cd
 8000828:	200003d4 	.word	0x200003d4
 800082c:	200003d8 	.word	0x200003d8
 8000830:	08006658 	.word	0x08006658
 8000834:	08006680 	.word	0x08006680
 8000838:	080066ac 	.word	0x080066ac
 800083c:	20000074 	.word	0x20000074
 8000840:	080066d0 	.word	0x080066d0
 8000844:	080066f4 	.word	0x080066f4
 8000848:	0800671c 	.word	0x0800671c
 800084c:	0800674c 	.word	0x0800674c
				HAL_UART_Transmit(&huart2, askIndex, sizeof(askVar), 500);
 8000850:	23fa      	movs	r3, #250	@ 0xfa
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4977      	ldr	r1, [pc, #476]	@ (8000a34 <LinkedListControl+0x5b4>)
 8000856:	4878      	ldr	r0, [pc, #480]	@ (8000a38 <LinkedListControl+0x5b8>)
 8000858:	2236      	movs	r2, #54	@ 0x36
 800085a:	f003 fcab 	bl	80041b4 <HAL_UART_Transmit>
				HAL_UART_Receive(&huart2, var, sizeof(var), HAL_MAX_DELAY);
 800085e:	2301      	movs	r3, #1
 8000860:	425b      	negs	r3, r3
 8000862:	4976      	ldr	r1, [pc, #472]	@ (8000a3c <LinkedListControl+0x5bc>)
 8000864:	4874      	ldr	r0, [pc, #464]	@ (8000a38 <LinkedListControl+0x5b8>)
 8000866:	2204      	movs	r2, #4
 8000868:	f003 fd48 	bl	80042fc <HAL_UART_Receive>
				if( status_flag == HAL_OK && var[0] != 0 )
 800086c:	4b74      	ldr	r3, [pc, #464]	@ (8000a40 <LinkedListControl+0x5c0>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d147      	bne.n	8000904 <LinkedListControl+0x484>
 8000874:	4b71      	ldr	r3, [pc, #452]	@ (8000a3c <LinkedListControl+0x5bc>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d043      	beq.n	8000904 <LinkedListControl+0x484>
					Node *node = GetNode(&list, GetDecimal(&huart2, var, sizeof(var)) );
 800087c:	496f      	ldr	r1, [pc, #444]	@ (8000a3c <LinkedListControl+0x5bc>)
 800087e:	4b6e      	ldr	r3, [pc, #440]	@ (8000a38 <LinkedListControl+0x5b8>)
 8000880:	2204      	movs	r2, #4
 8000882:	0018      	movs	r0, r3
 8000884:	f000 faec 	bl	8000e60 <GetDecimal>
 8000888:	0003      	movs	r3, r0
 800088a:	001a      	movs	r2, r3
 800088c:	4b6d      	ldr	r3, [pc, #436]	@ (8000a44 <LinkedListControl+0x5c4>)
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fc05 	bl	80010a0 <GetNode>
 8000896:	0003      	movs	r3, r0
 8000898:	66fb      	str	r3, [r7, #108]	@ 0x6c
					if(node)
 800089a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800089c:	2b00      	cmp	r3, #0
 800089e:	d021      	beq.n	80008e4 <LinkedListControl+0x464>
						Delete(&list, node);
 80008a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80008a2:	4b68      	ldr	r3, [pc, #416]	@ (8000a44 <LinkedListControl+0x5c4>)
 80008a4:	0011      	movs	r1, r2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fc32 	bl	8001110 <Delete>
						if( CheckNode(&list, node) == HAL_ERROR )
 80008ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80008ae:	4b65      	ldr	r3, [pc, #404]	@ (8000a44 <LinkedListControl+0x5c4>)
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fc12 	bl	80010dc <CheckNode>
 80008b8:	0003      	movs	r3, r0
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d122      	bne.n	8000904 <LinkedListControl+0x484>
							uint8_t result3[] = "\n Data successfully deleted from the list\n\r";
 80008be:	2534      	movs	r5, #52	@ 0x34
 80008c0:	197b      	adds	r3, r7, r5
 80008c2:	4a61      	ldr	r2, [pc, #388]	@ (8000a48 <LinkedListControl+0x5c8>)
 80008c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008c6:	c313      	stmia	r3!, {r0, r1, r4}
 80008c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008ca:	c313      	stmia	r3!, {r0, r1, r4}
 80008cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008ce:	c313      	stmia	r3!, {r0, r1, r4}
 80008d0:	ca03      	ldmia	r2!, {r0, r1}
 80008d2:	c303      	stmia	r3!, {r0, r1}
							HAL_UART_Transmit(&huart2, result3, sizeof(result3), 500);
 80008d4:	23fa      	movs	r3, #250	@ 0xfa
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	1979      	adds	r1, r7, r5
 80008da:	4857      	ldr	r0, [pc, #348]	@ (8000a38 <LinkedListControl+0x5b8>)
 80008dc:	222c      	movs	r2, #44	@ 0x2c
 80008de:	f003 fc69 	bl	80041b4 <HAL_UART_Transmit>
 80008e2:	e00f      	b.n	8000904 <LinkedListControl+0x484>
						uint8_t errorNotFound[] = "\n ERROR: Node with the data entered does not exist\n\r";
 80008e4:	2434      	movs	r4, #52	@ 0x34
 80008e6:	193a      	adds	r2, r7, r4
 80008e8:	4b58      	ldr	r3, [pc, #352]	@ (8000a4c <LinkedListControl+0x5cc>)
 80008ea:	0010      	movs	r0, r2
 80008ec:	0019      	movs	r1, r3
 80008ee:	2335      	movs	r3, #53	@ 0x35
 80008f0:	001a      	movs	r2, r3
 80008f2:	f005 fddf 	bl	80064b4 <memcpy>
						HAL_UART_Transmit(&huart2, errorNotFound, sizeof(errorNotFound), 500);
 80008f6:	23fa      	movs	r3, #250	@ 0xfa
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	1939      	adds	r1, r7, r4
 80008fc:	484e      	ldr	r0, [pc, #312]	@ (8000a38 <LinkedListControl+0x5b8>)
 80008fe:	2235      	movs	r2, #53	@ 0x35
 8000900:	f003 fc58 	bl	80041b4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, repeat, sizeof(repeat), 500);
 8000904:	23fa      	movs	r3, #250	@ 0xfa
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	4951      	ldr	r1, [pc, #324]	@ (8000a50 <LinkedListControl+0x5d0>)
 800090a:	484b      	ldr	r0, [pc, #300]	@ (8000a38 <LinkedListControl+0x5b8>)
 800090c:	2274      	movs	r2, #116	@ 0x74
 800090e:	f003 fc51 	bl	80041b4 <HAL_UART_Transmit>
			for(uint8_t i = 0; i < sizeof(var); i++)
 8000912:	2374      	movs	r3, #116	@ 0x74
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	e00a      	b.n	8000932 <LinkedListControl+0x4b2>
				var[i] = 0;
 800091c:	2074      	movs	r0, #116	@ 0x74
 800091e:	183b      	adds	r3, r7, r0
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4a46      	ldr	r2, [pc, #280]	@ (8000a3c <LinkedListControl+0x5bc>)
 8000924:	2100      	movs	r1, #0
 8000926:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < sizeof(var); i++)
 8000928:	183b      	adds	r3, r7, r0
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	183b      	adds	r3, r7, r0
 800092e:	3201      	adds	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	2374      	movs	r3, #116	@ 0x74
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b03      	cmp	r3, #3
 800093a:	d9ef      	bls.n	800091c <LinkedListControl+0x49c>
			rx_flag = STATE_OFF;
 800093c:	4b45      	ldr	r3, [pc, #276]	@ (8000a54 <LinkedListControl+0x5d4>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
			rx_buffer = Default;
 8000942:	4b45      	ldr	r3, [pc, #276]	@ (8000a58 <LinkedListControl+0x5d8>)
 8000944:	2230      	movs	r2, #48	@ 0x30
 8000946:	701a      	strb	r2, [r3, #0]
			status_flag = STATE_OFF;
 8000948:	4b3d      	ldr	r3, [pc, #244]	@ (8000a40 <LinkedListControl+0x5c0>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
			break;
 800094e:	e063      	b.n	8000a18 <LinkedListControl+0x598>
			uint8_t choice4[] = "\n\n\n Chosen Option 4 - Display List\n\r";
 8000950:	2534      	movs	r5, #52	@ 0x34
 8000952:	197b      	adds	r3, r7, r5
 8000954:	4a41      	ldr	r2, [pc, #260]	@ (8000a5c <LinkedListControl+0x5dc>)
 8000956:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000958:	c313      	stmia	r3!, {r0, r1, r4}
 800095a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800095c:	c313      	stmia	r3!, {r0, r1, r4}
 800095e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000960:	c313      	stmia	r3!, {r0, r1, r4}
 8000962:	7812      	ldrb	r2, [r2, #0]
 8000964:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, choice4, sizeof(choice4), 500);
 8000966:	23fa      	movs	r3, #250	@ 0xfa
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	1979      	adds	r1, r7, r5
 800096c:	4832      	ldr	r0, [pc, #200]	@ (8000a38 <LinkedListControl+0x5b8>)
 800096e:	2225      	movs	r2, #37	@ 0x25
 8000970:	f003 fc20 	bl	80041b4 <HAL_UART_Transmit>
			DisplayLinkedList(&list, &huart2);
 8000974:	4a30      	ldr	r2, [pc, #192]	@ (8000a38 <LinkedListControl+0x5b8>)
 8000976:	4b33      	ldr	r3, [pc, #204]	@ (8000a44 <LinkedListControl+0x5c4>)
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fdcc 	bl	8001518 <DisplayLinkedList>
			HAL_UART_Transmit(&huart2, repeat, sizeof(repeat), 500);
 8000980:	23fa      	movs	r3, #250	@ 0xfa
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4932      	ldr	r1, [pc, #200]	@ (8000a50 <LinkedListControl+0x5d0>)
 8000986:	482c      	ldr	r0, [pc, #176]	@ (8000a38 <LinkedListControl+0x5b8>)
 8000988:	2274      	movs	r2, #116	@ 0x74
 800098a:	f003 fc13 	bl	80041b4 <HAL_UART_Transmit>
			for(uint8_t i = 0; i < sizeof(var); i++)
 800098e:	2373      	movs	r3, #115	@ 0x73
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e00a      	b.n	80009ae <LinkedListControl+0x52e>
				var[i] = 0;
 8000998:	2073      	movs	r0, #115	@ 0x73
 800099a:	183b      	adds	r3, r7, r0
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4a27      	ldr	r2, [pc, #156]	@ (8000a3c <LinkedListControl+0x5bc>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < sizeof(var); i++)
 80009a4:	183b      	adds	r3, r7, r0
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	183b      	adds	r3, r7, r0
 80009aa:	3201      	adds	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	2373      	movs	r3, #115	@ 0x73
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d9ef      	bls.n	8000998 <LinkedListControl+0x518>
			rx_flag = STATE_OFF;
 80009b8:	4b26      	ldr	r3, [pc, #152]	@ (8000a54 <LinkedListControl+0x5d4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
			rx_buffer = Default;
 80009be:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <LinkedListControl+0x5d8>)
 80009c0:	2230      	movs	r2, #48	@ 0x30
 80009c2:	701a      	strb	r2, [r3, #0]
			status_flag = STATE_OFF;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <LinkedListControl+0x5c0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
			break;
 80009ca:	e025      	b.n	8000a18 <LinkedListControl+0x598>
			HAL_UART_Transmit(&huart2, repeat, sizeof(repeat), 500);
 80009cc:	23fa      	movs	r3, #250	@ 0xfa
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	491f      	ldr	r1, [pc, #124]	@ (8000a50 <LinkedListControl+0x5d0>)
 80009d2:	4819      	ldr	r0, [pc, #100]	@ (8000a38 <LinkedListControl+0x5b8>)
 80009d4:	2274      	movs	r2, #116	@ 0x74
 80009d6:	f003 fbed 	bl	80041b4 <HAL_UART_Transmit>
			for(uint8_t i = 0; i < sizeof(var); i++)
 80009da:	2372      	movs	r3, #114	@ 0x72
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e00a      	b.n	80009fa <LinkedListControl+0x57a>
				var[i] = 0;
 80009e4:	2072      	movs	r0, #114	@ 0x72
 80009e6:	183b      	adds	r3, r7, r0
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4a14      	ldr	r2, [pc, #80]	@ (8000a3c <LinkedListControl+0x5bc>)
 80009ec:	2100      	movs	r1, #0
 80009ee:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < sizeof(var); i++)
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	183b      	adds	r3, r7, r0
 80009f6:	3201      	adds	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	2372      	movs	r3, #114	@ 0x72
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d9ef      	bls.n	80009e4 <LinkedListControl+0x564>
			rx_flag = STATE_OFF;
 8000a04:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <LinkedListControl+0x5d4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
			rx_buffer = Default;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <LinkedListControl+0x5d8>)
 8000a0c:	2230      	movs	r2, #48	@ 0x30
 8000a0e:	701a      	strb	r2, [r3, #0]
			status_flag = STATE_OFF;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <LinkedListControl+0x5c0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
			break;
 8000a16:	46c0      	nop			@ (mov r8, r8)
}
 8000a18:	e008      	b.n	8000a2c <LinkedListControl+0x5ac>
		HAL_UART_Receive_IT(&huart2, &rx_buffer, sizeof(rx_buffer));
 8000a1a:	490f      	ldr	r1, [pc, #60]	@ (8000a58 <LinkedListControl+0x5d8>)
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <LinkedListControl+0x5b8>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	0018      	movs	r0, r3
 8000a22:	f003 fd67 	bl	80044f4 <HAL_UART_Receive_IT>
		HAL_Delay(100);
 8000a26:	2064      	movs	r0, #100	@ 0x64
 8000a28:	f000 fffc 	bl	8001a24 <HAL_Delay>
}
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b01e      	add	sp, #120	@ 0x78
 8000a32:	bdb0      	pop	{r4, r5, r7, pc}
 8000a34:	2000003c 	.word	0x2000003c
 8000a38:	20000338 	.word	0x20000338
 8000a3c:	200003d0 	.word	0x200003d0
 8000a40:	200003cd 	.word	0x200003cd
 8000a44:	200003d8 	.word	0x200003d8
 8000a48:	08006784 	.word	0x08006784
 8000a4c:	080067b0 	.word	0x080067b0
 8000a50:	20000074 	.word	0x20000074
 8000a54:	200003cc 	.word	0x200003cc
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	080067e8 	.word	0x080067e8

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 ff58 	bl	8001918 <HAL_Init>

  /* USER CODE BEGIN Init */
  InitializeList(&list);
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <main+0x48>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 f9e0 	bl	8000e30 <InitializeList>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f822 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f000 f982 	bl	8000d7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a78:	f000 f94c 	bl	8000d14 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a7c:	f000 f864 	bl	8000b48 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a80:	f000 f8ca 	bl	8000c18 <MX_TIM2_Init>


//  HAL_ADC_Start(&hadc1);
  //HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));

  HAL_UART_Transmit(&huart2, greeting_list, sizeof(greeting_list), 500);
 8000a84:	23fa      	movs	r3, #250	@ 0xfa
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2228      	movs	r2, #40	@ 0x28
 8000a8a:	32ff      	adds	r2, #255	@ 0xff
 8000a8c:	4907      	ldr	r1, [pc, #28]	@ (8000aac <main+0x4c>)
 8000a8e:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <main+0x50>)
 8000a90:	f003 fb90 	bl	80041b4 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, &rx_buffer, sizeof(rx_buffer));
 8000a94:	4907      	ldr	r1, [pc, #28]	@ (8000ab4 <main+0x54>)
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <main+0x50>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f003 fd2a 	bl	80044f4 <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */

	 // LedControl();

	  LinkedListControl();
 8000aa0:	f7ff fcee 	bl	8000480 <LinkedListControl>
 8000aa4:	e7fc      	b.n	8000aa0 <main+0x40>
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	200003d8 	.word	0x200003d8
 8000aac:	200000e8 	.word	0x200000e8
 8000ab0:	20000338 	.word	0x20000338
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b093      	sub	sp, #76	@ 0x4c
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	2410      	movs	r4, #16
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2338      	movs	r3, #56	@ 0x38
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f005 fcad 	bl	8006428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ace:	003b      	movs	r3, r7
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f005 fca6 	bl	8006428 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 ff4f 	bl	8002984 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2202      	movs	r2, #2
 8000aea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2280      	movs	r2, #128	@ 0x80
 8000af0:	0052      	lsls	r2, r2, #1
 8000af2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2240      	movs	r2, #64	@ 0x40
 8000afe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 ff87 	bl	8002a1c <HAL_RCC_OscConfig>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b12:	f000 f987 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b16:	003b      	movs	r3, r7
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	003b      	movs	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2100      	movs	r1, #0
 8000b32:	0018      	movs	r0, r3
 8000b34:	f002 fa8c 	bl	8003050 <HAL_RCC_ClockConfig>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b3c:	f000 f972 	bl	8000e24 <Error_Handler>
  }
}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b013      	add	sp, #76	@ 0x4c
 8000b46:	bd90      	pop	{r4, r7, pc}

08000b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	0018      	movs	r0, r3
 8000b52:	230c      	movs	r3, #12
 8000b54:	001a      	movs	r2, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	f005 fc66 	bl	8006428 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c10 <MX_ADC1_Init+0xc8>)
 8000b60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b62:	4b2a      	ldr	r3, [pc, #168]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	05d2      	lsls	r2, r2, #23
 8000b68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b70:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b76:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b7c:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b82:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000ba8:	222c      	movs	r2, #44	@ 0x2c
 8000baa:	2100      	movs	r1, #0
 8000bac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000bc2:	223c      	movs	r2, #60	@ 0x3c
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f001 f849 	bl	8001c68 <HAL_ADC_Init>
 8000bd6:	1e03      	subs	r3, r0, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000bda:	f000 f923 	bl	8000e24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c14 <MX_ADC1_Init+0xcc>)
 8000be2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	1d3a      	adds	r2, r7, #4
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_ADC1_Init+0xc4>)
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 f9de 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000c00:	f000 f910 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b004      	add	sp, #16
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000288 	.word	0x20000288
 8000c10:	40012400 	.word	0x40012400
 8000c14:	24000200 	.word	0x24000200

08000c18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	@ 0x38
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	2328      	movs	r3, #40	@ 0x28
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	0018      	movs	r0, r3
 8000c24:	2310      	movs	r3, #16
 8000c26:	001a      	movs	r2, r3
 8000c28:	2100      	movs	r1, #0
 8000c2a:	f005 fbfd 	bl	8006428 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2e:	231c      	movs	r3, #28
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	0018      	movs	r0, r3
 8000c34:	230c      	movs	r3, #12
 8000c36:	001a      	movs	r2, r3
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f005 fbf5 	bl	8006428 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3e:	003b      	movs	r3, r7
 8000c40:	0018      	movs	r0, r3
 8000c42:	231c      	movs	r3, #28
 8000c44:	001a      	movs	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	f005 fbee 	bl	8006428 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c4c:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000c4e:	2280      	movs	r2, #128	@ 0x80
 8000c50:	05d2      	lsls	r2, r2, #23
 8000c52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000c54:	4b2e      	ldr	r3, [pc, #184]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000c56:	2263      	movs	r2, #99	@ 0x63
 8000c58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000c60:	4b2b      	ldr	r3, [pc, #172]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000c62:	2263      	movs	r2, #99	@ 0x63
 8000c64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c66:	4b2a      	ldr	r3, [pc, #168]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6c:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c72:	4b27      	ldr	r3, [pc, #156]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	f002 fb95 	bl	80033a4 <HAL_TIM_Base_Init>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c7e:	f000 f8d1 	bl	8000e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c82:	2128      	movs	r1, #40	@ 0x28
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2280      	movs	r2, #128	@ 0x80
 8000c88:	0152      	lsls	r2, r2, #5
 8000c8a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c8c:	187a      	adds	r2, r7, r1
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000c90:	0011      	movs	r1, r2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f002 fd3e 	bl	8003714 <HAL_TIM_ConfigClockSource>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000c9c:	f000 f8c2 	bl	8000e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f002 fbd6 	bl	8003454 <HAL_TIM_PWM_Init>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000cac:	f000 f8ba 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	211c      	movs	r1, #28
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cbe:	187a      	adds	r2, r7, r1
 8000cc0:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f003 f9b7 	bl	8004038 <HAL_TIMEx_MasterConfigSynchronization>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000cce:	f000 f8a9 	bl	8000e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd2:	003b      	movs	r3, r7
 8000cd4:	2260      	movs	r2, #96	@ 0x60
 8000cd6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000cd8:	003b      	movs	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cde:	003b      	movs	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cea:	0039      	movs	r1, r7
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000cee:	2208      	movs	r2, #8
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f002 fc0f 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000cfa:	f000 f893 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cfe:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <MX_TIM2_Init+0xf8>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 fcef 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b00e      	add	sp, #56	@ 0x38
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	200002ec 	.word	0x200002ec

08000d14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d1a:	4a17      	ldr	r2, [pc, #92]	@ (8000d78 <MX_USART2_UART_Init+0x64>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d20:	22e1      	movs	r2, #225	@ 0xe1
 8000d22:	0252      	lsls	r2, r2, #9
 8000d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f003 f9d2 	bl	8004108 <HAL_UART_Init>
 8000d64:	1e03      	subs	r3, r0, #0
 8000d66:	d001      	beq.n	8000d6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d68:	f000 f85c 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6c:	46c0      	nop			@ (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	20000338 	.word	0x20000338
 8000d78:	40004400 	.word	0x40004400

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b08b      	sub	sp, #44	@ 0x2c
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	2414      	movs	r4, #20
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	0018      	movs	r0, r3
 8000d88:	2314      	movs	r3, #20
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f005 fb4b 	bl	8006428 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d96:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000d98:	2104      	movs	r1, #4
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000da2:	2204      	movs	r2, #4
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000daa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000dac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dae:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000db0:	2120      	movs	r1, #32
 8000db2:	430a      	orrs	r2, r1
 8000db4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dba:	2220      	movs	r2, #32
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000dc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dce:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dde:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000de0:	2102      	movs	r1, #2
 8000de2:	430a      	orrs	r2, r1
 8000de4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000de6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <MX_GPIO_Init+0xa0>)
 8000de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dea:	2202      	movs	r2, #2
 8000dec:	4013      	ands	r3, r2
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	2204      	movs	r2, #4
 8000df6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	2288      	movs	r2, #136	@ 0x88
 8000dfc:	0352      	lsls	r2, r2, #13
 8000dfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	4a05      	ldr	r2, [pc, #20]	@ (8000e20 <MX_GPIO_Init+0xa4>)
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	0010      	movs	r0, r2
 8000e0e:	f001 fc55 	bl	80026bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b00b      	add	sp, #44	@ 0x2c
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	50001400 	.word	0x50001400

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	e7fd      	b.n	8000e2c <Error_Handler+0x8>

08000e30 <InitializeList>:
#include "my_linked_list.h"

void InitializeList(LinkedList *list)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	list->head->data = 0;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
	list->head->next = NULL;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]

	list->tail->data = 0;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
	list->tail->next = NULL;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
}
 8000e58:	46c0      	nop			@ (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <GetDecimal>:

uint8_t GetDecimal(UART_HandleTypeDef *huart, uint8_t var[], uint8_t size)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b0a5      	sub	sp, #148	@ 0x94
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	701a      	strb	r2, [r3, #0]
	uint8_t dec = 0;
 8000e6e:	238a      	movs	r3, #138	@ 0x8a
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
	uint16_t controlValue = 0;
 8000e76:	238e      	movs	r3, #142	@ 0x8e
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	801a      	strh	r2, [r3, #0]
	uint8_t multiplier = 1;
 8000e7e:	238d      	movs	r3, #141	@ 0x8d
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
	uint8_t digitValue = 0;
 8000e86:	2389      	movs	r3, #137	@ 0x89
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
	uint8_t currentDigit = size;
 8000e8e:	238c      	movs	r3, #140	@ 0x8c
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	1dfa      	adds	r2, r7, #7
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	701a      	strb	r2, [r3, #0]

	    // Start from the least significant digit (rightmost)
	    for (uint8_t i = size ; i > 0; i--) {
 8000e98:	238b      	movs	r3, #139	@ 0x8b
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	1dfa      	adds	r2, r7, #7
 8000e9e:	7812      	ldrb	r2, [r2, #0]
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	e067      	b.n	8000f74 <GetDecimal+0x114>

	    	if( var[i-1] != ASCII_Char_Space && var[i-1] )
 8000ea4:	218b      	movs	r1, #139	@ 0x8b
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	18d3      	adds	r3, r2, r3
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b20      	cmp	r3, #32
 8000eb4:	d052      	beq.n	8000f5c <GetDecimal+0xfc>
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	18d3      	adds	r3, r2, r3
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d04a      	beq.n	8000f5c <GetDecimal+0xfc>
	    	{

	    		if( var[i-1] < 48 || var[i-1] > 57 )
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	18d3      	adds	r3, r2, r3
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ed4:	d907      	bls.n	8000ee6 <GetDecimal+0x86>
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	18d3      	adds	r3, r2, r3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b39      	cmp	r3, #57	@ 0x39
 8000ee4:	d911      	bls.n	8000f0a <GetDecimal+0xaa>
	    		{
	    			uint8_t errorNotNumber[] = "\n\n\n\r ERROR: Your input has characters other than a number.\n\n\r Please do not enter characters other than numbers\n\r";
 8000ee6:	2414      	movs	r4, #20
 8000ee8:	193a      	adds	r2, r7, r4
 8000eea:	4b36      	ldr	r3, [pc, #216]	@ (8000fc4 <GetDecimal+0x164>)
 8000eec:	0010      	movs	r0, r2
 8000eee:	0019      	movs	r1, r3
 8000ef0:	2372      	movs	r3, #114	@ 0x72
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	f005 fade 	bl	80064b4 <memcpy>
	    			HAL_UART_Transmit(huart, errorNotNumber, sizeof(errorNotNumber), 500);
 8000ef8:	23fa      	movs	r3, #250	@ 0xfa
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	1939      	adds	r1, r7, r4
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	2272      	movs	r2, #114	@ 0x72
 8000f02:	f003 f957 	bl	80041b4 <HAL_UART_Transmit>
	    			return 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e058      	b.n	8000fbc <GetDecimal+0x15c>
	    		}

	    		digitValue = var[i-1] - ASCII_Char_0;
 8000f0a:	238b      	movs	r3, #139	@ 0x8b
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	18d3      	adds	r3, r2, r3
 8000f16:	781a      	ldrb	r2, [r3, #0]
 8000f18:	2189      	movs	r1, #137	@ 0x89
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	3a30      	subs	r2, #48	@ 0x30
 8000f1e:	701a      	strb	r2, [r3, #0]

		        controlValue += digitValue * multiplier;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	208d      	movs	r0, #141	@ 0x8d
 8000f28:	183a      	adds	r2, r7, r0
 8000f2a:	7812      	ldrb	r2, [r2, #0]
 8000f2c:	b292      	uxth	r2, r2
 8000f2e:	4353      	muls	r3, r2
 8000f30:	b299      	uxth	r1, r3
 8000f32:	228e      	movs	r2, #142	@ 0x8e
 8000f34:	18bb      	adds	r3, r7, r2
 8000f36:	18ba      	adds	r2, r7, r2
 8000f38:	8812      	ldrh	r2, [r2, #0]
 8000f3a:	188a      	adds	r2, r1, r2
 8000f3c:	801a      	strh	r2, [r3, #0]
		        multiplier *= 10;
 8000f3e:	183a      	adds	r2, r7, r0
 8000f40:	183b      	adds	r3, r7, r0
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	1c19      	adds	r1, r3, #0
 8000f46:	0089      	lsls	r1, r1, #2
 8000f48:	18cb      	adds	r3, r1, r3
 8000f4a:	18db      	adds	r3, r3, r3
 8000f4c:	7013      	strb	r3, [r2, #0]

		        currentDigit--;
 8000f4e:	218c      	movs	r1, #140	@ 0x8c
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	3a01      	subs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e005      	b.n	8000f68 <GetDecimal+0x108>
	    	}
	    	else{currentDigit--;}
 8000f5c:	218c      	movs	r1, #140	@ 0x8c
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	3a01      	subs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
	    for (uint8_t i = size ; i > 0; i--) {
 8000f68:	218b      	movs	r1, #139	@ 0x8b
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	3a01      	subs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	238b      	movs	r3, #139	@ 0x8b
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d192      	bne.n	8000ea4 <GetDecimal+0x44>

	    }
	    if( controlValue > 255 )
 8000f7e:	238e      	movs	r3, #142	@ 0x8e
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	2bff      	cmp	r3, #255	@ 0xff
 8000f86:	d911      	bls.n	8000fac <GetDecimal+0x14c>
	    {
	    	uint8_t errorOverLimit[] = "\n\n\n\r ERROR: Your input is over the size limit, Please enter numbers lower than 256.\n\r";
 8000f88:	2414      	movs	r4, #20
 8000f8a:	193a      	adds	r2, r7, r4
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <GetDecimal+0x168>)
 8000f8e:	0010      	movs	r0, r2
 8000f90:	0019      	movs	r1, r3
 8000f92:	2356      	movs	r3, #86	@ 0x56
 8000f94:	001a      	movs	r2, r3
 8000f96:	f005 fa8d 	bl	80064b4 <memcpy>
	    	HAL_UART_Transmit(huart, errorOverLimit, sizeof(errorOverLimit), 500);
 8000f9a:	23fa      	movs	r3, #250	@ 0xfa
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	1939      	adds	r1, r7, r4
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	2256      	movs	r2, #86	@ 0x56
 8000fa4:	f003 f906 	bl	80041b4 <HAL_UART_Transmit>
	    	return 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e007      	b.n	8000fbc <GetDecimal+0x15c>
	    }
	    else
	    {
	    	dec = (uint8_t)controlValue;
 8000fac:	218a      	movs	r1, #138	@ 0x8a
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	228e      	movs	r2, #142	@ 0x8e
 8000fb2:	18ba      	adds	r2, r7, r2
 8000fb4:	8812      	ldrh	r2, [r2, #0]
 8000fb6:	701a      	strb	r2, [r3, #0]
	    	return dec;
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	781b      	ldrb	r3, [r3, #0]
	    }

	    return 0;
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b025      	add	sp, #148	@ 0x94
 8000fc2:	bd90      	pop	{r4, r7, pc}
 8000fc4:	08006810 	.word	0x08006810
 8000fc8:	08006884 	.word	0x08006884

08000fcc <AddHead>:

void AddHead(LinkedList *list, uint8_t data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	000a      	movs	r2, r1
 8000fd6:	1cfb      	adds	r3, r7, #3
 8000fd8:	701a      	strb	r2, [r3, #0]
	Node *new_node = (Node *) malloc(sizeof(Node));
 8000fda:	2008      	movs	r0, #8
 8000fdc:	f005 f95e 	bl	800629c <malloc>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	60bb      	str	r3, [r7, #8]
    new_node->data = data;
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1cfa      	adds	r2, r7, #3
 8000fe8:	7812      	ldrb	r2, [r2, #0]
 8000fea:	701a      	strb	r2, [r3, #0]
    new_node->index = 1;
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	705a      	strb	r2, [r3, #1]

	if( list->tail == NULL )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d106      	bne.n	8001008 <AddHead+0x3c>
	{
		list->tail = new_node;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	605a      	str	r2, [r3, #4]
		new_node->next = NULL;
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	e014      	b.n	8001032 <AddHead+0x66>
	}
	else
	{
		new_node->next = list->head;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	605a      	str	r2, [r3, #4]
		Node *temp = new_node;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60fb      	str	r3, [r7, #12]

		while( temp->next != NULL)
 8001014:	e009      	b.n	800102a <AddHead+0x5e>
		{
			temp->next->index = temp->index + 1;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	785a      	ldrb	r2, [r3, #1]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	3201      	adds	r2, #1
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	705a      	strb	r2, [r3, #1]

			temp = temp->next;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	60fb      	str	r3, [r7, #12]
		while( temp->next != NULL)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f1      	bne.n	8001016 <AddHead+0x4a>
		}
	}

	list->head = new_node;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	601a      	str	r2, [r3, #0]

}
 8001038:	46c0      	nop			@ (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b004      	add	sp, #16
 800103e:	bd80      	pop	{r7, pc}

08001040 <AddTail>:

void AddTail(LinkedList *list, uint8_t data)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	000a      	movs	r2, r1
 800104a:	1cfb      	adds	r3, r7, #3
 800104c:	701a      	strb	r2, [r3, #0]
	Node *new_node = (Node *) malloc(sizeof(Node));
 800104e:	2008      	movs	r0, #8
 8001050:	f005 f924 	bl	800629c <malloc>
 8001054:	0003      	movs	r3, r0
 8001056:	60fb      	str	r3, [r7, #12]
	new_node->data = data;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1cfa      	adds	r2, r7, #3
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	701a      	strb	r2, [r3, #0]
	new_node->next = NULL;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]

	if( list->head == NULL )
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d106      	bne.n	800107c <AddTail+0x3c>
	{
		list->head = new_node;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	601a      	str	r2, [r3, #0]
		new_node->index = 1;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2201      	movs	r2, #1
 8001078:	705a      	strb	r2, [r3, #1]
 800107a:	e00a      	b.n	8001092 <AddTail+0x52>
	}
	else
	{
		list->tail->next = new_node;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	605a      	str	r2, [r3, #4]
		new_node->index = list->tail->index + 1;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	785b      	ldrb	r3, [r3, #1]
 800108a:	3301      	adds	r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	705a      	strb	r2, [r3, #1]
	}
	list->tail = new_node;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	605a      	str	r2, [r3, #4]

}
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bd80      	pop	{r7, pc}

080010a0 <GetNode>:

Node *GetNode(LinkedList *list, uint8_t index)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	000a      	movs	r2, r1
 80010aa:	1cfb      	adds	r3, r7, #3
 80010ac:	701a      	strb	r2, [r3, #0]
	Node *tempNode = list->head;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]

	while( tempNode != NULL)
 80010b4:	e00a      	b.n	80010cc <GetNode+0x2c>
	{
		if( tempNode->index == index )
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	785b      	ldrb	r3, [r3, #1]
 80010ba:	1cfa      	adds	r2, r7, #3
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d101      	bne.n	80010c6 <GetNode+0x26>
		{
			return tempNode;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	e006      	b.n	80010d4 <GetNode+0x34>
		}

		tempNode = tempNode->next;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	60fb      	str	r3, [r7, #12]
	while( tempNode != NULL)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f1      	bne.n	80010b6 <GetNode+0x16>
	}

	return NULL;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b004      	add	sp, #16
 80010da:	bd80      	pop	{r7, pc}

080010dc <CheckNode>:

HAL_StatusTypeDef CheckNode(LinkedList *list, Node *node)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	Node *tempNode = list->head;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	60fb      	str	r3, [r7, #12]

	while( tempNode != NULL )
 80010ec:	e008      	b.n	8001100 <CheckNode+0x24>
	{
		if( tempNode == node)
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d101      	bne.n	80010fa <CheckNode+0x1e>
		{
			return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e006      	b.n	8001108 <CheckNode+0x2c>
		}
		tempNode = tempNode->next;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	60fb      	str	r3, [r7, #12]
	while( tempNode != NULL )
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f3      	bne.n	80010ee <CheckNode+0x12>
	}

	return HAL_ERROR;
 8001106:	2301      	movs	r3, #1

}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b004      	add	sp, #16
 800110e:	bd80      	pop	{r7, pc}

08001110 <Delete>:

void Delete(LinkedList *list, Node *node)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	if( node == list->head )
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d122      	bne.n	800116a <Delete+0x5a>
	{
		if( list->head->next == NULL )
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d107      	bne.n	800113e <Delete+0x2e>
		{
			list->head = list->tail = NULL;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e042      	b.n	80011c4 <Delete+0xb4>
		}
		else
		{
			list->head = list->head->next;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]

			Node *temp = list->head;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
			while(temp != NULL)
 800114e:	e008      	b.n	8001162 <Delete+0x52>
			{
				temp->index = temp->index - 1;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	785b      	ldrb	r3, [r3, #1]
 8001154:	3b01      	subs	r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	705a      	strb	r2, [r3, #1]

				temp = temp->next;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	60fb      	str	r3, [r7, #12]
			while(temp != NULL)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f3      	bne.n	8001150 <Delete+0x40>
 8001168:	e02c      	b.n	80011c4 <Delete+0xb4>

		}
	}
	else
	{
		Node *temp = list->head;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	60bb      	str	r3, [r7, #8]
		while( temp != NULL && temp->next != node )
 8001170:	e002      	b.n	8001178 <Delete+0x68>
		{
			temp = temp->next;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	60bb      	str	r3, [r7, #8]
		while( temp != NULL && temp->next != node )
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <Delete+0x78>
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d1f4      	bne.n	8001172 <Delete+0x62>
		}
		if( temp != NULL )
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d01a      	beq.n	80011c4 <Delete+0xb4>
		{
			temp->next = node->next;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	605a      	str	r2, [r3, #4]

			while(temp->next != NULL)
 8001196:	e00a      	b.n	80011ae <Delete+0x9e>
			{
				temp->next->index = temp->next->index - 1;
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	785a      	ldrb	r2, [r3, #1]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	3a01      	subs	r2, #1
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	705a      	strb	r2, [r3, #1]

				temp = temp->next;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	60bb      	str	r3, [r7, #8]
			while(temp->next != NULL)
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <Delete+0x88>
			}

			if( node->next == NULL )
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d102      	bne.n	80011c4 <Delete+0xb4>
			{
				list->tail = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	605a      	str	r2, [r3, #4]
			}
		}
	}

	free(node);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	0018      	movs	r0, r3
 80011c8:	f005 f872 	bl	80062b0 <free>
}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b004      	add	sp, #16
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <IsEmpty>:

StateType_t IsEmpty(LinkedList *list)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	if( list->head == NULL && list->tail == NULL )
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d105      	bne.n	80011f0 <IsEmpty+0x1c>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <IsEmpty+0x1c>
	{
		return STATE_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <IsEmpty+0x1e>
	}

	return STATE_OFF;
 80011f0:	2300      	movs	r3, #0

}
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b002      	add	sp, #8
 80011f8:	bd80      	pop	{r7, pc}

080011fa <WriteIndex>:

void WriteIndex(LinkedList *list, UART_HandleTypeDef *huart, Node *node)
{
 80011fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fc:	46c6      	mov	lr, r8
 80011fe:	b500      	push	{lr}
 8001200:	b08e      	sub	sp, #56	@ 0x38
 8001202:	af00      	add	r7, sp, #0
 8001204:	6278      	str	r0, [r7, #36]	@ 0x24
 8001206:	6239      	str	r1, [r7, #32]
 8001208:	61fa      	str	r2, [r7, #28]
 800120a:	466b      	mov	r3, sp
 800120c:	4698      	mov	r8, r3

		uint8_t node_index = node->index;
 800120e:	211f      	movs	r1, #31
 8001210:	2018      	movs	r0, #24
 8001212:	180b      	adds	r3, r1, r0
 8001214:	19db      	adds	r3, r3, r7
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	7852      	ldrb	r2, [r2, #1]
 800121a:	701a      	strb	r2, [r3, #0]
		uint8_t digit = 0;
 800121c:	231e      	movs	r3, #30
 800121e:	181b      	adds	r3, r3, r0
 8001220:	19db      	adds	r3, r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
		uint8_t temp = node_index;
 8001226:	231d      	movs	r3, #29
 8001228:	181b      	adds	r3, r3, r0
 800122a:	19db      	adds	r3, r3, r7
 800122c:	180a      	adds	r2, r1, r0
 800122e:	19d2      	adds	r2, r2, r7
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	701a      	strb	r2, [r3, #0]

		while (temp) {
 8001234:	e014      	b.n	8001260 <WriteIndex+0x66>

			// Increment number of digits
		    digit++;
 8001236:	211e      	movs	r1, #30
 8001238:	2018      	movs	r0, #24
 800123a:	180b      	adds	r3, r1, r0
 800123c:	19db      	adds	r3, r3, r7
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	180b      	adds	r3, r1, r0
 8001242:	19db      	adds	r3, r3, r7
 8001244:	3201      	adds	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]

		    // Truncate the last
		    // digit from the number
		    temp /= 10;
 8001248:	231d      	movs	r3, #29
 800124a:	181a      	adds	r2, r3, r0
 800124c:	19d6      	adds	r6, r2, r7
 800124e:	181b      	adds	r3, r3, r0
 8001250:	19db      	adds	r3, r3, r7
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	210a      	movs	r1, #10
 8001256:	0018      	movs	r0, r3
 8001258:	f7fe ff54 	bl	8000104 <__udivsi3>
 800125c:	0003      	movs	r3, r0
 800125e:	7033      	strb	r3, [r6, #0]
		while (temp) {
 8001260:	231d      	movs	r3, #29
 8001262:	2218      	movs	r2, #24
 8001264:	189b      	adds	r3, r3, r2
 8001266:	19db      	adds	r3, r3, r7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e3      	bne.n	8001236 <WriteIndex+0x3c>
		}

		uint8_t indexArray[digit];
 800126e:	201e      	movs	r0, #30
 8001270:	1883      	adds	r3, r0, r2
 8001272:	19db      	adds	r3, r3, r7
 8001274:	781e      	ldrb	r6, [r3, #0]
 8001276:	0033      	movs	r3, r6
 8001278:	3b01      	subs	r3, #1
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800127c:	60be      	str	r6, [r7, #8]
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	000b      	movs	r3, r1
 8001288:	0f5b      	lsrs	r3, r3, #29
 800128a:	0010      	movs	r0, r2
 800128c:	00c0      	lsls	r0, r0, #3
 800128e:	6178      	str	r0, [r7, #20]
 8001290:	6978      	ldr	r0, [r7, #20]
 8001292:	4318      	orrs	r0, r3
 8001294:	6178      	str	r0, [r7, #20]
 8001296:	000b      	movs	r3, r1
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	603e      	str	r6, [r7, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	000b      	movs	r3, r1
 80012a8:	0f5b      	lsrs	r3, r3, #29
 80012aa:	0010      	movs	r0, r2
 80012ac:	00c5      	lsls	r5, r0, #3
 80012ae:	431d      	orrs	r5, r3
 80012b0:	000b      	movs	r3, r1
 80012b2:	00dc      	lsls	r4, r3, #3
 80012b4:	0033      	movs	r3, r6
 80012b6:	3307      	adds	r3, #7
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	466a      	mov	r2, sp
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	469d      	mov	sp, r3
 80012c2:	466b      	mov	r3, sp
 80012c4:	3300      	adds	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	    uint8_t count = digit - 1;
 80012c8:	231c      	movs	r3, #28
 80012ca:	2218      	movs	r2, #24
 80012cc:	189b      	adds	r3, r3, r2
 80012ce:	19db      	adds	r3, r3, r7
 80012d0:	201e      	movs	r0, #30
 80012d2:	1882      	adds	r2, r0, r2
 80012d4:	19d2      	adds	r2, r2, r7
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	3a01      	subs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
	    while (node_index) {
 80012dc:	e025      	b.n	800132a <WriteIndex+0x130>

	        // Separate last digit from
	        // the number and add ASCII
	        // value of character '0' is 48
	        indexArray[count] = node_index % 10 + ASCII_Char_0;
 80012de:	241f      	movs	r4, #31
 80012e0:	2518      	movs	r5, #24
 80012e2:	1963      	adds	r3, r4, r5
 80012e4:	19db      	adds	r3, r3, r7
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	210a      	movs	r1, #10
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7fe ff90 	bl	8000210 <__aeabi_uidivmod>
 80012f0:	000b      	movs	r3, r1
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	201c      	movs	r0, #28
 80012f6:	1943      	adds	r3, r0, r5
 80012f8:	19db      	adds	r3, r3, r7
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	3230      	adds	r2, #48	@ 0x30
 80012fe:	b2d1      	uxtb	r1, r2
 8001300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001302:	54d1      	strb	r1, [r2, r3]

	        count--;
 8001304:	1943      	adds	r3, r0, r5
 8001306:	19db      	adds	r3, r3, r7
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	1943      	adds	r3, r0, r5
 800130c:	19db      	adds	r3, r3, r7
 800130e:	3a01      	subs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
	        // Truncate the last
	        // digit from the number
	        node_index /= 10;
 8001312:	0023      	movs	r3, r4
 8001314:	195a      	adds	r2, r3, r5
 8001316:	19d4      	adds	r4, r2, r7
 8001318:	195b      	adds	r3, r3, r5
 800131a:	19db      	adds	r3, r3, r7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	210a      	movs	r1, #10
 8001320:	0018      	movs	r0, r3
 8001322:	f7fe feef 	bl	8000104 <__udivsi3>
 8001326:	0003      	movs	r3, r0
 8001328:	7023      	strb	r3, [r4, #0]
	    while (node_index) {
 800132a:	231f      	movs	r3, #31
 800132c:	2218      	movs	r2, #24
 800132e:	189b      	adds	r3, r3, r2
 8001330:	19db      	adds	r3, r3, r7
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1d2      	bne.n	80012de <WriteIndex+0xe4>
	    }

	    for( uint8_t i = 0; i < sizeof(indexArray); i++)
 8001338:	231b      	movs	r3, #27
 800133a:	189b      	adds	r3, r3, r2
 800133c:	19db      	adds	r3, r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
 8001342:	e013      	b.n	800136c <WriteIndex+0x172>
	    {
	    		HAL_UART_Transmit(huart, &indexArray[i], 1, HAL_MAX_DELAY);
 8001344:	241b      	movs	r4, #27
 8001346:	2518      	movs	r5, #24
 8001348:	1963      	adds	r3, r4, r5
 800134a:	19db      	adds	r3, r3, r7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001350:	18d1      	adds	r1, r2, r3
 8001352:	2301      	movs	r3, #1
 8001354:	425b      	negs	r3, r3
 8001356:	6a38      	ldr	r0, [r7, #32]
 8001358:	2201      	movs	r2, #1
 800135a:	f002 ff2b 	bl	80041b4 <HAL_UART_Transmit>
	    for( uint8_t i = 0; i < sizeof(indexArray); i++)
 800135e:	1963      	adds	r3, r4, r5
 8001360:	19db      	adds	r3, r3, r7
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	1963      	adds	r3, r4, r5
 8001366:	19db      	adds	r3, r3, r7
 8001368:	3201      	adds	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	231b      	movs	r3, #27
 800136e:	2218      	movs	r2, #24
 8001370:	189b      	adds	r3, r3, r2
 8001372:	19db      	adds	r3, r3, r7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	42b3      	cmp	r3, r6
 8001378:	d3e4      	bcc.n	8001344 <WriteIndex+0x14a>
 800137a:	46c5      	mov	sp, r8
	    }

}
 800137c:	46c0      	nop			@ (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b00e      	add	sp, #56	@ 0x38
 8001382:	bc80      	pop	{r7}
 8001384:	46b8      	mov	r8, r7
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001388 <WriteData>:

void WriteData(LinkedList *list, UART_HandleTypeDef *huart, Node *node)
{
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	46c6      	mov	lr, r8
 800138c:	b500      	push	{lr}
 800138e:	b08e      	sub	sp, #56	@ 0x38
 8001390:	af00      	add	r7, sp, #0
 8001392:	6278      	str	r0, [r7, #36]	@ 0x24
 8001394:	6239      	str	r1, [r7, #32]
 8001396:	61fa      	str	r2, [r7, #28]
 8001398:	466b      	mov	r3, sp
 800139a:	4698      	mov	r8, r3

	uint8_t node_data = node->data;
 800139c:	211f      	movs	r1, #31
 800139e:	2018      	movs	r0, #24
 80013a0:	180b      	adds	r3, r1, r0
 80013a2:	19db      	adds	r3, r3, r7
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	701a      	strb	r2, [r3, #0]
	uint8_t digit = 0;
 80013aa:	231e      	movs	r3, #30
 80013ac:	181b      	adds	r3, r3, r0
 80013ae:	19db      	adds	r3, r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
	uint8_t temp = node_data;
 80013b4:	231d      	movs	r3, #29
 80013b6:	181b      	adds	r3, r3, r0
 80013b8:	19db      	adds	r3, r3, r7
 80013ba:	180a      	adds	r2, r1, r0
 80013bc:	19d2      	adds	r2, r2, r7
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	701a      	strb	r2, [r3, #0]

	while (temp) {
 80013c2:	e014      	b.n	80013ee <WriteData+0x66>

		// Increment number of digits
	    digit++;
 80013c4:	211e      	movs	r1, #30
 80013c6:	2018      	movs	r0, #24
 80013c8:	180b      	adds	r3, r1, r0
 80013ca:	19db      	adds	r3, r3, r7
 80013cc:	781a      	ldrb	r2, [r3, #0]
 80013ce:	180b      	adds	r3, r1, r0
 80013d0:	19db      	adds	r3, r3, r7
 80013d2:	3201      	adds	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]

	    // Truncate the last
	    // digit from the number
	    temp /= 10;
 80013d6:	231d      	movs	r3, #29
 80013d8:	181a      	adds	r2, r3, r0
 80013da:	19d6      	adds	r6, r2, r7
 80013dc:	181b      	adds	r3, r3, r0
 80013de:	19db      	adds	r3, r3, r7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	210a      	movs	r1, #10
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7fe fe8d 	bl	8000104 <__udivsi3>
 80013ea:	0003      	movs	r3, r0
 80013ec:	7033      	strb	r3, [r6, #0]
	while (temp) {
 80013ee:	231d      	movs	r3, #29
 80013f0:	2218      	movs	r2, #24
 80013f2:	189b      	adds	r3, r3, r2
 80013f4:	19db      	adds	r3, r3, r7
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1e3      	bne.n	80013c4 <WriteData+0x3c>
	}

	uint8_t dataArray[digit];
 80013fc:	201e      	movs	r0, #30
 80013fe:	1883      	adds	r3, r0, r2
 8001400:	19db      	adds	r3, r3, r7
 8001402:	781e      	ldrb	r6, [r3, #0]
 8001404:	0033      	movs	r3, r6
 8001406:	3b01      	subs	r3, #1
 8001408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800140a:	60be      	str	r6, [r7, #8]
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	000b      	movs	r3, r1
 8001416:	0f5b      	lsrs	r3, r3, #29
 8001418:	0010      	movs	r0, r2
 800141a:	00c0      	lsls	r0, r0, #3
 800141c:	6178      	str	r0, [r7, #20]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	4318      	orrs	r0, r3
 8001422:	6178      	str	r0, [r7, #20]
 8001424:	000b      	movs	r3, r1
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	603e      	str	r6, [r7, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	6839      	ldr	r1, [r7, #0]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	000b      	movs	r3, r1
 8001436:	0f5b      	lsrs	r3, r3, #29
 8001438:	0010      	movs	r0, r2
 800143a:	00c5      	lsls	r5, r0, #3
 800143c:	431d      	orrs	r5, r3
 800143e:	000b      	movs	r3, r1
 8001440:	00dc      	lsls	r4, r3, #3
 8001442:	0033      	movs	r3, r6
 8001444:	3307      	adds	r3, #7
 8001446:	08db      	lsrs	r3, r3, #3
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	466a      	mov	r2, sp
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	469d      	mov	sp, r3
 8001450:	466b      	mov	r3, sp
 8001452:	3300      	adds	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t count = digit - 1;
 8001456:	231c      	movs	r3, #28
 8001458:	2218      	movs	r2, #24
 800145a:	189b      	adds	r3, r3, r2
 800145c:	19db      	adds	r3, r3, r7
 800145e:	201e      	movs	r0, #30
 8001460:	1882      	adds	r2, r0, r2
 8001462:	19d2      	adds	r2, r2, r7
 8001464:	7812      	ldrb	r2, [r2, #0]
 8001466:	3a01      	subs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
    while (node_data) {
 800146a:	e025      	b.n	80014b8 <WriteData+0x130>

        // Separate last digit from
        // the number and add ASCII
        // value of character '0' is 48
        dataArray[count] = node_data % 10 + ASCII_Char_0;
 800146c:	241f      	movs	r4, #31
 800146e:	2518      	movs	r5, #24
 8001470:	1963      	adds	r3, r4, r5
 8001472:	19db      	adds	r3, r3, r7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	210a      	movs	r1, #10
 8001478:	0018      	movs	r0, r3
 800147a:	f7fe fec9 	bl	8000210 <__aeabi_uidivmod>
 800147e:	000b      	movs	r3, r1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	201c      	movs	r0, #28
 8001484:	1943      	adds	r3, r0, r5
 8001486:	19db      	adds	r3, r3, r7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	3230      	adds	r2, #48	@ 0x30
 800148c:	b2d1      	uxtb	r1, r2
 800148e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001490:	54d1      	strb	r1, [r2, r3]

        count--;
 8001492:	1943      	adds	r3, r0, r5
 8001494:	19db      	adds	r3, r3, r7
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	1943      	adds	r3, r0, r5
 800149a:	19db      	adds	r3, r3, r7
 800149c:	3a01      	subs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
        // Truncate the last
        // digit from the number
        node_data /= 10;
 80014a0:	0023      	movs	r3, r4
 80014a2:	195a      	adds	r2, r3, r5
 80014a4:	19d4      	adds	r4, r2, r7
 80014a6:	195b      	adds	r3, r3, r5
 80014a8:	19db      	adds	r3, r3, r7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	210a      	movs	r1, #10
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7fe fe28 	bl	8000104 <__udivsi3>
 80014b4:	0003      	movs	r3, r0
 80014b6:	7023      	strb	r3, [r4, #0]
    while (node_data) {
 80014b8:	231f      	movs	r3, #31
 80014ba:	2218      	movs	r2, #24
 80014bc:	189b      	adds	r3, r3, r2
 80014be:	19db      	adds	r3, r3, r7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1d2      	bne.n	800146c <WriteData+0xe4>
    }

    for( uint8_t i = 0; i < sizeof(dataArray); i++)
 80014c6:	231b      	movs	r3, #27
 80014c8:	189b      	adds	r3, r3, r2
 80014ca:	19db      	adds	r3, r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	e013      	b.n	80014fa <WriteData+0x172>
    {
    		HAL_UART_Transmit(huart, &dataArray[i], 1, HAL_MAX_DELAY);
 80014d2:	241b      	movs	r4, #27
 80014d4:	2518      	movs	r5, #24
 80014d6:	1963      	adds	r3, r4, r5
 80014d8:	19db      	adds	r3, r3, r7
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014de:	18d1      	adds	r1, r2, r3
 80014e0:	2301      	movs	r3, #1
 80014e2:	425b      	negs	r3, r3
 80014e4:	6a38      	ldr	r0, [r7, #32]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f002 fe64 	bl	80041b4 <HAL_UART_Transmit>
    for( uint8_t i = 0; i < sizeof(dataArray); i++)
 80014ec:	1963      	adds	r3, r4, r5
 80014ee:	19db      	adds	r3, r3, r7
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	1963      	adds	r3, r4, r5
 80014f4:	19db      	adds	r3, r3, r7
 80014f6:	3201      	adds	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	231b      	movs	r3, #27
 80014fc:	2218      	movs	r2, #24
 80014fe:	189b      	adds	r3, r3, r2
 8001500:	19db      	adds	r3, r3, r7
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	42b3      	cmp	r3, r6
 8001506:	d3e4      	bcc.n	80014d2 <WriteData+0x14a>
 8001508:	46c5      	mov	sp, r8
    }

}
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b00e      	add	sp, #56	@ 0x38
 8001510:	bc80      	pop	{r7}
 8001512:	46b8      	mov	r8, r7
 8001514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001518 <DisplayLinkedList>:

void DisplayLinkedList(LinkedList *list, UART_HandleTypeDef *huart)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b08c      	sub	sp, #48	@ 0x30
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	uint8_t title[] = "\n Linked List\n\r";
 8001522:	251c      	movs	r5, #28
 8001524:	197b      	adds	r3, r7, r5
 8001526:	4a29      	ldr	r2, [pc, #164]	@ (80015cc <DisplayLinkedList+0xb4>)
 8001528:	ca13      	ldmia	r2!, {r0, r1, r4}
 800152a:	c313      	stmia	r3!, {r0, r1, r4}
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(huart, title, sizeof(title), HAL_MAX_DELAY);
 8001530:	2301      	movs	r3, #1
 8001532:	425b      	negs	r3, r3
 8001534:	1979      	adds	r1, r7, r5
 8001536:	6838      	ldr	r0, [r7, #0]
 8001538:	2210      	movs	r2, #16
 800153a:	f002 fe3b 	bl	80041b4 <HAL_UART_Transmit>

	if( IsEmpty(list) )
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff fe47 	bl	80011d4 <IsEmpty>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d00f      	beq.n	800156a <DisplayLinkedList+0x52>
	{
		uint8_t emptyList[] = "\n List is Empty\n\r";
 800154a:	2508      	movs	r5, #8
 800154c:	197b      	adds	r3, r7, r5
 800154e:	4a20      	ldr	r2, [pc, #128]	@ (80015d0 <DisplayLinkedList+0xb8>)
 8001550:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001552:	c313      	stmia	r3!, {r0, r1, r4}
 8001554:	6811      	ldr	r1, [r2, #0]
 8001556:	6019      	str	r1, [r3, #0]
 8001558:	8892      	ldrh	r2, [r2, #4]
 800155a:	809a      	strh	r2, [r3, #4]
		HAL_UART_Transmit(huart, emptyList, sizeof(emptyList), HAL_MAX_DELAY);
 800155c:	2301      	movs	r3, #1
 800155e:	425b      	negs	r3, r3
 8001560:	1979      	adds	r1, r7, r5
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	2212      	movs	r2, #18
 8001566:	f002 fe25 	bl	80041b4 <HAL_UART_Transmit>
	}

	Node *temp = list->head;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	while (temp != NULL)
 8001570:	e023      	b.n	80015ba <DisplayLinkedList+0xa2>
	{

		WriteIndex( list, huart, GetNode(list, temp->index) );
 8001572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001574:	785a      	ldrb	r2, [r3, #1]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0011      	movs	r1, r2
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff fd90 	bl	80010a0 <GetNode>
 8001580:	0002      	movs	r2, r0
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	0018      	movs	r0, r3
 8001588:	f7ff fe37 	bl	80011fa <WriteIndex>
		HAL_UART_Transmit(huart, (uint8_t *)"- ", 2, HAL_MAX_DELAY);
 800158c:	2301      	movs	r3, #1
 800158e:	425b      	negs	r3, r3
 8001590:	4910      	ldr	r1, [pc, #64]	@ (80015d4 <DisplayLinkedList+0xbc>)
 8001592:	6838      	ldr	r0, [r7, #0]
 8001594:	2202      	movs	r2, #2
 8001596:	f002 fe0d 	bl	80041b4 <HAL_UART_Transmit>

		WriteData(list, huart, temp);
 800159a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800159c:	6839      	ldr	r1, [r7, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff fef1 	bl	8001388 <WriteData>
		HAL_UART_Transmit(huart, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 80015a6:	2301      	movs	r3, #1
 80015a8:	425b      	negs	r3, r3
 80015aa:	490b      	ldr	r1, [pc, #44]	@ (80015d8 <DisplayLinkedList+0xc0>)
 80015ac:	6838      	ldr	r0, [r7, #0]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f002 fe00 	bl	80041b4 <HAL_UART_Transmit>

		temp = temp->next;
 80015b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (temp != NULL)
 80015ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1d8      	bne.n	8001572 <DisplayLinkedList+0x5a>
	}
}
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b00c      	add	sp, #48	@ 0x30
 80015c8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	080068e4 	.word	0x080068e4
 80015d0:	080068f4 	.word	0x080068f4
 80015d4:	080068dc 	.word	0x080068dc
 80015d8:	080068e0 	.word	0x080068e0

080015dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <HAL_MspInit+0x44>)
 80015e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <HAL_MspInit+0x44>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	430a      	orrs	r2, r1
 80015ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80015ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <HAL_MspInit+0x44>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	2201      	movs	r2, #1
 80015f4:	4013      	ands	r3, r2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_MspInit+0x44>)
 80015fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <HAL_MspInit+0x44>)
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	0549      	lsls	r1, r1, #21
 8001604:	430a      	orrs	r2, r1
 8001606:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001608:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <HAL_MspInit+0x44>)
 800160a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	055b      	lsls	r3, r3, #21
 8001610:	4013      	ands	r3, r2
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	b002      	add	sp, #8
 800161c:	bd80      	pop	{r7, pc}
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b08b      	sub	sp, #44	@ 0x2c
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	2414      	movs	r4, #20
 800162e:	193b      	adds	r3, r7, r4
 8001630:	0018      	movs	r0, r3
 8001632:	2314      	movs	r3, #20
 8001634:	001a      	movs	r2, r3
 8001636:	2100      	movs	r1, #0
 8001638:	f004 fef6 	bl	8006428 <memset>
  if(hadc->Instance==ADC1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <HAL_ADC_MspInit+0x7c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d128      	bne.n	8001698 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001646:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 8001648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800164a:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 800164c:	2180      	movs	r1, #128	@ 0x80
 800164e:	0349      	lsls	r1, r1, #13
 8001650:	430a      	orrs	r2, r1
 8001652:	641a      	str	r2, [r3, #64]	@ 0x40
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 8001656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001658:	2380      	movs	r3, #128	@ 0x80
 800165a:	035b      	lsls	r3, r3, #13
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 8001664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001666:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 8001668:	2102      	movs	r1, #2
 800166a:	430a      	orrs	r2, r1
 800166c:	635a      	str	r2, [r3, #52]	@ 0x34
 800166e:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 8001670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001672:	2202      	movs	r2, #2
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800167a:	193b      	adds	r3, r7, r4
 800167c:	2202      	movs	r2, #2
 800167e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001680:	193b      	adds	r3, r7, r4
 8001682:	2203      	movs	r2, #3
 8001684:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	193b      	adds	r3, r7, r4
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	193b      	adds	r3, r7, r4
 800168e:	4a06      	ldr	r2, [pc, #24]	@ (80016a8 <HAL_ADC_MspInit+0x84>)
 8001690:	0019      	movs	r1, r3
 8001692:	0010      	movs	r0, r2
 8001694:	f001 f812 	bl	80026bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001698:	46c0      	nop			@ (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b00b      	add	sp, #44	@ 0x2c
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	40012400 	.word	0x40012400
 80016a4:	40021000 	.word	0x40021000
 80016a8:	50000400 	.word	0x50000400

080016ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	05db      	lsls	r3, r3, #23
 80016bc:	429a      	cmp	r2, r3
 80016be:	d10b      	bne.n	80016d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <HAL_TIM_Base_MspInit+0x34>)
 80016c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_TIM_Base_MspInit+0x34>)
 80016c6:	2101      	movs	r1, #1
 80016c8:	430a      	orrs	r2, r1
 80016ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <HAL_TIM_Base_MspInit+0x34>)
 80016ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016d8:	46c0      	nop			@ (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b004      	add	sp, #16
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b089      	sub	sp, #36	@ 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	240c      	movs	r4, #12
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	0018      	movs	r0, r3
 80016f2:	2314      	movs	r3, #20
 80016f4:	001a      	movs	r2, r3
 80016f6:	2100      	movs	r1, #0
 80016f8:	f004 fe96 	bl	8006428 <memset>
  if(htim->Instance==TIM2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	@ 0x80
 8001702:	05db      	lsls	r3, r3, #23
 8001704:	429a      	cmp	r2, r3
 8001706:	d121      	bne.n	800174c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_TIM_MspPostInit+0x70>)
 800170a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_TIM_MspPostInit+0x70>)
 800170e:	2104      	movs	r1, #4
 8001710:	430a      	orrs	r2, r1
 8001712:	635a      	str	r2, [r3, #52]	@ 0x34
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_TIM_MspPostInit+0x70>)
 8001716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001718:	2204      	movs	r2, #4
 800171a:	4013      	ands	r3, r2
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001720:	0021      	movs	r1, r4
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2240      	movs	r2, #64	@ 0x40
 8001726:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	187b      	adds	r3, r7, r1
 800172a:	2202      	movs	r2, #2
 800172c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	187b      	adds	r3, r7, r1
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800173a:	187b      	adds	r3, r7, r1
 800173c:	2202      	movs	r2, #2
 800173e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	187b      	adds	r3, r7, r1
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <HAL_TIM_MspPostInit+0x74>)
 8001744:	0019      	movs	r1, r3
 8001746:	0010      	movs	r0, r2
 8001748:	f000 ffb8 	bl	80026bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800174c:	46c0      	nop			@ (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b009      	add	sp, #36	@ 0x24
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	50000800 	.word	0x50000800

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b08b      	sub	sp, #44	@ 0x2c
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	2414      	movs	r4, #20
 8001766:	193b      	adds	r3, r7, r4
 8001768:	0018      	movs	r0, r3
 800176a:	2314      	movs	r3, #20
 800176c:	001a      	movs	r2, r3
 800176e:	2100      	movs	r1, #0
 8001770:	f004 fe5a 	bl	8006428 <memset>
  if(huart->Instance==USART2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1f      	ldr	r2, [pc, #124]	@ (80017f8 <HAL_UART_MspInit+0x9c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d138      	bne.n	80017f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177e:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 8001780:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001782:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 8001784:	2180      	movs	r1, #128	@ 0x80
 8001786:	0289      	lsls	r1, r1, #10
 8001788:	430a      	orrs	r2, r1
 800178a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 800178e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 800179c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 80017a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017aa:	2201      	movs	r2, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80017b2:	0021      	movs	r1, r4
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	2202      	movs	r2, #2
 80017be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	2201      	movs	r2, #1
 80017c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	2201      	movs	r2, #1
 80017d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	187a      	adds	r2, r7, r1
 80017d4:	23a0      	movs	r3, #160	@ 0xa0
 80017d6:	05db      	lsls	r3, r3, #23
 80017d8:	0011      	movs	r1, r2
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 ff6e 	bl	80026bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	201c      	movs	r0, #28
 80017e6:	f000 fe6b 	bl	80024c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017ea:	201c      	movs	r0, #28
 80017ec:	f000 fe7d 	bl	80024ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b00b      	add	sp, #44	@ 0x2c
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	40004400 	.word	0x40004400
 80017fc:	40021000 	.word	0x40021000

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001804:	46c0      	nop			@ (mov r8, r8)
 8001806:	e7fd      	b.n	8001804 <NMI_Handler+0x4>

08001808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180c:	46c0      	nop			@ (mov r8, r8)
 800180e:	e7fd      	b.n	800180c <HardFault_Handler+0x4>

08001810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001814:	46c0      	nop			@ (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001828:	f000 f8e0 	bl	80019ec <HAL_IncTick>
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
//
//  }
//
  /* USER CODE END SysTick_IRQn 1 */
}
 800182c:	46c0      	nop			@ (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <USART2_IRQHandler+0x14>)
 800183a:	0018      	movs	r0, r3
 800183c:	f002 feb8 	bl	80045b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	20000338 	.word	0x20000338

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	@ (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	18d3      	adds	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f004 fdee 	bl	800645c <__errno>
 8001880:	0003      	movs	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	2301      	movs	r3, #1
 8001888:	425b      	negs	r3, r3
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	18d2      	adds	r2, r2, r3
 800189a:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <_sbrk+0x64>)
 800189c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b006      	add	sp, #24
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20002000 	.word	0x20002000
 80018ac:	00000400 	.word	0x00000400
 80018b0:	200003e0 	.word	0x200003e0
 80018b4:	20000530 	.word	0x20000530

080018b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	46c0      	nop			@ (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


  ldr   r0, =_estack
 80018c4:	480d      	ldr	r0, [pc, #52]	@ (80018fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018c8:	f7ff fff6 	bl	80018b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	@ (8001900 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	@ (8001904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <LoopForever+0xe>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001910 <LoopForever+0x16>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018f2:	f004 fdb9 	bl	8006468 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80018f6:	f7ff f8b3 	bl	8000a60 <main>

080018fa <LoopForever>:

LoopForever:
  b LoopForever
 80018fa:	e7fe      	b.n	80018fa <LoopForever>
  ldr   r0, =_estack
 80018fc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001904:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8001908:	080069e4 	.word	0x080069e4
  ldr r2, =_sbss
 800190c:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8001910:	20000530 	.word	0x20000530

08001914 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_IRQHandler>
	...

08001918 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_Init+0x3c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_Init+0x3c>)
 800192a:	2180      	movs	r1, #128	@ 0x80
 800192c:	0049      	lsls	r1, r1, #1
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f810 	bl	8001958 <HAL_InitTick>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d003      	beq.n	8001944 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
 8001942:	e001      	b.n	8001948 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fe4a 	bl	80015dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001948:	1dfb      	adds	r3, r7, #7
 800194a:	781b      	ldrb	r3, [r3, #0]
}
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40022000 	.word	0x40022000

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001960:	230f      	movs	r3, #15
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001968:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <HAL_InitTick+0x88>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d02b      	beq.n	80019c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001970:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <HAL_InitTick+0x8c>)
 8001972:	681c      	ldr	r4, [r3, #0]
 8001974:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <HAL_InitTick+0x88>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	0019      	movs	r1, r3
 800197a:	23fa      	movs	r3, #250	@ 0xfa
 800197c:	0098      	lsls	r0, r3, #2
 800197e:	f7fe fbc1 	bl	8000104 <__udivsi3>
 8001982:	0003      	movs	r3, r0
 8001984:	0019      	movs	r1, r3
 8001986:	0020      	movs	r0, r4
 8001988:	f7fe fbbc 	bl	8000104 <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	0018      	movs	r0, r3
 8001990:	f000 fdbb 	bl	800250a <HAL_SYSTICK_Config>
 8001994:	1e03      	subs	r3, r0, #0
 8001996:	d112      	bne.n	80019be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d80a      	bhi.n	80019b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	2301      	movs	r3, #1
 80019a2:	425b      	negs	r3, r3
 80019a4:	2200      	movs	r2, #0
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 fd8a 	bl	80024c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <HAL_InitTick+0x90>)
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e00d      	b.n	80019d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80019b4:	230f      	movs	r3, #15
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e008      	b.n	80019d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019be:	230f      	movs	r3, #15
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	e003      	b.n	80019d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019c8:	230f      	movs	r3, #15
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80019d0:	230f      	movs	r3, #15
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	781b      	ldrb	r3, [r3, #0]
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b005      	add	sp, #20
 80019dc:	bd90      	pop	{r4, r7, pc}
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	20000218 	.word	0x20000218
 80019e4:	20000210 	.word	0x20000210
 80019e8:	20000214 	.word	0x20000214

080019ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <HAL_IncTick+0x1c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	001a      	movs	r2, r3
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_IncTick+0x20>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	18d2      	adds	r2, r2, r3
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <HAL_IncTick+0x20>)
 80019fe:	601a      	str	r2, [r3, #0]
}
 8001a00:	46c0      	nop			@ (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	20000218 	.word	0x20000218
 8001a0c:	200003e4 	.word	0x200003e4

08001a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b02      	ldr	r3, [pc, #8]	@ (8001a20 <HAL_GetTick+0x10>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	200003e4 	.word	0x200003e4

08001a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff fff0 	bl	8001a10 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	d005      	beq.n	8001a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_Delay+0x44>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	001a      	movs	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	189b      	adds	r3, r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	f7ff ffe0 	bl	8001a10 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d8f7      	bhi.n	8001a4c <HAL_Delay+0x28>
  {
  }
}
 8001a5c:	46c0      	nop			@ (mov r8, r8)
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b004      	add	sp, #16
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	20000218 	.word	0x20000218

08001a6c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a05      	ldr	r2, [pc, #20]	@ (8001a90 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	601a      	str	r2, [r3, #0]
}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	fe3fffff 	.word	0xfe3fffff

08001a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	23e0      	movs	r3, #224	@ 0xe0
 8001aa2:	045b      	lsls	r3, r3, #17
 8001aa4:	4013      	ands	r3, r2
}
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd80      	pop	{r7, pc}

08001aae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	2107      	movs	r1, #7
 8001ac6:	4091      	lsls	r1, r2
 8001ac8:	000a      	movs	r2, r1
 8001aca:	43d2      	mvns	r2, r2
 8001acc:	401a      	ands	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4099      	lsls	r1, r3
 8001ad8:	000b      	movs	r3, r1
 8001ada:	431a      	orrs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ae0:	46c0      	nop			@ (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b004      	add	sp, #16
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	2104      	movs	r1, #4
 8001afa:	400a      	ands	r2, r1
 8001afc:	2107      	movs	r1, #7
 8001afe:	4091      	lsls	r1, r2
 8001b00:	000a      	movs	r2, r1
 8001b02:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2104      	movs	r1, #4
 8001b08:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b0a:	40da      	lsrs	r2, r3
 8001b0c:	0013      	movs	r3, r2
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b002      	add	sp, #8
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	211f      	movs	r1, #31
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	4091      	lsls	r1, r2
 8001b30:	000a      	movs	r2, r1
 8001b32:	43d2      	mvns	r2, r2
 8001b34:	401a      	ands	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0e9b      	lsrs	r3, r3, #26
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	4019      	ands	r1, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	201f      	movs	r0, #31
 8001b42:	4003      	ands	r3, r0
 8001b44:	4099      	lsls	r1, r3
 8001b46:	000b      	movs	r3, r1
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	035b      	lsls	r3, r3, #13
 8001b68:	0b5b      	lsrs	r3, r3, #13
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b70:	46c0      	nop			@ (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	0352      	lsls	r2, r2, #13
 8001b8a:	0b52      	lsrs	r2, r2, #13
 8001b8c:	43d2      	mvns	r2, r2
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b94:	46c0      	nop			@ (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	0212      	lsls	r2, r2, #8
 8001bb0:	43d2      	mvns	r2, r2
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	400b      	ands	r3, r1
 8001bbc:	4904      	ldr	r1, [pc, #16]	@ (8001bd0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001bbe:	400b      	ands	r3, r1
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b004      	add	sp, #16
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			@ (mov r8, r8)
 8001bd0:	07ffff00 	.word	0x07ffff00

08001bd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a05      	ldr	r2, [pc, #20]	@ (8001bf8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	0552      	lsls	r2, r2, #21
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	6fffffe8 	.word	0x6fffffe8

08001bfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	055b      	lsls	r3, r3, #21
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	2380      	movs	r3, #128	@ 0x80
 8001c10:	055b      	lsls	r3, r3, #21
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2201      	movs	r2, #1
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <LL_ADC_IsEnabled+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_ADC_IsEnabled+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2204      	movs	r2, #4
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d101      	bne.n	8001c5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	231f      	movs	r3, #31
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e17f      	b.n	8001f8e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff fcc3 	bl	8001624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2254      	movs	r2, #84	@ 0x54
 8001ca8:	2100      	movs	r1, #0
 8001caa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff ffa3 	bl	8001bfc <LL_ADC_IsInternalRegulatorEnabled>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d115      	bne.n	8001ce6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7ff ff88 	bl	8001bd4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cc4:	4bb4      	ldr	r3, [pc, #720]	@ (8001f98 <HAL_ADC_Init+0x330>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	49b4      	ldr	r1, [pc, #720]	@ (8001f9c <HAL_ADC_Init+0x334>)
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7fe fa1a 	bl	8000104 <__udivsi3>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cd8:	e002      	b.n	8001ce0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f9      	bne.n	8001cda <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7ff ff86 	bl	8001bfc <LL_ADC_IsInternalRegulatorEnabled>
 8001cf0:	1e03      	subs	r3, r0, #0
 8001cf2:	d10f      	bne.n	8001d14 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d04:	2201      	movs	r2, #1
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff ff94 	bl	8001c46 <LL_ADC_REG_IsConversionOngoing>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d26:	2210      	movs	r2, #16
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d000      	beq.n	8001d2e <HAL_ADC_Init+0xc6>
 8001d2c:	e122      	b.n	8001f74 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d000      	beq.n	8001d36 <HAL_ADC_Init+0xce>
 8001d34:	e11e      	b.n	8001f74 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	4a99      	ldr	r2, [pc, #612]	@ (8001fa0 <HAL_ADC_Init+0x338>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2202      	movs	r2, #2
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff ff6a 	bl	8001c24 <LL_ADC_IsEnabled>
 8001d50:	1e03      	subs	r3, r0, #0
 8001d52:	d000      	beq.n	8001d56 <HAL_ADC_Init+0xee>
 8001d54:	e0ad      	b.n	8001eb2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7e1b      	ldrb	r3, [r3, #24]
 8001d5e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001d60:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7e5b      	ldrb	r3, [r3, #25]
 8001d66:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d68:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7e9b      	ldrb	r3, [r3, #26]
 8001d6e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d70:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_ADC_Init+0x118>
 8001d7a:	2380      	movs	r3, #128	@ 0x80
 8001d7c:	015b      	lsls	r3, r3, #5
 8001d7e:	e000      	b.n	8001d82 <HAL_ADC_Init+0x11a>
 8001d80:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d82:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d88:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	da04      	bge.n	8001d9c <HAL_ADC_Init+0x134>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	e001      	b.n	8001da0 <HAL_ADC_Init+0x138>
 8001d9c:	2380      	movs	r3, #128	@ 0x80
 8001d9e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001da0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	212c      	movs	r1, #44	@ 0x2c
 8001da6:	5c5b      	ldrb	r3, [r3, r1]
 8001da8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001daa:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2220      	movs	r2, #32
 8001db6:	5c9b      	ldrb	r3, [r3, r2]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d115      	bne.n	8001de8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7e9b      	ldrb	r3, [r3, #26]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2280      	movs	r2, #128	@ 0x80
 8001dc8:	0252      	lsls	r2, r2, #9
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	e00b      	b.n	8001de8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de0:	2201      	movs	r2, #1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00a      	beq.n	8001e06 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001df4:	23e0      	movs	r3, #224	@ 0xe0
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a65      	ldr	r2, [pc, #404]	@ (8001fa4 <HAL_ADC_Init+0x33c>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0f9b      	lsrs	r3, r3, #30
 8001e22:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	223c      	movs	r2, #60	@ 0x3c
 8001e34:	5c9b      	ldrb	r3, [r3, r2]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d111      	bne.n	8001e5e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0f9b      	lsrs	r3, r3, #30
 8001e40:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e46:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001e4c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001e52:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	4a50      	ldr	r2, [pc, #320]	@ (8001fa8 <HAL_ADC_Init+0x340>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	23c0      	movs	r3, #192	@ 0xc0
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d018      	beq.n	8001eb2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	05db      	lsls	r3, r3, #23
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d012      	beq.n	8001eb2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001e90:	2380      	movs	r3, #128	@ 0x80
 8001e92:	061b      	lsls	r3, r3, #24
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d00c      	beq.n	8001eb2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001e98:	4b44      	ldr	r3, [pc, #272]	@ (8001fac <HAL_ADC_Init+0x344>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a44      	ldr	r2, [pc, #272]	@ (8001fb0 <HAL_ADC_Init+0x348>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	23f0      	movs	r3, #240	@ 0xf0
 8001ea8:	039b      	lsls	r3, r3, #14
 8001eaa:	401a      	ands	r2, r3
 8001eac:	4b3f      	ldr	r3, [pc, #252]	@ (8001fac <HAL_ADC_Init+0x344>)
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eba:	001a      	movs	r2, r3
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f7ff fdf6 	bl	8001aae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eca:	493a      	ldr	r1, [pc, #232]	@ (8001fb4 <HAL_ADC_Init+0x34c>)
 8001ecc:	001a      	movs	r2, r3
 8001ece:	f7ff fdee 	bl	8001aae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2110      	movs	r1, #16
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	629a      	str	r2, [r3, #40]	@ 0x28
 8001eec:	e018      	b.n	8001f20 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	2380      	movs	r3, #128	@ 0x80
 8001ef4:	039b      	lsls	r3, r3, #14
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d112      	bne.n	8001f20 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	221c      	movs	r2, #28
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	4252      	negs	r2, r2
 8001f10:	409a      	lsls	r2, r3
 8001f12:	0011      	movs	r1, r2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2100      	movs	r1, #0
 8001f26:	0018      	movs	r0, r3
 8001f28:	f7ff fdde 	bl	8001ae8 <LL_ADC_GetSamplingTimeCommonChannels>
 8001f2c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d10b      	bne.n	8001f4e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	2203      	movs	r2, #3
 8001f42:	4393      	bics	r3, r2
 8001f44:	2201      	movs	r2, #1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f4c:	e01c      	b.n	8001f88 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	2212      	movs	r2, #18
 8001f54:	4393      	bics	r3, r2
 8001f56:	2210      	movs	r2, #16
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f62:	2201      	movs	r2, #1
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001f6a:	231f      	movs	r3, #31
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f72:	e009      	b.n	8001f88 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	2210      	movs	r2, #16
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f80:	231f      	movs	r3, #31
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f88:	231f      	movs	r3, #31
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b008      	add	sp, #32
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	20000210 	.word	0x20000210
 8001f9c:	00030d40 	.word	0x00030d40
 8001fa0:	fffffefd 	.word	0xfffffefd
 8001fa4:	ffde0201 	.word	0xffde0201
 8001fa8:	1ffffc02 	.word	0x1ffffc02
 8001fac:	40012708 	.word	0x40012708
 8001fb0:	ffc3ffff 	.word	0xffc3ffff
 8001fb4:	07ffff04 	.word	0x07ffff04

08001fb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc2:	2317      	movs	r3, #23
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2254      	movs	r2, #84	@ 0x54
 8001fd2:	5c9b      	ldrb	r3, [r3, r2]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x24>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e1c0      	b.n	800235e <HAL_ADC_ConfigChannel+0x3a6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2254      	movs	r2, #84	@ 0x54
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7ff fe2c 	bl	8001c46 <LL_ADC_REG_IsConversionOngoing>
 8001fee:	1e03      	subs	r3, r0, #0
 8001ff0:	d000      	beq.n	8001ff4 <HAL_ADC_ConfigChannel+0x3c>
 8001ff2:	e1a3      	b.n	800233c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d100      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001ffc:	e143      	b.n	8002286 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	429a      	cmp	r2, r3
 8002008:	d004      	beq.n	8002014 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800200e:	4ac1      	ldr	r2, [pc, #772]	@ (8002314 <HAL_ADC_ConfigChannel+0x35c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d108      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0019      	movs	r1, r3
 800201e:	0010      	movs	r0, r2
 8002020:	f7ff fd99 	bl	8001b56 <LL_ADC_REG_SetSequencerChAdd>
 8002024:	e0c9      	b.n	80021ba <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	211f      	movs	r1, #31
 8002030:	400b      	ands	r3, r1
 8002032:	210f      	movs	r1, #15
 8002034:	4099      	lsls	r1, r3
 8002036:	000b      	movs	r3, r1
 8002038:	43db      	mvns	r3, r3
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	035b      	lsls	r3, r3, #13
 8002044:	0b5b      	lsrs	r3, r3, #13
 8002046:	d105      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x9c>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	221f      	movs	r2, #31
 8002050:	4013      	ands	r3, r2
 8002052:	e098      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	d000      	beq.n	8002060 <HAL_ADC_ConfigChannel+0xa8>
 800205e:	e091      	b.n	8002184 <HAL_ADC_ConfigChannel+0x1cc>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d000      	beq.n	800206c <HAL_ADC_ConfigChannel+0xb4>
 800206a:	e089      	b.n	8002180 <HAL_ADC_ConfigChannel+0x1c8>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2204      	movs	r2, #4
 8002072:	4013      	ands	r3, r2
 8002074:	d000      	beq.n	8002078 <HAL_ADC_ConfigChannel+0xc0>
 8002076:	e081      	b.n	800217c <HAL_ADC_ConfigChannel+0x1c4>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2208      	movs	r2, #8
 800207e:	4013      	ands	r3, r2
 8002080:	d000      	beq.n	8002084 <HAL_ADC_ConfigChannel+0xcc>
 8002082:	e079      	b.n	8002178 <HAL_ADC_ConfigChannel+0x1c0>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2210      	movs	r2, #16
 800208a:	4013      	ands	r3, r2
 800208c:	d000      	beq.n	8002090 <HAL_ADC_ConfigChannel+0xd8>
 800208e:	e071      	b.n	8002174 <HAL_ADC_ConfigChannel+0x1bc>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2220      	movs	r2, #32
 8002096:	4013      	ands	r3, r2
 8002098:	d000      	beq.n	800209c <HAL_ADC_ConfigChannel+0xe4>
 800209a:	e069      	b.n	8002170 <HAL_ADC_ConfigChannel+0x1b8>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2240      	movs	r2, #64	@ 0x40
 80020a2:	4013      	ands	r3, r2
 80020a4:	d000      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0xf0>
 80020a6:	e061      	b.n	800216c <HAL_ADC_ConfigChannel+0x1b4>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2280      	movs	r2, #128	@ 0x80
 80020ae:	4013      	ands	r3, r2
 80020b0:	d000      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0xfc>
 80020b2:	e059      	b.n	8002168 <HAL_ADC_ConfigChannel+0x1b0>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4013      	ands	r3, r2
 80020be:	d151      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x1ac>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d149      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1a8>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4013      	ands	r3, r2
 80020d6:	d141      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1a4>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	@ 0x80
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	4013      	ands	r3, r2
 80020e2:	d139      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1a0>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	015b      	lsls	r3, r3, #5
 80020ec:	4013      	ands	r3, r2
 80020ee:	d131      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x19c>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	019b      	lsls	r3, r3, #6
 80020f8:	4013      	ands	r3, r2
 80020fa:	d129      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x198>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	01db      	lsls	r3, r3, #7
 8002104:	4013      	ands	r3, r2
 8002106:	d121      	bne.n	800214c <HAL_ADC_ConfigChannel+0x194>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	4013      	ands	r3, r2
 8002112:	d119      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x190>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	025b      	lsls	r3, r3, #9
 800211c:	4013      	ands	r3, r2
 800211e:	d111      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x18c>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	029b      	lsls	r3, r3, #10
 8002128:	4013      	ands	r3, r2
 800212a:	d109      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x188>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	02db      	lsls	r3, r3, #11
 8002134:	4013      	ands	r3, r2
 8002136:	d001      	beq.n	800213c <HAL_ADC_ConfigChannel+0x184>
 8002138:	2312      	movs	r3, #18
 800213a:	e024      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 800213c:	2300      	movs	r3, #0
 800213e:	e022      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002140:	2311      	movs	r3, #17
 8002142:	e020      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002144:	2310      	movs	r3, #16
 8002146:	e01e      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002148:	230f      	movs	r3, #15
 800214a:	e01c      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 800214c:	230e      	movs	r3, #14
 800214e:	e01a      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002150:	230d      	movs	r3, #13
 8002152:	e018      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002154:	230c      	movs	r3, #12
 8002156:	e016      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002158:	230b      	movs	r3, #11
 800215a:	e014      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 800215c:	230a      	movs	r3, #10
 800215e:	e012      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002160:	2309      	movs	r3, #9
 8002162:	e010      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002164:	2308      	movs	r3, #8
 8002166:	e00e      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002168:	2307      	movs	r3, #7
 800216a:	e00c      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 800216c:	2306      	movs	r3, #6
 800216e:	e00a      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002170:	2305      	movs	r3, #5
 8002172:	e008      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002174:	2304      	movs	r3, #4
 8002176:	e006      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002178:	2303      	movs	r3, #3
 800217a:	e004      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 800217c:	2302      	movs	r3, #2
 800217e:	e002      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002184:	2300      	movs	r3, #0
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	6852      	ldr	r2, [r2, #4]
 800218a:	201f      	movs	r0, #31
 800218c:	4002      	ands	r2, r0
 800218e:	4093      	lsls	r3, r2
 8002190:	000a      	movs	r2, r1
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d808      	bhi.n	80021ba <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	001a      	movs	r2, r3
 80021b6:	f7ff fcae 	bl	8001b16 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	001a      	movs	r2, r3
 80021c8:	f7ff fce8 	bl	8001b9c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db00      	blt.n	80021d6 <HAL_ADC_ConfigChannel+0x21e>
 80021d4:	e0bc      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021d6:	4b50      	ldr	r3, [pc, #320]	@ (8002318 <HAL_ADC_ConfigChannel+0x360>)
 80021d8:	0018      	movs	r0, r3
 80021da:	f7ff fc5b 	bl	8001a94 <LL_ADC_GetCommonPathInternalCh>
 80021de:	0003      	movs	r3, r0
 80021e0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a4d      	ldr	r2, [pc, #308]	@ (800231c <HAL_ADC_ConfigChannel+0x364>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d122      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	2380      	movs	r3, #128	@ 0x80
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021f4:	d11d      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2280      	movs	r2, #128	@ 0x80
 80021fa:	0412      	lsls	r2, r2, #16
 80021fc:	4313      	orrs	r3, r2
 80021fe:	4a46      	ldr	r2, [pc, #280]	@ (8002318 <HAL_ADC_ConfigChannel+0x360>)
 8002200:	0019      	movs	r1, r3
 8002202:	0010      	movs	r0, r2
 8002204:	f7ff fc32 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002208:	4b45      	ldr	r3, [pc, #276]	@ (8002320 <HAL_ADC_ConfigChannel+0x368>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4945      	ldr	r1, [pc, #276]	@ (8002324 <HAL_ADC_ConfigChannel+0x36c>)
 800220e:	0018      	movs	r0, r3
 8002210:	f7fd ff78 	bl	8000104 <__udivsi3>
 8002214:	0003      	movs	r3, r0
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	0013      	movs	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	189b      	adds	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002222:	e002      	b.n	800222a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3b01      	subs	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f9      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002230:	e08e      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a3c      	ldr	r2, [pc, #240]	@ (8002328 <HAL_ADC_ConfigChannel+0x370>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d10e      	bne.n	800225a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	045b      	lsls	r3, r3, #17
 8002242:	4013      	ands	r3, r2
 8002244:	d109      	bne.n	800225a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	0452      	lsls	r2, r2, #17
 800224c:	4313      	orrs	r3, r2
 800224e:	4a32      	ldr	r2, [pc, #200]	@ (8002318 <HAL_ADC_ConfigChannel+0x360>)
 8002250:	0019      	movs	r1, r3
 8002252:	0010      	movs	r0, r2
 8002254:	f7ff fc0a 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
 8002258:	e07a      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a33      	ldr	r2, [pc, #204]	@ (800232c <HAL_ADC_ConfigChannel+0x374>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d000      	beq.n	8002266 <HAL_ADC_ConfigChannel+0x2ae>
 8002264:	e074      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	03db      	lsls	r3, r3, #15
 800226c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800226e:	d000      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x2ba>
 8002270:	e06e      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2280      	movs	r2, #128	@ 0x80
 8002276:	03d2      	lsls	r2, r2, #15
 8002278:	4313      	orrs	r3, r2
 800227a:	4a27      	ldr	r2, [pc, #156]	@ (8002318 <HAL_ADC_ConfigChannel+0x360>)
 800227c:	0019      	movs	r1, r3
 800227e:	0010      	movs	r0, r2
 8002280:	f7ff fbf4 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
 8002284:	e064      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	2380      	movs	r3, #128	@ 0x80
 800228c:	061b      	lsls	r3, r3, #24
 800228e:	429a      	cmp	r2, r3
 8002290:	d004      	beq.n	800229c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002296:	4a1f      	ldr	r2, [pc, #124]	@ (8002314 <HAL_ADC_ConfigChannel+0x35c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d107      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0019      	movs	r1, r3
 80022a6:	0010      	movs	r0, r2
 80022a8:	f7ff fc66 	bl	8001b78 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da4d      	bge.n	8002350 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b4:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <HAL_ADC_ConfigChannel+0x360>)
 80022b6:	0018      	movs	r0, r3
 80022b8:	f7ff fbec 	bl	8001a94 <LL_ADC_GetCommonPathInternalCh>
 80022bc:	0003      	movs	r3, r0
 80022be:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a15      	ldr	r2, [pc, #84]	@ (800231c <HAL_ADC_ConfigChannel+0x364>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d108      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4a18      	ldr	r2, [pc, #96]	@ (8002330 <HAL_ADC_ConfigChannel+0x378>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	4a11      	ldr	r2, [pc, #68]	@ (8002318 <HAL_ADC_ConfigChannel+0x360>)
 80022d2:	0019      	movs	r1, r3
 80022d4:	0010      	movs	r0, r2
 80022d6:	f7ff fbc9 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
 80022da:	e039      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a11      	ldr	r2, [pc, #68]	@ (8002328 <HAL_ADC_ConfigChannel+0x370>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d108      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4a12      	ldr	r2, [pc, #72]	@ (8002334 <HAL_ADC_ConfigChannel+0x37c>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <HAL_ADC_ConfigChannel+0x360>)
 80022ee:	0019      	movs	r1, r3
 80022f0:	0010      	movs	r0, r2
 80022f2:	f7ff fbbb 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
 80022f6:	e02b      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0b      	ldr	r2, [pc, #44]	@ (800232c <HAL_ADC_ConfigChannel+0x374>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d126      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4a0c      	ldr	r2, [pc, #48]	@ (8002338 <HAL_ADC_ConfigChannel+0x380>)
 8002306:	4013      	ands	r3, r2
 8002308:	4a03      	ldr	r2, [pc, #12]	@ (8002318 <HAL_ADC_ConfigChannel+0x360>)
 800230a:	0019      	movs	r1, r3
 800230c:	0010      	movs	r0, r2
 800230e:	f7ff fbad 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
 8002312:	e01d      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
 8002314:	80000004 	.word	0x80000004
 8002318:	40012708 	.word	0x40012708
 800231c:	b0001000 	.word	0xb0001000
 8002320:	20000210 	.word	0x20000210
 8002324:	00030d40 	.word	0x00030d40
 8002328:	b8004000 	.word	0xb8004000
 800232c:	b4002000 	.word	0xb4002000
 8002330:	ff7fffff 	.word	0xff7fffff
 8002334:	feffffff 	.word	0xfeffffff
 8002338:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	2220      	movs	r2, #32
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002348:	2317      	movs	r3, #23
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2254      	movs	r2, #84	@ 0x54
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002358:	2317      	movs	r3, #23
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	781b      	ldrb	r3, [r3, #0]
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b006      	add	sp, #24
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			@ (mov r8, r8)

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	0002      	movs	r2, r0
 8002370:	1dfb      	adds	r3, r7, #7
 8002372:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002374:	1dfb      	adds	r3, r7, #7
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b7f      	cmp	r3, #127	@ 0x7f
 800237a:	d809      	bhi.n	8002390 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	001a      	movs	r2, r3
 8002382:	231f      	movs	r3, #31
 8002384:	401a      	ands	r2, r3
 8002386:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <__NVIC_EnableIRQ+0x30>)
 8002388:	2101      	movs	r1, #1
 800238a:	4091      	lsls	r1, r2
 800238c:	000a      	movs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002390:	46c0      	nop			@ (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	0002      	movs	r2, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80023b0:	d828      	bhi.n	8002404 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002470 <__NVIC_SetPriority+0xd4>)
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	33c0      	adds	r3, #192	@ 0xc0
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	589b      	ldr	r3, [r3, r2]
 80023c2:	1dfa      	adds	r2, r7, #7
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	0011      	movs	r1, r2
 80023c8:	2203      	movs	r2, #3
 80023ca:	400a      	ands	r2, r1
 80023cc:	00d2      	lsls	r2, r2, #3
 80023ce:	21ff      	movs	r1, #255	@ 0xff
 80023d0:	4091      	lsls	r1, r2
 80023d2:	000a      	movs	r2, r1
 80023d4:	43d2      	mvns	r2, r2
 80023d6:	401a      	ands	r2, r3
 80023d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	019b      	lsls	r3, r3, #6
 80023de:	22ff      	movs	r2, #255	@ 0xff
 80023e0:	401a      	ands	r2, r3
 80023e2:	1dfb      	adds	r3, r7, #7
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	0018      	movs	r0, r3
 80023e8:	2303      	movs	r3, #3
 80023ea:	4003      	ands	r3, r0
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f0:	481f      	ldr	r0, [pc, #124]	@ (8002470 <__NVIC_SetPriority+0xd4>)
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b25b      	sxtb	r3, r3
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	430a      	orrs	r2, r1
 80023fc:	33c0      	adds	r3, #192	@ 0xc0
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002402:	e031      	b.n	8002468 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002404:	4a1b      	ldr	r2, [pc, #108]	@ (8002474 <__NVIC_SetPriority+0xd8>)
 8002406:	1dfb      	adds	r3, r7, #7
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	0019      	movs	r1, r3
 800240c:	230f      	movs	r3, #15
 800240e:	400b      	ands	r3, r1
 8002410:	3b08      	subs	r3, #8
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3306      	adds	r3, #6
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	18d3      	adds	r3, r2, r3
 800241a:	3304      	adds	r3, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1dfa      	adds	r2, r7, #7
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	0011      	movs	r1, r2
 8002424:	2203      	movs	r2, #3
 8002426:	400a      	ands	r2, r1
 8002428:	00d2      	lsls	r2, r2, #3
 800242a:	21ff      	movs	r1, #255	@ 0xff
 800242c:	4091      	lsls	r1, r2
 800242e:	000a      	movs	r2, r1
 8002430:	43d2      	mvns	r2, r2
 8002432:	401a      	ands	r2, r3
 8002434:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	019b      	lsls	r3, r3, #6
 800243a:	22ff      	movs	r2, #255	@ 0xff
 800243c:	401a      	ands	r2, r3
 800243e:	1dfb      	adds	r3, r7, #7
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	0018      	movs	r0, r3
 8002444:	2303      	movs	r3, #3
 8002446:	4003      	ands	r3, r0
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800244c:	4809      	ldr	r0, [pc, #36]	@ (8002474 <__NVIC_SetPriority+0xd8>)
 800244e:	1dfb      	adds	r3, r7, #7
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	001c      	movs	r4, r3
 8002454:	230f      	movs	r3, #15
 8002456:	4023      	ands	r3, r4
 8002458:	3b08      	subs	r3, #8
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	430a      	orrs	r2, r1
 800245e:	3306      	adds	r3, #6
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	18c3      	adds	r3, r0, r3
 8002464:	3304      	adds	r3, #4
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	46c0      	nop			@ (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b003      	add	sp, #12
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	1e5a      	subs	r2, r3, #1
 8002484:	2380      	movs	r3, #128	@ 0x80
 8002486:	045b      	lsls	r3, r3, #17
 8002488:	429a      	cmp	r2, r3
 800248a:	d301      	bcc.n	8002490 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248c:	2301      	movs	r3, #1
 800248e:	e010      	b.n	80024b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002490:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <SysTick_Config+0x44>)
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	3a01      	subs	r2, #1
 8002496:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002498:	2301      	movs	r3, #1
 800249a:	425b      	negs	r3, r3
 800249c:	2103      	movs	r1, #3
 800249e:	0018      	movs	r0, r3
 80024a0:	f7ff ff7c 	bl	800239c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a4:	4b05      	ldr	r3, [pc, #20]	@ (80024bc <SysTick_Config+0x44>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024aa:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <SysTick_Config+0x44>)
 80024ac:	2207      	movs	r2, #7
 80024ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	0018      	movs	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b002      	add	sp, #8
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	e000e010 	.word	0xe000e010

080024c0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	210f      	movs	r1, #15
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	1c02      	adds	r2, r0, #0
 80024d0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	0011      	movs	r1, r2
 80024dc:	0018      	movs	r0, r3
 80024de:	f7ff ff5d 	bl	800239c <__NVIC_SetPriority>
}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b004      	add	sp, #16
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	0002      	movs	r2, r0
 80024f2:	1dfb      	adds	r3, r7, #7
 80024f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7ff ff33 	bl	8002368 <__NVIC_EnableIRQ>
}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	46bd      	mov	sp, r7
 8002506:	b002      	add	sp, #8
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0018      	movs	r0, r3
 8002516:	f7ff ffaf 	bl	8002478 <SysTick_Config>
 800251a:	0003      	movs	r3, r0
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e050      	b.n	80025d8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2225      	movs	r2, #37	@ 0x25
 800253a:	5c9b      	ldrb	r3, [r3, r2]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d008      	beq.n	8002554 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2204      	movs	r2, #4
 8002546:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2224      	movs	r2, #36	@ 0x24
 800254c:	2100      	movs	r1, #0
 800254e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e041      	b.n	80025d8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	210e      	movs	r1, #14
 8002560:	438a      	bics	r2, r1
 8002562:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256e:	491c      	ldr	r1, [pc, #112]	@ (80025e0 <HAL_DMA_Abort+0xbc>)
 8002570:	400a      	ands	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2101      	movs	r1, #1
 8002580:	438a      	bics	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002584:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <HAL_DMA_Abort+0xc0>)
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	221c      	movs	r2, #28
 800258e:	4013      	ands	r3, r2
 8002590:	2201      	movs	r2, #1
 8002592:	409a      	lsls	r2, r3
 8002594:	4b13      	ldr	r3, [pc, #76]	@ (80025e4 <HAL_DMA_Abort+0xc0>)
 8002596:	430a      	orrs	r2, r1
 8002598:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00c      	beq.n	80025c6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b6:	490a      	ldr	r1, [pc, #40]	@ (80025e0 <HAL_DMA_Abort+0xbc>)
 80025b8:	400a      	ands	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80025c4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2225      	movs	r2, #37	@ 0x25
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2224      	movs	r2, #36	@ 0x24
 80025d2:	2100      	movs	r1, #0
 80025d4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	fffffeff 	.word	0xfffffeff
 80025e4:	40020000 	.word	0x40020000

080025e8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f0:	210f      	movs	r1, #15
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2225      	movs	r2, #37	@ 0x25
 80025fc:	5c9b      	ldrb	r3, [r3, r2]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d006      	beq.n	8002612 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2204      	movs	r2, #4
 8002608:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800260a:	187b      	adds	r3, r7, r1
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e049      	b.n	80026a6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	210e      	movs	r1, #14
 800261e:	438a      	bics	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	438a      	bics	r2, r1
 8002630:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263c:	491d      	ldr	r1, [pc, #116]	@ (80026b4 <HAL_DMA_Abort_IT+0xcc>)
 800263e:	400a      	ands	r2, r1
 8002640:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002642:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HAL_DMA_Abort_IT+0xd0>)
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	221c      	movs	r2, #28
 800264c:	4013      	ands	r3, r2
 800264e:	2201      	movs	r2, #1
 8002650:	409a      	lsls	r2, r3
 8002652:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_DMA_Abort_IT+0xd0>)
 8002654:	430a      	orrs	r2, r1
 8002656:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002660:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002674:	490f      	ldr	r1, [pc, #60]	@ (80026b4 <HAL_DMA_Abort_IT+0xcc>)
 8002676:	400a      	ands	r2, r1
 8002678:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002682:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2225      	movs	r2, #37	@ 0x25
 8002688:	2101      	movs	r1, #1
 800268a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2224      	movs	r2, #36	@ 0x24
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	0010      	movs	r0, r2
 80026a4:	4798      	blx	r3
    }
  }
  return status;
 80026a6:	230f      	movs	r3, #15
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	781b      	ldrb	r3, [r3, #0]
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b004      	add	sp, #16
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	fffffeff 	.word	0xfffffeff
 80026b8:	40020000 	.word	0x40020000

080026bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ca:	e147      	b.n	800295c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2101      	movs	r1, #1
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4091      	lsls	r1, r2
 80026d6:	000a      	movs	r2, r1
 80026d8:	4013      	ands	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d100      	bne.n	80026e4 <HAL_GPIO_Init+0x28>
 80026e2:	e138      	b.n	8002956 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2203      	movs	r2, #3
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d005      	beq.n	80026fc <HAL_GPIO_Init+0x40>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2203      	movs	r2, #3
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d130      	bne.n	800275e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	409a      	lsls	r2, r3
 800270a:	0013      	movs	r3, r2
 800270c:	43da      	mvns	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	409a      	lsls	r2, r3
 800271e:	0013      	movs	r3, r2
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002732:	2201      	movs	r2, #1
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
 8002738:	0013      	movs	r3, r2
 800273a:	43da      	mvns	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	2201      	movs	r2, #1
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
 8002750:	0013      	movs	r3, r2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2203      	movs	r2, #3
 8002764:	4013      	ands	r3, r2
 8002766:	2b03      	cmp	r3, #3
 8002768:	d017      	beq.n	800279a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	2203      	movs	r2, #3
 8002776:	409a      	lsls	r2, r3
 8002778:	0013      	movs	r3, r2
 800277a:	43da      	mvns	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	409a      	lsls	r2, r3
 800278c:	0013      	movs	r3, r2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2203      	movs	r2, #3
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d123      	bne.n	80027ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	08da      	lsrs	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3208      	adds	r2, #8
 80027ae:	0092      	lsls	r2, r2, #2
 80027b0:	58d3      	ldr	r3, [r2, r3]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2207      	movs	r2, #7
 80027b8:	4013      	ands	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	220f      	movs	r2, #15
 80027be:	409a      	lsls	r2, r3
 80027c0:	0013      	movs	r3, r2
 80027c2:	43da      	mvns	r2, r3
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2107      	movs	r1, #7
 80027d2:	400b      	ands	r3, r1
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	409a      	lsls	r2, r3
 80027d8:	0013      	movs	r3, r2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3208      	adds	r2, #8
 80027e8:	0092      	lsls	r2, r2, #2
 80027ea:	6939      	ldr	r1, [r7, #16]
 80027ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	409a      	lsls	r2, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	43da      	mvns	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2203      	movs	r2, #3
 800280c:	401a      	ands	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	409a      	lsls	r2, r3
 8002814:	0013      	movs	r3, r2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	23c0      	movs	r3, #192	@ 0xc0
 8002828:	029b      	lsls	r3, r3, #10
 800282a:	4013      	ands	r3, r2
 800282c:	d100      	bne.n	8002830 <HAL_GPIO_Init+0x174>
 800282e:	e092      	b.n	8002956 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002830:	4a50      	ldr	r2, [pc, #320]	@ (8002974 <HAL_GPIO_Init+0x2b8>)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3318      	adds	r3, #24
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	589b      	ldr	r3, [r3, r2]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2203      	movs	r2, #3
 8002842:	4013      	ands	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	220f      	movs	r2, #15
 8002848:	409a      	lsls	r2, r3
 800284a:	0013      	movs	r3, r2
 800284c:	43da      	mvns	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	23a0      	movs	r3, #160	@ 0xa0
 8002858:	05db      	lsls	r3, r3, #23
 800285a:	429a      	cmp	r2, r3
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x1ca>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a45      	ldr	r2, [pc, #276]	@ (8002978 <HAL_GPIO_Init+0x2bc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x1c6>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a44      	ldr	r2, [pc, #272]	@ (800297c <HAL_GPIO_Init+0x2c0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x1c2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a43      	ldr	r2, [pc, #268]	@ (8002980 <HAL_GPIO_Init+0x2c4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x1be>
 8002876:	2303      	movs	r3, #3
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x1cc>
 800287a:	2305      	movs	r3, #5
 800287c:	e004      	b.n	8002888 <HAL_GPIO_Init+0x1cc>
 800287e:	2302      	movs	r3, #2
 8002880:	e002      	b.n	8002888 <HAL_GPIO_Init+0x1cc>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_GPIO_Init+0x1cc>
 8002886:	2300      	movs	r3, #0
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	2103      	movs	r1, #3
 800288c:	400a      	ands	r2, r1
 800288e:	00d2      	lsls	r2, r2, #3
 8002890:	4093      	lsls	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002898:	4936      	ldr	r1, [pc, #216]	@ (8002974 <HAL_GPIO_Init+0x2b8>)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3318      	adds	r3, #24
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028a6:	4b33      	ldr	r3, [pc, #204]	@ (8002974 <HAL_GPIO_Init+0x2b8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43da      	mvns	r2, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	2380      	movs	r3, #128	@ 0x80
 80028bc:	035b      	lsls	r3, r3, #13
 80028be:	4013      	ands	r3, r2
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002974 <HAL_GPIO_Init+0x2b8>)
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80028d0:	4b28      	ldr	r3, [pc, #160]	@ (8002974 <HAL_GPIO_Init+0x2b8>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	43da      	mvns	r2, r3
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	039b      	lsls	r3, r3, #14
 80028e8:	4013      	ands	r3, r2
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002974 <HAL_GPIO_Init+0x2b8>)
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002974 <HAL_GPIO_Init+0x2b8>)
 80028fc:	2384      	movs	r3, #132	@ 0x84
 80028fe:	58d3      	ldr	r3, [r2, r3]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43da      	mvns	r2, r3
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	029b      	lsls	r3, r3, #10
 8002914:	4013      	ands	r3, r2
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002920:	4914      	ldr	r1, [pc, #80]	@ (8002974 <HAL_GPIO_Init+0x2b8>)
 8002922:	2284      	movs	r2, #132	@ 0x84
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002928:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <HAL_GPIO_Init+0x2b8>)
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	58d3      	ldr	r3, [r2, r3]
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	43da      	mvns	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	2380      	movs	r3, #128	@ 0x80
 8002940:	025b      	lsls	r3, r3, #9
 8002942:	4013      	ands	r3, r2
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800294e:	4909      	ldr	r1, [pc, #36]	@ (8002974 <HAL_GPIO_Init+0x2b8>)
 8002950:	2280      	movs	r2, #128	@ 0x80
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	40da      	lsrs	r2, r3
 8002964:	1e13      	subs	r3, r2, #0
 8002966:	d000      	beq.n	800296a <HAL_GPIO_Init+0x2ae>
 8002968:	e6b0      	b.n	80026cc <HAL_GPIO_Init+0x10>
  }
}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	46c0      	nop			@ (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b006      	add	sp, #24
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021800 	.word	0x40021800
 8002978:	50000400 	.word	0x50000400
 800297c:	50000800 	.word	0x50000800
 8002980:	50000c00 	.word	0x50000c00

08002984 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800298c:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a19      	ldr	r2, [pc, #100]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002992:	4013      	ands	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d11f      	bne.n	80029e8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80029a8:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <HAL_PWREx_ControlVoltageScaling+0x78>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	0013      	movs	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	189b      	adds	r3, r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4912      	ldr	r1, [pc, #72]	@ (8002a00 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7fd fba4 	bl	8000104 <__udivsi3>
 80029bc:	0003      	movs	r3, r0
 80029be:	3301      	adds	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029c2:	e008      	b.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e001      	b.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e009      	b.n	80029ea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029d6:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	2380      	movs	r3, #128	@ 0x80
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	401a      	ands	r2, r3
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d0ed      	beq.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b004      	add	sp, #16
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	40007000 	.word	0x40007000
 80029f8:	fffff9ff 	.word	0xfffff9ff
 80029fc:	20000210 	.word	0x20000210
 8002a00:	000f4240 	.word	0x000f4240

08002a04 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002a08:	4b03      	ldr	r3, [pc, #12]	@ (8002a18 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	23e0      	movs	r3, #224	@ 0xe0
 8002a0e:	01db      	lsls	r3, r3, #7
 8002a10:	4013      	ands	r3, r2
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000

08002a1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e2fe      	b.n	800302c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2201      	movs	r2, #1
 8002a34:	4013      	ands	r3, r2
 8002a36:	d100      	bne.n	8002a3a <HAL_RCC_OscConfig+0x1e>
 8002a38:	e07c      	b.n	8002b34 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3a:	4bc3      	ldr	r3, [pc, #780]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2238      	movs	r2, #56	@ 0x38
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a44:	4bc0      	ldr	r3, [pc, #768]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d102      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3e>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d002      	beq.n	8002a60 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d10b      	bne.n	8002a78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	4bb9      	ldr	r3, [pc, #740]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	@ 0x80
 8002a66:	029b      	lsls	r3, r3, #10
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d062      	beq.n	8002b32 <HAL_RCC_OscConfig+0x116>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d15e      	bne.n	8002b32 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e2d9      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	2380      	movs	r3, #128	@ 0x80
 8002a7e:	025b      	lsls	r3, r3, #9
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x78>
 8002a84:	4bb0      	ldr	r3, [pc, #704]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4baf      	ldr	r3, [pc, #700]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002a8a:	2180      	movs	r1, #128	@ 0x80
 8002a8c:	0249      	lsls	r1, r1, #9
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e020      	b.n	8002ad6 <HAL_RCC_OscConfig+0xba>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	23a0      	movs	r3, #160	@ 0xa0
 8002a9a:	02db      	lsls	r3, r3, #11
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d10e      	bne.n	8002abe <HAL_RCC_OscConfig+0xa2>
 8002aa0:	4ba9      	ldr	r3, [pc, #676]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4ba8      	ldr	r3, [pc, #672]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002aa6:	2180      	movs	r1, #128	@ 0x80
 8002aa8:	02c9      	lsls	r1, r1, #11
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	4ba6      	ldr	r3, [pc, #664]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4ba5      	ldr	r3, [pc, #660]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002ab4:	2180      	movs	r1, #128	@ 0x80
 8002ab6:	0249      	lsls	r1, r1, #9
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCC_OscConfig+0xba>
 8002abe:	4ba2      	ldr	r3, [pc, #648]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4ba1      	ldr	r3, [pc, #644]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002ac4:	49a1      	ldr	r1, [pc, #644]	@ (8002d4c <HAL_RCC_OscConfig+0x330>)
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	4b9f      	ldr	r3, [pc, #636]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b9e      	ldr	r3, [pc, #632]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002ad0:	499f      	ldr	r1, [pc, #636]	@ (8002d50 <HAL_RCC_OscConfig+0x334>)
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d014      	beq.n	8002b08 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe ff97 	bl	8001a10 <HAL_GetTick>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe ff92 	bl	8001a10 <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e298      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afa:	4b93      	ldr	r3, [pc, #588]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	029b      	lsls	r3, r3, #10
 8002b02:	4013      	ands	r3, r2
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xcc>
 8002b06:	e015      	b.n	8002b34 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe ff82 	bl	8001a10 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b12:	f7fe ff7d 	bl	8001a10 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b64      	cmp	r3, #100	@ 0x64
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e283      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b24:	4b88      	ldr	r3, [pc, #544]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	029b      	lsls	r3, r3, #10
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0xf6>
 8002b30:	e000      	b.n	8002b34 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b32:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d100      	bne.n	8002b40 <HAL_RCC_OscConfig+0x124>
 8002b3e:	e099      	b.n	8002c74 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b40:	4b81      	ldr	r3, [pc, #516]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2238      	movs	r2, #56	@ 0x38
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	4013      	ands	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d102      	bne.n	8002b60 <HAL_RCC_OscConfig+0x144>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d002      	beq.n	8002b66 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d135      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b66:	4b78      	ldr	r3, [pc, #480]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	2380      	movs	r3, #128	@ 0x80
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x162>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e256      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b72      	ldr	r3, [pc, #456]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4a74      	ldr	r2, [pc, #464]	@ (8002d54 <HAL_RCC_OscConfig+0x338>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	0019      	movs	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	021a      	lsls	r2, r3, #8
 8002b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d112      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002d58 <HAL_RCC_OscConfig+0x33c>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	4b67      	ldr	r3, [pc, #412]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002bae:	4b66      	ldr	r3, [pc, #408]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0adb      	lsrs	r3, r3, #11
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	4a68      	ldr	r2, [pc, #416]	@ (8002d5c <HAL_RCC_OscConfig+0x340>)
 8002bba:	40da      	lsrs	r2, r3
 8002bbc:	4b68      	ldr	r3, [pc, #416]	@ (8002d60 <HAL_RCC_OscConfig+0x344>)
 8002bbe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bc0:	4b68      	ldr	r3, [pc, #416]	@ (8002d64 <HAL_RCC_OscConfig+0x348>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7fe fec7 	bl	8001958 <HAL_InitTick>
 8002bca:	1e03      	subs	r3, r0, #0
 8002bcc:	d051      	beq.n	8002c72 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e22c      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d030      	beq.n	8002c3c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bda:	4b5b      	ldr	r3, [pc, #364]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5e      	ldr	r2, [pc, #376]	@ (8002d58 <HAL_RCC_OscConfig+0x33c>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	4b57      	ldr	r3, [pc, #348]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002bee:	4b56      	ldr	r3, [pc, #344]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4b55      	ldr	r3, [pc, #340]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002bf4:	2180      	movs	r1, #128	@ 0x80
 8002bf6:	0049      	lsls	r1, r1, #1
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe ff08 	bl	8001a10 <HAL_GetTick>
 8002c00:	0003      	movs	r3, r0
 8002c02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c06:	f7fe ff03 	bl	8001a10 <HAL_GetTick>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e209      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c18:	4b4b      	ldr	r3, [pc, #300]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4013      	ands	r3, r2
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c24:	4b48      	ldr	r3, [pc, #288]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4a4a      	ldr	r2, [pc, #296]	@ (8002d54 <HAL_RCC_OscConfig+0x338>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	021a      	lsls	r2, r3, #8
 8002c34:	4b44      	ldr	r3, [pc, #272]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	e01b      	b.n	8002c74 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c3c:	4b42      	ldr	r3, [pc, #264]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b41      	ldr	r3, [pc, #260]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002c42:	4949      	ldr	r1, [pc, #292]	@ (8002d68 <HAL_RCC_OscConfig+0x34c>)
 8002c44:	400a      	ands	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe fee2 	bl	8001a10 <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c52:	f7fe fedd 	bl	8001a10 <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1e3      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c64:	4b38      	ldr	r3, [pc, #224]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x236>
 8002c70:	e000      	b.n	8002c74 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c72:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d047      	beq.n	8002d0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c7e:	4b32      	ldr	r3, [pc, #200]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2238      	movs	r2, #56	@ 0x38
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b18      	cmp	r3, #24
 8002c88:	d10a      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d03c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x2f2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d138      	bne.n	8002d0e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e1c5      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d019      	beq.n	8002cdc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ca8:	4b27      	ldr	r3, [pc, #156]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002caa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cac:	4b26      	ldr	r3, [pc, #152]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe feac 	bl	8001a10 <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fea7 	bl	8001a10 <HAL_GetTick>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1ad      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d0f1      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2a2>
 8002cda:	e018      	b.n	8002d0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002cde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ce0:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fe92 	bl	8001a10 <HAL_GetTick>
 8002cec:	0003      	movs	r3, r0
 8002cee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf2:	f7fe fe8d 	bl	8001a10 <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e193      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d04:	4b10      	ldr	r3, [pc, #64]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d08:	2202      	movs	r2, #2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d1f1      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2204      	movs	r2, #4
 8002d14:	4013      	ands	r3, r2
 8002d16:	d100      	bne.n	8002d1a <HAL_RCC_OscConfig+0x2fe>
 8002d18:	e0c6      	b.n	8002ea8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1a:	231f      	movs	r3, #31
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d22:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2238      	movs	r2, #56	@ 0x38
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d11e      	bne.n	8002d6c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_RCC_OscConfig+0x32c>)
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	2202      	movs	r2, #2
 8002d34:	4013      	ands	r3, r2
 8002d36:	d100      	bne.n	8002d3a <HAL_RCC_OscConfig+0x31e>
 8002d38:	e0b6      	b.n	8002ea8 <HAL_RCC_OscConfig+0x48c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d000      	beq.n	8002d44 <HAL_RCC_OscConfig+0x328>
 8002d42:	e0b1      	b.n	8002ea8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e171      	b.n	800302c <HAL_RCC_OscConfig+0x610>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	fffeffff 	.word	0xfffeffff
 8002d50:	fffbffff 	.word	0xfffbffff
 8002d54:	ffff80ff 	.word	0xffff80ff
 8002d58:	ffffc7ff 	.word	0xffffc7ff
 8002d5c:	00f42400 	.word	0x00f42400
 8002d60:	20000210 	.word	0x20000210
 8002d64:	20000214 	.word	0x20000214
 8002d68:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d6c:	4bb1      	ldr	r3, [pc, #708]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002d6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	055b      	lsls	r3, r3, #21
 8002d74:	4013      	ands	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_OscConfig+0x360>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x362>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d011      	beq.n	8002da6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	4bac      	ldr	r3, [pc, #688]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002d84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d86:	4bab      	ldr	r3, [pc, #684]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002d88:	2180      	movs	r1, #128	@ 0x80
 8002d8a:	0549      	lsls	r1, r1, #21
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d90:	4ba8      	ldr	r3, [pc, #672]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	055b      	lsls	r3, r3, #21
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d9e:	231f      	movs	r3, #31
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da6:	4ba4      	ldr	r3, [pc, #656]	@ (8003038 <HAL_RCC_OscConfig+0x61c>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	2380      	movs	r3, #128	@ 0x80
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	d11a      	bne.n	8002de8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db2:	4ba1      	ldr	r3, [pc, #644]	@ (8003038 <HAL_RCC_OscConfig+0x61c>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4ba0      	ldr	r3, [pc, #640]	@ (8003038 <HAL_RCC_OscConfig+0x61c>)
 8002db8:	2180      	movs	r1, #128	@ 0x80
 8002dba:	0049      	lsls	r1, r1, #1
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fe26 	bl	8001a10 <HAL_GetTick>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dca:	f7fe fe21 	bl	8001a10 <HAL_GetTick>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e127      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ddc:	4b96      	ldr	r3, [pc, #600]	@ (8003038 <HAL_RCC_OscConfig+0x61c>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x3e2>
 8002df0:	4b90      	ldr	r3, [pc, #576]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002df2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002df4:	4b8f      	ldr	r3, [pc, #572]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dfc:	e01c      	b.n	8002e38 <HAL_RCC_OscConfig+0x41c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x404>
 8002e06:	4b8b      	ldr	r3, [pc, #556]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002e08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e0a:	4b8a      	ldr	r3, [pc, #552]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e12:	4b88      	ldr	r3, [pc, #544]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002e14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e16:	4b87      	ldr	r3, [pc, #540]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002e18:	2101      	movs	r1, #1
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e1e:	e00b      	b.n	8002e38 <HAL_RCC_OscConfig+0x41c>
 8002e20:	4b84      	ldr	r3, [pc, #528]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002e22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e24:	4b83      	ldr	r3, [pc, #524]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002e26:	2101      	movs	r1, #1
 8002e28:	438a      	bics	r2, r1
 8002e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e2c:	4b81      	ldr	r3, [pc, #516]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002e2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e30:	4b80      	ldr	r3, [pc, #512]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002e32:	2104      	movs	r1, #4
 8002e34:	438a      	bics	r2, r1
 8002e36:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d014      	beq.n	8002e6a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe fde6 	bl	8001a10 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e48:	e009      	b.n	8002e5e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fe fde1 	bl	8001a10 <HAL_GetTick>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	4a79      	ldr	r2, [pc, #484]	@ (800303c <HAL_RCC_OscConfig+0x620>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0e6      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5e:	4b75      	ldr	r3, [pc, #468]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e62:	2202      	movs	r2, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x42e>
 8002e68:	e013      	b.n	8002e92 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fdd1 	bl	8001a10 <HAL_GetTick>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e72:	e009      	b.n	8002e88 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e74:	f7fe fdcc 	bl	8001a10 <HAL_GetTick>
 8002e78:	0002      	movs	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	4a6f      	ldr	r2, [pc, #444]	@ (800303c <HAL_RCC_OscConfig+0x620>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0d1      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e88:	4b6a      	ldr	r3, [pc, #424]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e92:	231f      	movs	r3, #31
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e9c:	4b65      	ldr	r3, [pc, #404]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002e9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ea0:	4b64      	ldr	r3, [pc, #400]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002ea2:	4967      	ldr	r1, [pc, #412]	@ (8003040 <HAL_RCC_OscConfig+0x624>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d100      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x496>
 8002eb0:	e0bb      	b.n	800302a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb2:	4b60      	ldr	r3, [pc, #384]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2238      	movs	r2, #56	@ 0x38
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d100      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4a4>
 8002ebe:	e07b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d156      	bne.n	8002f76 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b59      	ldr	r3, [pc, #356]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002ece:	495d      	ldr	r1, [pc, #372]	@ (8003044 <HAL_RCC_OscConfig+0x628>)
 8002ed0:	400a      	ands	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fd9c 	bl	8001a10 <HAL_GetTick>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ede:	f7fe fd97 	bl	8001a10 <HAL_GetTick>
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e09d      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef0:	4b50      	ldr	r3, [pc, #320]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	049b      	lsls	r3, r3, #18
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d1f0      	bne.n	8002ede <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efc:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4a51      	ldr	r2, [pc, #324]	@ (8003048 <HAL_RCC_OscConfig+0x62c>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1a      	ldr	r2, [r3, #32]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	4b42      	ldr	r3, [pc, #264]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f30:	4b40      	ldr	r3, [pc, #256]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b3f      	ldr	r3, [pc, #252]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f36:	2180      	movs	r1, #128	@ 0x80
 8002f38:	0449      	lsls	r1, r1, #17
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	4b3c      	ldr	r3, [pc, #240]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f44:	2180      	movs	r1, #128	@ 0x80
 8002f46:	0549      	lsls	r1, r1, #21
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fd60 	bl	8001a10 <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fe fd5b 	bl	8001a10 <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e061      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f68:	4b32      	ldr	r3, [pc, #200]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	049b      	lsls	r3, r3, #18
 8002f70:	4013      	ands	r3, r2
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x53a>
 8002f74:	e059      	b.n	800302a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f76:	4b2f      	ldr	r3, [pc, #188]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4b2e      	ldr	r3, [pc, #184]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f7c:	4931      	ldr	r1, [pc, #196]	@ (8003044 <HAL_RCC_OscConfig+0x628>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe fd45 	bl	8001a10 <HAL_GetTick>
 8002f86:	0003      	movs	r3, r0
 8002f88:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe fd40 	bl	8001a10 <HAL_GetTick>
 8002f90:	0002      	movs	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e046      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9e:	4b25      	ldr	r3, [pc, #148]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	@ 0x80
 8002fa4:	049b      	lsls	r3, r3, #18
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002faa:	4b22      	ldr	r3, [pc, #136]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	4b21      	ldr	r3, [pc, #132]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002fb0:	4926      	ldr	r1, [pc, #152]	@ (800304c <HAL_RCC_OscConfig+0x630>)
 8002fb2:	400a      	ands	r2, r1
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	e038      	b.n	800302a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e033      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2203      	movs	r2, #3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d126      	bne.n	8003026 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2270      	movs	r2, #112	@ 0x70
 8002fdc:	401a      	ands	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11f      	bne.n	8003026 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	23fe      	movs	r3, #254	@ 0xfe
 8002fea:	01db      	lsls	r3, r3, #7
 8002fec:	401a      	ands	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d116      	bne.n	8003026 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	23f8      	movs	r3, #248	@ 0xf8
 8002ffc:	039b      	lsls	r3, r3, #14
 8002ffe:	401a      	ands	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d10e      	bne.n	8003026 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	23e0      	movs	r3, #224	@ 0xe0
 800300c:	051b      	lsls	r3, r3, #20
 800300e:	401a      	ands	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d106      	bne.n	8003026 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	0f5b      	lsrs	r3, r3, #29
 800301c:	075a      	lsls	r2, r3, #29
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d001      	beq.n	800302a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b008      	add	sp, #32
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	40007000 	.word	0x40007000
 800303c:	00001388 	.word	0x00001388
 8003040:	efffffff 	.word	0xefffffff
 8003044:	feffffff 	.word	0xfeffffff
 8003048:	11c1808c 	.word	0x11c1808c
 800304c:	eefefffc 	.word	0xeefefffc

08003050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0e9      	b.n	8003238 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003064:	4b76      	ldr	r3, [pc, #472]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2207      	movs	r2, #7
 800306a:	4013      	ands	r3, r2
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d91e      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003072:	4b73      	ldr	r3, [pc, #460]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2207      	movs	r2, #7
 8003078:	4393      	bics	r3, r2
 800307a:	0019      	movs	r1, r3
 800307c:	4b70      	ldr	r3, [pc, #448]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003084:	f7fe fcc4 	bl	8001a10 <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800308c:	e009      	b.n	80030a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308e:	f7fe fcbf 	bl	8001a10 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	4a6a      	ldr	r2, [pc, #424]	@ (8003244 <HAL_RCC_ClockConfig+0x1f4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0ca      	b.n	8003238 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030a2:	4b67      	ldr	r3, [pc, #412]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2207      	movs	r2, #7
 80030a8:	4013      	ands	r3, r2
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d1ee      	bne.n	800308e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d015      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2204      	movs	r2, #4
 80030c0:	4013      	ands	r3, r2
 80030c2:	d006      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030c4:	4b60      	ldr	r3, [pc, #384]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 80030ca:	21e0      	movs	r1, #224	@ 0xe0
 80030cc:	01c9      	lsls	r1, r1, #7
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4a5d      	ldr	r2, [pc, #372]	@ (800324c <HAL_RCC_ClockConfig+0x1fc>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	4b59      	ldr	r3, [pc, #356]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 80030e2:	430a      	orrs	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2201      	movs	r2, #1
 80030ec:	4013      	ands	r3, r2
 80030ee:	d057      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f8:	4b53      	ldr	r3, [pc, #332]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2380      	movs	r3, #128	@ 0x80
 80030fe:	029b      	lsls	r3, r3, #10
 8003100:	4013      	ands	r3, r2
 8003102:	d12b      	bne.n	800315c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e097      	b.n	8003238 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d107      	bne.n	8003120 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003110:	4b4d      	ldr	r3, [pc, #308]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	2380      	movs	r3, #128	@ 0x80
 8003116:	049b      	lsls	r3, r3, #18
 8003118:	4013      	ands	r3, r2
 800311a:	d11f      	bne.n	800315c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e08b      	b.n	8003238 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003128:	4b47      	ldr	r3, [pc, #284]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	2380      	movs	r3, #128	@ 0x80
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4013      	ands	r3, r2
 8003132:	d113      	bne.n	800315c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e07f      	b.n	8003238 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d106      	bne.n	800314e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003140:	4b41      	ldr	r3, [pc, #260]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 8003142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003144:	2202      	movs	r2, #2
 8003146:	4013      	ands	r3, r2
 8003148:	d108      	bne.n	800315c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e074      	b.n	8003238 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314e:	4b3e      	ldr	r3, [pc, #248]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 8003150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003152:	2202      	movs	r2, #2
 8003154:	4013      	ands	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e06d      	b.n	8003238 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800315c:	4b3a      	ldr	r3, [pc, #232]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2207      	movs	r2, #7
 8003162:	4393      	bics	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4b37      	ldr	r3, [pc, #220]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 800316c:	430a      	orrs	r2, r1
 800316e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003170:	f7fe fc4e 	bl	8001a10 <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003178:	e009      	b.n	800318e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317a:	f7fe fc49 	bl	8001a10 <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	4a2f      	ldr	r2, [pc, #188]	@ (8003244 <HAL_RCC_ClockConfig+0x1f4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e054      	b.n	8003238 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	4b2e      	ldr	r3, [pc, #184]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2238      	movs	r2, #56	@ 0x38
 8003194:	401a      	ands	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	429a      	cmp	r2, r3
 800319e:	d1ec      	bne.n	800317a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a0:	4b27      	ldr	r3, [pc, #156]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2207      	movs	r2, #7
 80031a6:	4013      	ands	r3, r2
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d21e      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b24      	ldr	r3, [pc, #144]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2207      	movs	r2, #7
 80031b4:	4393      	bics	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	4b21      	ldr	r3, [pc, #132]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031c0:	f7fe fc26 	bl	8001a10 <HAL_GetTick>
 80031c4:	0003      	movs	r3, r0
 80031c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031c8:	e009      	b.n	80031de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ca:	f7fe fc21 	bl	8001a10 <HAL_GetTick>
 80031ce:	0002      	movs	r2, r0
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003244 <HAL_RCC_ClockConfig+0x1f4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e02c      	b.n	8003238 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031de:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2207      	movs	r2, #7
 80031e4:	4013      	ands	r3, r2
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d1ee      	bne.n	80031ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2204      	movs	r2, #4
 80031f2:	4013      	ands	r3, r2
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031f6:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4a15      	ldr	r2, [pc, #84]	@ (8003250 <HAL_RCC_ClockConfig+0x200>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	0019      	movs	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800320a:	f000 f829 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800320e:	0001      	movs	r1, r0
 8003210:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	220f      	movs	r2, #15
 8003218:	401a      	ands	r2, r3
 800321a:	4b0e      	ldr	r3, [pc, #56]	@ (8003254 <HAL_RCC_ClockConfig+0x204>)
 800321c:	0092      	lsls	r2, r2, #2
 800321e:	58d3      	ldr	r3, [r2, r3]
 8003220:	221f      	movs	r2, #31
 8003222:	4013      	ands	r3, r2
 8003224:	000a      	movs	r2, r1
 8003226:	40da      	lsrs	r2, r3
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCC_ClockConfig+0x208>)
 800322a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800322c:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <HAL_RCC_ClockConfig+0x20c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0018      	movs	r0, r3
 8003232:	f7fe fb91 	bl	8001958 <HAL_InitTick>
 8003236:	0003      	movs	r3, r0
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b004      	add	sp, #16
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40022000 	.word	0x40022000
 8003244:	00001388 	.word	0x00001388
 8003248:	40021000 	.word	0x40021000
 800324c:	fffff0ff 	.word	0xfffff0ff
 8003250:	ffff8fff 	.word	0xffff8fff
 8003254:	08006908 	.word	0x08006908
 8003258:	20000210 	.word	0x20000210
 800325c:	20000214 	.word	0x20000214

08003260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003266:	4b3c      	ldr	r3, [pc, #240]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2238      	movs	r2, #56	@ 0x38
 800326c:	4013      	ands	r3, r2
 800326e:	d10f      	bne.n	8003290 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003270:	4b39      	ldr	r3, [pc, #228]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0adb      	lsrs	r3, r3, #11
 8003276:	2207      	movs	r2, #7
 8003278:	4013      	ands	r3, r2
 800327a:	2201      	movs	r2, #1
 800327c:	409a      	lsls	r2, r3
 800327e:	0013      	movs	r3, r2
 8003280:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003282:	6839      	ldr	r1, [r7, #0]
 8003284:	4835      	ldr	r0, [pc, #212]	@ (800335c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003286:	f7fc ff3d 	bl	8000104 <__udivsi3>
 800328a:	0003      	movs	r3, r0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	e05d      	b.n	800334c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003290:	4b31      	ldr	r3, [pc, #196]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2238      	movs	r2, #56	@ 0x38
 8003296:	4013      	ands	r3, r2
 8003298:	2b08      	cmp	r3, #8
 800329a:	d102      	bne.n	80032a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800329c:	4b30      	ldr	r3, [pc, #192]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x100>)
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	e054      	b.n	800334c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2238      	movs	r2, #56	@ 0x38
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d138      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80032ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2203      	movs	r2, #3
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032b8:	4b27      	ldr	r3, [pc, #156]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	2207      	movs	r2, #7
 80032c0:	4013      	ands	r3, r2
 80032c2:	3301      	adds	r3, #1
 80032c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d10d      	bne.n	80032e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	4824      	ldr	r0, [pc, #144]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x100>)
 80032d0:	f7fc ff18 	bl	8000104 <__udivsi3>
 80032d4:	0003      	movs	r3, r0
 80032d6:	0019      	movs	r1, r3
 80032d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	227f      	movs	r2, #127	@ 0x7f
 80032e0:	4013      	ands	r3, r2
 80032e2:	434b      	muls	r3, r1
 80032e4:	617b      	str	r3, [r7, #20]
        break;
 80032e6:	e00d      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	481c      	ldr	r0, [pc, #112]	@ (800335c <HAL_RCC_GetSysClockFreq+0xfc>)
 80032ec:	f7fc ff0a 	bl	8000104 <__udivsi3>
 80032f0:	0003      	movs	r3, r0
 80032f2:	0019      	movs	r1, r3
 80032f4:	4b18      	ldr	r3, [pc, #96]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	227f      	movs	r2, #127	@ 0x7f
 80032fc:	4013      	ands	r3, r2
 80032fe:	434b      	muls	r3, r1
 8003300:	617b      	str	r3, [r7, #20]
        break;
 8003302:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003304:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0f5b      	lsrs	r3, r3, #29
 800330a:	2207      	movs	r2, #7
 800330c:	4013      	ands	r3, r2
 800330e:	3301      	adds	r3, #1
 8003310:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	6978      	ldr	r0, [r7, #20]
 8003316:	f7fc fef5 	bl	8000104 <__udivsi3>
 800331a:	0003      	movs	r3, r0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	e015      	b.n	800334c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003320:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2238      	movs	r2, #56	@ 0x38
 8003326:	4013      	ands	r3, r2
 8003328:	2b20      	cmp	r3, #32
 800332a:	d103      	bne.n	8003334 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800332c:	2380      	movs	r3, #128	@ 0x80
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	e00b      	b.n	800334c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003334:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2238      	movs	r2, #56	@ 0x38
 800333a:	4013      	ands	r3, r2
 800333c:	2b18      	cmp	r3, #24
 800333e:	d103      	bne.n	8003348 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003340:	23fa      	movs	r3, #250	@ 0xfa
 8003342:	01db      	lsls	r3, r3, #7
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	e001      	b.n	800334c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800334c:	693b      	ldr	r3, [r7, #16]
}
 800334e:	0018      	movs	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	b006      	add	sp, #24
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	40021000 	.word	0x40021000
 800335c:	00f42400 	.word	0x00f42400
 8003360:	007a1200 	.word	0x007a1200

08003364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003368:	4b02      	ldr	r3, [pc, #8]	@ (8003374 <HAL_RCC_GetHCLKFreq+0x10>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	0018      	movs	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	20000210 	.word	0x20000210

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800337c:	f7ff fff2 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 8003380:	0004      	movs	r4, r0
 8003382:	f7ff fb3f 	bl	8002a04 <LL_RCC_GetAPB1Prescaler>
 8003386:	0003      	movs	r3, r0
 8003388:	0b1a      	lsrs	r2, r3, #12
 800338a:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800338c:	0092      	lsls	r2, r2, #2
 800338e:	58d3      	ldr	r3, [r2, r3]
 8003390:	221f      	movs	r2, #31
 8003392:	4013      	ands	r3, r2
 8003394:	40dc      	lsrs	r4, r3
 8003396:	0023      	movs	r3, r4
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	bdb0      	pop	{r4, r5, r7, pc}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	08006948 	.word	0x08006948

080033a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e04a      	b.n	800344c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	223d      	movs	r2, #61	@ 0x3d
 80033ba:	5c9b      	ldrb	r3, [r3, r2]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d107      	bne.n	80033d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	223c      	movs	r2, #60	@ 0x3c
 80033c6:	2100      	movs	r1, #0
 80033c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7fe f96d 	bl	80016ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	223d      	movs	r2, #61	@ 0x3d
 80033d6:	2102      	movs	r1, #2
 80033d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3304      	adds	r3, #4
 80033e2:	0019      	movs	r1, r3
 80033e4:	0010      	movs	r0, r2
 80033e6:	f000 fa6b 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2248      	movs	r2, #72	@ 0x48
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	223e      	movs	r2, #62	@ 0x3e
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	223f      	movs	r2, #63	@ 0x3f
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2240      	movs	r2, #64	@ 0x40
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2241      	movs	r2, #65	@ 0x41
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2242      	movs	r2, #66	@ 0x42
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2243      	movs	r2, #67	@ 0x43
 800341e:	2101      	movs	r1, #1
 8003420:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2244      	movs	r2, #68	@ 0x44
 8003426:	2101      	movs	r1, #1
 8003428:	5499      	strb	r1, [r3, r2]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2245      	movs	r2, #69	@ 0x45
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2246      	movs	r2, #70	@ 0x46
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2247      	movs	r2, #71	@ 0x47
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	223d      	movs	r2, #61	@ 0x3d
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e04a      	b.n	80034fc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	223d      	movs	r2, #61	@ 0x3d
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223c      	movs	r2, #60	@ 0x3c
 8003476:	2100      	movs	r1, #0
 8003478:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	0018      	movs	r0, r3
 800347e:	f000 f841 	bl	8003504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	223d      	movs	r2, #61	@ 0x3d
 8003486:	2102      	movs	r1, #2
 8003488:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	0019      	movs	r1, r3
 8003494:	0010      	movs	r0, r2
 8003496:	f000 fa13 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2248      	movs	r2, #72	@ 0x48
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223e      	movs	r2, #62	@ 0x3e
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	223f      	movs	r2, #63	@ 0x3f
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2240      	movs	r2, #64	@ 0x40
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2241      	movs	r2, #65	@ 0x41
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2242      	movs	r2, #66	@ 0x42
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2243      	movs	r2, #67	@ 0x43
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2244      	movs	r2, #68	@ 0x44
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2245      	movs	r2, #69	@ 0x45
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2246      	movs	r2, #70	@ 0x46
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2247      	movs	r2, #71	@ 0x47
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	223d      	movs	r2, #61	@ 0x3d
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b002      	add	sp, #8
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800350c:	46c0      	nop			@ (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	b002      	add	sp, #8
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003520:	2317      	movs	r3, #23
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	223c      	movs	r2, #60	@ 0x3c
 800352c:	5c9b      	ldrb	r3, [r3, r2]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003532:	2302      	movs	r3, #2
 8003534:	e0e5      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	223c      	movs	r2, #60	@ 0x3c
 800353a:	2101      	movs	r1, #1
 800353c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b14      	cmp	r3, #20
 8003542:	d900      	bls.n	8003546 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003544:	e0d1      	b.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	009a      	lsls	r2, r3, #2
 800354a:	4b70      	ldr	r3, [pc, #448]	@ (800370c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800354c:	18d3      	adds	r3, r2, r3
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	0011      	movs	r1, r2
 800355a:	0018      	movs	r0, r3
 800355c:	f000 fa34 	bl	80039c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2108      	movs	r1, #8
 800356c:	430a      	orrs	r2, r1
 800356e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2104      	movs	r1, #4
 800357c:	438a      	bics	r2, r1
 800357e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6999      	ldr	r1, [r3, #24]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	619a      	str	r2, [r3, #24]
      break;
 8003592:	e0af      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f000 fa93 	bl	8003ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2180      	movs	r1, #128	@ 0x80
 80035ae:	0109      	lsls	r1, r1, #4
 80035b0:	430a      	orrs	r2, r1
 80035b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4954      	ldr	r1, [pc, #336]	@ (8003710 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80035c0:	400a      	ands	r2, r1
 80035c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6999      	ldr	r1, [r3, #24]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	021a      	lsls	r2, r3, #8
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	619a      	str	r2, [r3, #24]
      break;
 80035d8:	e08c      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	0011      	movs	r1, r2
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 faee 	bl	8003bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2108      	movs	r1, #8
 80035f4:	430a      	orrs	r2, r1
 80035f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2104      	movs	r1, #4
 8003604:	438a      	bics	r2, r1
 8003606:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69d9      	ldr	r1, [r3, #28]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	61da      	str	r2, [r3, #28]
      break;
 800361a:	e06b      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f000 fb4f 	bl	8003cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2180      	movs	r1, #128	@ 0x80
 8003636:	0109      	lsls	r1, r1, #4
 8003638:	430a      	orrs	r2, r1
 800363a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69da      	ldr	r2, [r3, #28]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4932      	ldr	r1, [pc, #200]	@ (8003710 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003648:	400a      	ands	r2, r1
 800364a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69d9      	ldr	r1, [r3, #28]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	021a      	lsls	r2, r3, #8
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	61da      	str	r2, [r3, #28]
      break;
 8003660:	e048      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	0011      	movs	r1, r2
 800366a:	0018      	movs	r0, r3
 800366c:	f000 fb90 	bl	8003d90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2108      	movs	r1, #8
 800367c:	430a      	orrs	r2, r1
 800367e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2104      	movs	r1, #4
 800368c:	438a      	bics	r2, r1
 800368e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80036a2:	e027      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	0011      	movs	r1, r2
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 fbc9 	bl	8003e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2180      	movs	r1, #128	@ 0x80
 80036be:	0109      	lsls	r1, r1, #4
 80036c0:	430a      	orrs	r2, r1
 80036c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4910      	ldr	r1, [pc, #64]	@ (8003710 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80036d0:	400a      	ands	r2, r1
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80036e8:	e004      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80036ea:	2317      	movs	r3, #23
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
      break;
 80036f2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	223c      	movs	r2, #60	@ 0x3c
 80036f8:	2100      	movs	r1, #0
 80036fa:	5499      	strb	r1, [r3, r2]

  return status;
 80036fc:	2317      	movs	r3, #23
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	781b      	ldrb	r3, [r3, #0]
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	08006968 	.word	0x08006968
 8003710:	fffffbff 	.word	0xfffffbff

08003714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371e:	230f      	movs	r3, #15
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	223c      	movs	r2, #60	@ 0x3c
 800372a:	5c9b      	ldrb	r3, [r3, r2]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIM_ConfigClockSource+0x20>
 8003730:	2302      	movs	r3, #2
 8003732:	e0bc      	b.n	80038ae <HAL_TIM_ConfigClockSource+0x19a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	223c      	movs	r2, #60	@ 0x3c
 8003738:	2101      	movs	r1, #1
 800373a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	223d      	movs	r2, #61	@ 0x3d
 8003740:	2102      	movs	r1, #2
 8003742:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4a5a      	ldr	r2, [pc, #360]	@ (80038b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003750:	4013      	ands	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4a59      	ldr	r2, [pc, #356]	@ (80038bc <HAL_TIM_ConfigClockSource+0x1a8>)
 8003758:	4013      	ands	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2280      	movs	r2, #128	@ 0x80
 800376a:	0192      	lsls	r2, r2, #6
 800376c:	4293      	cmp	r3, r2
 800376e:	d040      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0xde>
 8003770:	2280      	movs	r2, #128	@ 0x80
 8003772:	0192      	lsls	r2, r2, #6
 8003774:	4293      	cmp	r3, r2
 8003776:	d900      	bls.n	800377a <HAL_TIM_ConfigClockSource+0x66>
 8003778:	e088      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>
 800377a:	2280      	movs	r2, #128	@ 0x80
 800377c:	0152      	lsls	r2, r2, #5
 800377e:	4293      	cmp	r3, r2
 8003780:	d100      	bne.n	8003784 <HAL_TIM_ConfigClockSource+0x70>
 8003782:	e088      	b.n	8003896 <HAL_TIM_ConfigClockSource+0x182>
 8003784:	2280      	movs	r2, #128	@ 0x80
 8003786:	0152      	lsls	r2, r2, #5
 8003788:	4293      	cmp	r3, r2
 800378a:	d900      	bls.n	800378e <HAL_TIM_ConfigClockSource+0x7a>
 800378c:	e07e      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>
 800378e:	2b70      	cmp	r3, #112	@ 0x70
 8003790:	d018      	beq.n	80037c4 <HAL_TIM_ConfigClockSource+0xb0>
 8003792:	d900      	bls.n	8003796 <HAL_TIM_ConfigClockSource+0x82>
 8003794:	e07a      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>
 8003796:	2b60      	cmp	r3, #96	@ 0x60
 8003798:	d04f      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x126>
 800379a:	d900      	bls.n	800379e <HAL_TIM_ConfigClockSource+0x8a>
 800379c:	e076      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>
 800379e:	2b50      	cmp	r3, #80	@ 0x50
 80037a0:	d03b      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x106>
 80037a2:	d900      	bls.n	80037a6 <HAL_TIM_ConfigClockSource+0x92>
 80037a4:	e072      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>
 80037a6:	2b40      	cmp	r3, #64	@ 0x40
 80037a8:	d057      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x146>
 80037aa:	d900      	bls.n	80037ae <HAL_TIM_ConfigClockSource+0x9a>
 80037ac:	e06e      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>
 80037ae:	2b30      	cmp	r3, #48	@ 0x30
 80037b0:	d063      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x166>
 80037b2:	d86b      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x178>
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d060      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x166>
 80037b8:	d868      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x178>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d05d      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x166>
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d05b      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x166>
 80037c2:	e063      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037d4:	f000 fc10 	bl	8003ff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2277      	movs	r2, #119	@ 0x77
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]
      break;
 80037f0:	e052      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003802:	f000 fbf9 	bl	8003ff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2180      	movs	r1, #128	@ 0x80
 8003812:	01c9      	lsls	r1, r1, #7
 8003814:	430a      	orrs	r2, r1
 8003816:	609a      	str	r2, [r3, #8]
      break;
 8003818:	e03e      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003826:	001a      	movs	r2, r3
 8003828:	f000 fb6a 	bl	8003f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2150      	movs	r1, #80	@ 0x50
 8003832:	0018      	movs	r0, r3
 8003834:	f000 fbc4 	bl	8003fc0 <TIM_ITRx_SetConfig>
      break;
 8003838:	e02e      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003846:	001a      	movs	r2, r3
 8003848:	f000 fb88 	bl	8003f5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2160      	movs	r1, #96	@ 0x60
 8003852:	0018      	movs	r0, r3
 8003854:	f000 fbb4 	bl	8003fc0 <TIM_ITRx_SetConfig>
      break;
 8003858:	e01e      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003866:	001a      	movs	r2, r3
 8003868:	f000 fb4a 	bl	8003f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2140      	movs	r1, #64	@ 0x40
 8003872:	0018      	movs	r0, r3
 8003874:	f000 fba4 	bl	8003fc0 <TIM_ITRx_SetConfig>
      break;
 8003878:	e00e      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	0019      	movs	r1, r3
 8003884:	0010      	movs	r0, r2
 8003886:	f000 fb9b 	bl	8003fc0 <TIM_ITRx_SetConfig>
      break;
 800388a:	e005      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800388c:	230f      	movs	r3, #15
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
      break;
 8003894:	e000      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003896:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	223d      	movs	r2, #61	@ 0x3d
 800389c:	2101      	movs	r1, #1
 800389e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	223c      	movs	r2, #60	@ 0x3c
 80038a4:	2100      	movs	r1, #0
 80038a6:	5499      	strb	r1, [r3, r2]

  return status;
 80038a8:	230f      	movs	r3, #15
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	781b      	ldrb	r3, [r3, #0]
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	ffceff88 	.word	0xffceff88
 80038bc:	ffff00ff 	.word	0xffff00ff

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a37      	ldr	r2, [pc, #220]	@ (80039b0 <TIM_Base_SetConfig+0xf0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d008      	beq.n	80038ea <TIM_Base_SetConfig+0x2a>
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	2380      	movs	r3, #128	@ 0x80
 80038dc:	05db      	lsls	r3, r3, #23
 80038de:	429a      	cmp	r2, r3
 80038e0:	d003      	beq.n	80038ea <TIM_Base_SetConfig+0x2a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a33      	ldr	r2, [pc, #204]	@ (80039b4 <TIM_Base_SetConfig+0xf4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d108      	bne.n	80038fc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2270      	movs	r2, #112	@ 0x70
 80038ee:	4393      	bics	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a2c      	ldr	r2, [pc, #176]	@ (80039b0 <TIM_Base_SetConfig+0xf0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d014      	beq.n	800392e <TIM_Base_SetConfig+0x6e>
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	2380      	movs	r3, #128	@ 0x80
 8003908:	05db      	lsls	r3, r3, #23
 800390a:	429a      	cmp	r2, r3
 800390c:	d00f      	beq.n	800392e <TIM_Base_SetConfig+0x6e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a28      	ldr	r2, [pc, #160]	@ (80039b4 <TIM_Base_SetConfig+0xf4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00b      	beq.n	800392e <TIM_Base_SetConfig+0x6e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a27      	ldr	r2, [pc, #156]	@ (80039b8 <TIM_Base_SetConfig+0xf8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d007      	beq.n	800392e <TIM_Base_SetConfig+0x6e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a26      	ldr	r2, [pc, #152]	@ (80039bc <TIM_Base_SetConfig+0xfc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_Base_SetConfig+0x6e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a25      	ldr	r2, [pc, #148]	@ (80039c0 <TIM_Base_SetConfig+0x100>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4a24      	ldr	r2, [pc, #144]	@ (80039c4 <TIM_Base_SetConfig+0x104>)
 8003932:	4013      	ands	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2280      	movs	r2, #128	@ 0x80
 8003944:	4393      	bics	r3, r2
 8003946:	001a      	movs	r2, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a11      	ldr	r2, [pc, #68]	@ (80039b0 <TIM_Base_SetConfig+0xf0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_Base_SetConfig+0xbe>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a12      	ldr	r2, [pc, #72]	@ (80039bc <TIM_Base_SetConfig+0xfc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_Base_SetConfig+0xbe>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a11      	ldr	r2, [pc, #68]	@ (80039c0 <TIM_Base_SetConfig+0x100>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d103      	bne.n	8003986 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2201      	movs	r2, #1
 8003992:	4013      	ands	r3, r2
 8003994:	2b01      	cmp	r3, #1
 8003996:	d106      	bne.n	80039a6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2201      	movs	r2, #1
 800399e:	4393      	bics	r3, r2
 80039a0:	001a      	movs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	611a      	str	r2, [r3, #16]
  }
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40002000 	.word	0x40002000
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800
 80039c4:	fffffcff 	.word	0xfffffcff

080039c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	2201      	movs	r2, #1
 80039de:	4393      	bics	r3, r2
 80039e0:	001a      	movs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4a2e      	ldr	r2, [pc, #184]	@ (8003ab0 <TIM_OC1_SetConfig+0xe8>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2203      	movs	r2, #3
 80039fe:	4393      	bics	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	4393      	bics	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a24      	ldr	r2, [pc, #144]	@ (8003ab4 <TIM_OC1_SetConfig+0xec>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <TIM_OC1_SetConfig+0x6e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a23      	ldr	r2, [pc, #140]	@ (8003ab8 <TIM_OC1_SetConfig+0xf0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_OC1_SetConfig+0x6e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a22      	ldr	r2, [pc, #136]	@ (8003abc <TIM_OC1_SetConfig+0xf4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d10c      	bne.n	8003a50 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2208      	movs	r2, #8
 8003a3a:	4393      	bics	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	4393      	bics	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a18      	ldr	r2, [pc, #96]	@ (8003ab4 <TIM_OC1_SetConfig+0xec>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <TIM_OC1_SetConfig+0xa0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a17      	ldr	r2, [pc, #92]	@ (8003ab8 <TIM_OC1_SetConfig+0xf0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_OC1_SetConfig+0xa0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a16      	ldr	r2, [pc, #88]	@ (8003abc <TIM_OC1_SetConfig+0xf4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d111      	bne.n	8003a8c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4a15      	ldr	r2, [pc, #84]	@ (8003ac0 <TIM_OC1_SetConfig+0xf8>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4a14      	ldr	r2, [pc, #80]	@ (8003ac4 <TIM_OC1_SetConfig+0xfc>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	621a      	str	r2, [r3, #32]
}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b006      	add	sp, #24
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	fffeff8f 	.word	0xfffeff8f
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40014400 	.word	0x40014400
 8003abc:	40014800 	.word	0x40014800
 8003ac0:	fffffeff 	.word	0xfffffeff
 8003ac4:	fffffdff 	.word	0xfffffdff

08003ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	2210      	movs	r2, #16
 8003ade:	4393      	bics	r3, r2
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba8 <TIM_OC2_SetConfig+0xe0>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a2b      	ldr	r2, [pc, #172]	@ (8003bac <TIM_OC2_SetConfig+0xe4>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2220      	movs	r2, #32
 8003b12:	4393      	bics	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a22      	ldr	r2, [pc, #136]	@ (8003bb0 <TIM_OC2_SetConfig+0xe8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10d      	bne.n	8003b46 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2280      	movs	r2, #128	@ 0x80
 8003b2e:	4393      	bics	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2240      	movs	r2, #64	@ 0x40
 8003b42:	4393      	bics	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <TIM_OC2_SetConfig+0xe8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d007      	beq.n	8003b5e <TIM_OC2_SetConfig+0x96>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a18      	ldr	r2, [pc, #96]	@ (8003bb4 <TIM_OC2_SetConfig+0xec>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d003      	beq.n	8003b5e <TIM_OC2_SetConfig+0x96>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a17      	ldr	r2, [pc, #92]	@ (8003bb8 <TIM_OC2_SetConfig+0xf0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d113      	bne.n	8003b86 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4a16      	ldr	r2, [pc, #88]	@ (8003bbc <TIM_OC2_SetConfig+0xf4>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4a15      	ldr	r2, [pc, #84]	@ (8003bc0 <TIM_OC2_SetConfig+0xf8>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	621a      	str	r2, [r3, #32]
}
 8003ba0:	46c0      	nop			@ (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b006      	add	sp, #24
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	feff8fff 	.word	0xfeff8fff
 8003bac:	fffffcff 	.word	0xfffffcff
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40014400 	.word	0x40014400
 8003bb8:	40014800 	.word	0x40014800
 8003bbc:	fffffbff 	.word	0xfffffbff
 8003bc0:	fffff7ff 	.word	0xfffff7ff

08003bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4a31      	ldr	r2, [pc, #196]	@ (8003ca0 <TIM_OC3_SetConfig+0xdc>)
 8003bda:	401a      	ands	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca4 <TIM_OC3_SetConfig+0xe0>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4a27      	ldr	r2, [pc, #156]	@ (8003ca8 <TIM_OC3_SetConfig+0xe4>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a23      	ldr	r2, [pc, #140]	@ (8003cac <TIM_OC3_SetConfig+0xe8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d10d      	bne.n	8003c3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	4a22      	ldr	r2, [pc, #136]	@ (8003cb0 <TIM_OC3_SetConfig+0xec>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb4 <TIM_OC3_SetConfig+0xf0>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1a      	ldr	r2, [pc, #104]	@ (8003cac <TIM_OC3_SetConfig+0xe8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <TIM_OC3_SetConfig+0x92>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb8 <TIM_OC3_SetConfig+0xf4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_OC3_SetConfig+0x92>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1a      	ldr	r2, [pc, #104]	@ (8003cbc <TIM_OC3_SetConfig+0xf8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d113      	bne.n	8003c7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4a19      	ldr	r2, [pc, #100]	@ (8003cc0 <TIM_OC3_SetConfig+0xfc>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <TIM_OC3_SetConfig+0x100>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	621a      	str	r2, [r3, #32]
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b006      	add	sp, #24
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	fffffeff 	.word	0xfffffeff
 8003ca4:	fffeff8f 	.word	0xfffeff8f
 8003ca8:	fffffdff 	.word	0xfffffdff
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	fffff7ff 	.word	0xfffff7ff
 8003cb4:	fffffbff 	.word	0xfffffbff
 8003cb8:	40014400 	.word	0x40014400
 8003cbc:	40014800 	.word	0x40014800
 8003cc0:	ffffefff 	.word	0xffffefff
 8003cc4:	ffffdfff 	.word	0xffffdfff

08003cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	4a24      	ldr	r2, [pc, #144]	@ (8003d70 <TIM_OC4_SetConfig+0xa8>)
 8003cde:	401a      	ands	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4a20      	ldr	r2, [pc, #128]	@ (8003d74 <TIM_OC4_SetConfig+0xac>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8003d78 <TIM_OC4_SetConfig+0xb0>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d7c <TIM_OC4_SetConfig+0xb4>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	031b      	lsls	r3, r3, #12
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a17      	ldr	r2, [pc, #92]	@ (8003d80 <TIM_OC4_SetConfig+0xb8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d007      	beq.n	8003d38 <TIM_OC4_SetConfig+0x70>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a16      	ldr	r2, [pc, #88]	@ (8003d84 <TIM_OC4_SetConfig+0xbc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_OC4_SetConfig+0x70>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <TIM_OC4_SetConfig+0xc0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d109      	bne.n	8003d4c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	4a14      	ldr	r2, [pc, #80]	@ (8003d8c <TIM_OC4_SetConfig+0xc4>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	019b      	lsls	r3, r3, #6
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b006      	add	sp, #24
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	ffffefff 	.word	0xffffefff
 8003d74:	feff8fff 	.word	0xfeff8fff
 8003d78:	fffffcff 	.word	0xfffffcff
 8003d7c:	ffffdfff 	.word	0xffffdfff
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800
 8003d8c:	ffffbfff 	.word	0xffffbfff

08003d90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4a21      	ldr	r2, [pc, #132]	@ (8003e2c <TIM_OC5_SetConfig+0x9c>)
 8003da6:	401a      	ands	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a1d      	ldr	r2, [pc, #116]	@ (8003e30 <TIM_OC5_SetConfig+0xa0>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4a19      	ldr	r2, [pc, #100]	@ (8003e34 <TIM_OC5_SetConfig+0xa4>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a15      	ldr	r2, [pc, #84]	@ (8003e38 <TIM_OC5_SetConfig+0xa8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <TIM_OC5_SetConfig+0x66>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a14      	ldr	r2, [pc, #80]	@ (8003e3c <TIM_OC5_SetConfig+0xac>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <TIM_OC5_SetConfig+0x66>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a13      	ldr	r2, [pc, #76]	@ (8003e40 <TIM_OC5_SetConfig+0xb0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d109      	bne.n	8003e0a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e2c <TIM_OC5_SetConfig+0x9c>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	621a      	str	r2, [r3, #32]
}
 8003e24:	46c0      	nop			@ (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b006      	add	sp, #24
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	fffeffff 	.word	0xfffeffff
 8003e30:	fffeff8f 	.word	0xfffeff8f
 8003e34:	fffdffff 	.word	0xfffdffff
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40014400 	.word	0x40014400
 8003e40:	40014800 	.word	0x40014800

08003e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	4a22      	ldr	r2, [pc, #136]	@ (8003ee4 <TIM_OC6_SetConfig+0xa0>)
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee8 <TIM_OC6_SetConfig+0xa4>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4a1a      	ldr	r2, [pc, #104]	@ (8003eec <TIM_OC6_SetConfig+0xa8>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	051b      	lsls	r3, r3, #20
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a16      	ldr	r2, [pc, #88]	@ (8003ef0 <TIM_OC6_SetConfig+0xac>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_OC6_SetConfig+0x68>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a15      	ldr	r2, [pc, #84]	@ (8003ef4 <TIM_OC6_SetConfig+0xb0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC6_SetConfig+0x68>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a14      	ldr	r2, [pc, #80]	@ (8003ef8 <TIM_OC6_SetConfig+0xb4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d109      	bne.n	8003ec0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	4a13      	ldr	r2, [pc, #76]	@ (8003efc <TIM_OC6_SetConfig+0xb8>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	029b      	lsls	r3, r3, #10
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	46c0      	nop			@ (mov r8, r8)
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b006      	add	sp, #24
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	ffefffff 	.word	0xffefffff
 8003ee8:	feff8fff 	.word	0xfeff8fff
 8003eec:	ffdfffff 	.word	0xffdfffff
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800
 8003efc:	fffbffff 	.word	0xfffbffff

08003f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	2201      	movs	r2, #1
 8003f18:	4393      	bics	r3, r2
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	22f0      	movs	r2, #240	@ 0xf0
 8003f2a:	4393      	bics	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	220a      	movs	r2, #10
 8003f3c:	4393      	bics	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	621a      	str	r2, [r3, #32]
}
 8003f54:	46c0      	nop			@ (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b006      	add	sp, #24
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	2210      	movs	r2, #16
 8003f74:	4393      	bics	r3, r2
 8003f76:	001a      	movs	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4a0d      	ldr	r2, [pc, #52]	@ (8003fbc <TIM_TI2_ConfigInputStage+0x60>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	031b      	lsls	r3, r3, #12
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	22a0      	movs	r2, #160	@ 0xa0
 8003f98:	4393      	bics	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b006      	add	sp, #24
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	ffff0fff 	.word	0xffff0fff

08003fc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a08      	ldr	r2, [pc, #32]	@ (8003ff4 <TIM_ITRx_SetConfig+0x34>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	2207      	movs	r2, #7
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	609a      	str	r2, [r3, #8]
}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b004      	add	sp, #16
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	ffcfff8f 	.word	0xffcfff8f

08003ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	4a09      	ldr	r2, [pc, #36]	@ (8004034 <TIM_ETR_SetConfig+0x3c>)
 8004010:	4013      	ands	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	431a      	orrs	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	46c0      	nop			@ (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b006      	add	sp, #24
 8004032:	bd80      	pop	{r7, pc}
 8004034:	ffff00ff 	.word	0xffff00ff

08004038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	223c      	movs	r2, #60	@ 0x3c
 8004046:	5c9b      	ldrb	r3, [r3, r2]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800404c:	2302      	movs	r3, #2
 800404e:	e050      	b.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	223c      	movs	r2, #60	@ 0x3c
 8004054:	2101      	movs	r1, #1
 8004056:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	223d      	movs	r2, #61	@ 0x3d
 800405c:	2102      	movs	r1, #2
 800405e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a21      	ldr	r2, [pc, #132]	@ (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a20      	ldr	r2, [pc, #128]	@ (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2270      	movs	r2, #112	@ 0x70
 8004090:	4393      	bics	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a14      	ldr	r2, [pc, #80]	@ (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00a      	beq.n	80040c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	2380      	movs	r3, #128	@ 0x80
 80040b6:	05db      	lsls	r3, r3, #23
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d004      	beq.n	80040c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a10      	ldr	r2, [pc, #64]	@ (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d10c      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2280      	movs	r2, #128	@ 0x80
 80040ca:	4393      	bics	r3, r2
 80040cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	223d      	movs	r2, #61	@ 0x3d
 80040e4:	2101      	movs	r1, #1
 80040e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	223c      	movs	r2, #60	@ 0x3c
 80040ec:	2100      	movs	r1, #0
 80040ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b004      	add	sp, #16
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	ff0fffff 	.word	0xff0fffff
 8004104:	40000400 	.word	0x40000400

08004108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e046      	b.n	80041a8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2288      	movs	r2, #136	@ 0x88
 800411e:	589b      	ldr	r3, [r3, r2]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d107      	bne.n	8004134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2284      	movs	r2, #132	@ 0x84
 8004128:	2100      	movs	r1, #0
 800412a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	0018      	movs	r0, r3
 8004130:	f7fd fb14 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2288      	movs	r2, #136	@ 0x88
 8004138:	2124      	movs	r1, #36	@ 0x24
 800413a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2101      	movs	r1, #1
 8004148:	438a      	bics	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	0018      	movs	r0, r3
 8004158:	f000 ffdc 	bl	8005114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	0018      	movs	r0, r3
 8004160:	f000 fd60 	bl	8004c24 <UART_SetConfig>
 8004164:	0003      	movs	r3, r0
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e01c      	b.n	80041a8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	490d      	ldr	r1, [pc, #52]	@ (80041b0 <HAL_UART_Init+0xa8>)
 800417a:	400a      	ands	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	212a      	movs	r1, #42	@ 0x2a
 800418a:	438a      	bics	r2, r1
 800418c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	430a      	orrs	r2, r1
 800419c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f001 f86b 	bl	800527c <UART_CheckIdleState>
 80041a6:	0003      	movs	r3, r0
}
 80041a8:	0018      	movs	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b002      	add	sp, #8
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	ffffb7ff 	.word	0xffffb7ff

080041b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	@ 0x28
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	1dbb      	adds	r3, r7, #6
 80041c2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2288      	movs	r2, #136	@ 0x88
 80041c8:	589b      	ldr	r3, [r3, r2]
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d000      	beq.n	80041d0 <HAL_UART_Transmit+0x1c>
 80041ce:	e090      	b.n	80042f2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_UART_Transmit+0x2a>
 80041d6:	1dbb      	adds	r3, r7, #6
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e088      	b.n	80042f4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	2380      	movs	r3, #128	@ 0x80
 80041e8:	015b      	lsls	r3, r3, #5
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d109      	bne.n	8004202 <HAL_UART_Transmit+0x4e>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2201      	movs	r2, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	d001      	beq.n	8004202 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e078      	b.n	80042f4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2290      	movs	r2, #144	@ 0x90
 8004206:	2100      	movs	r1, #0
 8004208:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2288      	movs	r2, #136	@ 0x88
 800420e:	2121      	movs	r1, #33	@ 0x21
 8004210:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004212:	f7fd fbfd 	bl	8001a10 <HAL_GetTick>
 8004216:	0003      	movs	r3, r0
 8004218:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1dba      	adds	r2, r7, #6
 800421e:	2154      	movs	r1, #84	@ 0x54
 8004220:	8812      	ldrh	r2, [r2, #0]
 8004222:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1dba      	adds	r2, r7, #6
 8004228:	2156      	movs	r1, #86	@ 0x56
 800422a:	8812      	ldrh	r2, [r2, #0]
 800422c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	2380      	movs	r3, #128	@ 0x80
 8004234:	015b      	lsls	r3, r3, #5
 8004236:	429a      	cmp	r2, r3
 8004238:	d108      	bne.n	800424c <HAL_UART_Transmit+0x98>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d104      	bne.n	800424c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	e003      	b.n	8004254 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004250:	2300      	movs	r3, #0
 8004252:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004254:	e030      	b.n	80042b8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	0013      	movs	r3, r2
 8004260:	2200      	movs	r2, #0
 8004262:	2180      	movs	r1, #128	@ 0x80
 8004264:	f001 f8b4 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d005      	beq.n	8004278 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2288      	movs	r2, #136	@ 0x88
 8004270:	2120      	movs	r1, #32
 8004272:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e03d      	b.n	80042f4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	001a      	movs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	05d2      	lsls	r2, r2, #23
 800428a:	0dd2      	lsrs	r2, r2, #23
 800428c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	3302      	adds	r3, #2
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	e007      	b.n	80042a6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	781a      	ldrb	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	3301      	adds	r3, #1
 80042a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2256      	movs	r2, #86	@ 0x56
 80042aa:	5a9b      	ldrh	r3, [r3, r2]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b299      	uxth	r1, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2256      	movs	r2, #86	@ 0x56
 80042b6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2256      	movs	r2, #86	@ 0x56
 80042bc:	5a9b      	ldrh	r3, [r3, r2]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1c8      	bne.n	8004256 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	0013      	movs	r3, r2
 80042ce:	2200      	movs	r2, #0
 80042d0:	2140      	movs	r1, #64	@ 0x40
 80042d2:	f001 f87d 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 80042d6:	1e03      	subs	r3, r0, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2288      	movs	r2, #136	@ 0x88
 80042de:	2120      	movs	r1, #32
 80042e0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e006      	b.n	80042f4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2288      	movs	r2, #136	@ 0x88
 80042ea:	2120      	movs	r1, #32
 80042ec:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b008      	add	sp, #32
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	@ 0x28
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	1dbb      	adds	r3, r7, #6
 800430a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	228c      	movs	r2, #140	@ 0x8c
 8004310:	589b      	ldr	r3, [r3, r2]
 8004312:	2b20      	cmp	r3, #32
 8004314:	d000      	beq.n	8004318 <HAL_UART_Receive+0x1c>
 8004316:	e0e6      	b.n	80044e6 <HAL_UART_Receive+0x1ea>
  {
    if ((pData == NULL) || (Size == 0U))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_UART_Receive+0x2a>
 800431e:	1dbb      	adds	r3, r7, #6
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e0de      	b.n	80044e8 <HAL_UART_Receive+0x1ec>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	2380      	movs	r3, #128	@ 0x80
 8004330:	015b      	lsls	r3, r3, #5
 8004332:	429a      	cmp	r2, r3
 8004334:	d109      	bne.n	800434a <HAL_UART_Receive+0x4e>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d105      	bne.n	800434a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2201      	movs	r2, #1
 8004342:	4013      	ands	r3, r2
 8004344:	d001      	beq.n	800434a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e0ce      	b.n	80044e8 <HAL_UART_Receive+0x1ec>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2290      	movs	r2, #144	@ 0x90
 800434e:	2100      	movs	r1, #0
 8004350:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	228c      	movs	r2, #140	@ 0x8c
 8004356:	2122      	movs	r1, #34	@ 0x22
 8004358:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004360:	f7fd fb56 	bl	8001a10 <HAL_GetTick>
 8004364:	0003      	movs	r3, r0
 8004366:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1dba      	adds	r2, r7, #6
 800436c:	215c      	movs	r1, #92	@ 0x5c
 800436e:	8812      	ldrh	r2, [r2, #0]
 8004370:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1dba      	adds	r2, r7, #6
 8004376:	215e      	movs	r1, #94	@ 0x5e
 8004378:	8812      	ldrh	r2, [r2, #0]
 800437a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	2380      	movs	r3, #128	@ 0x80
 8004382:	015b      	lsls	r3, r3, #5
 8004384:	429a      	cmp	r2, r3
 8004386:	d10d      	bne.n	80043a4 <HAL_UART_Receive+0xa8>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d104      	bne.n	800439a <HAL_UART_Receive+0x9e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2260      	movs	r2, #96	@ 0x60
 8004394:	4956      	ldr	r1, [pc, #344]	@ (80044f0 <HAL_UART_Receive+0x1f4>)
 8004396:	5299      	strh	r1, [r3, r2]
 8004398:	e02e      	b.n	80043f8 <HAL_UART_Receive+0xfc>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2260      	movs	r2, #96	@ 0x60
 800439e:	21ff      	movs	r1, #255	@ 0xff
 80043a0:	5299      	strh	r1, [r3, r2]
 80043a2:	e029      	b.n	80043f8 <HAL_UART_Receive+0xfc>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10d      	bne.n	80043c8 <HAL_UART_Receive+0xcc>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d104      	bne.n	80043be <HAL_UART_Receive+0xc2>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2260      	movs	r2, #96	@ 0x60
 80043b8:	21ff      	movs	r1, #255	@ 0xff
 80043ba:	5299      	strh	r1, [r3, r2]
 80043bc:	e01c      	b.n	80043f8 <HAL_UART_Receive+0xfc>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2260      	movs	r2, #96	@ 0x60
 80043c2:	217f      	movs	r1, #127	@ 0x7f
 80043c4:	5299      	strh	r1, [r3, r2]
 80043c6:	e017      	b.n	80043f8 <HAL_UART_Receive+0xfc>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	2380      	movs	r3, #128	@ 0x80
 80043ce:	055b      	lsls	r3, r3, #21
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d10d      	bne.n	80043f0 <HAL_UART_Receive+0xf4>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_UART_Receive+0xea>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2260      	movs	r2, #96	@ 0x60
 80043e0:	217f      	movs	r1, #127	@ 0x7f
 80043e2:	5299      	strh	r1, [r3, r2]
 80043e4:	e008      	b.n	80043f8 <HAL_UART_Receive+0xfc>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2260      	movs	r2, #96	@ 0x60
 80043ea:	213f      	movs	r1, #63	@ 0x3f
 80043ec:	5299      	strh	r1, [r3, r2]
 80043ee:	e003      	b.n	80043f8 <HAL_UART_Receive+0xfc>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2260      	movs	r2, #96	@ 0x60
 80043f4:	2100      	movs	r1, #0
 80043f6:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80043f8:	2312      	movs	r3, #18
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	2160      	movs	r1, #96	@ 0x60
 8004400:	5a52      	ldrh	r2, [r2, r1]
 8004402:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	2380      	movs	r3, #128	@ 0x80
 800440a:	015b      	lsls	r3, r3, #5
 800440c:	429a      	cmp	r2, r3
 800440e:	d108      	bne.n	8004422 <HAL_UART_Receive+0x126>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	e003      	b.n	800442a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800442a:	e04e      	b.n	80044ca <HAL_UART_Receive+0x1ce>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	0013      	movs	r3, r2
 8004436:	2200      	movs	r2, #0
 8004438:	2120      	movs	r1, #32
 800443a:	f000 ffc9 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 800443e:	1e03      	subs	r3, r0, #0
 8004440:	d005      	beq.n	800444e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	228c      	movs	r2, #140	@ 0x8c
 8004446:	2120      	movs	r1, #32
 8004448:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e04c      	b.n	80044e8 <HAL_UART_Receive+0x1ec>
      }
      if (pdata8bits == NULL)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10e      	bne.n	8004472 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	b29b      	uxth	r3, r3
 800445c:	2212      	movs	r2, #18
 800445e:	18ba      	adds	r2, r7, r2
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	4013      	ands	r3, r2
 8004464:	b29a      	uxth	r2, r3
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	3302      	adds	r3, #2
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	e022      	b.n	80044b8 <HAL_UART_Receive+0x1bc>
      }
      else
      {
    	  uint8_t digit = 1;
 8004472:	2111      	movs	r1, #17
 8004474:	187b      	adds	r3, r7, r1
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
    	  if( ( (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask) ) != 32 )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2012      	movs	r0, #18
 8004484:	183a      	adds	r2, r7, r0
 8004486:	8812      	ldrh	r2, [r2, #0]
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	4013      	ands	r3, r2
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b20      	cmp	r3, #32
 8004490:	d022      	beq.n	80044d8 <HAL_UART_Receive+0x1dc>
    	  {

    		  *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	b2db      	uxtb	r3, r3
 800449a:	183a      	adds	r2, r7, r0
 800449c:	8812      	ldrh	r2, [r2, #0]
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	4013      	ands	r3, r2
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	701a      	strb	r2, [r3, #0]
    	  	  pdata8bits++;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
    	  	  digit++;
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	187b      	adds	r3, r7, r1
 80044b4:	3201      	adds	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
    	  else
    	  {
    		  break;
    	  }
      }
      huart->RxXferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	225e      	movs	r2, #94	@ 0x5e
 80044bc:	5a9b      	ldrh	r3, [r3, r2]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b299      	uxth	r1, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	225e      	movs	r2, #94	@ 0x5e
 80044c8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	225e      	movs	r2, #94	@ 0x5e
 80044ce:	5a9b      	ldrh	r3, [r3, r2]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1aa      	bne.n	800442c <HAL_UART_Receive+0x130>
 80044d6:	e000      	b.n	80044da <HAL_UART_Receive+0x1de>
    		  break;
 80044d8:	46c0      	nop			@ (mov r8, r8)
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	228c      	movs	r2, #140	@ 0x8c
 80044de:	2120      	movs	r1, #32
 80044e0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e000      	b.n	80044e8 <HAL_UART_Receive+0x1ec>
  }
  else
  {
    return HAL_BUSY;
 80044e6:	2302      	movs	r3, #2
  }
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b008      	add	sp, #32
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	000001ff 	.word	0x000001ff

080044f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	1dbb      	adds	r3, r7, #6
 8004500:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	228c      	movs	r2, #140	@ 0x8c
 8004506:	589b      	ldr	r3, [r3, r2]
 8004508:	2b20      	cmp	r3, #32
 800450a:	d14a      	bne.n	80045a2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_UART_Receive_IT+0x26>
 8004512:	1dbb      	adds	r3, r7, #6
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e042      	b.n	80045a4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	2380      	movs	r3, #128	@ 0x80
 8004524:	015b      	lsls	r3, r3, #5
 8004526:	429a      	cmp	r2, r3
 8004528:	d109      	bne.n	800453e <HAL_UART_Receive_IT+0x4a>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2201      	movs	r2, #1
 8004536:	4013      	ands	r3, r2
 8004538:	d001      	beq.n	800453e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e032      	b.n	80045a4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a18      	ldr	r2, [pc, #96]	@ (80045ac <HAL_UART_Receive_IT+0xb8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d020      	beq.n	8004590 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	4013      	ands	r3, r2
 800455a:	d019      	beq.n	8004590 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800455c:	f3ef 8310 	mrs	r3, PRIMASK
 8004560:	613b      	str	r3, [r7, #16]
  return(result);
 8004562:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	2301      	movs	r3, #1
 8004568:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f383 8810 	msr	PRIMASK, r3
}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2180      	movs	r1, #128	@ 0x80
 800457e:	04c9      	lsls	r1, r1, #19
 8004580:	430a      	orrs	r2, r1
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	f383 8810 	msr	PRIMASK, r3
}
 800458e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004590:	1dbb      	adds	r3, r7, #6
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	0018      	movs	r0, r3
 800459a:	f000 ff89 	bl	80054b0 <UART_Start_Receive_IT>
 800459e:	0003      	movs	r3, r0
 80045a0:	e000      	b.n	80045a4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80045a2:	2302      	movs	r3, #2
  }
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b008      	add	sp, #32
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40008000 	.word	0x40008000

080045b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045b0:	b5b0      	push	{r4, r5, r7, lr}
 80045b2:	b0aa      	sub	sp, #168	@ 0xa8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	22a4      	movs	r2, #164	@ 0xa4
 80045c0:	18b9      	adds	r1, r7, r2
 80045c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	20a0      	movs	r0, #160	@ 0xa0
 80045cc:	1839      	adds	r1, r7, r0
 80045ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	249c      	movs	r4, #156	@ 0x9c
 80045d8:	1939      	adds	r1, r7, r4
 80045da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045dc:	0011      	movs	r1, r2
 80045de:	18bb      	adds	r3, r7, r2
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4aa2      	ldr	r2, [pc, #648]	@ (800486c <HAL_UART_IRQHandler+0x2bc>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	2298      	movs	r2, #152	@ 0x98
 80045e8:	18bd      	adds	r5, r7, r2
 80045ea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80045ec:	18bb      	adds	r3, r7, r2
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d11a      	bne.n	800462a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2220      	movs	r2, #32
 80045fa:	4013      	ands	r3, r2
 80045fc:	d015      	beq.n	800462a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80045fe:	183b      	adds	r3, r7, r0
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2220      	movs	r2, #32
 8004604:	4013      	ands	r3, r2
 8004606:	d105      	bne.n	8004614 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004608:	193b      	adds	r3, r7, r4
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	2380      	movs	r3, #128	@ 0x80
 800460e:	055b      	lsls	r3, r3, #21
 8004610:	4013      	ands	r3, r2
 8004612:	d00a      	beq.n	800462a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004618:	2b00      	cmp	r3, #0
 800461a:	d100      	bne.n	800461e <HAL_UART_IRQHandler+0x6e>
 800461c:	e2dc      	b.n	8004bd8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	0010      	movs	r0, r2
 8004626:	4798      	blx	r3
      }
      return;
 8004628:	e2d6      	b.n	8004bd8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800462a:	2398      	movs	r3, #152	@ 0x98
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d100      	bne.n	8004636 <HAL_UART_IRQHandler+0x86>
 8004634:	e122      	b.n	800487c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004636:	239c      	movs	r3, #156	@ 0x9c
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a8c      	ldr	r2, [pc, #560]	@ (8004870 <HAL_UART_IRQHandler+0x2c0>)
 800463e:	4013      	ands	r3, r2
 8004640:	d106      	bne.n	8004650 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004642:	23a0      	movs	r3, #160	@ 0xa0
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a8a      	ldr	r2, [pc, #552]	@ (8004874 <HAL_UART_IRQHandler+0x2c4>)
 800464a:	4013      	ands	r3, r2
 800464c:	d100      	bne.n	8004650 <HAL_UART_IRQHandler+0xa0>
 800464e:	e115      	b.n	800487c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004650:	23a4      	movs	r3, #164	@ 0xa4
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2201      	movs	r2, #1
 8004658:	4013      	ands	r3, r2
 800465a:	d012      	beq.n	8004682 <HAL_UART_IRQHandler+0xd2>
 800465c:	23a0      	movs	r3, #160	@ 0xa0
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	2380      	movs	r3, #128	@ 0x80
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4013      	ands	r3, r2
 8004668:	d00b      	beq.n	8004682 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2201      	movs	r2, #1
 8004670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2290      	movs	r2, #144	@ 0x90
 8004676:	589b      	ldr	r3, [r3, r2]
 8004678:	2201      	movs	r2, #1
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2190      	movs	r1, #144	@ 0x90
 8004680:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004682:	23a4      	movs	r3, #164	@ 0xa4
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2202      	movs	r2, #2
 800468a:	4013      	ands	r3, r2
 800468c:	d011      	beq.n	80046b2 <HAL_UART_IRQHandler+0x102>
 800468e:	239c      	movs	r3, #156	@ 0x9c
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2201      	movs	r2, #1
 8004696:	4013      	ands	r3, r2
 8004698:	d00b      	beq.n	80046b2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2202      	movs	r2, #2
 80046a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2290      	movs	r2, #144	@ 0x90
 80046a6:	589b      	ldr	r3, [r3, r2]
 80046a8:	2204      	movs	r2, #4
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2190      	movs	r1, #144	@ 0x90
 80046b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046b2:	23a4      	movs	r3, #164	@ 0xa4
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2204      	movs	r2, #4
 80046ba:	4013      	ands	r3, r2
 80046bc:	d011      	beq.n	80046e2 <HAL_UART_IRQHandler+0x132>
 80046be:	239c      	movs	r3, #156	@ 0x9c
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2204      	movs	r2, #4
 80046d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2290      	movs	r2, #144	@ 0x90
 80046d6:	589b      	ldr	r3, [r3, r2]
 80046d8:	2202      	movs	r2, #2
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2190      	movs	r1, #144	@ 0x90
 80046e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046e2:	23a4      	movs	r3, #164	@ 0xa4
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2208      	movs	r2, #8
 80046ea:	4013      	ands	r3, r2
 80046ec:	d017      	beq.n	800471e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80046ee:	23a0      	movs	r3, #160	@ 0xa0
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2220      	movs	r2, #32
 80046f6:	4013      	ands	r3, r2
 80046f8:	d105      	bne.n	8004706 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80046fa:	239c      	movs	r3, #156	@ 0x9c
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a5b      	ldr	r2, [pc, #364]	@ (8004870 <HAL_UART_IRQHandler+0x2c0>)
 8004702:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004704:	d00b      	beq.n	800471e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2208      	movs	r2, #8
 800470c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2290      	movs	r2, #144	@ 0x90
 8004712:	589b      	ldr	r3, [r3, r2]
 8004714:	2208      	movs	r2, #8
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2190      	movs	r1, #144	@ 0x90
 800471c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800471e:	23a4      	movs	r3, #164	@ 0xa4
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	2380      	movs	r3, #128	@ 0x80
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	4013      	ands	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_UART_IRQHandler+0x1a4>
 800472c:	23a0      	movs	r3, #160	@ 0xa0
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	2380      	movs	r3, #128	@ 0x80
 8004734:	04db      	lsls	r3, r3, #19
 8004736:	4013      	ands	r3, r2
 8004738:	d00c      	beq.n	8004754 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2280      	movs	r2, #128	@ 0x80
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2290      	movs	r2, #144	@ 0x90
 8004748:	589b      	ldr	r3, [r3, r2]
 800474a:	2220      	movs	r2, #32
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2190      	movs	r1, #144	@ 0x90
 8004752:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2290      	movs	r2, #144	@ 0x90
 8004758:	589b      	ldr	r3, [r3, r2]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d100      	bne.n	8004760 <HAL_UART_IRQHandler+0x1b0>
 800475e:	e23d      	b.n	8004bdc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004760:	23a4      	movs	r3, #164	@ 0xa4
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2220      	movs	r2, #32
 8004768:	4013      	ands	r3, r2
 800476a:	d015      	beq.n	8004798 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800476c:	23a0      	movs	r3, #160	@ 0xa0
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2220      	movs	r2, #32
 8004774:	4013      	ands	r3, r2
 8004776:	d106      	bne.n	8004786 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004778:	239c      	movs	r3, #156	@ 0x9c
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	2380      	movs	r3, #128	@ 0x80
 8004780:	055b      	lsls	r3, r3, #21
 8004782:	4013      	ands	r3, r2
 8004784:	d008      	beq.n	8004798 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800478a:	2b00      	cmp	r3, #0
 800478c:	d004      	beq.n	8004798 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	0010      	movs	r0, r2
 8004796:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2290      	movs	r2, #144	@ 0x90
 800479c:	589b      	ldr	r3, [r3, r2]
 800479e:	2194      	movs	r1, #148	@ 0x94
 80047a0:	187a      	adds	r2, r7, r1
 80047a2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2240      	movs	r2, #64	@ 0x40
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b40      	cmp	r3, #64	@ 0x40
 80047b0:	d004      	beq.n	80047bc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047b2:	187b      	adds	r3, r7, r1
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2228      	movs	r2, #40	@ 0x28
 80047b8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ba:	d04c      	beq.n	8004856 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 ff9a 	bl	80056f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2240      	movs	r2, #64	@ 0x40
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b40      	cmp	r3, #64	@ 0x40
 80047d0:	d13c      	bne.n	800484c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d2:	f3ef 8310 	mrs	r3, PRIMASK
 80047d6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80047d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047da:	2090      	movs	r0, #144	@ 0x90
 80047dc:	183a      	adds	r2, r7, r0
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	2301      	movs	r3, #1
 80047e2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047e6:	f383 8810 	msr	PRIMASK, r3
}
 80047ea:	46c0      	nop			@ (mov r8, r8)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2140      	movs	r1, #64	@ 0x40
 80047f8:	438a      	bics	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	183b      	adds	r3, r7, r0
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004802:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004804:	f383 8810 	msr	PRIMASK, r3
}
 8004808:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2280      	movs	r2, #128	@ 0x80
 800480e:	589b      	ldr	r3, [r3, r2]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d016      	beq.n	8004842 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2280      	movs	r2, #128	@ 0x80
 8004818:	589b      	ldr	r3, [r3, r2]
 800481a:	4a17      	ldr	r2, [pc, #92]	@ (8004878 <HAL_UART_IRQHandler+0x2c8>)
 800481c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2280      	movs	r2, #128	@ 0x80
 8004822:	589b      	ldr	r3, [r3, r2]
 8004824:	0018      	movs	r0, r3
 8004826:	f7fd fedf 	bl	80025e8 <HAL_DMA_Abort_IT>
 800482a:	1e03      	subs	r3, r0, #0
 800482c:	d01c      	beq.n	8004868 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2280      	movs	r2, #128	@ 0x80
 8004832:	589b      	ldr	r3, [r3, r2]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	2180      	movs	r1, #128	@ 0x80
 800483a:	5852      	ldr	r2, [r2, r1]
 800483c:	0010      	movs	r0, r2
 800483e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	e012      	b.n	8004868 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 f9d9 	bl	8004bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484a:	e00d      	b.n	8004868 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	0018      	movs	r0, r3
 8004850:	f000 f9d4 	bl	8004bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	e008      	b.n	8004868 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f000 f9cf 	bl	8004bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2290      	movs	r2, #144	@ 0x90
 8004862:	2100      	movs	r1, #0
 8004864:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004866:	e1b9      	b.n	8004bdc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	46c0      	nop			@ (mov r8, r8)
    return;
 800486a:	e1b7      	b.n	8004bdc <HAL_UART_IRQHandler+0x62c>
 800486c:	0000080f 	.word	0x0000080f
 8004870:	10000001 	.word	0x10000001
 8004874:	04000120 	.word	0x04000120
 8004878:	080057c5 	.word	0x080057c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d000      	beq.n	8004886 <HAL_UART_IRQHandler+0x2d6>
 8004884:	e13e      	b.n	8004b04 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004886:	23a4      	movs	r3, #164	@ 0xa4
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2210      	movs	r2, #16
 800488e:	4013      	ands	r3, r2
 8004890:	d100      	bne.n	8004894 <HAL_UART_IRQHandler+0x2e4>
 8004892:	e137      	b.n	8004b04 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004894:	23a0      	movs	r3, #160	@ 0xa0
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2210      	movs	r2, #16
 800489c:	4013      	ands	r3, r2
 800489e:	d100      	bne.n	80048a2 <HAL_UART_IRQHandler+0x2f2>
 80048a0:	e130      	b.n	8004b04 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2210      	movs	r2, #16
 80048a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2240      	movs	r2, #64	@ 0x40
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b40      	cmp	r3, #64	@ 0x40
 80048b6:	d000      	beq.n	80048ba <HAL_UART_IRQHandler+0x30a>
 80048b8:	e0a4      	b.n	8004a04 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2280      	movs	r2, #128	@ 0x80
 80048be:	589b      	ldr	r3, [r3, r2]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	217e      	movs	r1, #126	@ 0x7e
 80048c6:	187b      	adds	r3, r7, r1
 80048c8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80048ca:	187b      	adds	r3, r7, r1
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d100      	bne.n	80048d4 <HAL_UART_IRQHandler+0x324>
 80048d2:	e185      	b.n	8004be0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	225c      	movs	r2, #92	@ 0x5c
 80048d8:	5a9b      	ldrh	r3, [r3, r2]
 80048da:	187a      	adds	r2, r7, r1
 80048dc:	8812      	ldrh	r2, [r2, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d300      	bcc.n	80048e4 <HAL_UART_IRQHandler+0x334>
 80048e2:	e17d      	b.n	8004be0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	187a      	adds	r2, r7, r1
 80048e8:	215e      	movs	r1, #94	@ 0x5e
 80048ea:	8812      	ldrh	r2, [r2, #0]
 80048ec:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2280      	movs	r2, #128	@ 0x80
 80048f2:	589b      	ldr	r3, [r3, r2]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2220      	movs	r2, #32
 80048fa:	4013      	ands	r3, r2
 80048fc:	d170      	bne.n	80049e0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004902:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004906:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004908:	2301      	movs	r3, #1
 800490a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490e:	f383 8810 	msr	PRIMASK, r3
}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	49b4      	ldr	r1, [pc, #720]	@ (8004bf0 <HAL_UART_IRQHandler+0x640>)
 8004920:	400a      	ands	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004926:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492a:	f383 8810 	msr	PRIMASK, r3
}
 800492e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004930:	f3ef 8310 	mrs	r3, PRIMASK
 8004934:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004938:	677b      	str	r3, [r7, #116]	@ 0x74
 800493a:	2301      	movs	r3, #1
 800493c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004940:	f383 8810 	msr	PRIMASK, r3
}
 8004944:	46c0      	nop			@ (mov r8, r8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2101      	movs	r1, #1
 8004952:	438a      	bics	r2, r1
 8004954:	609a      	str	r2, [r3, #8]
 8004956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004958:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800495c:	f383 8810 	msr	PRIMASK, r3
}
 8004960:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004962:	f3ef 8310 	mrs	r3, PRIMASK
 8004966:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496a:	673b      	str	r3, [r7, #112]	@ 0x70
 800496c:	2301      	movs	r3, #1
 800496e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004972:	f383 8810 	msr	PRIMASK, r3
}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2140      	movs	r1, #64	@ 0x40
 8004984:	438a      	bics	r2, r1
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800498a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800498e:	f383 8810 	msr	PRIMASK, r3
}
 8004992:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	228c      	movs	r2, #140	@ 0x8c
 8004998:	2120      	movs	r1, #32
 800499a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a2:	f3ef 8310 	mrs	r3, PRIMASK
 80049a6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80049a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049ac:	2301      	movs	r3, #1
 80049ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049b2:	f383 8810 	msr	PRIMASK, r3
}
 80049b6:	46c0      	nop			@ (mov r8, r8)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2110      	movs	r1, #16
 80049c4:	438a      	bics	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ce:	f383 8810 	msr	PRIMASK, r3
}
 80049d2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2280      	movs	r2, #128	@ 0x80
 80049d8:	589b      	ldr	r3, [r3, r2]
 80049da:	0018      	movs	r0, r3
 80049dc:	f7fd fda2 	bl	8002524 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	225c      	movs	r2, #92	@ 0x5c
 80049ea:	5a9a      	ldrh	r2, [r3, r2]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	215e      	movs	r1, #94	@ 0x5e
 80049f0:	5a5b      	ldrh	r3, [r3, r1]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	0011      	movs	r1, r2
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 f905 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a02:	e0ed      	b.n	8004be0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	225c      	movs	r2, #92	@ 0x5c
 8004a08:	5a99      	ldrh	r1, [r3, r2]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	225e      	movs	r2, #94	@ 0x5e
 8004a0e:	5a9b      	ldrh	r3, [r3, r2]
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	208e      	movs	r0, #142	@ 0x8e
 8004a14:	183b      	adds	r3, r7, r0
 8004a16:	1a8a      	subs	r2, r1, r2
 8004a18:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	225e      	movs	r2, #94	@ 0x5e
 8004a1e:	5a9b      	ldrh	r3, [r3, r2]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d100      	bne.n	8004a28 <HAL_UART_IRQHandler+0x478>
 8004a26:	e0dd      	b.n	8004be4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004a28:	183b      	adds	r3, r7, r0
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d100      	bne.n	8004a32 <HAL_UART_IRQHandler+0x482>
 8004a30:	e0d8      	b.n	8004be4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a32:	f3ef 8310 	mrs	r3, PRIMASK
 8004a36:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a38:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a3a:	2488      	movs	r4, #136	@ 0x88
 8004a3c:	193a      	adds	r2, r7, r4
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	2301      	movs	r3, #1
 8004a42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f383 8810 	msr	PRIMASK, r3
}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4967      	ldr	r1, [pc, #412]	@ (8004bf4 <HAL_UART_IRQHandler+0x644>)
 8004a58:	400a      	ands	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	193b      	adds	r3, r7, r4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f383 8810 	msr	PRIMASK, r3
}
 8004a68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a70:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a72:	2484      	movs	r4, #132	@ 0x84
 8004a74:	193a      	adds	r2, r7, r4
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	2301      	movs	r3, #1
 8004a7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f383 8810 	msr	PRIMASK, r3
}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	495a      	ldr	r1, [pc, #360]	@ (8004bf8 <HAL_UART_IRQHandler+0x648>)
 8004a90:	400a      	ands	r2, r1
 8004a92:	609a      	str	r2, [r3, #8]
 8004a94:	193b      	adds	r3, r7, r4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	f383 8810 	msr	PRIMASK, r3
}
 8004aa0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	228c      	movs	r2, #140	@ 0x8c
 8004aa6:	2120      	movs	r1, #32
 8004aa8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abe:	2480      	movs	r4, #128	@ 0x80
 8004ac0:	193a      	adds	r2, r7, r4
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aca:	f383 8810 	msr	PRIMASK, r3
}
 8004ace:	46c0      	nop			@ (mov r8, r8)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2110      	movs	r1, #16
 8004adc:	438a      	bics	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	193b      	adds	r3, r7, r4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae8:	f383 8810 	msr	PRIMASK, r3
}
 8004aec:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004af4:	183b      	adds	r3, r7, r0
 8004af6:	881a      	ldrh	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	0011      	movs	r1, r2
 8004afc:	0018      	movs	r0, r3
 8004afe:	f000 f885 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b02:	e06f      	b.n	8004be4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b04:	23a4      	movs	r3, #164	@ 0xa4
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	2380      	movs	r3, #128	@ 0x80
 8004b0c:	035b      	lsls	r3, r3, #13
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d010      	beq.n	8004b34 <HAL_UART_IRQHandler+0x584>
 8004b12:	239c      	movs	r3, #156	@ 0x9c
 8004b14:	18fb      	adds	r3, r7, r3
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	2380      	movs	r3, #128	@ 0x80
 8004b1a:	03db      	lsls	r3, r3, #15
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d009      	beq.n	8004b34 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2280      	movs	r2, #128	@ 0x80
 8004b26:	0352      	lsls	r2, r2, #13
 8004b28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f001 fb9d 	bl	800626c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b32:	e05a      	b.n	8004bea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b34:	23a4      	movs	r3, #164	@ 0xa4
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2280      	movs	r2, #128	@ 0x80
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d016      	beq.n	8004b6e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b40:	23a0      	movs	r3, #160	@ 0xa0
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2280      	movs	r2, #128	@ 0x80
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d106      	bne.n	8004b5a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b4c:	239c      	movs	r3, #156	@ 0x9c
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	2380      	movs	r3, #128	@ 0x80
 8004b54:	041b      	lsls	r3, r3, #16
 8004b56:	4013      	ands	r3, r2
 8004b58:	d009      	beq.n	8004b6e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d042      	beq.n	8004be8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	0010      	movs	r0, r2
 8004b6a:	4798      	blx	r3
    }
    return;
 8004b6c:	e03c      	b.n	8004be8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b6e:	23a4      	movs	r3, #164	@ 0xa4
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2240      	movs	r2, #64	@ 0x40
 8004b76:	4013      	ands	r3, r2
 8004b78:	d00a      	beq.n	8004b90 <HAL_UART_IRQHandler+0x5e0>
 8004b7a:	23a0      	movs	r3, #160	@ 0xa0
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2240      	movs	r2, #64	@ 0x40
 8004b82:	4013      	ands	r3, r2
 8004b84:	d004      	beq.n	8004b90 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f000 fe32 	bl	80057f2 <UART_EndTransmit_IT>
    return;
 8004b8e:	e02c      	b.n	8004bea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004b90:	23a4      	movs	r3, #164	@ 0xa4
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	2380      	movs	r3, #128	@ 0x80
 8004b98:	041b      	lsls	r3, r3, #16
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d00b      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x606>
 8004b9e:	23a0      	movs	r3, #160	@ 0xa0
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	2380      	movs	r3, #128	@ 0x80
 8004ba6:	05db      	lsls	r3, r3, #23
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f001 fb6c 	bl	800628c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bb4:	e019      	b.n	8004bea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004bb6:	23a4      	movs	r3, #164	@ 0xa4
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	2380      	movs	r3, #128	@ 0x80
 8004bbe:	045b      	lsls	r3, r3, #17
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d012      	beq.n	8004bea <HAL_UART_IRQHandler+0x63a>
 8004bc4:	23a0      	movs	r3, #160	@ 0xa0
 8004bc6:	18fb      	adds	r3, r7, r3
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	da0d      	bge.n	8004bea <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f001 fb53 	bl	800627c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bd6:	e008      	b.n	8004bea <HAL_UART_IRQHandler+0x63a>
      return;
 8004bd8:	46c0      	nop			@ (mov r8, r8)
 8004bda:	e006      	b.n	8004bea <HAL_UART_IRQHandler+0x63a>
    return;
 8004bdc:	46c0      	nop			@ (mov r8, r8)
 8004bde:	e004      	b.n	8004bea <HAL_UART_IRQHandler+0x63a>
      return;
 8004be0:	46c0      	nop			@ (mov r8, r8)
 8004be2:	e002      	b.n	8004bea <HAL_UART_IRQHandler+0x63a>
      return;
 8004be4:	46c0      	nop			@ (mov r8, r8)
 8004be6:	e000      	b.n	8004bea <HAL_UART_IRQHandler+0x63a>
    return;
 8004be8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b02a      	add	sp, #168	@ 0xa8
 8004bee:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf0:	fffffeff 	.word	0xfffffeff
 8004bf4:	fffffedf 	.word	0xfffffedf
 8004bf8:	effffffe 	.word	0xeffffffe

08004bfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c04:	46c0      	nop			@ (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b002      	add	sp, #8
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	000a      	movs	r2, r1
 8004c16:	1cbb      	adds	r3, r7, #2
 8004c18:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c24:	b5b0      	push	{r4, r5, r7, lr}
 8004c26:	b090      	sub	sp, #64	@ 0x40
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c2c:	231a      	movs	r3, #26
 8004c2e:	2220      	movs	r2, #32
 8004c30:	189b      	adds	r3, r3, r2
 8004c32:	19db      	adds	r3, r3, r7
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	431a      	orrs	r2, r3
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4ac4      	ldr	r2, [pc, #784]	@ (8004f68 <UART_SetConfig+0x344>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c62:	430b      	orrs	r3, r1
 8004c64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4abf      	ldr	r2, [pc, #764]	@ (8004f6c <UART_SetConfig+0x348>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	0018      	movs	r0, r3
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	68d9      	ldr	r1, [r3, #12]
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4ab9      	ldr	r2, [pc, #740]	@ (8004f70 <UART_SetConfig+0x34c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c96:	4313      	orrs	r3, r2
 8004c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4ab4      	ldr	r2, [pc, #720]	@ (8004f74 <UART_SetConfig+0x350>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	220f      	movs	r2, #15
 8004cb8:	4393      	bics	r3, r2
 8004cba:	0018      	movs	r0, r3
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4aaa      	ldr	r2, [pc, #680]	@ (8004f78 <UART_SetConfig+0x354>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d131      	bne.n	8004d38 <UART_SetConfig+0x114>
 8004cd4:	4ba9      	ldr	r3, [pc, #676]	@ (8004f7c <UART_SetConfig+0x358>)
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd8:	2203      	movs	r2, #3
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d01d      	beq.n	8004d1c <UART_SetConfig+0xf8>
 8004ce0:	d823      	bhi.n	8004d2a <UART_SetConfig+0x106>
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d00c      	beq.n	8004d00 <UART_SetConfig+0xdc>
 8004ce6:	d820      	bhi.n	8004d2a <UART_SetConfig+0x106>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <UART_SetConfig+0xce>
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d00e      	beq.n	8004d0e <UART_SetConfig+0xea>
 8004cf0:	e01b      	b.n	8004d2a <UART_SetConfig+0x106>
 8004cf2:	231b      	movs	r3, #27
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	189b      	adds	r3, r3, r2
 8004cf8:	19db      	adds	r3, r3, r7
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	e071      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004d00:	231b      	movs	r3, #27
 8004d02:	2220      	movs	r2, #32
 8004d04:	189b      	adds	r3, r3, r2
 8004d06:	19db      	adds	r3, r3, r7
 8004d08:	2202      	movs	r2, #2
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e06a      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004d0e:	231b      	movs	r3, #27
 8004d10:	2220      	movs	r2, #32
 8004d12:	189b      	adds	r3, r3, r2
 8004d14:	19db      	adds	r3, r3, r7
 8004d16:	2204      	movs	r2, #4
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e063      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004d1c:	231b      	movs	r3, #27
 8004d1e:	2220      	movs	r2, #32
 8004d20:	189b      	adds	r3, r3, r2
 8004d22:	19db      	adds	r3, r3, r7
 8004d24:	2208      	movs	r2, #8
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	e05c      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004d2a:	231b      	movs	r3, #27
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	19db      	adds	r3, r3, r7
 8004d32:	2210      	movs	r2, #16
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e055      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a90      	ldr	r2, [pc, #576]	@ (8004f80 <UART_SetConfig+0x35c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d106      	bne.n	8004d50 <UART_SetConfig+0x12c>
 8004d42:	231b      	movs	r3, #27
 8004d44:	2220      	movs	r2, #32
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	19db      	adds	r3, r3, r7
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e049      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a86      	ldr	r2, [pc, #536]	@ (8004f70 <UART_SetConfig+0x34c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d13e      	bne.n	8004dd8 <UART_SetConfig+0x1b4>
 8004d5a:	4b88      	ldr	r3, [pc, #544]	@ (8004f7c <UART_SetConfig+0x358>)
 8004d5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d5e:	23c0      	movs	r3, #192	@ 0xc0
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	4013      	ands	r3, r2
 8004d64:	22c0      	movs	r2, #192	@ 0xc0
 8004d66:	0112      	lsls	r2, r2, #4
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d027      	beq.n	8004dbc <UART_SetConfig+0x198>
 8004d6c:	22c0      	movs	r2, #192	@ 0xc0
 8004d6e:	0112      	lsls	r2, r2, #4
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d82a      	bhi.n	8004dca <UART_SetConfig+0x1a6>
 8004d74:	2280      	movs	r2, #128	@ 0x80
 8004d76:	0112      	lsls	r2, r2, #4
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d011      	beq.n	8004da0 <UART_SetConfig+0x17c>
 8004d7c:	2280      	movs	r2, #128	@ 0x80
 8004d7e:	0112      	lsls	r2, r2, #4
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d822      	bhi.n	8004dca <UART_SetConfig+0x1a6>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <UART_SetConfig+0x16e>
 8004d88:	2280      	movs	r2, #128	@ 0x80
 8004d8a:	00d2      	lsls	r2, r2, #3
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <UART_SetConfig+0x18a>
 8004d90:	e01b      	b.n	8004dca <UART_SetConfig+0x1a6>
 8004d92:	231b      	movs	r3, #27
 8004d94:	2220      	movs	r2, #32
 8004d96:	189b      	adds	r3, r3, r2
 8004d98:	19db      	adds	r3, r3, r7
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e021      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004da0:	231b      	movs	r3, #27
 8004da2:	2220      	movs	r2, #32
 8004da4:	189b      	adds	r3, r3, r2
 8004da6:	19db      	adds	r3, r3, r7
 8004da8:	2202      	movs	r2, #2
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	e01a      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004dae:	231b      	movs	r3, #27
 8004db0:	2220      	movs	r2, #32
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	19db      	adds	r3, r3, r7
 8004db6:	2204      	movs	r2, #4
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e013      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004dbc:	231b      	movs	r3, #27
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	189b      	adds	r3, r3, r2
 8004dc2:	19db      	adds	r3, r3, r7
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	e00c      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004dca:	231b      	movs	r3, #27
 8004dcc:	2220      	movs	r2, #32
 8004dce:	189b      	adds	r3, r3, r2
 8004dd0:	19db      	adds	r3, r3, r7
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e005      	b.n	8004de4 <UART_SetConfig+0x1c0>
 8004dd8:	231b      	movs	r3, #27
 8004dda:	2220      	movs	r2, #32
 8004ddc:	189b      	adds	r3, r3, r2
 8004dde:	19db      	adds	r3, r3, r7
 8004de0:	2210      	movs	r2, #16
 8004de2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a61      	ldr	r2, [pc, #388]	@ (8004f70 <UART_SetConfig+0x34c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d000      	beq.n	8004df0 <UART_SetConfig+0x1cc>
 8004dee:	e092      	b.n	8004f16 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004df0:	231b      	movs	r3, #27
 8004df2:	2220      	movs	r2, #32
 8004df4:	189b      	adds	r3, r3, r2
 8004df6:	19db      	adds	r3, r3, r7
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d015      	beq.n	8004e2a <UART_SetConfig+0x206>
 8004dfe:	dc18      	bgt.n	8004e32 <UART_SetConfig+0x20e>
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d00d      	beq.n	8004e20 <UART_SetConfig+0x1fc>
 8004e04:	dc15      	bgt.n	8004e32 <UART_SetConfig+0x20e>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <UART_SetConfig+0x1ec>
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d005      	beq.n	8004e1a <UART_SetConfig+0x1f6>
 8004e0e:	e010      	b.n	8004e32 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e10:	f7fe fab2 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 8004e14:	0003      	movs	r3, r0
 8004e16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e18:	e014      	b.n	8004e44 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8004f84 <UART_SetConfig+0x360>)
 8004e1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e1e:	e011      	b.n	8004e44 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e20:	f7fe fa1e 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 8004e24:	0003      	movs	r3, r0
 8004e26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e28:	e00c      	b.n	8004e44 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e2a:	2380      	movs	r3, #128	@ 0x80
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e30:	e008      	b.n	8004e44 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004e36:	231a      	movs	r3, #26
 8004e38:	2220      	movs	r2, #32
 8004e3a:	189b      	adds	r3, r3, r2
 8004e3c:	19db      	adds	r3, r3, r7
 8004e3e:	2201      	movs	r2, #1
 8004e40:	701a      	strb	r2, [r3, #0]
        break;
 8004e42:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d100      	bne.n	8004e4c <UART_SetConfig+0x228>
 8004e4a:	e147      	b.n	80050dc <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e50:	4b4d      	ldr	r3, [pc, #308]	@ (8004f88 <UART_SetConfig+0x364>)
 8004e52:	0052      	lsls	r2, r2, #1
 8004e54:	5ad3      	ldrh	r3, [r2, r3]
 8004e56:	0019      	movs	r1, r3
 8004e58:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004e5a:	f7fb f953 	bl	8000104 <__udivsi3>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	0013      	movs	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	189b      	adds	r3, r3, r2
 8004e6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d305      	bcc.n	8004e7e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d906      	bls.n	8004e8c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004e7e:	231a      	movs	r3, #26
 8004e80:	2220      	movs	r2, #32
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	19db      	adds	r3, r3, r7
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	e127      	b.n	80050dc <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e98:	4b3b      	ldr	r3, [pc, #236]	@ (8004f88 <UART_SetConfig+0x364>)
 8004e9a:	0052      	lsls	r2, r2, #1
 8004e9c:	5ad3      	ldrh	r3, [r2, r3]
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	69b8      	ldr	r0, [r7, #24]
 8004eaa:	69f9      	ldr	r1, [r7, #28]
 8004eac:	f7fb f9b6 	bl	800021c <__aeabi_uldivmod>
 8004eb0:	0002      	movs	r2, r0
 8004eb2:	000b      	movs	r3, r1
 8004eb4:	0e11      	lsrs	r1, r2, #24
 8004eb6:	021d      	lsls	r5, r3, #8
 8004eb8:	430d      	orrs	r5, r1
 8004eba:	0214      	lsls	r4, r2, #8
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	60bb      	str	r3, [r7, #8]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68b8      	ldr	r0, [r7, #8]
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	1900      	adds	r0, r0, r4
 8004ece:	4169      	adcs	r1, r5
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f7fb f99d 	bl	800021c <__aeabi_uldivmod>
 8004ee2:	0002      	movs	r2, r0
 8004ee4:	000b      	movs	r3, r1
 8004ee6:	0013      	movs	r3, r2
 8004ee8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eec:	23c0      	movs	r3, #192	@ 0xc0
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d309      	bcc.n	8004f08 <UART_SetConfig+0x2e4>
 8004ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ef6:	2380      	movs	r3, #128	@ 0x80
 8004ef8:	035b      	lsls	r3, r3, #13
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d204      	bcs.n	8004f08 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	e0e9      	b.n	80050dc <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004f08:	231a      	movs	r3, #26
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	189b      	adds	r3, r3, r2
 8004f0e:	19db      	adds	r3, r3, r7
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	e0e2      	b.n	80050dc <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	69da      	ldr	r2, [r3, #28]
 8004f1a:	2380      	movs	r3, #128	@ 0x80
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d000      	beq.n	8004f24 <UART_SetConfig+0x300>
 8004f22:	e083      	b.n	800502c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004f24:	231b      	movs	r3, #27
 8004f26:	2220      	movs	r2, #32
 8004f28:	189b      	adds	r3, r3, r2
 8004f2a:	19db      	adds	r3, r3, r7
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d015      	beq.n	8004f5e <UART_SetConfig+0x33a>
 8004f32:	dc2b      	bgt.n	8004f8c <UART_SetConfig+0x368>
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d00d      	beq.n	8004f54 <UART_SetConfig+0x330>
 8004f38:	dc28      	bgt.n	8004f8c <UART_SetConfig+0x368>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <UART_SetConfig+0x320>
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d005      	beq.n	8004f4e <UART_SetConfig+0x32a>
 8004f42:	e023      	b.n	8004f8c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f44:	f7fe fa18 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f4c:	e027      	b.n	8004f9e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <UART_SetConfig+0x360>)
 8004f50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f52:	e024      	b.n	8004f9e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f54:	f7fe f984 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f5c:	e01f      	b.n	8004f9e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5e:	2380      	movs	r3, #128	@ 0x80
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f64:	e01b      	b.n	8004f9e <UART_SetConfig+0x37a>
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	cfff69f3 	.word	0xcfff69f3
 8004f6c:	ffffcfff 	.word	0xffffcfff
 8004f70:	40008000 	.word	0x40008000
 8004f74:	11fff4ff 	.word	0x11fff4ff
 8004f78:	40013800 	.word	0x40013800
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40004400 	.word	0x40004400
 8004f84:	00f42400 	.word	0x00f42400
 8004f88:	080069bc 	.word	0x080069bc
      default:
        pclk = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004f90:	231a      	movs	r3, #26
 8004f92:	2220      	movs	r2, #32
 8004f94:	189b      	adds	r3, r3, r2
 8004f96:	19db      	adds	r3, r3, r7
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
        break;
 8004f9c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d100      	bne.n	8004fa6 <UART_SetConfig+0x382>
 8004fa4:	e09a      	b.n	80050dc <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004faa:	4b58      	ldr	r3, [pc, #352]	@ (800510c <UART_SetConfig+0x4e8>)
 8004fac:	0052      	lsls	r2, r2, #1
 8004fae:	5ad3      	ldrh	r3, [r2, r3]
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004fb4:	f7fb f8a6 	bl	8000104 <__udivsi3>
 8004fb8:	0003      	movs	r3, r0
 8004fba:	005a      	lsls	r2, r3, #1
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	18d2      	adds	r2, r2, r3
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	0019      	movs	r1, r3
 8004fca:	0010      	movs	r0, r2
 8004fcc:	f7fb f89a 	bl	8000104 <__udivsi3>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	2b0f      	cmp	r3, #15
 8004fd8:	d921      	bls.n	800501e <UART_SetConfig+0x3fa>
 8004fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fdc:	2380      	movs	r3, #128	@ 0x80
 8004fde:	025b      	lsls	r3, r3, #9
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d21c      	bcs.n	800501e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	200e      	movs	r0, #14
 8004fea:	2420      	movs	r4, #32
 8004fec:	1903      	adds	r3, r0, r4
 8004fee:	19db      	adds	r3, r3, r7
 8004ff0:	210f      	movs	r1, #15
 8004ff2:	438a      	bics	r2, r1
 8004ff4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2207      	movs	r2, #7
 8004ffe:	4013      	ands	r3, r2
 8005000:	b299      	uxth	r1, r3
 8005002:	1903      	adds	r3, r0, r4
 8005004:	19db      	adds	r3, r3, r7
 8005006:	1902      	adds	r2, r0, r4
 8005008:	19d2      	adds	r2, r2, r7
 800500a:	8812      	ldrh	r2, [r2, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	1902      	adds	r2, r0, r4
 8005016:	19d2      	adds	r2, r2, r7
 8005018:	8812      	ldrh	r2, [r2, #0]
 800501a:	60da      	str	r2, [r3, #12]
 800501c:	e05e      	b.n	80050dc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800501e:	231a      	movs	r3, #26
 8005020:	2220      	movs	r2, #32
 8005022:	189b      	adds	r3, r3, r2
 8005024:	19db      	adds	r3, r3, r7
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	e057      	b.n	80050dc <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800502c:	231b      	movs	r3, #27
 800502e:	2220      	movs	r2, #32
 8005030:	189b      	adds	r3, r3, r2
 8005032:	19db      	adds	r3, r3, r7
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b08      	cmp	r3, #8
 8005038:	d015      	beq.n	8005066 <UART_SetConfig+0x442>
 800503a:	dc18      	bgt.n	800506e <UART_SetConfig+0x44a>
 800503c:	2b04      	cmp	r3, #4
 800503e:	d00d      	beq.n	800505c <UART_SetConfig+0x438>
 8005040:	dc15      	bgt.n	800506e <UART_SetConfig+0x44a>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <UART_SetConfig+0x428>
 8005046:	2b02      	cmp	r3, #2
 8005048:	d005      	beq.n	8005056 <UART_SetConfig+0x432>
 800504a:	e010      	b.n	800506e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800504c:	f7fe f994 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 8005050:	0003      	movs	r3, r0
 8005052:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005054:	e014      	b.n	8005080 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005056:	4b2e      	ldr	r3, [pc, #184]	@ (8005110 <UART_SetConfig+0x4ec>)
 8005058:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800505a:	e011      	b.n	8005080 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505c:	f7fe f900 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 8005060:	0003      	movs	r3, r0
 8005062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005064:	e00c      	b.n	8005080 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005066:	2380      	movs	r3, #128	@ 0x80
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800506c:	e008      	b.n	8005080 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005072:	231a      	movs	r3, #26
 8005074:	2220      	movs	r2, #32
 8005076:	189b      	adds	r3, r3, r2
 8005078:	19db      	adds	r3, r3, r7
 800507a:	2201      	movs	r2, #1
 800507c:	701a      	strb	r2, [r3, #0]
        break;
 800507e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005082:	2b00      	cmp	r3, #0
 8005084:	d02a      	beq.n	80050dc <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800508a:	4b20      	ldr	r3, [pc, #128]	@ (800510c <UART_SetConfig+0x4e8>)
 800508c:	0052      	lsls	r2, r2, #1
 800508e:	5ad3      	ldrh	r3, [r2, r3]
 8005090:	0019      	movs	r1, r3
 8005092:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005094:	f7fb f836 	bl	8000104 <__udivsi3>
 8005098:	0003      	movs	r3, r0
 800509a:	001a      	movs	r2, r3
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	18d2      	adds	r2, r2, r3
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	0019      	movs	r1, r3
 80050aa:	0010      	movs	r0, r2
 80050ac:	f7fb f82a 	bl	8000104 <__udivsi3>
 80050b0:	0003      	movs	r3, r0
 80050b2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	2b0f      	cmp	r3, #15
 80050b8:	d90a      	bls.n	80050d0 <UART_SetConfig+0x4ac>
 80050ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	025b      	lsls	r3, r3, #9
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d205      	bcs.n	80050d0 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60da      	str	r2, [r3, #12]
 80050ce:	e005      	b.n	80050dc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80050d0:	231a      	movs	r3, #26
 80050d2:	2220      	movs	r2, #32
 80050d4:	189b      	adds	r3, r3, r2
 80050d6:	19db      	adds	r3, r3, r7
 80050d8:	2201      	movs	r2, #1
 80050da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	226a      	movs	r2, #106	@ 0x6a
 80050e0:	2101      	movs	r1, #1
 80050e2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	2268      	movs	r2, #104	@ 0x68
 80050e8:	2101      	movs	r1, #1
 80050ea:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	2200      	movs	r2, #0
 80050f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	2200      	movs	r2, #0
 80050f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80050f8:	231a      	movs	r3, #26
 80050fa:	2220      	movs	r2, #32
 80050fc:	189b      	adds	r3, r3, r2
 80050fe:	19db      	adds	r3, r3, r7
 8005100:	781b      	ldrb	r3, [r3, #0]
}
 8005102:	0018      	movs	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	b010      	add	sp, #64	@ 0x40
 8005108:	bdb0      	pop	{r4, r5, r7, pc}
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	080069bc 	.word	0x080069bc
 8005110:	00f42400 	.word	0x00f42400

08005114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	2208      	movs	r2, #8
 8005122:	4013      	ands	r3, r2
 8005124:	d00b      	beq.n	800513e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	4a4a      	ldr	r2, [pc, #296]	@ (8005258 <UART_AdvFeatureConfig+0x144>)
 800512e:	4013      	ands	r3, r2
 8005130:	0019      	movs	r1, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	2201      	movs	r2, #1
 8005144:	4013      	ands	r3, r2
 8005146:	d00b      	beq.n	8005160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4a43      	ldr	r2, [pc, #268]	@ (800525c <UART_AdvFeatureConfig+0x148>)
 8005150:	4013      	ands	r3, r2
 8005152:	0019      	movs	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	2202      	movs	r2, #2
 8005166:	4013      	ands	r3, r2
 8005168:	d00b      	beq.n	8005182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a3b      	ldr	r2, [pc, #236]	@ (8005260 <UART_AdvFeatureConfig+0x14c>)
 8005172:	4013      	ands	r3, r2
 8005174:	0019      	movs	r1, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	2204      	movs	r2, #4
 8005188:	4013      	ands	r3, r2
 800518a:	d00b      	beq.n	80051a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4a34      	ldr	r2, [pc, #208]	@ (8005264 <UART_AdvFeatureConfig+0x150>)
 8005194:	4013      	ands	r3, r2
 8005196:	0019      	movs	r1, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	2210      	movs	r2, #16
 80051aa:	4013      	ands	r3, r2
 80051ac:	d00b      	beq.n	80051c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005268 <UART_AdvFeatureConfig+0x154>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	0019      	movs	r1, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ca:	2220      	movs	r2, #32
 80051cc:	4013      	ands	r3, r2
 80051ce:	d00b      	beq.n	80051e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	4a25      	ldr	r2, [pc, #148]	@ (800526c <UART_AdvFeatureConfig+0x158>)
 80051d8:	4013      	ands	r3, r2
 80051da:	0019      	movs	r1, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ec:	2240      	movs	r2, #64	@ 0x40
 80051ee:	4013      	ands	r3, r2
 80051f0:	d01d      	beq.n	800522e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005270 <UART_AdvFeatureConfig+0x15c>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	0019      	movs	r1, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800520e:	2380      	movs	r3, #128	@ 0x80
 8005210:	035b      	lsls	r3, r3, #13
 8005212:	429a      	cmp	r2, r3
 8005214:	d10b      	bne.n	800522e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4a15      	ldr	r2, [pc, #84]	@ (8005274 <UART_AdvFeatureConfig+0x160>)
 800521e:	4013      	ands	r3, r2
 8005220:	0019      	movs	r1, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005232:	2280      	movs	r2, #128	@ 0x80
 8005234:	4013      	ands	r3, r2
 8005236:	d00b      	beq.n	8005250 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4a0e      	ldr	r2, [pc, #56]	@ (8005278 <UART_AdvFeatureConfig+0x164>)
 8005240:	4013      	ands	r3, r2
 8005242:	0019      	movs	r1, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	605a      	str	r2, [r3, #4]
  }
}
 8005250:	46c0      	nop			@ (mov r8, r8)
 8005252:	46bd      	mov	sp, r7
 8005254:	b002      	add	sp, #8
 8005256:	bd80      	pop	{r7, pc}
 8005258:	ffff7fff 	.word	0xffff7fff
 800525c:	fffdffff 	.word	0xfffdffff
 8005260:	fffeffff 	.word	0xfffeffff
 8005264:	fffbffff 	.word	0xfffbffff
 8005268:	ffffefff 	.word	0xffffefff
 800526c:	ffffdfff 	.word	0xffffdfff
 8005270:	ffefffff 	.word	0xffefffff
 8005274:	ff9fffff 	.word	0xff9fffff
 8005278:	fff7ffff 	.word	0xfff7ffff

0800527c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b092      	sub	sp, #72	@ 0x48
 8005280:	af02      	add	r7, sp, #8
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2290      	movs	r2, #144	@ 0x90
 8005288:	2100      	movs	r1, #0
 800528a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800528c:	f7fc fbc0 	bl	8001a10 <HAL_GetTick>
 8005290:	0003      	movs	r3, r0
 8005292:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2208      	movs	r2, #8
 800529c:	4013      	ands	r3, r2
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d12d      	bne.n	80052fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a4:	2280      	movs	r2, #128	@ 0x80
 80052a6:	0391      	lsls	r1, r2, #14
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4a47      	ldr	r2, [pc, #284]	@ (80053c8 <UART_CheckIdleState+0x14c>)
 80052ac:	9200      	str	r2, [sp, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f000 f88e 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 80052b4:	1e03      	subs	r3, r0, #0
 80052b6:	d022      	beq.n	80052fe <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b8:	f3ef 8310 	mrs	r3, PRIMASK
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80052c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052c2:	2301      	movs	r3, #1
 80052c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c8:	f383 8810 	msr	PRIMASK, r3
}
 80052cc:	46c0      	nop			@ (mov r8, r8)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2180      	movs	r1, #128	@ 0x80
 80052da:	438a      	bics	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2288      	movs	r2, #136	@ 0x88
 80052ee:	2120      	movs	r1, #32
 80052f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2284      	movs	r2, #132	@ 0x84
 80052f6:	2100      	movs	r1, #0
 80052f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e060      	b.n	80053c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2204      	movs	r2, #4
 8005306:	4013      	ands	r3, r2
 8005308:	2b04      	cmp	r3, #4
 800530a:	d146      	bne.n	800539a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800530c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800530e:	2280      	movs	r2, #128	@ 0x80
 8005310:	03d1      	lsls	r1, r2, #15
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4a2c      	ldr	r2, [pc, #176]	@ (80053c8 <UART_CheckIdleState+0x14c>)
 8005316:	9200      	str	r2, [sp, #0]
 8005318:	2200      	movs	r2, #0
 800531a:	f000 f859 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 800531e:	1e03      	subs	r3, r0, #0
 8005320:	d03b      	beq.n	800539a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005322:	f3ef 8310 	mrs	r3, PRIMASK
 8005326:	60fb      	str	r3, [r7, #12]
  return(result);
 8005328:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800532a:	637b      	str	r3, [r7, #52]	@ 0x34
 800532c:	2301      	movs	r3, #1
 800532e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f383 8810 	msr	PRIMASK, r3
}
 8005336:	46c0      	nop			@ (mov r8, r8)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4922      	ldr	r1, [pc, #136]	@ (80053cc <UART_CheckIdleState+0x150>)
 8005344:	400a      	ands	r2, r1
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800534a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f383 8810 	msr	PRIMASK, r3
}
 8005352:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005354:	f3ef 8310 	mrs	r3, PRIMASK
 8005358:	61bb      	str	r3, [r7, #24]
  return(result);
 800535a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535c:	633b      	str	r3, [r7, #48]	@ 0x30
 800535e:	2301      	movs	r3, #1
 8005360:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f383 8810 	msr	PRIMASK, r3
}
 8005368:	46c0      	nop			@ (mov r8, r8)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2101      	movs	r1, #1
 8005376:	438a      	bics	r2, r1
 8005378:	609a      	str	r2, [r3, #8]
 800537a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	f383 8810 	msr	PRIMASK, r3
}
 8005384:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	228c      	movs	r2, #140	@ 0x8c
 800538a:	2120      	movs	r1, #32
 800538c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2284      	movs	r2, #132	@ 0x84
 8005392:	2100      	movs	r1, #0
 8005394:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e012      	b.n	80053c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2288      	movs	r2, #136	@ 0x88
 800539e:	2120      	movs	r1, #32
 80053a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	228c      	movs	r2, #140	@ 0x8c
 80053a6:	2120      	movs	r1, #32
 80053a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2284      	movs	r2, #132	@ 0x84
 80053ba:	2100      	movs	r1, #0
 80053bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	0018      	movs	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b010      	add	sp, #64	@ 0x40
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	01ffffff 	.word	0x01ffffff
 80053cc:	fffffedf 	.word	0xfffffedf

080053d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	1dfb      	adds	r3, r7, #7
 80053de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e0:	e051      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	3301      	adds	r3, #1
 80053e6:	d04e      	beq.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e8:	f7fc fb12 	bl	8001a10 <HAL_GetTick>
 80053ec:	0002      	movs	r2, r0
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d302      	bcc.n	80053fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e051      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2204      	movs	r2, #4
 800540a:	4013      	ands	r3, r2
 800540c:	d03b      	beq.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb6>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b80      	cmp	r3, #128	@ 0x80
 8005412:	d038      	beq.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b40      	cmp	r3, #64	@ 0x40
 8005418:	d035      	beq.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	2208      	movs	r2, #8
 8005422:	4013      	ands	r3, r2
 8005424:	2b08      	cmp	r3, #8
 8005426:	d111      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2208      	movs	r2, #8
 800542e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	0018      	movs	r0, r3
 8005434:	f000 f960 	bl	80056f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2290      	movs	r2, #144	@ 0x90
 800543c:	2108      	movs	r1, #8
 800543e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2284      	movs	r2, #132	@ 0x84
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e02c      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69da      	ldr	r2, [r3, #28]
 8005452:	2380      	movs	r3, #128	@ 0x80
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	401a      	ands	r2, r3
 8005458:	2380      	movs	r3, #128	@ 0x80
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	429a      	cmp	r2, r3
 800545e:	d112      	bne.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2280      	movs	r2, #128	@ 0x80
 8005466:	0112      	lsls	r2, r2, #4
 8005468:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	0018      	movs	r0, r3
 800546e:	f000 f943 	bl	80056f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2290      	movs	r2, #144	@ 0x90
 8005476:	2120      	movs	r1, #32
 8005478:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2284      	movs	r2, #132	@ 0x84
 800547e:	2100      	movs	r1, #0
 8005480:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e00f      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	4013      	ands	r3, r2
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	425a      	negs	r2, r3
 8005496:	4153      	adcs	r3, r2
 8005498:	b2db      	uxtb	r3, r3
 800549a:	001a      	movs	r2, r3
 800549c:	1dfb      	adds	r3, r7, #7
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d09e      	beq.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	0018      	movs	r0, r3
 80054a8:	46bd      	mov	sp, r7
 80054aa:	b004      	add	sp, #16
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b098      	sub	sp, #96	@ 0x60
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	1dbb      	adds	r3, r7, #6
 80054bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	1dba      	adds	r2, r7, #6
 80054c8:	215c      	movs	r1, #92	@ 0x5c
 80054ca:	8812      	ldrh	r2, [r2, #0]
 80054cc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1dba      	adds	r2, r7, #6
 80054d2:	215e      	movs	r1, #94	@ 0x5e
 80054d4:	8812      	ldrh	r2, [r2, #0]
 80054d6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	015b      	lsls	r3, r3, #5
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d10d      	bne.n	8005506 <UART_Start_Receive_IT+0x56>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d104      	bne.n	80054fc <UART_Start_Receive_IT+0x4c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2260      	movs	r2, #96	@ 0x60
 80054f6:	497b      	ldr	r1, [pc, #492]	@ (80056e4 <UART_Start_Receive_IT+0x234>)
 80054f8:	5299      	strh	r1, [r3, r2]
 80054fa:	e02e      	b.n	800555a <UART_Start_Receive_IT+0xaa>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2260      	movs	r2, #96	@ 0x60
 8005500:	21ff      	movs	r1, #255	@ 0xff
 8005502:	5299      	strh	r1, [r3, r2]
 8005504:	e029      	b.n	800555a <UART_Start_Receive_IT+0xaa>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10d      	bne.n	800552a <UART_Start_Receive_IT+0x7a>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d104      	bne.n	8005520 <UART_Start_Receive_IT+0x70>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2260      	movs	r2, #96	@ 0x60
 800551a:	21ff      	movs	r1, #255	@ 0xff
 800551c:	5299      	strh	r1, [r3, r2]
 800551e:	e01c      	b.n	800555a <UART_Start_Receive_IT+0xaa>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2260      	movs	r2, #96	@ 0x60
 8005524:	217f      	movs	r1, #127	@ 0x7f
 8005526:	5299      	strh	r1, [r3, r2]
 8005528:	e017      	b.n	800555a <UART_Start_Receive_IT+0xaa>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	2380      	movs	r3, #128	@ 0x80
 8005530:	055b      	lsls	r3, r3, #21
 8005532:	429a      	cmp	r2, r3
 8005534:	d10d      	bne.n	8005552 <UART_Start_Receive_IT+0xa2>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d104      	bne.n	8005548 <UART_Start_Receive_IT+0x98>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2260      	movs	r2, #96	@ 0x60
 8005542:	217f      	movs	r1, #127	@ 0x7f
 8005544:	5299      	strh	r1, [r3, r2]
 8005546:	e008      	b.n	800555a <UART_Start_Receive_IT+0xaa>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2260      	movs	r2, #96	@ 0x60
 800554c:	213f      	movs	r1, #63	@ 0x3f
 800554e:	5299      	strh	r1, [r3, r2]
 8005550:	e003      	b.n	800555a <UART_Start_Receive_IT+0xaa>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2260      	movs	r2, #96	@ 0x60
 8005556:	2100      	movs	r1, #0
 8005558:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2290      	movs	r2, #144	@ 0x90
 800555e:	2100      	movs	r1, #0
 8005560:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	228c      	movs	r2, #140	@ 0x8c
 8005566:	2122      	movs	r1, #34	@ 0x22
 8005568:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800556a:	f3ef 8310 	mrs	r3, PRIMASK
 800556e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8005570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005574:	2301      	movs	r3, #1
 8005576:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800557a:	f383 8810 	msr	PRIMASK, r3
}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2101      	movs	r1, #1
 800558c:	430a      	orrs	r2, r1
 800558e:	609a      	str	r2, [r3, #8]
 8005590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005592:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005596:	f383 8810 	msr	PRIMASK, r3
}
 800559a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80055a0:	2380      	movs	r3, #128	@ 0x80
 80055a2:	059b      	lsls	r3, r3, #22
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d150      	bne.n	800564a <UART_Start_Receive_IT+0x19a>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2268      	movs	r2, #104	@ 0x68
 80055ac:	5a9b      	ldrh	r3, [r3, r2]
 80055ae:	1dba      	adds	r2, r7, #6
 80055b0:	8812      	ldrh	r2, [r2, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d349      	bcc.n	800564a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	2380      	movs	r3, #128	@ 0x80
 80055bc:	015b      	lsls	r3, r3, #5
 80055be:	429a      	cmp	r2, r3
 80055c0:	d107      	bne.n	80055d2 <UART_Start_Receive_IT+0x122>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d103      	bne.n	80055d2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a46      	ldr	r2, [pc, #280]	@ (80056e8 <UART_Start_Receive_IT+0x238>)
 80055ce:	675a      	str	r2, [r3, #116]	@ 0x74
 80055d0:	e002      	b.n	80055d8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a45      	ldr	r2, [pc, #276]	@ (80056ec <UART_Start_Receive_IT+0x23c>)
 80055d6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d019      	beq.n	8005614 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e0:	f3ef 8310 	mrs	r3, PRIMASK
 80055e4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80055e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055ea:	2301      	movs	r3, #1
 80055ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f0:	f383 8810 	msr	PRIMASK, r3
}
 80055f4:	46c0      	nop			@ (mov r8, r8)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2180      	movs	r1, #128	@ 0x80
 8005602:	0049      	lsls	r1, r1, #1
 8005604:	430a      	orrs	r2, r1
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800560a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560e:	f383 8810 	msr	PRIMASK, r3
}
 8005612:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005614:	f3ef 8310 	mrs	r3, PRIMASK
 8005618:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800561c:	657b      	str	r3, [r7, #84]	@ 0x54
 800561e:	2301      	movs	r3, #1
 8005620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005624:	f383 8810 	msr	PRIMASK, r3
}
 8005628:	46c0      	nop			@ (mov r8, r8)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2180      	movs	r1, #128	@ 0x80
 8005636:	0549      	lsls	r1, r1, #21
 8005638:	430a      	orrs	r2, r1
 800563a:	609a      	str	r2, [r3, #8]
 800563c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800563e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005642:	f383 8810 	msr	PRIMASK, r3
}
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	e047      	b.n	80056da <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	2380      	movs	r3, #128	@ 0x80
 8005650:	015b      	lsls	r3, r3, #5
 8005652:	429a      	cmp	r2, r3
 8005654:	d107      	bne.n	8005666 <UART_Start_Receive_IT+0x1b6>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d103      	bne.n	8005666 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a23      	ldr	r2, [pc, #140]	@ (80056f0 <UART_Start_Receive_IT+0x240>)
 8005662:	675a      	str	r2, [r3, #116]	@ 0x74
 8005664:	e002      	b.n	800566c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4a22      	ldr	r2, [pc, #136]	@ (80056f4 <UART_Start_Receive_IT+0x244>)
 800566a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d019      	beq.n	80056a8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005674:	f3ef 8310 	mrs	r3, PRIMASK
 8005678:	61fb      	str	r3, [r7, #28]
  return(result);
 800567a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800567c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800567e:	2301      	movs	r3, #1
 8005680:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	f383 8810 	msr	PRIMASK, r3
}
 8005688:	46c0      	nop			@ (mov r8, r8)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2190      	movs	r1, #144	@ 0x90
 8005696:	0049      	lsls	r1, r1, #1
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800569e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	f383 8810 	msr	PRIMASK, r3
}
 80056a6:	e018      	b.n	80056da <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a8:	f3ef 8310 	mrs	r3, PRIMASK
 80056ac:	613b      	str	r3, [r7, #16]
  return(result);
 80056ae:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80056b2:	2301      	movs	r3, #1
 80056b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f383 8810 	msr	PRIMASK, r3
}
 80056bc:	46c0      	nop			@ (mov r8, r8)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2120      	movs	r1, #32
 80056ca:	430a      	orrs	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	f383 8810 	msr	PRIMASK, r3
}
 80056d8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	0018      	movs	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	b018      	add	sp, #96	@ 0x60
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	000001ff 	.word	0x000001ff
 80056e8:	08005f15 	.word	0x08005f15
 80056ec:	08005bd5 	.word	0x08005bd5
 80056f0:	08005a11 	.word	0x08005a11
 80056f4:	0800584d 	.word	0x0800584d

080056f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08e      	sub	sp, #56	@ 0x38
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005700:	f3ef 8310 	mrs	r3, PRIMASK
 8005704:	617b      	str	r3, [r7, #20]
  return(result);
 8005706:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005708:	637b      	str	r3, [r7, #52]	@ 0x34
 800570a:	2301      	movs	r3, #1
 800570c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	f383 8810 	msr	PRIMASK, r3
}
 8005714:	46c0      	nop			@ (mov r8, r8)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4926      	ldr	r1, [pc, #152]	@ (80057bc <UART_EndRxTransfer+0xc4>)
 8005722:	400a      	ands	r2, r1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f383 8810 	msr	PRIMASK, r3
}
 8005730:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005732:	f3ef 8310 	mrs	r3, PRIMASK
 8005736:	623b      	str	r3, [r7, #32]
  return(result);
 8005738:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800573a:	633b      	str	r3, [r7, #48]	@ 0x30
 800573c:	2301      	movs	r3, #1
 800573e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	f383 8810 	msr	PRIMASK, r3
}
 8005746:	46c0      	nop			@ (mov r8, r8)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	491b      	ldr	r1, [pc, #108]	@ (80057c0 <UART_EndRxTransfer+0xc8>)
 8005754:	400a      	ands	r2, r1
 8005756:	609a      	str	r2, [r3, #8]
 8005758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	f383 8810 	msr	PRIMASK, r3
}
 8005762:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005768:	2b01      	cmp	r3, #1
 800576a:	d118      	bne.n	800579e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800576c:	f3ef 8310 	mrs	r3, PRIMASK
 8005770:	60bb      	str	r3, [r7, #8]
  return(result);
 8005772:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005776:	2301      	movs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f383 8810 	msr	PRIMASK, r3
}
 8005780:	46c0      	nop			@ (mov r8, r8)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2110      	movs	r1, #16
 800578e:	438a      	bics	r2, r1
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	228c      	movs	r2, #140	@ 0x8c
 80057a2:	2120      	movs	r1, #32
 80057a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057b2:	46c0      	nop			@ (mov r8, r8)
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b00e      	add	sp, #56	@ 0x38
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	fffffedf 	.word	0xfffffedf
 80057c0:	effffffe 	.word	0xeffffffe

080057c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	225e      	movs	r2, #94	@ 0x5e
 80057d6:	2100      	movs	r1, #0
 80057d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2256      	movs	r2, #86	@ 0x56
 80057de:	2100      	movs	r1, #0
 80057e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	0018      	movs	r0, r3
 80057e6:	f7ff fa09 	bl	8004bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b004      	add	sp, #16
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b086      	sub	sp, #24
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057fa:	f3ef 8310 	mrs	r3, PRIMASK
 80057fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005800:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	2301      	movs	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f383 8810 	msr	PRIMASK, r3
}
 800580e:	46c0      	nop			@ (mov r8, r8)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2140      	movs	r1, #64	@ 0x40
 800581c:	438a      	bics	r2, r1
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f383 8810 	msr	PRIMASK, r3
}
 800582a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2288      	movs	r2, #136	@ 0x88
 8005830:	2120      	movs	r1, #32
 8005832:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	0018      	movs	r0, r3
 800583e:	f7fa fe17 	bl	8000470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	46bd      	mov	sp, r7
 8005846:	b006      	add	sp, #24
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b094      	sub	sp, #80	@ 0x50
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005854:	204e      	movs	r0, #78	@ 0x4e
 8005856:	183b      	adds	r3, r7, r0
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	2160      	movs	r1, #96	@ 0x60
 800585c:	5a52      	ldrh	r2, [r2, r1]
 800585e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	228c      	movs	r2, #140	@ 0x8c
 8005864:	589b      	ldr	r3, [r3, r2]
 8005866:	2b22      	cmp	r3, #34	@ 0x22
 8005868:	d000      	beq.n	800586c <UART_RxISR_8BIT+0x20>
 800586a:	e0bf      	b.n	80059ec <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005872:	214c      	movs	r1, #76	@ 0x4c
 8005874:	187b      	adds	r3, r7, r1
 8005876:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005878:	187b      	adds	r3, r7, r1
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b2da      	uxtb	r2, r3
 800587e:	183b      	adds	r3, r7, r0
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b2d9      	uxtb	r1, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005888:	400a      	ands	r2, r1
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	225e      	movs	r2, #94	@ 0x5e
 800589c:	5a9b      	ldrh	r3, [r3, r2]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b299      	uxth	r1, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	225e      	movs	r2, #94	@ 0x5e
 80058a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	225e      	movs	r2, #94	@ 0x5e
 80058ae:	5a9b      	ldrh	r3, [r3, r2]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d000      	beq.n	80058b8 <UART_RxISR_8BIT+0x6c>
 80058b6:	e0a1      	b.n	80059fc <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b8:	f3ef 8310 	mrs	r3, PRIMASK
 80058bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058c2:	2301      	movs	r3, #1
 80058c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c8:	f383 8810 	msr	PRIMASK, r3
}
 80058cc:	46c0      	nop			@ (mov r8, r8)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	494a      	ldr	r1, [pc, #296]	@ (8005a04 <UART_RxISR_8BIT+0x1b8>)
 80058da:	400a      	ands	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e4:	f383 8810 	msr	PRIMASK, r3
}
 80058e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ea:	f3ef 8310 	mrs	r3, PRIMASK
 80058ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80058f4:	2301      	movs	r3, #1
 80058f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fa:	f383 8810 	msr	PRIMASK, r3
}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2101      	movs	r1, #1
 800590c:	438a      	bics	r2, r1
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005912:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005916:	f383 8810 	msr	PRIMASK, r3
}
 800591a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	228c      	movs	r2, #140	@ 0x8c
 8005920:	2120      	movs	r1, #32
 8005922:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a34      	ldr	r2, [pc, #208]	@ (8005a08 <UART_RxISR_8BIT+0x1bc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d01f      	beq.n	800597a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	2380      	movs	r3, #128	@ 0x80
 8005942:	041b      	lsls	r3, r3, #16
 8005944:	4013      	ands	r3, r2
 8005946:	d018      	beq.n	800597a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005948:	f3ef 8310 	mrs	r3, PRIMASK
 800594c:	61bb      	str	r3, [r7, #24]
  return(result);
 800594e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005950:	643b      	str	r3, [r7, #64]	@ 0x40
 8005952:	2301      	movs	r3, #1
 8005954:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	46c0      	nop			@ (mov r8, r8)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4928      	ldr	r1, [pc, #160]	@ (8005a0c <UART_RxISR_8BIT+0x1c0>)
 800596a:	400a      	ands	r2, r1
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005970:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	f383 8810 	msr	PRIMASK, r3
}
 8005978:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800597e:	2b01      	cmp	r3, #1
 8005980:	d12f      	bne.n	80059e2 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005988:	f3ef 8310 	mrs	r3, PRIMASK
 800598c:	60fb      	str	r3, [r7, #12]
  return(result);
 800598e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005992:	2301      	movs	r3, #1
 8005994:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f383 8810 	msr	PRIMASK, r3
}
 800599c:	46c0      	nop			@ (mov r8, r8)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2110      	movs	r1, #16
 80059aa:	438a      	bics	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f383 8810 	msr	PRIMASK, r3
}
 80059b8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	2210      	movs	r2, #16
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d103      	bne.n	80059d0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2210      	movs	r2, #16
 80059ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	225c      	movs	r2, #92	@ 0x5c
 80059d4:	5a9a      	ldrh	r2, [r3, r2]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	0011      	movs	r1, r2
 80059da:	0018      	movs	r0, r3
 80059dc:	f7ff f916 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059e0:	e00c      	b.n	80059fc <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	0018      	movs	r0, r3
 80059e6:	f7fa fd2f 	bl	8000448 <HAL_UART_RxCpltCallback>
}
 80059ea:	e007      	b.n	80059fc <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2108      	movs	r1, #8
 80059f8:	430a      	orrs	r2, r1
 80059fa:	619a      	str	r2, [r3, #24]
}
 80059fc:	46c0      	nop			@ (mov r8, r8)
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b014      	add	sp, #80	@ 0x50
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	fffffedf 	.word	0xfffffedf
 8005a08:	40008000 	.word	0x40008000
 8005a0c:	fbffffff 	.word	0xfbffffff

08005a10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b094      	sub	sp, #80	@ 0x50
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a18:	204e      	movs	r0, #78	@ 0x4e
 8005a1a:	183b      	adds	r3, r7, r0
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	2160      	movs	r1, #96	@ 0x60
 8005a20:	5a52      	ldrh	r2, [r2, r1]
 8005a22:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	228c      	movs	r2, #140	@ 0x8c
 8005a28:	589b      	ldr	r3, [r3, r2]
 8005a2a:	2b22      	cmp	r3, #34	@ 0x22
 8005a2c:	d000      	beq.n	8005a30 <UART_RxISR_16BIT+0x20>
 8005a2e:	e0bf      	b.n	8005bb0 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a36:	214c      	movs	r1, #76	@ 0x4c
 8005a38:	187b      	adds	r3, r7, r1
 8005a3a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a40:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a42:	187b      	adds	r3, r7, r1
 8005a44:	183a      	adds	r2, r7, r0
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	8812      	ldrh	r2, [r2, #0]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a56:	1c9a      	adds	r2, r3, #2
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	225e      	movs	r2, #94	@ 0x5e
 8005a60:	5a9b      	ldrh	r3, [r3, r2]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b299      	uxth	r1, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	225e      	movs	r2, #94	@ 0x5e
 8005a6c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	225e      	movs	r2, #94	@ 0x5e
 8005a72:	5a9b      	ldrh	r3, [r3, r2]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d000      	beq.n	8005a7c <UART_RxISR_16BIT+0x6c>
 8005a7a:	e0a1      	b.n	8005bc0 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a80:	623b      	str	r3, [r7, #32]
  return(result);
 8005a82:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a86:	2301      	movs	r3, #1
 8005a88:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	f383 8810 	msr	PRIMASK, r3
}
 8005a90:	46c0      	nop			@ (mov r8, r8)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	494a      	ldr	r1, [pc, #296]	@ (8005bc8 <UART_RxISR_16BIT+0x1b8>)
 8005a9e:	400a      	ands	r2, r1
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa8:	f383 8810 	msr	PRIMASK, r3
}
 8005aac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aae:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ab8:	2301      	movs	r3, #1
 8005aba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	f383 8810 	msr	PRIMASK, r3
}
 8005ac2:	46c0      	nop			@ (mov r8, r8)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2101      	movs	r1, #1
 8005ad0:	438a      	bics	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]
 8005ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ada:	f383 8810 	msr	PRIMASK, r3
}
 8005ade:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	228c      	movs	r2, #140	@ 0x8c
 8005ae4:	2120      	movs	r1, #32
 8005ae6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a34      	ldr	r2, [pc, #208]	@ (8005bcc <UART_RxISR_16BIT+0x1bc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d01f      	beq.n	8005b3e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	2380      	movs	r3, #128	@ 0x80
 8005b06:	041b      	lsls	r3, r3, #16
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d018      	beq.n	8005b3e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b10:	617b      	str	r3, [r7, #20]
  return(result);
 8005b12:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b16:	2301      	movs	r3, #1
 8005b18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f383 8810 	msr	PRIMASK, r3
}
 8005b20:	46c0      	nop			@ (mov r8, r8)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4928      	ldr	r1, [pc, #160]	@ (8005bd0 <UART_RxISR_16BIT+0x1c0>)
 8005b2e:	400a      	ands	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	f383 8810 	msr	PRIMASK, r3
}
 8005b3c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d12f      	bne.n	8005ba6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b50:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b52:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b56:	2301      	movs	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f383 8810 	msr	PRIMASK, r3
}
 8005b60:	46c0      	nop			@ (mov r8, r8)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2110      	movs	r1, #16
 8005b6e:	438a      	bics	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f383 8810 	msr	PRIMASK, r3
}
 8005b7c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	2210      	movs	r2, #16
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d103      	bne.n	8005b94 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2210      	movs	r2, #16
 8005b92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	225c      	movs	r2, #92	@ 0x5c
 8005b98:	5a9a      	ldrh	r2, [r3, r2]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	0011      	movs	r1, r2
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f7ff f834 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ba4:	e00c      	b.n	8005bc0 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f7fa fc4d 	bl	8000448 <HAL_UART_RxCpltCallback>
}
 8005bae:	e007      	b.n	8005bc0 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2108      	movs	r1, #8
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	619a      	str	r2, [r3, #24]
}
 8005bc0:	46c0      	nop			@ (mov r8, r8)
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b014      	add	sp, #80	@ 0x50
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	fffffedf 	.word	0xfffffedf
 8005bcc:	40008000 	.word	0x40008000
 8005bd0:	fbffffff 	.word	0xfbffffff

08005bd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b0a0      	sub	sp, #128	@ 0x80
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005bdc:	237a      	movs	r3, #122	@ 0x7a
 8005bde:	18fb      	adds	r3, r7, r3
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	2160      	movs	r1, #96	@ 0x60
 8005be4:	5a52      	ldrh	r2, [r2, r1]
 8005be6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	228c      	movs	r2, #140	@ 0x8c
 8005c04:	589b      	ldr	r3, [r3, r2]
 8005c06:	2b22      	cmp	r3, #34	@ 0x22
 8005c08:	d000      	beq.n	8005c0c <UART_RxISR_8BIT_FIFOEN+0x38>
 8005c0a:	e16a      	b.n	8005ee2 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005c0c:	236e      	movs	r3, #110	@ 0x6e
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	2168      	movs	r1, #104	@ 0x68
 8005c14:	5a52      	ldrh	r2, [r2, r1]
 8005c16:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c18:	e111      	b.n	8005e3e <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c20:	216c      	movs	r1, #108	@ 0x6c
 8005c22:	187b      	adds	r3, r7, r1
 8005c24:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c26:	187b      	adds	r3, r7, r1
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	237a      	movs	r3, #122	@ 0x7a
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b2d9      	uxtb	r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c38:	400a      	ands	r2, r1
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	225e      	movs	r2, #94	@ 0x5e
 8005c4c:	5a9b      	ldrh	r3, [r3, r2]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b299      	uxth	r1, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	225e      	movs	r2, #94	@ 0x5e
 8005c58:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005c62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c64:	2207      	movs	r2, #7
 8005c66:	4013      	ands	r3, r2
 8005c68:	d049      	beq.n	8005cfe <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d010      	beq.n	8005c94 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005c72:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005c74:	2380      	movs	r3, #128	@ 0x80
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2201      	movs	r2, #1
 8005c82:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2290      	movs	r2, #144	@ 0x90
 8005c88:	589b      	ldr	r3, [r3, r2]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2190      	movs	r1, #144	@ 0x90
 8005c92:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c96:	2202      	movs	r2, #2
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d00f      	beq.n	8005cbc <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005c9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d00b      	beq.n	8005cbc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2290      	movs	r2, #144	@ 0x90
 8005cb0:	589b      	ldr	r3, [r3, r2]
 8005cb2:	2204      	movs	r2, #4
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2190      	movs	r1, #144	@ 0x90
 8005cba:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d00f      	beq.n	8005ce4 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005cc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d00b      	beq.n	8005ce4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2290      	movs	r2, #144	@ 0x90
 8005cd8:	589b      	ldr	r3, [r3, r2]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2190      	movs	r1, #144	@ 0x90
 8005ce2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2290      	movs	r2, #144	@ 0x90
 8005ce8:	589b      	ldr	r3, [r3, r2]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f7fe ff83 	bl	8004bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2290      	movs	r2, #144	@ 0x90
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	225e      	movs	r2, #94	@ 0x5e
 8005d02:	5a9b      	ldrh	r3, [r3, r2]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d000      	beq.n	8005d0c <UART_RxISR_8BIT_FIFOEN+0x138>
 8005d0a:	e098      	b.n	8005e3e <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d10:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d16:	2301      	movs	r3, #1
 8005d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1c:	f383 8810 	msr	PRIMASK, r3
}
 8005d20:	46c0      	nop			@ (mov r8, r8)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4973      	ldr	r1, [pc, #460]	@ (8005efc <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005d2e:	400a      	ands	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d34:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d38:	f383 8810 	msr	PRIMASK, r3
}
 8005d3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d42:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d46:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d48:	2301      	movs	r3, #1
 8005d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d4e:	f383 8810 	msr	PRIMASK, r3
}
 8005d52:	46c0      	nop			@ (mov r8, r8)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4968      	ldr	r1, [pc, #416]	@ (8005f00 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005d60:	400a      	ands	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]
 8005d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d6a:	f383 8810 	msr	PRIMASK, r3
}
 8005d6e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	228c      	movs	r2, #140	@ 0x8c
 8005d74:	2120      	movs	r1, #32
 8005d76:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a5e      	ldr	r2, [pc, #376]	@ (8005f04 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d01f      	beq.n	8005dce <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	2380      	movs	r3, #128	@ 0x80
 8005d96:	041b      	lsls	r3, r3, #16
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d018      	beq.n	8005dce <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005da6:	2301      	movs	r3, #1
 8005da8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	f383 8810 	msr	PRIMASK, r3
}
 8005db0:	46c0      	nop			@ (mov r8, r8)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4952      	ldr	r1, [pc, #328]	@ (8005f08 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8005dbe:	400a      	ands	r2, r1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dc4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	f383 8810 	msr	PRIMASK, r3
}
 8005dcc:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d12f      	bne.n	8005e36 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8005de0:	623b      	str	r3, [r7, #32]
  return(result);
 8005de2:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005de6:	2301      	movs	r3, #1
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	f383 8810 	msr	PRIMASK, r3
}
 8005df0:	46c0      	nop			@ (mov r8, r8)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2110      	movs	r1, #16
 8005dfe:	438a      	bics	r2, r1
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e08:	f383 8810 	msr	PRIMASK, r3
}
 8005e0c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	2210      	movs	r2, #16
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b10      	cmp	r3, #16
 8005e1a:	d103      	bne.n	8005e24 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2210      	movs	r2, #16
 8005e22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	225c      	movs	r2, #92	@ 0x5c
 8005e28:	5a9a      	ldrh	r2, [r3, r2]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	0011      	movs	r1, r2
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f7fe feec 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
 8005e34:	e003      	b.n	8005e3e <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f7fa fb05 	bl	8000448 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e3e:	236e      	movs	r3, #110	@ 0x6e
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005e48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d000      	beq.n	8005e52 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005e50:	e6e3      	b.n	8005c1a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005e52:	205a      	movs	r0, #90	@ 0x5a
 8005e54:	183b      	adds	r3, r7, r0
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	215e      	movs	r1, #94	@ 0x5e
 8005e5a:	5a52      	ldrh	r2, [r2, r1]
 8005e5c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005e5e:	0001      	movs	r1, r0
 8005e60:	187b      	adds	r3, r7, r1
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d044      	beq.n	8005ef2 <UART_RxISR_8BIT_FIFOEN+0x31e>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2268      	movs	r2, #104	@ 0x68
 8005e6c:	5a9b      	ldrh	r3, [r3, r2]
 8005e6e:	187a      	adds	r2, r7, r1
 8005e70:	8812      	ldrh	r2, [r2, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d23d      	bcs.n	8005ef2 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e76:	f3ef 8310 	mrs	r3, PRIMASK
 8005e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e80:	2301      	movs	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f383 8810 	msr	PRIMASK, r3
}
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	491d      	ldr	r1, [pc, #116]	@ (8005f0c <UART_RxISR_8BIT_FIFOEN+0x338>)
 8005e98:	400a      	ands	r2, r1
 8005e9a:	609a      	str	r2, [r3, #8]
 8005e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f383 8810 	msr	PRIMASK, r3
}
 8005ea6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a19      	ldr	r2, [pc, #100]	@ (8005f10 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8005eac:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eae:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb2:	617b      	str	r3, [r7, #20]
  return(result);
 8005eb4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eb8:	2301      	movs	r3, #1
 8005eba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f383 8810 	msr	PRIMASK, r3
}
 8005ec2:	46c0      	nop			@ (mov r8, r8)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2120      	movs	r1, #32
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ed6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f383 8810 	msr	PRIMASK, r3
}
 8005ede:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ee0:	e007      	b.n	8005ef2 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2108      	movs	r1, #8
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	619a      	str	r2, [r3, #24]
}
 8005ef2:	46c0      	nop			@ (mov r8, r8)
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b020      	add	sp, #128	@ 0x80
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	46c0      	nop			@ (mov r8, r8)
 8005efc:	fffffeff 	.word	0xfffffeff
 8005f00:	effffffe 	.word	0xeffffffe
 8005f04:	40008000 	.word	0x40008000
 8005f08:	fbffffff 	.word	0xfbffffff
 8005f0c:	efffffff 	.word	0xefffffff
 8005f10:	0800584d 	.word	0x0800584d

08005f14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b0a2      	sub	sp, #136	@ 0x88
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005f1c:	2382      	movs	r3, #130	@ 0x82
 8005f1e:	18fb      	adds	r3, r7, r3
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	2160      	movs	r1, #96	@ 0x60
 8005f24:	5a52      	ldrh	r2, [r2, r1]
 8005f26:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	2284      	movs	r2, #132	@ 0x84
 8005f30:	18ba      	adds	r2, r7, r2
 8005f32:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	228c      	movs	r2, #140	@ 0x8c
 8005f48:	589b      	ldr	r3, [r3, r2]
 8005f4a:	2b22      	cmp	r3, #34	@ 0x22
 8005f4c:	d000      	beq.n	8005f50 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005f4e:	e174      	b.n	800623a <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005f50:	2376      	movs	r3, #118	@ 0x76
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	2168      	movs	r1, #104	@ 0x68
 8005f58:	5a52      	ldrh	r2, [r2, r1]
 8005f5a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f5c:	e119      	b.n	8006192 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f64:	2174      	movs	r1, #116	@ 0x74
 8005f66:	187b      	adds	r3, r7, r1
 8005f68:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005f70:	187b      	adds	r3, r7, r1
 8005f72:	2282      	movs	r2, #130	@ 0x82
 8005f74:	18ba      	adds	r2, r7, r2
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	8812      	ldrh	r2, [r2, #0]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f86:	1c9a      	adds	r2, r3, #2
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	225e      	movs	r2, #94	@ 0x5e
 8005f90:	5a9b      	ldrh	r3, [r3, r2]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b299      	uxth	r1, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	225e      	movs	r2, #94	@ 0x5e
 8005f9c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	2184      	movs	r1, #132	@ 0x84
 8005fa6:	187a      	adds	r2, r7, r1
 8005fa8:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005faa:	187b      	adds	r3, r7, r1
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2207      	movs	r2, #7
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d04e      	beq.n	8006052 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fb4:	187b      	adds	r3, r7, r1
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d010      	beq.n	8005fe0 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005fbe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005fc0:	2380      	movs	r3, #128	@ 0x80
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2290      	movs	r2, #144	@ 0x90
 8005fd4:	589b      	ldr	r3, [r3, r2]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2190      	movs	r1, #144	@ 0x90
 8005fde:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fe0:	2384      	movs	r3, #132	@ 0x84
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	4013      	ands	r3, r2
 8005fea:	d00f      	beq.n	800600c <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005fec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fee:	2201      	movs	r2, #1
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d00b      	beq.n	800600c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2290      	movs	r2, #144	@ 0x90
 8006000:	589b      	ldr	r3, [r3, r2]
 8006002:	2204      	movs	r2, #4
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2190      	movs	r1, #144	@ 0x90
 800600a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800600c:	2384      	movs	r3, #132	@ 0x84
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2204      	movs	r2, #4
 8006014:	4013      	ands	r3, r2
 8006016:	d00f      	beq.n	8006038 <UART_RxISR_16BIT_FIFOEN+0x124>
 8006018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800601a:	2201      	movs	r2, #1
 800601c:	4013      	ands	r3, r2
 800601e:	d00b      	beq.n	8006038 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2204      	movs	r2, #4
 8006026:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2290      	movs	r2, #144	@ 0x90
 800602c:	589b      	ldr	r3, [r3, r2]
 800602e:	2202      	movs	r2, #2
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2190      	movs	r1, #144	@ 0x90
 8006036:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2290      	movs	r2, #144	@ 0x90
 800603c:	589b      	ldr	r3, [r3, r2]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	0018      	movs	r0, r3
 8006046:	f7fe fdd9 	bl	8004bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2290      	movs	r2, #144	@ 0x90
 800604e:	2100      	movs	r1, #0
 8006050:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	225e      	movs	r2, #94	@ 0x5e
 8006056:	5a9b      	ldrh	r3, [r3, r2]
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d000      	beq.n	8006060 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800605e:	e098      	b.n	8006192 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006060:	f3ef 8310 	mrs	r3, PRIMASK
 8006064:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006068:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800606a:	2301      	movs	r3, #1
 800606c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006070:	f383 8810 	msr	PRIMASK, r3
}
 8006074:	46c0      	nop			@ (mov r8, r8)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4974      	ldr	r1, [pc, #464]	@ (8006254 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8006082:	400a      	ands	r2, r1
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006088:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800608c:	f383 8810 	msr	PRIMASK, r3
}
 8006090:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006092:	f3ef 8310 	mrs	r3, PRIMASK
 8006096:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800609a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800609c:	2301      	movs	r3, #1
 800609e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060a2:	f383 8810 	msr	PRIMASK, r3
}
 80060a6:	46c0      	nop			@ (mov r8, r8)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4969      	ldr	r1, [pc, #420]	@ (8006258 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80060b4:	400a      	ands	r2, r1
 80060b6:	609a      	str	r2, [r3, #8]
 80060b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060ba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060be:	f383 8810 	msr	PRIMASK, r3
}
 80060c2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	228c      	movs	r2, #140	@ 0x8c
 80060c8:	2120      	movs	r1, #32
 80060ca:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5f      	ldr	r2, [pc, #380]	@ (800625c <UART_RxISR_16BIT_FIFOEN+0x348>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01f      	beq.n	8006122 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	2380      	movs	r3, #128	@ 0x80
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	4013      	ands	r3, r2
 80060ee:	d018      	beq.n	8006122 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f0:	f3ef 8310 	mrs	r3, PRIMASK
 80060f4:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80060fa:	2301      	movs	r3, #1
 80060fc:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006100:	f383 8810 	msr	PRIMASK, r3
}
 8006104:	46c0      	nop			@ (mov r8, r8)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4953      	ldr	r1, [pc, #332]	@ (8006260 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8006112:	400a      	ands	r2, r1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006118:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611c:	f383 8810 	msr	PRIMASK, r3
}
 8006120:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006126:	2b01      	cmp	r3, #1
 8006128:	d12f      	bne.n	800618a <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006130:	f3ef 8310 	mrs	r3, PRIMASK
 8006134:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006138:	663b      	str	r3, [r7, #96]	@ 0x60
 800613a:	2301      	movs	r3, #1
 800613c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006140:	f383 8810 	msr	PRIMASK, r3
}
 8006144:	46c0      	nop			@ (mov r8, r8)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2110      	movs	r1, #16
 8006152:	438a      	bics	r2, r1
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800615c:	f383 8810 	msr	PRIMASK, r3
}
 8006160:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	2210      	movs	r2, #16
 800616a:	4013      	ands	r3, r2
 800616c:	2b10      	cmp	r3, #16
 800616e:	d103      	bne.n	8006178 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2210      	movs	r2, #16
 8006176:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	225c      	movs	r2, #92	@ 0x5c
 800617c:	5a9a      	ldrh	r2, [r3, r2]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	0011      	movs	r1, r2
 8006182:	0018      	movs	r0, r3
 8006184:	f7fe fd42 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
 8006188:	e003      	b.n	8006192 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	0018      	movs	r0, r3
 800618e:	f7fa f95b 	bl	8000448 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006192:	2376      	movs	r3, #118	@ 0x76
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <UART_RxISR_16BIT_FIFOEN+0x296>
 800619c:	2384      	movs	r3, #132	@ 0x84
 800619e:	18fb      	adds	r3, r7, r3
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2220      	movs	r2, #32
 80061a4:	4013      	ands	r3, r2
 80061a6:	d000      	beq.n	80061aa <UART_RxISR_16BIT_FIFOEN+0x296>
 80061a8:	e6d9      	b.n	8005f5e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80061aa:	205e      	movs	r0, #94	@ 0x5e
 80061ac:	183b      	adds	r3, r7, r0
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	215e      	movs	r1, #94	@ 0x5e
 80061b2:	5a52      	ldrh	r2, [r2, r1]
 80061b4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80061b6:	0001      	movs	r1, r0
 80061b8:	187b      	adds	r3, r7, r1
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d044      	beq.n	800624a <UART_RxISR_16BIT_FIFOEN+0x336>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2268      	movs	r2, #104	@ 0x68
 80061c4:	5a9b      	ldrh	r3, [r3, r2]
 80061c6:	187a      	adds	r2, r7, r1
 80061c8:	8812      	ldrh	r2, [r2, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d23d      	bcs.n	800624a <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ce:	f3ef 8310 	mrs	r3, PRIMASK
 80061d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80061d4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061d8:	2301      	movs	r3, #1
 80061da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f383 8810 	msr	PRIMASK, r3
}
 80061e2:	46c0      	nop			@ (mov r8, r8)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	491d      	ldr	r1, [pc, #116]	@ (8006264 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80061f0:	400a      	ands	r2, r1
 80061f2:	609a      	str	r2, [r3, #8]
 80061f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f383 8810 	msr	PRIMASK, r3
}
 80061fe:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a19      	ldr	r2, [pc, #100]	@ (8006268 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8006204:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006206:	f3ef 8310 	mrs	r3, PRIMASK
 800620a:	61bb      	str	r3, [r7, #24]
  return(result);
 800620c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800620e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006210:	2301      	movs	r3, #1
 8006212:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f383 8810 	msr	PRIMASK, r3
}
 800621a:	46c0      	nop			@ (mov r8, r8)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2120      	movs	r1, #32
 8006228:	430a      	orrs	r2, r1
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800622e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	f383 8810 	msr	PRIMASK, r3
}
 8006236:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006238:	e007      	b.n	800624a <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699a      	ldr	r2, [r3, #24]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2108      	movs	r1, #8
 8006246:	430a      	orrs	r2, r1
 8006248:	619a      	str	r2, [r3, #24]
}
 800624a:	46c0      	nop			@ (mov r8, r8)
 800624c:	46bd      	mov	sp, r7
 800624e:	b022      	add	sp, #136	@ 0x88
 8006250:	bd80      	pop	{r7, pc}
 8006252:	46c0      	nop			@ (mov r8, r8)
 8006254:	fffffeff 	.word	0xfffffeff
 8006258:	effffffe 	.word	0xeffffffe
 800625c:	40008000 	.word	0x40008000
 8006260:	fbffffff 	.word	0xfbffffff
 8006264:	efffffff 	.word	0xefffffff
 8006268:	08005a11 	.word	0x08005a11

0800626c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006274:	46c0      	nop			@ (mov r8, r8)
 8006276:	46bd      	mov	sp, r7
 8006278:	b002      	add	sp, #8
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006284:	46c0      	nop			@ (mov r8, r8)
 8006286:	46bd      	mov	sp, r7
 8006288:	b002      	add	sp, #8
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006294:	46c0      	nop			@ (mov r8, r8)
 8006296:	46bd      	mov	sp, r7
 8006298:	b002      	add	sp, #8
 800629a:	bd80      	pop	{r7, pc}

0800629c <malloc>:
 800629c:	b510      	push	{r4, lr}
 800629e:	4b03      	ldr	r3, [pc, #12]	@ (80062ac <malloc+0x10>)
 80062a0:	0001      	movs	r1, r0
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	f000 f830 	bl	8006308 <_malloc_r>
 80062a8:	bd10      	pop	{r4, pc}
 80062aa:	46c0      	nop			@ (mov r8, r8)
 80062ac:	2000021c 	.word	0x2000021c

080062b0 <free>:
 80062b0:	b510      	push	{r4, lr}
 80062b2:	4b03      	ldr	r3, [pc, #12]	@ (80062c0 <free+0x10>)
 80062b4:	0001      	movs	r1, r0
 80062b6:	6818      	ldr	r0, [r3, #0]
 80062b8:	f000 f906 	bl	80064c8 <_free_r>
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	46c0      	nop			@ (mov r8, r8)
 80062c0:	2000021c 	.word	0x2000021c

080062c4 <sbrk_aligned>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	4e0f      	ldr	r6, [pc, #60]	@ (8006304 <sbrk_aligned+0x40>)
 80062c8:	000d      	movs	r5, r1
 80062ca:	6831      	ldr	r1, [r6, #0]
 80062cc:	0004      	movs	r4, r0
 80062ce:	2900      	cmp	r1, #0
 80062d0:	d102      	bne.n	80062d8 <sbrk_aligned+0x14>
 80062d2:	f000 f8b1 	bl	8006438 <_sbrk_r>
 80062d6:	6030      	str	r0, [r6, #0]
 80062d8:	0029      	movs	r1, r5
 80062da:	0020      	movs	r0, r4
 80062dc:	f000 f8ac 	bl	8006438 <_sbrk_r>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d103      	bne.n	80062ec <sbrk_aligned+0x28>
 80062e4:	2501      	movs	r5, #1
 80062e6:	426d      	negs	r5, r5
 80062e8:	0028      	movs	r0, r5
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	2303      	movs	r3, #3
 80062ee:	1cc5      	adds	r5, r0, #3
 80062f0:	439d      	bics	r5, r3
 80062f2:	42a8      	cmp	r0, r5
 80062f4:	d0f8      	beq.n	80062e8 <sbrk_aligned+0x24>
 80062f6:	1a29      	subs	r1, r5, r0
 80062f8:	0020      	movs	r0, r4
 80062fa:	f000 f89d 	bl	8006438 <_sbrk_r>
 80062fe:	3001      	adds	r0, #1
 8006300:	d1f2      	bne.n	80062e8 <sbrk_aligned+0x24>
 8006302:	e7ef      	b.n	80062e4 <sbrk_aligned+0x20>
 8006304:	200003e8 	.word	0x200003e8

08006308 <_malloc_r>:
 8006308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800630a:	2203      	movs	r2, #3
 800630c:	1ccb      	adds	r3, r1, #3
 800630e:	4393      	bics	r3, r2
 8006310:	3308      	adds	r3, #8
 8006312:	0005      	movs	r5, r0
 8006314:	001f      	movs	r7, r3
 8006316:	2b0c      	cmp	r3, #12
 8006318:	d234      	bcs.n	8006384 <_malloc_r+0x7c>
 800631a:	270c      	movs	r7, #12
 800631c:	42b9      	cmp	r1, r7
 800631e:	d833      	bhi.n	8006388 <_malloc_r+0x80>
 8006320:	0028      	movs	r0, r5
 8006322:	f000 f871 	bl	8006408 <__malloc_lock>
 8006326:	4e37      	ldr	r6, [pc, #220]	@ (8006404 <_malloc_r+0xfc>)
 8006328:	6833      	ldr	r3, [r6, #0]
 800632a:	001c      	movs	r4, r3
 800632c:	2c00      	cmp	r4, #0
 800632e:	d12f      	bne.n	8006390 <_malloc_r+0x88>
 8006330:	0039      	movs	r1, r7
 8006332:	0028      	movs	r0, r5
 8006334:	f7ff ffc6 	bl	80062c4 <sbrk_aligned>
 8006338:	0004      	movs	r4, r0
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	d15f      	bne.n	80063fe <_malloc_r+0xf6>
 800633e:	6834      	ldr	r4, [r6, #0]
 8006340:	9400      	str	r4, [sp, #0]
 8006342:	9b00      	ldr	r3, [sp, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d14a      	bne.n	80063de <_malloc_r+0xd6>
 8006348:	2c00      	cmp	r4, #0
 800634a:	d052      	beq.n	80063f2 <_malloc_r+0xea>
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	0028      	movs	r0, r5
 8006350:	18e3      	adds	r3, r4, r3
 8006352:	9900      	ldr	r1, [sp, #0]
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	f000 f86f 	bl	8006438 <_sbrk_r>
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	4283      	cmp	r3, r0
 800635e:	d148      	bne.n	80063f2 <_malloc_r+0xea>
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	0028      	movs	r0, r5
 8006364:	1aff      	subs	r7, r7, r3
 8006366:	0039      	movs	r1, r7
 8006368:	f7ff ffac 	bl	80062c4 <sbrk_aligned>
 800636c:	3001      	adds	r0, #1
 800636e:	d040      	beq.n	80063f2 <_malloc_r+0xea>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	19db      	adds	r3, r3, r7
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	6833      	ldr	r3, [r6, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	2a00      	cmp	r2, #0
 800637c:	d133      	bne.n	80063e6 <_malloc_r+0xde>
 800637e:	9b00      	ldr	r3, [sp, #0]
 8006380:	6033      	str	r3, [r6, #0]
 8006382:	e019      	b.n	80063b8 <_malloc_r+0xb0>
 8006384:	2b00      	cmp	r3, #0
 8006386:	dac9      	bge.n	800631c <_malloc_r+0x14>
 8006388:	230c      	movs	r3, #12
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	2000      	movs	r0, #0
 800638e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006390:	6821      	ldr	r1, [r4, #0]
 8006392:	1bc9      	subs	r1, r1, r7
 8006394:	d420      	bmi.n	80063d8 <_malloc_r+0xd0>
 8006396:	290b      	cmp	r1, #11
 8006398:	d90a      	bls.n	80063b0 <_malloc_r+0xa8>
 800639a:	19e2      	adds	r2, r4, r7
 800639c:	6027      	str	r7, [r4, #0]
 800639e:	42a3      	cmp	r3, r4
 80063a0:	d104      	bne.n	80063ac <_malloc_r+0xa4>
 80063a2:	6032      	str	r2, [r6, #0]
 80063a4:	6863      	ldr	r3, [r4, #4]
 80063a6:	6011      	str	r1, [r2, #0]
 80063a8:	6053      	str	r3, [r2, #4]
 80063aa:	e005      	b.n	80063b8 <_malloc_r+0xb0>
 80063ac:	605a      	str	r2, [r3, #4]
 80063ae:	e7f9      	b.n	80063a4 <_malloc_r+0x9c>
 80063b0:	6862      	ldr	r2, [r4, #4]
 80063b2:	42a3      	cmp	r3, r4
 80063b4:	d10e      	bne.n	80063d4 <_malloc_r+0xcc>
 80063b6:	6032      	str	r2, [r6, #0]
 80063b8:	0028      	movs	r0, r5
 80063ba:	f000 f82d 	bl	8006418 <__malloc_unlock>
 80063be:	0020      	movs	r0, r4
 80063c0:	2207      	movs	r2, #7
 80063c2:	300b      	adds	r0, #11
 80063c4:	1d23      	adds	r3, r4, #4
 80063c6:	4390      	bics	r0, r2
 80063c8:	1ac2      	subs	r2, r0, r3
 80063ca:	4298      	cmp	r0, r3
 80063cc:	d0df      	beq.n	800638e <_malloc_r+0x86>
 80063ce:	1a1b      	subs	r3, r3, r0
 80063d0:	50a3      	str	r3, [r4, r2]
 80063d2:	e7dc      	b.n	800638e <_malloc_r+0x86>
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	e7ef      	b.n	80063b8 <_malloc_r+0xb0>
 80063d8:	0023      	movs	r3, r4
 80063da:	6864      	ldr	r4, [r4, #4]
 80063dc:	e7a6      	b.n	800632c <_malloc_r+0x24>
 80063de:	9c00      	ldr	r4, [sp, #0]
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	e7ad      	b.n	8006342 <_malloc_r+0x3a>
 80063e6:	001a      	movs	r2, r3
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	42a3      	cmp	r3, r4
 80063ec:	d1fb      	bne.n	80063e6 <_malloc_r+0xde>
 80063ee:	2300      	movs	r3, #0
 80063f0:	e7da      	b.n	80063a8 <_malloc_r+0xa0>
 80063f2:	230c      	movs	r3, #12
 80063f4:	0028      	movs	r0, r5
 80063f6:	602b      	str	r3, [r5, #0]
 80063f8:	f000 f80e 	bl	8006418 <__malloc_unlock>
 80063fc:	e7c6      	b.n	800638c <_malloc_r+0x84>
 80063fe:	6007      	str	r7, [r0, #0]
 8006400:	e7da      	b.n	80063b8 <_malloc_r+0xb0>
 8006402:	46c0      	nop			@ (mov r8, r8)
 8006404:	200003ec 	.word	0x200003ec

08006408 <__malloc_lock>:
 8006408:	b510      	push	{r4, lr}
 800640a:	4802      	ldr	r0, [pc, #8]	@ (8006414 <__malloc_lock+0xc>)
 800640c:	f000 f850 	bl	80064b0 <__retarget_lock_acquire_recursive>
 8006410:	bd10      	pop	{r4, pc}
 8006412:	46c0      	nop			@ (mov r8, r8)
 8006414:	2000052c 	.word	0x2000052c

08006418 <__malloc_unlock>:
 8006418:	b510      	push	{r4, lr}
 800641a:	4802      	ldr	r0, [pc, #8]	@ (8006424 <__malloc_unlock+0xc>)
 800641c:	f000 f849 	bl	80064b2 <__retarget_lock_release_recursive>
 8006420:	bd10      	pop	{r4, pc}
 8006422:	46c0      	nop			@ (mov r8, r8)
 8006424:	2000052c 	.word	0x2000052c

08006428 <memset>:
 8006428:	0003      	movs	r3, r0
 800642a:	1882      	adds	r2, r0, r2
 800642c:	4293      	cmp	r3, r2
 800642e:	d100      	bne.n	8006432 <memset+0xa>
 8006430:	4770      	bx	lr
 8006432:	7019      	strb	r1, [r3, #0]
 8006434:	3301      	adds	r3, #1
 8006436:	e7f9      	b.n	800642c <memset+0x4>

08006438 <_sbrk_r>:
 8006438:	2300      	movs	r3, #0
 800643a:	b570      	push	{r4, r5, r6, lr}
 800643c:	4d06      	ldr	r5, [pc, #24]	@ (8006458 <_sbrk_r+0x20>)
 800643e:	0004      	movs	r4, r0
 8006440:	0008      	movs	r0, r1
 8006442:	602b      	str	r3, [r5, #0]
 8006444:	f7fb fa02 	bl	800184c <_sbrk>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d103      	bne.n	8006454 <_sbrk_r+0x1c>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d000      	beq.n	8006454 <_sbrk_r+0x1c>
 8006452:	6023      	str	r3, [r4, #0]
 8006454:	bd70      	pop	{r4, r5, r6, pc}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	20000528 	.word	0x20000528

0800645c <__errno>:
 800645c:	4b01      	ldr	r3, [pc, #4]	@ (8006464 <__errno+0x8>)
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	4770      	bx	lr
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	2000021c 	.word	0x2000021c

08006468 <__libc_init_array>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	2600      	movs	r6, #0
 800646c:	4c0c      	ldr	r4, [pc, #48]	@ (80064a0 <__libc_init_array+0x38>)
 800646e:	4d0d      	ldr	r5, [pc, #52]	@ (80064a4 <__libc_init_array+0x3c>)
 8006470:	1b64      	subs	r4, r4, r5
 8006472:	10a4      	asrs	r4, r4, #2
 8006474:	42a6      	cmp	r6, r4
 8006476:	d109      	bne.n	800648c <__libc_init_array+0x24>
 8006478:	2600      	movs	r6, #0
 800647a:	f000 f86f 	bl	800655c <_init>
 800647e:	4c0a      	ldr	r4, [pc, #40]	@ (80064a8 <__libc_init_array+0x40>)
 8006480:	4d0a      	ldr	r5, [pc, #40]	@ (80064ac <__libc_init_array+0x44>)
 8006482:	1b64      	subs	r4, r4, r5
 8006484:	10a4      	asrs	r4, r4, #2
 8006486:	42a6      	cmp	r6, r4
 8006488:	d105      	bne.n	8006496 <__libc_init_array+0x2e>
 800648a:	bd70      	pop	{r4, r5, r6, pc}
 800648c:	00b3      	lsls	r3, r6, #2
 800648e:	58eb      	ldr	r3, [r5, r3]
 8006490:	4798      	blx	r3
 8006492:	3601      	adds	r6, #1
 8006494:	e7ee      	b.n	8006474 <__libc_init_array+0xc>
 8006496:	00b3      	lsls	r3, r6, #2
 8006498:	58eb      	ldr	r3, [r5, r3]
 800649a:	4798      	blx	r3
 800649c:	3601      	adds	r6, #1
 800649e:	e7f2      	b.n	8006486 <__libc_init_array+0x1e>
 80064a0:	080069dc 	.word	0x080069dc
 80064a4:	080069dc 	.word	0x080069dc
 80064a8:	080069e0 	.word	0x080069e0
 80064ac:	080069dc 	.word	0x080069dc

080064b0 <__retarget_lock_acquire_recursive>:
 80064b0:	4770      	bx	lr

080064b2 <__retarget_lock_release_recursive>:
 80064b2:	4770      	bx	lr

080064b4 <memcpy>:
 80064b4:	2300      	movs	r3, #0
 80064b6:	b510      	push	{r4, lr}
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d100      	bne.n	80064be <memcpy+0xa>
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	5ccc      	ldrb	r4, [r1, r3]
 80064c0:	54c4      	strb	r4, [r0, r3]
 80064c2:	3301      	adds	r3, #1
 80064c4:	e7f8      	b.n	80064b8 <memcpy+0x4>
	...

080064c8 <_free_r>:
 80064c8:	b570      	push	{r4, r5, r6, lr}
 80064ca:	0005      	movs	r5, r0
 80064cc:	1e0c      	subs	r4, r1, #0
 80064ce:	d010      	beq.n	80064f2 <_free_r+0x2a>
 80064d0:	3c04      	subs	r4, #4
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	da00      	bge.n	80064da <_free_r+0x12>
 80064d8:	18e4      	adds	r4, r4, r3
 80064da:	0028      	movs	r0, r5
 80064dc:	f7ff ff94 	bl	8006408 <__malloc_lock>
 80064e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006558 <_free_r+0x90>)
 80064e2:	6813      	ldr	r3, [r2, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <_free_r+0x2c>
 80064e8:	6063      	str	r3, [r4, #4]
 80064ea:	6014      	str	r4, [r2, #0]
 80064ec:	0028      	movs	r0, r5
 80064ee:	f7ff ff93 	bl	8006418 <__malloc_unlock>
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	d908      	bls.n	800650a <_free_r+0x42>
 80064f8:	6820      	ldr	r0, [r4, #0]
 80064fa:	1821      	adds	r1, r4, r0
 80064fc:	428b      	cmp	r3, r1
 80064fe:	d1f3      	bne.n	80064e8 <_free_r+0x20>
 8006500:	6819      	ldr	r1, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	1809      	adds	r1, r1, r0
 8006506:	6021      	str	r1, [r4, #0]
 8006508:	e7ee      	b.n	80064e8 <_free_r+0x20>
 800650a:	001a      	movs	r2, r3
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <_free_r+0x4e>
 8006512:	42a3      	cmp	r3, r4
 8006514:	d9f9      	bls.n	800650a <_free_r+0x42>
 8006516:	6811      	ldr	r1, [r2, #0]
 8006518:	1850      	adds	r0, r2, r1
 800651a:	42a0      	cmp	r0, r4
 800651c:	d10b      	bne.n	8006536 <_free_r+0x6e>
 800651e:	6820      	ldr	r0, [r4, #0]
 8006520:	1809      	adds	r1, r1, r0
 8006522:	1850      	adds	r0, r2, r1
 8006524:	6011      	str	r1, [r2, #0]
 8006526:	4283      	cmp	r3, r0
 8006528:	d1e0      	bne.n	80064ec <_free_r+0x24>
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	1841      	adds	r1, r0, r1
 8006530:	6011      	str	r1, [r2, #0]
 8006532:	6053      	str	r3, [r2, #4]
 8006534:	e7da      	b.n	80064ec <_free_r+0x24>
 8006536:	42a0      	cmp	r0, r4
 8006538:	d902      	bls.n	8006540 <_free_r+0x78>
 800653a:	230c      	movs	r3, #12
 800653c:	602b      	str	r3, [r5, #0]
 800653e:	e7d5      	b.n	80064ec <_free_r+0x24>
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	1821      	adds	r1, r4, r0
 8006544:	428b      	cmp	r3, r1
 8006546:	d103      	bne.n	8006550 <_free_r+0x88>
 8006548:	6819      	ldr	r1, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	1809      	adds	r1, r1, r0
 800654e:	6021      	str	r1, [r4, #0]
 8006550:	6063      	str	r3, [r4, #4]
 8006552:	6054      	str	r4, [r2, #4]
 8006554:	e7ca      	b.n	80064ec <_free_r+0x24>
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	200003ec 	.word	0x200003ec

0800655c <_init>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	46c0      	nop			@ (mov r8, r8)
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr

08006568 <_fini>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	46c0      	nop			@ (mov r8, r8)
 800656c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656e:	bc08      	pop	{r3}
 8006570:	469e      	mov	lr, r3
 8006572:	4770      	bx	lr
