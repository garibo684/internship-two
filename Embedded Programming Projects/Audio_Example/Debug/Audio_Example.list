
Audio_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8a4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800ba2c  0800ba2c  0000ca2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bff4  0800bff4  0000e104  2**0
                  CONTENTS
  4 .ARM          00000008  0800bff4  0800bff4  0000cff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bffc  0800bffc  0000e104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bffc  0800bffc  0000cffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c000  0800c000  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800c004  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e104  2**0
                  CONTENTS
 10 .bss          000025e0  20000104  20000104  0000e104  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200026e4  200026e4  0000e104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e104  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f46  00000000  00000000  0000e134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004037  00000000  00000000  0002707a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0002b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee3  00000000  00000000  0002c420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000249f9  00000000  00000000  0002d303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c9f5  00000000  00000000  00051cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc0c  00000000  00000000  0006e6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a2fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005188  00000000  00000000  0013a340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0013f4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000104 	.word	0x20000104
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ba14 	.word	0x0800ba14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000108 	.word	0x20000108
 80001c4:	0800ba14 	.word	0x0800ba14

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af02      	add	r7, sp, #8
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004c4:	4a09      	ldr	r2, [pc, #36]	@ (80004ec <write_register+0x34>)
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	781a      	ldrb	r2, [r3, #0]
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <write_register+0x34>)
 80004d0:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004d2:	2364      	movs	r3, #100	@ 0x64
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	2302      	movs	r3, #2
 80004d8:	4a04      	ldr	r2, [pc, #16]	@ (80004ec <write_register+0x34>)
 80004da:	2194      	movs	r1, #148	@ 0x94
 80004dc:	4804      	ldr	r0, [pc, #16]	@ (80004f0 <write_register+0x38>)
 80004de:	f002 fa2d 	bl	800293c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000120 	.word	0x20000120
 80004f0:	20000124 	.word	0x20000124

080004f4 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000500:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <read_register+0x3c>)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000506:	2364      	movs	r3, #100	@ 0x64
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2301      	movs	r3, #1
 800050c:	4a08      	ldr	r2, [pc, #32]	@ (8000530 <read_register+0x3c>)
 800050e:	2194      	movs	r1, #148	@ 0x94
 8000510:	4808      	ldr	r0, [pc, #32]	@ (8000534 <read_register+0x40>)
 8000512:	f002 fa13 	bl	800293c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000516:	2364      	movs	r3, #100	@ 0x64
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	2194      	movs	r1, #148	@ 0x94
 8000520:	4804      	ldr	r0, [pc, #16]	@ (8000534 <read_register+0x40>)
 8000522:	f002 fb09 	bl	8002b38 <HAL_I2C_Master_Receive>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000120 	.word	0x20000120
 8000534:	20000124 	.word	0x20000124

08000538 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000538:	b084      	sub	sp, #16
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
 800053e:	f107 0c08 	add.w	ip, r7, #8
 8000542:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000546:	4b81      	ldr	r3, [pc, #516]	@ (800074c <CS43_Init+0x214>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054e:	4b7f      	ldr	r3, [pc, #508]	@ (800074c <CS43_Init+0x214>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	69da      	ldr	r2, [r3, #28]
 8000554:	4b7d      	ldr	r3, [pc, #500]	@ (800074c <CS43_Init+0x214>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800055c:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2110      	movs	r1, #16
 8000562:	487b      	ldr	r0, [pc, #492]	@ (8000750 <CS43_Init+0x218>)
 8000564:	f002 f868 	bl	8002638 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000568:	4b7a      	ldr	r3, [pc, #488]	@ (8000754 <CS43_Init+0x21c>)
 800056a:	4618      	mov	r0, r3
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2254      	movs	r2, #84	@ 0x54
 8000572:	4619      	mov	r1, r3
 8000574:	f00a fd06 	bl	800af84 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000578:	4b77      	ldr	r3, [pc, #476]	@ (8000758 <CS43_Init+0x220>)
 800057a:	2201      	movs	r2, #1
 800057c:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 800057e:	4976      	ldr	r1, [pc, #472]	@ (8000758 <CS43_Init+0x220>)
 8000580:	2002      	movs	r0, #2
 8000582:	f7ff ff99 	bl	80004b8 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000586:	4b74      	ldr	r3, [pc, #464]	@ (8000758 <CS43_Init+0x220>)
 8000588:	2280      	movs	r2, #128	@ 0x80
 800058a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800058c:	4b72      	ldr	r3, [pc, #456]	@ (8000758 <CS43_Init+0x220>)
 800058e:	785b      	ldrb	r3, [r3, #1]
 8000590:	f043 0320 	orr.w	r3, r3, #32
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b70      	ldr	r3, [pc, #448]	@ (8000758 <CS43_Init+0x220>)
 8000598:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800059a:	4b6f      	ldr	r3, [pc, #444]	@ (8000758 <CS43_Init+0x220>)
 800059c:	785b      	ldrb	r3, [r3, #1]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b6c      	ldr	r3, [pc, #432]	@ (8000758 <CS43_Init+0x220>)
 80005a6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005a8:	4b6b      	ldr	r3, [pc, #428]	@ (8000758 <CS43_Init+0x220>)
 80005aa:	785b      	ldrb	r3, [r3, #1]
 80005ac:	f043 0303 	orr.w	r3, r3, #3
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b69      	ldr	r3, [pc, #420]	@ (8000758 <CS43_Init+0x220>)
 80005b4:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005b6:	4969      	ldr	r1, [pc, #420]	@ (800075c <CS43_Init+0x224>)
 80005b8:	2004      	movs	r0, #4
 80005ba:	f7ff ff7d 	bl	80004b8 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005be:	4b66      	ldr	r3, [pc, #408]	@ (8000758 <CS43_Init+0x220>)
 80005c0:	2280      	movs	r2, #128	@ 0x80
 80005c2:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005c4:	4965      	ldr	r1, [pc, #404]	@ (800075c <CS43_Init+0x224>)
 80005c6:	2005      	movs	r0, #5
 80005c8:	f7ff ff76 	bl	80004b8 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005cc:	4962      	ldr	r1, [pc, #392]	@ (8000758 <CS43_Init+0x220>)
 80005ce:	2006      	movs	r0, #6
 80005d0:	f7ff ff90 	bl	80004f4 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005d4:	4b60      	ldr	r3, [pc, #384]	@ (8000758 <CS43_Init+0x220>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b5e      	ldr	r3, [pc, #376]	@ (8000758 <CS43_Init+0x220>)
 80005e0:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005e2:	4b5d      	ldr	r3, [pc, #372]	@ (8000758 <CS43_Init+0x220>)
 80005e4:	785b      	ldrb	r3, [r3, #1]
 80005e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b5a      	ldr	r3, [pc, #360]	@ (8000758 <CS43_Init+0x220>)
 80005ee:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005f0:	4b59      	ldr	r3, [pc, #356]	@ (8000758 <CS43_Init+0x220>)
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b57      	ldr	r3, [pc, #348]	@ (8000758 <CS43_Init+0x220>)
 80005fc:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005fe:	4b56      	ldr	r3, [pc, #344]	@ (8000758 <CS43_Init+0x220>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	f023 0310 	bic.w	r3, r3, #16
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b53      	ldr	r3, [pc, #332]	@ (8000758 <CS43_Init+0x220>)
 800060a:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 800060c:	4b52      	ldr	r3, [pc, #328]	@ (8000758 <CS43_Init+0x220>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	f023 0304 	bic.w	r3, r3, #4
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b50      	ldr	r3, [pc, #320]	@ (8000758 <CS43_Init+0x220>)
 8000618:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 800061a:	4b4f      	ldr	r3, [pc, #316]	@ (8000758 <CS43_Init+0x220>)
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b4c      	ldr	r3, [pc, #304]	@ (8000758 <CS43_Init+0x220>)
 8000626:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000628:	4b4b      	ldr	r3, [pc, #300]	@ (8000758 <CS43_Init+0x220>)
 800062a:	785b      	ldrb	r3, [r3, #1]
 800062c:	f043 0303 	orr.w	r3, r3, #3
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b49      	ldr	r3, [pc, #292]	@ (8000758 <CS43_Init+0x220>)
 8000634:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000636:	4949      	ldr	r1, [pc, #292]	@ (800075c <CS43_Init+0x224>)
 8000638:	2006      	movs	r0, #6
 800063a:	f7ff ff3d 	bl	80004b8 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800063e:	4947      	ldr	r1, [pc, #284]	@ (800075c <CS43_Init+0x224>)
 8000640:	2008      	movs	r0, #8
 8000642:	f7ff ff57 	bl	80004f4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000646:	4b44      	ldr	r3, [pc, #272]	@ (8000758 <CS43_Init+0x220>)
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	f023 030f 	bic.w	r3, r3, #15
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b41      	ldr	r3, [pc, #260]	@ (8000758 <CS43_Init+0x220>)
 8000652:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000654:	4b40      	ldr	r3, [pc, #256]	@ (8000758 <CS43_Init+0x220>)
 8000656:	785b      	ldrb	r3, [r3, #1]
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b3e      	ldr	r3, [pc, #248]	@ (8000758 <CS43_Init+0x220>)
 8000660:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000662:	493e      	ldr	r1, [pc, #248]	@ (800075c <CS43_Init+0x224>)
 8000664:	2008      	movs	r0, #8
 8000666:	f7ff ff27 	bl	80004b8 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800066a:	493c      	ldr	r1, [pc, #240]	@ (800075c <CS43_Init+0x224>)
 800066c:	2009      	movs	r0, #9
 800066e:	f7ff ff41 	bl	80004f4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000672:	4b39      	ldr	r3, [pc, #228]	@ (8000758 <CS43_Init+0x220>)
 8000674:	785b      	ldrb	r3, [r3, #1]
 8000676:	f023 030f 	bic.w	r3, r3, #15
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b36      	ldr	r3, [pc, #216]	@ (8000758 <CS43_Init+0x220>)
 800067e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000680:	4b35      	ldr	r3, [pc, #212]	@ (8000758 <CS43_Init+0x220>)
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b33      	ldr	r3, [pc, #204]	@ (8000758 <CS43_Init+0x220>)
 800068c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 800068e:	4933      	ldr	r1, [pc, #204]	@ (800075c <CS43_Init+0x224>)
 8000690:	2009      	movs	r0, #9
 8000692:	f7ff ff11 	bl	80004b8 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000696:	4931      	ldr	r1, [pc, #196]	@ (800075c <CS43_Init+0x224>)
 8000698:	200e      	movs	r0, #14
 800069a:	f7ff ff2b 	bl	80004f4 <read_register>
	if(outputMode == MODE_ANALOG)
 800069e:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d123      	bne.n	80006ee <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000758 <CS43_Init+0x220>)
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <CS43_Init+0x220>)
 80006b2:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006b4:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <CS43_Init+0x220>)
 80006b6:	785b      	ldrb	r3, [r3, #1]
 80006b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <CS43_Init+0x220>)
 80006c0:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006c2:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <CS43_Init+0x220>)
 80006c4:	785b      	ldrb	r3, [r3, #1]
 80006c6:	f023 0320 	bic.w	r3, r3, #32
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <CS43_Init+0x220>)
 80006ce:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006d0:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <CS43_Init+0x220>)
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	f023 0310 	bic.w	r3, r3, #16
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <CS43_Init+0x220>)
 80006dc:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006de:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <CS43_Init+0x220>)
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	f023 0308 	bic.w	r3, r3, #8
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <CS43_Init+0x220>)
 80006ea:	705a      	strb	r2, [r3, #1]
 80006ec:	e006      	b.n	80006fc <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80006ee:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <CS43_Init+0x220>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006fc:	4917      	ldr	r1, [pc, #92]	@ (800075c <CS43_Init+0x224>)
 80006fe:	200e      	movs	r0, #14
 8000700:	f7ff feda 	bl	80004b8 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000704:	4915      	ldr	r1, [pc, #84]	@ (800075c <CS43_Init+0x224>)
 8000706:	200f      	movs	r0, #15
 8000708:	f7ff fef4 	bl	80004f4 <read_register>
	iData[1] = 0x00;
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <CS43_Init+0x220>)
 800070e:	2200      	movs	r2, #0
 8000710:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000712:	4912      	ldr	r1, [pc, #72]	@ (800075c <CS43_Init+0x224>)
 8000714:	200f      	movs	r0, #15
 8000716:	f7ff fecf 	bl	80004b8 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <CS43_Init+0x220>)
 800071c:	2200      	movs	r2, #0
 800071e:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000720:	490e      	ldr	r1, [pc, #56]	@ (800075c <CS43_Init+0x224>)
 8000722:	2014      	movs	r0, #20
 8000724:	f7ff fec8 	bl	80004b8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000728:	490c      	ldr	r1, [pc, #48]	@ (800075c <CS43_Init+0x224>)
 800072a:	2015      	movs	r0, #21
 800072c:	f7ff fec4 	bl	80004b8 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000730:	490a      	ldr	r1, [pc, #40]	@ (800075c <CS43_Init+0x224>)
 8000732:	201a      	movs	r0, #26
 8000734:	f7ff fec0 	bl	80004b8 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000738:	4908      	ldr	r1, [pc, #32]	@ (800075c <CS43_Init+0x224>)
 800073a:	201b      	movs	r0, #27
 800073c:	f7ff febc 	bl	80004b8 <write_register>
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000748:	b004      	add	sp, #16
 800074a:	4770      	bx	lr
 800074c:	200009ac 	.word	0x200009ac
 8000750:	40020c00 	.word	0x40020c00
 8000754:	20000124 	.word	0x20000124
 8000758:	20000120 	.word	0x20000120
 800075c:	20000121 	.word	0x20000121

08000760 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b03      	cmp	r3, #3
 800076e:	d837      	bhi.n	80007e0 <CS43_Enable_RightLeft+0x80>
 8000770:	a201      	add	r2, pc, #4	@ (adr r2, 8000778 <CS43_Enable_RightLeft+0x18>)
 8000772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000776:	bf00      	nop
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 800078a:	22c0      	movs	r2, #192	@ 0xc0
 800078c:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800078e:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 8000790:	785b      	ldrb	r3, [r3, #1]
 8000792:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 800079a:	705a      	strb	r2, [r3, #1]
			break;
 800079c:	e021      	b.n	80007e2 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007a0:	2280      	movs	r2, #128	@ 0x80
 80007a2:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007b0:	705a      	strb	r2, [r3, #1]
			break;
 80007b2:	e016      	b.n	80007e2 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007b4:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007b6:	22c0      	movs	r2, #192	@ 0xc0
 80007b8:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ba:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007bc:	785b      	ldrb	r3, [r3, #1]
 80007be:	f043 0320 	orr.w	r3, r3, #32
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007c6:	705a      	strb	r2, [r3, #1]
			break;
 80007c8:	e00b      	b.n	80007e2 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007cc:	2280      	movs	r2, #128	@ 0x80
 80007ce:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007d2:	785b      	ldrb	r3, [r3, #1]
 80007d4:	f043 0320 	orr.w	r3, r3, #32
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007dc:	705a      	strb	r2, [r3, #1]
			break;
 80007de:	e000      	b.n	80007e2 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007e0:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007e4:	785b      	ldrb	r3, [r3, #1]
 80007e6:	f043 030c 	orr.w	r3, r3, #12
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007ee:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007f2:	785b      	ldrb	r3, [r3, #1]
 80007f4:	f043 0303 	orr.w	r3, r3, #3
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <CS43_Enable_RightLeft+0xb0>)
 80007fc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80007fe:	4905      	ldr	r1, [pc, #20]	@ (8000814 <CS43_Enable_RightLeft+0xb4>)
 8000800:	2004      	movs	r0, #4
 8000802:	f7ff fe59 	bl	80004b8 <write_register>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000120 	.word	0x20000120
 8000814:	20000121 	.word	0x20000121

08000818 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3b32      	subs	r3, #50	@ 0x32
 8000826:	b2db      	uxtb	r3, r3
 8000828:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8000836:	4a16      	ldr	r2, [pc, #88]	@ (8000890 <CS43_SetVolume+0x78>)
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800083c:	4915      	ldr	r1, [pc, #84]	@ (8000894 <CS43_SetVolume+0x7c>)
 800083e:	2014      	movs	r0, #20
 8000840:	f7ff fe3a 	bl	80004b8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000844:	4913      	ldr	r1, [pc, #76]	@ (8000894 <CS43_SetVolume+0x7c>)
 8000846:	2015      	movs	r0, #21
 8000848:	f7ff fe36 	bl	80004b8 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b64      	cmp	r3, #100	@ 0x64
 8000850:	d80e      	bhi.n	8000870 <CS43_SetVolume+0x58>
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	4a0e      	ldr	r2, [pc, #56]	@ (8000898 <CS43_SetVolume+0x80>)
 800085e:	fb82 1203 	smull	r1, r2, r2, r3
 8000862:	1152      	asrs	r2, r2, #5
 8000864:	17db      	asrs	r3, r3, #31
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	b2db      	uxtb	r3, r3
 800086a:	3b18      	subs	r3, #24
 800086c:	b2db      	uxtb	r3, r3
 800086e:	e000      	b.n	8000872 <CS43_SetVolume+0x5a>
 8000870:	2318      	movs	r3, #24
 8000872:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <CS43_SetVolume+0x78>)
 8000874:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8000876:	4907      	ldr	r1, [pc, #28]	@ (8000894 <CS43_SetVolume+0x7c>)
 8000878:	2020      	movs	r0, #32
 800087a:	f7ff fe1d 	bl	80004b8 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800087e:	4905      	ldr	r1, [pc, #20]	@ (8000894 <CS43_SetVolume+0x7c>)
 8000880:	2021      	movs	r0, #33	@ 0x21
 8000882:	f7ff fe19 	bl	80004b8 <write_register>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000120 	.word	0x20000120
 8000894:	20000121 	.word	0x20000121
 8000898:	51eb851f 	.word	0x51eb851f

0800089c <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <CS43_Start+0x7c>)
 80008a2:	2299      	movs	r2, #153	@ 0x99
 80008a4:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008a6:	491d      	ldr	r1, [pc, #116]	@ (800091c <CS43_Start+0x80>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fe05 	bl	80004b8 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <CS43_Start+0x7c>)
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008b4:	4919      	ldr	r1, [pc, #100]	@ (800091c <CS43_Start+0x80>)
 80008b6:	2047      	movs	r0, #71	@ 0x47
 80008b8:	f7ff fdfe 	bl	80004b8 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008bc:	4917      	ldr	r1, [pc, #92]	@ (800091c <CS43_Start+0x80>)
 80008be:	2032      	movs	r0, #50	@ 0x32
 80008c0:	f7ff fe18 	bl	80004f4 <read_register>
	iData[1] |= 0x80;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <CS43_Start+0x7c>)
 80008c6:	785b      	ldrb	r3, [r3, #1]
 80008c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <CS43_Start+0x7c>)
 80008d0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008d2:	4912      	ldr	r1, [pc, #72]	@ (800091c <CS43_Start+0x80>)
 80008d4:	2032      	movs	r0, #50	@ 0x32
 80008d6:	f7ff fdef 	bl	80004b8 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008da:	4910      	ldr	r1, [pc, #64]	@ (800091c <CS43_Start+0x80>)
 80008dc:	2032      	movs	r0, #50	@ 0x32
 80008de:	f7ff fe09 	bl	80004f4 <read_register>
	iData[1] &= ~(0x80);
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <CS43_Start+0x7c>)
 80008e4:	785b      	ldrb	r3, [r3, #1]
 80008e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <CS43_Start+0x7c>)
 80008ee:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008f0:	490a      	ldr	r1, [pc, #40]	@ (800091c <CS43_Start+0x80>)
 80008f2:	2032      	movs	r0, #50	@ 0x32
 80008f4:	f7ff fde0 	bl	80004b8 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <CS43_Start+0x7c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008fe:	4907      	ldr	r1, [pc, #28]	@ (800091c <CS43_Start+0x80>)
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fdd9 	bl	80004b8 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000906:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <CS43_Start+0x7c>)
 8000908:	229e      	movs	r2, #158	@ 0x9e
 800090a:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 800090c:	4903      	ldr	r1, [pc, #12]	@ (800091c <CS43_Start+0x80>)
 800090e:	2002      	movs	r0, #2
 8000910:	f7ff fdd2 	bl	80004b8 <write_register>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000120 	.word	0x20000120
 800091c:	20000121 	.word	0x20000121

08000920 <CS43_Stop>:

void CS43_Stop(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	iData[1] = 0x01;
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <CS43_Stop+0x18>)
 8000926:	2201      	movs	r2, #1
 8000928:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 800092a:	4904      	ldr	r1, [pc, #16]	@ (800093c <CS43_Stop+0x1c>)
 800092c:	2002      	movs	r0, #2
 800092e:	f7ff fdc3 	bl	80004b8 <write_register>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000120 	.word	0x20000120
 800093c:	20000121 	.word	0x20000121

08000940 <PlayerInit>:
uint32_t myDacVal;
int16_t dataI2S[1000];
PlayerState player_state = PLAYER_OFF;

void PlayerInit(I2C_HandleTypeDef hi2c)
{
 8000940:	b084      	sub	sp, #16
 8000942:	b580      	push	{r7, lr}
 8000944:	b092      	sub	sp, #72	@ 0x48
 8000946:	af12      	add	r7, sp, #72	@ 0x48
 8000948:	f107 0c08 	add.w	ip, r7, #8
 800094c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
// Initialize and Configure Audio Codec

	CS43_Init(hi2c, MODE_I2S);
 8000950:	2300      	movs	r3, #0
 8000952:	9311      	str	r3, [sp, #68]	@ 0x44
 8000954:	4668      	mov	r0, sp
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	2244      	movs	r2, #68	@ 0x44
 800095c:	4619      	mov	r1, r3
 800095e:	f00a fb11 	bl	800af84 <memcpy>
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000968:	f7ff fde6 	bl	8000538 <CS43_Init>
	CS43_SetVolume(10); //0 - 100,
 800096c:	200a      	movs	r0, #10
 800096e:	f7ff ff53 	bl	8000818 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000972:	2003      	movs	r0, #3
 8000974:	f7ff fef4 	bl	8000760 <CS43_Enable_RightLeft>
	CS43_Start();
 8000978:	f7ff ff90 	bl	800089c <CS43_Start>
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000984:	b004      	add	sp, #16
 8000986:	4770      	bx	lr

08000988 <AudioPlay>:


void AudioPlay(I2S_HandleTypeDef hi2s, float freq)
{
 8000988:	b084      	sub	sp, #16
 800098a:	b580      	push	{r7, lr}
 800098c:	b084      	sub	sp, #16
 800098e:	af00      	add	r7, sp, #0
 8000990:	f107 0c18 	add.w	ip, r7, #24
 8000994:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000998:	ed87 0a01 	vstr	s0, [r7, #4]
	player_state = PLAYER_ON;
 800099c:	4b43      	ldr	r3, [pc, #268]	@ (8000aac <AudioPlay+0x124>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]

	// Reset Signal
	HAL_I2S_DMAStop(&hi2s);
 80009a2:	f107 0018 	add.w	r0, r7, #24
 80009a6:	f003 f867 	bl	8003a78 <HAL_I2S_DMAStop>
	AudioToggle();
 80009aa:	f000 f88f 	bl	8000acc <AudioToggle>

	for(uint16_t i = 0; i < 1000; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	81fb      	strh	r3, [r7, #14]
 80009b2:	e007      	b.n	80009c4 <AudioPlay+0x3c>
	{
		dataI2S[i] = 0;
 80009b4:	89fb      	ldrh	r3, [r7, #14]
 80009b6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ab0 <AudioPlay+0x128>)
 80009b8:	2100      	movs	r1, #0
 80009ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < 1000; i++)
 80009be:	89fb      	ldrh	r3, [r7, #14]
 80009c0:	3301      	adds	r3, #1
 80009c2:	81fb      	strh	r3, [r7, #14]
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009ca:	d3f3      	bcc.n	80009b4 <AudioPlay+0x2c>
	}

	// Set Sample Rates
	sample_dt = freq / F_SAMPLE;
 80009cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80009d0:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000ab4 <AudioPlay+0x12c>
 80009d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d8:	4b37      	ldr	r3, [pc, #220]	@ (8000ab8 <AudioPlay+0x130>)
 80009da:	edc3 7a00 	vstr	s15, [r3]
	sample_N = F_SAMPLE / freq;
 80009de:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8000ab4 <AudioPlay+0x12c>
 80009e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80009e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ee:	ee17 3a90 	vmov	r3, s15
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b31      	ldr	r3, [pc, #196]	@ (8000abc <AudioPlay+0x134>)
 80009f6:	801a      	strh	r2, [r3, #0]

	// Set Signal
	for(uint16_t i=0; i<sample_N; i++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	81bb      	strh	r3, [r7, #12]
 80009fc:	e03d      	b.n	8000a7a <AudioPlay+0xf2>
	{
		mySinVal = sinf(i*2*PI*sample_dt);
 80009fe:	89bb      	ldrh	r3, [r7, #12]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	ee07 3a90 	vmov	s15, r3
 8000a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a0a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000ac0 <AudioPlay+0x138>
 8000a0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a12:	4b29      	ldr	r3, [pc, #164]	@ (8000ab8 <AudioPlay+0x130>)
 8000a14:	edd3 7a00 	vldr	s15, [r3]
 8000a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a20:	f00a fabe 	bl	800afa0 <sinf>
 8000a24:	eef0 7a40 	vmov.f32	s15, s0
 8000a28:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <AudioPlay+0x13c>)
 8000a2a:	edc3 7a00 	vstr	s15, [r3]
		dataI2S[i*2] = (mySinVal )*8000;    //Right data (0 2 4 6 8 10 12)
 8000a2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ac4 <AudioPlay+0x13c>)
 8000a30:	edd3 7a00 	vldr	s15, [r3]
 8000a34:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000ac8 <AudioPlay+0x140>
 8000a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a3c:	89bb      	ldrh	r3, [r7, #12]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a44:	ee17 2a90 	vmov	r2, s15
 8000a48:	b211      	sxth	r1, r2
 8000a4a:	4a19      	ldr	r2, [pc, #100]	@ (8000ab0 <AudioPlay+0x128>)
 8000a4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		dataI2S[i*2 + 1] =(mySinVal )*8000; //Left data  (1 3 5 7 9 11 13)
 8000a50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <AudioPlay+0x13c>)
 8000a52:	edd3 7a00 	vldr	s15, [r3]
 8000a56:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000ac8 <AudioPlay+0x140>
 8000a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a5e:	89bb      	ldrh	r3, [r7, #12]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	3301      	adds	r3, #1
 8000a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a68:	ee17 2a90 	vmov	r2, s15
 8000a6c:	b211      	sxth	r1, r2
 8000a6e:	4a10      	ldr	r2, [pc, #64]	@ (8000ab0 <AudioPlay+0x128>)
 8000a70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i=0; i<sample_N; i++)
 8000a74:	89bb      	ldrh	r3, [r7, #12]
 8000a76:	3301      	adds	r3, #1
 8000a78:	81bb      	strh	r3, [r7, #12]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <AudioPlay+0x134>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	89ba      	ldrh	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3bc      	bcc.n	80009fe <AudioPlay+0x76>
	}

	// Send Signal as Audio
	HAL_I2S_Transmit_DMA(&hi2s, (uint16_t *)dataI2S, sample_N*2);
 8000a84:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <AudioPlay+0x134>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	@ (8000ab0 <AudioPlay+0x128>)
 8000a90:	f107 0018 	add.w	r0, r7, #24
 8000a94:	f002 ff48 	bl	8003928 <HAL_I2S_Transmit_DMA>
	AudioToggle();
 8000a98:	f000 f818 	bl	8000acc <AudioToggle>
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aa6:	b004      	add	sp, #16
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000954 	.word	0x20000954
 8000ab0:	20000184 	.word	0x20000184
 8000ab4:	473b8000 	.word	0x473b8000
 8000ab8:	2000017c 	.word	0x2000017c
 8000abc:	20000180 	.word	0x20000180
 8000ac0:	40490fd0 	.word	0x40490fd0
 8000ac4:	20000178 	.word	0x20000178
 8000ac8:	45fa0000 	.word	0x45fa0000

08000acc <AudioToggle>:

void AudioToggle()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	if(player_state == PLAYER_OFF)
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <AudioToggle+0x28>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d105      	bne.n	8000ae4 <AudioToggle+0x18>
	{
		CS43_Start();
 8000ad8:	f7ff fee0 	bl	800089c <CS43_Start>
		player_state = PLAYER_ON;
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <AudioToggle+0x28>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
	else
	{
		CS43_Stop();
		player_state = PLAYER_OFF;
	}
}
 8000ae2:	e004      	b.n	8000aee <AudioToggle+0x22>
		CS43_Stop();
 8000ae4:	f7ff ff1c 	bl	8000920 <CS43_Stop>
		player_state = PLAYER_OFF;
 8000ae8:	4b02      	ldr	r3, [pc, #8]	@ (8000af4 <AudioToggle+0x28>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000954 	.word	0x20000954

08000af8 <PlayerInterface>:
float freq_out = 1000.0;



void PlayerInterface(UART_HandleTypeDef *huart, I2S_HandleTypeDef hi2s)
{
 8000af8:	b084      	sub	sp, #16
 8000afa:	b5b0      	push	{r4, r5, r7, lr}
 8000afc:	b0e2      	sub	sp, #392	@ 0x188
 8000afe:	af0e      	add	r7, sp, #56	@ 0x38
 8000b00:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 8000b04:	f5a4 74a6 	sub.w	r4, r4, #332	@ 0x14c
 8000b08:	6020      	str	r0, [r4, #0]
 8000b0a:	f507 70b2 	add.w	r0, r7, #356	@ 0x164
 8000b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t askFreq[] = "\n Choose the frequency value.\n\n\r 1- 100 Hz \n\r 2- 500Hz \n\r 3- 1 kHz \n\r 4- 1.5 kHz \n\r 5- 2 kHz \n\r 6- 5kHz \n\r 7- 7.5 kHz \n\r 8- 10 kHz\n\n\r";
 8000b12:	4aae      	ldr	r2, [pc, #696]	@ (8000dcc <PlayerInterface+0x2d4>)
 8000b14:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000b18:	4611      	mov	r1, r2
 8000b1a:	2286      	movs	r2, #134	@ 0x86
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f00a fa31 	bl	800af84 <memcpy>
	uint8_t repeat[] = "\n\n\n\r Actions \n\n\r 1- Play/Pause the sound \n\r 2- Change Frequency \n\r ";
 8000b22:	4aab      	ldr	r2, [pc, #684]	@ (8000dd0 <PlayerInterface+0x2d8>)
 8000b24:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b28:	4611      	mov	r1, r2
 8000b2a:	2244      	movs	r2, #68	@ 0x44
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f00a fa29 	bl	800af84 <memcpy>

		if( !first_flag )
 8000b32:	4ba8      	ldr	r3, [pc, #672]	@ (8000dd4 <PlayerInterface+0x2dc>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10d      	bne.n	8000b56 <PlayerInterface+0x5e>
		{
			HAL_UART_Receive(huart, &rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 8000b3a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000b3e:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	2201      	movs	r2, #1
 8000b48:	49a3      	ldr	r1, [pc, #652]	@ (8000dd8 <PlayerInterface+0x2e0>)
 8000b4a:	6800      	ldr	r0, [r0, #0]
 8000b4c:	f005 fe6b 	bl	8006826 <HAL_UART_Receive>
			HAL_Delay(100);
 8000b50:	2064      	movs	r0, #100	@ 0x64
 8000b52:	f000 febf 	bl	80018d4 <HAL_Delay>
		}

		switch(rx_buffer){
 8000b56:	4ba0      	ldr	r3, [pc, #640]	@ (8000dd8 <PlayerInterface+0x2e0>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b31      	cmp	r3, #49	@ 0x31
 8000b5c:	d002      	beq.n	8000b64 <PlayerInterface+0x6c>
 8000b5e:	2b32      	cmp	r3, #50	@ 0x32
 8000b60:	d042      	beq.n	8000be8 <PlayerInterface+0xf0>
 8000b62:	e1ac      	b.n	8000ebe <PlayerInterface+0x3c6>

		case Option_1:

			// Pause-Play Audio
			AudioToggle();
 8000b64:	f7ff ffb2 	bl	8000acc <AudioToggle>

			if( audio_flag )
 8000b68:	4b9c      	ldr	r3, [pc, #624]	@ (8000ddc <PlayerInterface+0x2e4>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d01a      	beq.n	8000ba6 <PlayerInterface+0xae>
			{
				uint8_t turn_off[] = "\n\n\r Audio Paused \n\n\r";
 8000b70:	4b9b      	ldr	r3, [pc, #620]	@ (8000de0 <PlayerInterface+0x2e8>)
 8000b72:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000b76:	461d      	mov	r5, r3
 8000b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b80:	6020      	str	r0, [r4, #0]
 8000b82:	3404      	adds	r4, #4
 8000b84:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(huart, turn_off, sizeof(turn_off), 500);
 8000b86:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000b8a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000b8e:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8000b92:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b96:	2215      	movs	r2, #21
 8000b98:	6800      	ldr	r0, [r0, #0]
 8000b9a:	f005 fdb9 	bl	8006710 <HAL_UART_Transmit>
				audio_flag = PLAYER_OFF;
 8000b9e:	4b8f      	ldr	r3, [pc, #572]	@ (8000ddc <PlayerInterface+0x2e4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	e019      	b.n	8000bda <PlayerInterface+0xe2>
			}
			else
			{
				uint8_t turn_on[] = "\n\n\r Audio Playing \n\n\r";
 8000ba6:	4b8f      	ldr	r3, [pc, #572]	@ (8000de4 <PlayerInterface+0x2ec>)
 8000ba8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000bac:	461d      	mov	r5, r3
 8000bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bb6:	6020      	str	r0, [r4, #0]
 8000bb8:	3404      	adds	r4, #4
 8000bba:	8021      	strh	r1, [r4, #0]
				HAL_UART_Transmit(huart, turn_on, sizeof(turn_on), 500);
 8000bbc:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000bc0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000bc4:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8000bc8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bcc:	2216      	movs	r2, #22
 8000bce:	6800      	ldr	r0, [r0, #0]
 8000bd0:	f005 fd9e 	bl	8006710 <HAL_UART_Transmit>
				audio_flag = PLAYER_ON;
 8000bd4:	4b81      	ldr	r3, [pc, #516]	@ (8000ddc <PlayerInterface+0x2e4>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
			}

			var = 0;
 8000bda:	4b83      	ldr	r3, [pc, #524]	@ (8000de8 <PlayerInterface+0x2f0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
			rx_buffer = Default;
 8000be0:	4b7d      	ldr	r3, [pc, #500]	@ (8000dd8 <PlayerInterface+0x2e0>)
 8000be2:	2230      	movs	r2, #48	@ 0x30
 8000be4:	701a      	strb	r2, [r3, #0]

			break;
 8000be6:	e17e      	b.n	8000ee6 <PlayerInterface+0x3ee>

		case Option_2:

			HAL_UART_Transmit(huart, askFreq, sizeof(askFreq), 500);
 8000be8:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8000bec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000bf0:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8000bf4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bf8:	2286      	movs	r2, #134	@ 0x86
 8000bfa:	6800      	ldr	r0, [r0, #0]
 8000bfc:	f005 fd88 	bl	8006710 <HAL_UART_Transmit>

			HAL_UART_Receive(huart, &var, sizeof(var), HAL_MAX_DELAY);
 8000c00:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c04:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4976      	ldr	r1, [pc, #472]	@ (8000de8 <PlayerInterface+0x2f0>)
 8000c10:	6800      	ldr	r0, [r0, #0]
 8000c12:	f005 fe08 	bl	8006826 <HAL_UART_Receive>
			HAL_Delay(100);
 8000c16:	2064      	movs	r0, #100	@ 0x64
 8000c18:	f000 fe5c 	bl	80018d4 <HAL_Delay>

			// Set and Play new frequency
			switch(var)
 8000c1c:	4b72      	ldr	r3, [pc, #456]	@ (8000de8 <PlayerInterface+0x2f0>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	3b31      	subs	r3, #49	@ 0x31
 8000c22:	2b07      	cmp	r3, #7
 8000c24:	f200 810d 	bhi.w	8000e42 <PlayerInterface+0x34a>
 8000c28:	a201      	add	r2, pc, #4	@ (adr r2, 8000c30 <PlayerInterface+0x138>)
 8000c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2e:	bf00      	nop
 8000c30:	08000c51 	.word	0x08000c51
 8000c34:	08000c87 	.word	0x08000c87
 8000c38:	08000cbd 	.word	0x08000cbd
 8000c3c:	08000cf3 	.word	0x08000cf3
 8000c40:	08000d29 	.word	0x08000d29
 8000c44:	08000d5f 	.word	0x08000d5f
 8000c48:	08000d95 	.word	0x08000d95
 8000c4c:	08000e0d 	.word	0x08000e0d
			{
				case Freq_100Hz:
					freq_out = 100.0;
 8000c50:	4b66      	ldr	r3, [pc, #408]	@ (8000dec <PlayerInterface+0x2f4>)
 8000c52:	4a67      	ldr	r2, [pc, #412]	@ (8000df0 <PlayerInterface+0x2f8>)
 8000c54:	601a      	str	r2, [r3, #0]
					AudioPlay(hi2s, freq_out);
 8000c56:	4b65      	ldr	r3, [pc, #404]	@ (8000dec <PlayerInterface+0x2f4>)
 8000c58:	edd3 7a00 	vldr	s15, [r3]
 8000c5c:	466d      	mov	r5, sp
 8000c5e:	f507 74ba 	add.w	r4, r7, #372	@ 0x174
 8000c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c72:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c76:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8000c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c80:	f7ff fe82 	bl	8000988 <AudioPlay>
					break;
 8000c84:	e0f5      	b.n	8000e72 <PlayerInterface+0x37a>

				case Freq_500Hz:
					freq_out = 500.0;
 8000c86:	4b59      	ldr	r3, [pc, #356]	@ (8000dec <PlayerInterface+0x2f4>)
 8000c88:	4a5a      	ldr	r2, [pc, #360]	@ (8000df4 <PlayerInterface+0x2fc>)
 8000c8a:	601a      	str	r2, [r3, #0]
					AudioPlay(hi2s, freq_out);
 8000c8c:	4b57      	ldr	r3, [pc, #348]	@ (8000dec <PlayerInterface+0x2f4>)
 8000c8e:	edd3 7a00 	vldr	s15, [r3]
 8000c92:	466d      	mov	r5, sp
 8000c94:	f507 74ba 	add.w	r4, r7, #372	@ 0x174
 8000c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ca8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cac:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8000cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb6:	f7ff fe67 	bl	8000988 <AudioPlay>
					break;
 8000cba:	e0da      	b.n	8000e72 <PlayerInterface+0x37a>

				case Freq_1000Hz:
					freq_out = 1000.0;
 8000cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8000dec <PlayerInterface+0x2f4>)
 8000cbe:	4a4e      	ldr	r2, [pc, #312]	@ (8000df8 <PlayerInterface+0x300>)
 8000cc0:	601a      	str	r2, [r3, #0]
					AudioPlay(hi2s, freq_out);
 8000cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8000dec <PlayerInterface+0x2f4>)
 8000cc4:	edd3 7a00 	vldr	s15, [r3]
 8000cc8:	466d      	mov	r5, sp
 8000cca:	f507 74ba 	add.w	r4, r7, #372	@ 0x174
 8000cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cde:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ce2:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8000ce6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cec:	f7ff fe4c 	bl	8000988 <AudioPlay>
					break;
 8000cf0:	e0bf      	b.n	8000e72 <PlayerInterface+0x37a>

				case Freq_1500Hz:
					freq_out = 1500.0;
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8000dec <PlayerInterface+0x2f4>)
 8000cf4:	4a41      	ldr	r2, [pc, #260]	@ (8000dfc <PlayerInterface+0x304>)
 8000cf6:	601a      	str	r2, [r3, #0]
					AudioPlay(hi2s, freq_out);
 8000cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8000dec <PlayerInterface+0x2f4>)
 8000cfa:	edd3 7a00 	vldr	s15, [r3]
 8000cfe:	466d      	mov	r5, sp
 8000d00:	f507 74ba 	add.w	r4, r7, #372	@ 0x174
 8000d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d14:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d18:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8000d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d22:	f7ff fe31 	bl	8000988 <AudioPlay>
					break;
 8000d26:	e0a4      	b.n	8000e72 <PlayerInterface+0x37a>

				case Freq_2000Hz:
					freq_out = 2000.0;
 8000d28:	4b30      	ldr	r3, [pc, #192]	@ (8000dec <PlayerInterface+0x2f4>)
 8000d2a:	4a35      	ldr	r2, [pc, #212]	@ (8000e00 <PlayerInterface+0x308>)
 8000d2c:	601a      	str	r2, [r3, #0]
					AudioPlay(hi2s, freq_out);
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <PlayerInterface+0x2f4>)
 8000d30:	edd3 7a00 	vldr	s15, [r3]
 8000d34:	466d      	mov	r5, sp
 8000d36:	f507 74ba 	add.w	r4, r7, #372	@ 0x174
 8000d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d4e:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8000d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d54:	eeb0 0a67 	vmov.f32	s0, s15
 8000d58:	f7ff fe16 	bl	8000988 <AudioPlay>
					break;
 8000d5c:	e089      	b.n	8000e72 <PlayerInterface+0x37a>

				case Freq_5000Hz:
					freq_out = 5000.0;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <PlayerInterface+0x2f4>)
 8000d60:	4a28      	ldr	r2, [pc, #160]	@ (8000e04 <PlayerInterface+0x30c>)
 8000d62:	601a      	str	r2, [r3, #0]
					AudioPlay(hi2s, freq_out);
 8000d64:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <PlayerInterface+0x2f4>)
 8000d66:	edd3 7a00 	vldr	s15, [r3]
 8000d6a:	466d      	mov	r5, sp
 8000d6c:	f507 74ba 	add.w	r4, r7, #372	@ 0x174
 8000d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d80:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d84:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8000d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8e:	f7ff fdfb 	bl	8000988 <AudioPlay>
					break;
 8000d92:	e06e      	b.n	8000e72 <PlayerInterface+0x37a>

				case Freq_7500Hz:
					freq_out = 7500.0;
 8000d94:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <PlayerInterface+0x2f4>)
 8000d96:	4a1c      	ldr	r2, [pc, #112]	@ (8000e08 <PlayerInterface+0x310>)
 8000d98:	601a      	str	r2, [r3, #0]
					AudioPlay(hi2s, freq_out);
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <PlayerInterface+0x2f4>)
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	466d      	mov	r5, sp
 8000da2:	f507 74ba 	add.w	r4, r7, #372	@ 0x174
 8000da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000db6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dba:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8000dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc4:	f7ff fde0 	bl	8000988 <AudioPlay>
					break;
 8000dc8:	e053      	b.n	8000e72 <PlayerInterface+0x37a>
 8000dca:	bf00      	nop
 8000dcc:	0800ba2c 	.word	0x0800ba2c
 8000dd0:	0800bab4 	.word	0x0800bab4
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000001 	.word	0x20000001
 8000ddc:	20000955 	.word	0x20000955
 8000de0:	0800baf8 	.word	0x0800baf8
 8000de4:	0800bb10 	.word	0x0800bb10
 8000de8:	20000956 	.word	0x20000956
 8000dec:	20000004 	.word	0x20000004
 8000df0:	42c80000 	.word	0x42c80000
 8000df4:	43fa0000 	.word	0x43fa0000
 8000df8:	447a0000 	.word	0x447a0000
 8000dfc:	44bb8000 	.word	0x44bb8000
 8000e00:	44fa0000 	.word	0x44fa0000
 8000e04:	459c4000 	.word	0x459c4000
 8000e08:	45ea6000 	.word	0x45ea6000

				case Freq_10kHz:
					freq_out = 10000.0;
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef8 <PlayerInterface+0x400>)
 8000e0e:	4a3b      	ldr	r2, [pc, #236]	@ (8000efc <PlayerInterface+0x404>)
 8000e10:	601a      	str	r2, [r3, #0]
					AudioPlay(hi2s, freq_out);
 8000e12:	4b39      	ldr	r3, [pc, #228]	@ (8000ef8 <PlayerInterface+0x400>)
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	466d      	mov	r5, sp
 8000e1a:	f507 74ba 	add.w	r4, r7, #372	@ 0x174
 8000e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e32:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8000e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e38:	eeb0 0a67 	vmov.f32	s0, s15
 8000e3c:	f7ff fda4 	bl	8000988 <AudioPlay>
					break;
 8000e40:	e017      	b.n	8000e72 <PlayerInterface+0x37a>

				default:
					uint8_t error[] = "\n\n\n\r Error: Incorrect Input.\n\n\r Please Choose from the given options. ";
 8000e42:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000e46:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f00 <PlayerInterface+0x408>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	4611      	mov	r1, r2
 8000e50:	2347      	movs	r3, #71	@ 0x47
 8000e52:	461a      	mov	r2, r3
 8000e54:	f00a f896 	bl	800af84 <memcpy>
					HAL_UART_Transmit(huart, error, sizeof(error), 500);
 8000e58:	f107 010c 	add.w	r1, r7, #12
 8000e5c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000e60:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8000e64:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e68:	2247      	movs	r2, #71	@ 0x47
 8000e6a:	6800      	ldr	r0, [r0, #0]
 8000e6c:	f005 fc50 	bl	8006710 <HAL_UART_Transmit>
					break;
 8000e70:	bf00      	nop
			}

			HAL_UART_Transmit(huart, repeat, sizeof(repeat), 500);
 8000e72:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000e76:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000e7a:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8000e7e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e82:	2244      	movs	r2, #68	@ 0x44
 8000e84:	6800      	ldr	r0, [r0, #0]
 8000e86:	f005 fc43 	bl	8006710 <HAL_UART_Transmit>

			var = 0;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <PlayerInterface+0x40c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
			rx_buffer = Default;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <PlayerInterface+0x410>)
 8000e92:	2230      	movs	r2, #48	@ 0x30
 8000e94:	701a      	strb	r2, [r3, #0]

			audio_flag = STATE_ON;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <PlayerInterface+0x414>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
			first_flag = STATE_OFF;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <PlayerInterface+0x418>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
			test_count++;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <PlayerInterface+0x41c>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <PlayerInterface+0x41c>)
 8000eac:	701a      	strb	r2, [r3, #0]
			if(test_count >= 57){ test_count = 49; }
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <PlayerInterface+0x41c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b38      	cmp	r3, #56	@ 0x38
 8000eb4:	d916      	bls.n	8000ee4 <PlayerInterface+0x3ec>
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <PlayerInterface+0x41c>)
 8000eb8:	2231      	movs	r2, #49	@ 0x31
 8000eba:	701a      	strb	r2, [r3, #0]

			break;
 8000ebc:	e012      	b.n	8000ee4 <PlayerInterface+0x3ec>

		default:
			HAL_UART_Transmit(huart, repeat, sizeof(repeat), 500);
 8000ebe:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000ec2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000ec6:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8000eca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ece:	2244      	movs	r2, #68	@ 0x44
 8000ed0:	6800      	ldr	r0, [r0, #0]
 8000ed2:	f005 fc1d 	bl	8006710 <HAL_UART_Transmit>

			var = 0;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <PlayerInterface+0x40c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
			rx_buffer = Default;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <PlayerInterface+0x410>)
 8000ede:	2230      	movs	r2, #48	@ 0x30
 8000ee0:	701a      	strb	r2, [r3, #0]

			break;
 8000ee2:	e000      	b.n	8000ee6 <PlayerInterface+0x3ee>
			break;
 8000ee4:	bf00      	nop
		}
}
 8000ee6:	bf00      	nop
 8000ee8:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8000eec:	46bd      	mov	sp, r7
 8000eee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ef2:	b004      	add	sp, #16
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000004 	.word	0x20000004
 8000efc:	461c4000 	.word	0x461c4000
 8000f00:	0800bb28 	.word	0x0800bb28
 8000f04:	20000956 	.word	0x20000956
 8000f08:	20000001 	.word	0x20000001
 8000f0c:	20000955 	.word	0x20000955
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000002 	.word	0x20000002

08000f18 <InterfaceInit>:


void InterfaceInit(UART_HandleTypeDef *huart, I2S_HandleTypeDef hi2s, I2C_HandleTypeDef hi2c)
{
 8000f18:	b084      	sub	sp, #16
 8000f1a:	b5b0      	push	{r4, r5, r7, lr}
 8000f1c:	b0a8      	sub	sp, #160	@ 0xa0
 8000f1e:	af12      	add	r7, sp, #72	@ 0x48
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8000f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint8_t greeting[] = "\n\n\n\r Audio Generator\n\n\r A sound with the selected frequency will play. \n\n\r ";
 8000f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f9c <InterfaceInit+0x84>)
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4611      	mov	r1, r2
 8000f32:	224c      	movs	r2, #76	@ 0x4c
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00a f825 	bl	800af84 <memcpy>
	HAL_UART_Transmit(huart, greeting, sizeof(greeting), 500);
 8000f3a:	f107 010c 	add.w	r1, r7, #12
 8000f3e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f42:	224c      	movs	r2, #76	@ 0x4c
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f005 fbe3 	bl	8006710 <HAL_UART_Transmit>

	// Directly Get and Play frequency without showing action options
	rx_buffer = 50;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <InterfaceInit+0x88>)
 8000f4c:	2232      	movs	r2, #50	@ 0x32
 8000f4e:	701a      	strb	r2, [r3, #0]

	PlayerInit(hi2c);
 8000f50:	4668      	mov	r0, sp
 8000f52:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000f56:	2244      	movs	r2, #68	@ 0x44
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f00a f813 	bl	800af84 <memcpy>
 8000f5e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f64:	f7ff fcec 	bl	8000940 <PlayerInit>

	PlayerInterface(huart, hi2s);
 8000f68:	466d      	mov	r5, sp
 8000f6a:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8000f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f7a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f7e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000f82:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff fdb5 	bl	8000af8 <PlayerInterface>

}
 8000f8e:	bf00      	nop
 8000f90:	3758      	adds	r7, #88	@ 0x58
 8000f92:	46bd      	mov	sp, r7
 8000f94:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000f98:	b004      	add	sp, #16
 8000f9a:	4770      	bx	lr
 8000f9c:	0800bb70 	.word	0x0800bb70
 8000fa0:	20000001 	.word	0x20000001

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa6:	b0a5      	sub	sp, #148	@ 0x94
 8000fa8:	af24      	add	r7, sp, #144	@ 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000faa:	f000 fc21 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fae:	f000 f841 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb2:	f000 f957 	bl	8001264 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb6:	f000 f92d 	bl	8001214 <MX_DMA_Init>
  MX_I2C1_Init();
 8000fba:	f000 f8a5 	bl	8001108 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000fbe:	f000 f8d1 	bl	8001164 <MX_I2S3_Init>
  MX_USB_DEVICE_Init();
 8000fc2:	f009 fabf 	bl	800a544 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000fc6:	f000 f8fb 	bl	80011c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  	InterfaceInit(&huart2, hi2s3, hi2c1);
 8000fca:	4e17      	ldr	r6, [pc, #92]	@ (8001028 <main+0x84>)
 8000fcc:	4a17      	ldr	r2, [pc, #92]	@ (800102c <main+0x88>)
 8000fce:	ab0f      	add	r3, sp, #60	@ 0x3c
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	2254      	movs	r2, #84	@ 0x54
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f009 ffd5 	bl	800af84 <memcpy>
 8000fda:	466d      	mov	r5, sp
 8000fdc:	f106 040c 	add.w	r4, r6, #12
 8000fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ff0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000ff4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <main+0x8c>)
 8000ffa:	f7ff ff8d 	bl	8000f18 <InterfaceInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 PlayerInterface(&huart2, hi2s3);
 8000ffe:	4e0a      	ldr	r6, [pc, #40]	@ (8001028 <main+0x84>)
 8001000:	466d      	mov	r5, sp
 8001002:	f106 040c 	add.w	r4, r6, #12
 8001006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001012:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001016:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800101a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800101e:	4804      	ldr	r0, [pc, #16]	@ (8001030 <main+0x8c>)
 8001020:	f7ff fd6a 	bl	8000af8 <PlayerInterface>
 8001024:	e7eb      	b.n	8000ffe <main+0x5a>
 8001026:	bf00      	nop
 8001028:	200009ac 	.word	0x200009ac
 800102c:	20000958 	.word	0x20000958
 8001030:	20000a54 	.word	0x20000a54

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2230      	movs	r2, #48	@ 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f009 ff72 	bl	800af2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b28      	ldr	r3, [pc, #160]	@ (8001100 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <SystemClock_Config+0xcc>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	@ 0x40
 8001068:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a21      	ldr	r2, [pc, #132]	@ (8001104 <SystemClock_Config+0xd0>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001090:	2301      	movs	r3, #1
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001094:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a4:	2308      	movs	r3, #8
 80010a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b2:	2307      	movs	r3, #7
 80010b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 fcfe 	bl	8005abc <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010c6:	f000 f953 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	2302      	movs	r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2105      	movs	r1, #5
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 ff5f 	bl	8005fac <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010f4:	f000 f93c 	bl	8001370 <Error_Handler>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3750      	adds	r7, #80	@ 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MX_I2C1_Init+0x50>)
 800110e:	4a13      	ldr	r2, [pc, #76]	@ (800115c <MX_I2C1_Init+0x54>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001114:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <MX_I2C1_Init+0x58>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001126:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800112a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001146:	f001 fab5 	bl	80026b4 <HAL_I2C_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001150:	f000 f90e 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000958 	.word	0x20000958
 800115c:	40005400 	.word	0x40005400
 8001160:	000186a0 	.word	0x000186a0

08001164 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_I2S3_Init+0x54>)
 800116a:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <MX_I2S3_Init+0x58>)
 800116c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_I2S3_Init+0x54>)
 8001170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001174:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <MX_I2S3_Init+0x54>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800117c:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_I2S3_Init+0x54>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <MX_I2S3_Init+0x54>)
 8001184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001188:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <MX_I2S3_Init+0x54>)
 800118c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001190:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_I2S3_Init+0x54>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <MX_I2S3_Init+0x54>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_I2S3_Init+0x54>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <MX_I2S3_Init+0x54>)
 80011a6:	f002 fa7f 	bl	80036a8 <HAL_I2S_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80011b0:	f000 f8de 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200009ac 	.word	0x200009ac
 80011bc:	40003c00 	.word	0x40003c00

080011c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <MX_USART2_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011f8:	f005 fa3a 	bl	8006670 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f000 f8b5 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000a54 	.word	0x20000a54
 8001210:	40004400 	.word	0x40004400

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <MX_DMA_Init+0x4c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <MX_DMA_Init+0x4c>)
 8001224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <MX_DMA_Init+0x4c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2010      	movs	r0, #16
 800123c:	f000 fc49 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001240:	2010      	movs	r0, #16
 8001242:	f000 fc62 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	202f      	movs	r0, #47	@ 0x2f
 800124c:	f000 fc41 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001250:	202f      	movs	r0, #47	@ 0x2f
 8001252:	f000 fc5a 	bl	8001b0a <HAL_NVIC_EnableIRQ>

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b39      	ldr	r3, [pc, #228]	@ (8001364 <MX_GPIO_Init+0x100>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a38      	ldr	r2, [pc, #224]	@ (8001364 <MX_GPIO_Init+0x100>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b36      	ldr	r3, [pc, #216]	@ (8001364 <MX_GPIO_Init+0x100>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b32      	ldr	r3, [pc, #200]	@ (8001364 <MX_GPIO_Init+0x100>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a31      	ldr	r2, [pc, #196]	@ (8001364 <MX_GPIO_Init+0x100>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001364 <MX_GPIO_Init+0x100>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <MX_GPIO_Init+0x100>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001364 <MX_GPIO_Init+0x100>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <MX_GPIO_Init+0x100>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <MX_GPIO_Init+0x100>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a23      	ldr	r2, [pc, #140]	@ (8001364 <MX_GPIO_Init+0x100>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <MX_GPIO_Init+0x100>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <MX_GPIO_Init+0x100>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001364 <MX_GPIO_Init+0x100>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <MX_GPIO_Init+0x100>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001306:	2200      	movs	r2, #0
 8001308:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800130c:	4816      	ldr	r0, [pc, #88]	@ (8001368 <MX_GPIO_Init+0x104>)
 800130e:	f001 f993 	bl	8002638 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001312:	2301      	movs	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001316:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4811      	ldr	r0, [pc, #68]	@ (800136c <MX_GPIO_Init+0x108>)
 8001328:	f000 ffea 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800132c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001330:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4808      	ldr	r0, [pc, #32]	@ (8001368 <MX_GPIO_Init+0x104>)
 8001346:	f000 ffdb 	bl	8002300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	2006      	movs	r0, #6
 8001350:	f000 fbbf 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001354:	2006      	movs	r0, #6
 8001356:	f000 fbd8 	bl	8001b0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	@ 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40020000 	.word	0x40020000

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	4a0f      	ldr	r2, [pc, #60]	@ (80013c8 <HAL_MspInit+0x4c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001390:	6453      	str	r3, [r2, #68]	@ 0x44
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ba:	2007      	movs	r0, #7
 80013bc:	f000 fb7e 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	@ 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <HAL_I2C_MspInit+0x84>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12c      	bne.n	8001448 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a17      	ldr	r2, [pc, #92]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800140a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001410:	2312      	movs	r3, #18
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141c:	2304      	movs	r3, #4
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	480c      	ldr	r0, [pc, #48]	@ (8001458 <HAL_I2C_MspInit+0x8c>)
 8001428:	f000 ff6a 	bl	8002300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	4a07      	ldr	r2, [pc, #28]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 8001436:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800143a:	6413      	str	r3, [r2, #64]	@ 0x40
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	@ 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40005400 	.word	0x40005400
 8001454:	40023800 	.word	0x40023800
 8001458:	40020400 	.word	0x40020400

0800145c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08e      	sub	sp, #56	@ 0x38
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a4e      	ldr	r2, [pc, #312]	@ (80015c0 <HAL_I2S_MspInit+0x164>)
 8001488:	4293      	cmp	r3, r2
 800148a:	f040 8094 	bne.w	80015b6 <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800148e:	2301      	movs	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001492:	23c0      	movs	r3, #192	@ 0xc0
 8001494:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001496:	2302      	movs	r3, #2
 8001498:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 ffa4 	bl	80063ec <HAL_RCCEx_PeriphCLKConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80014aa:	f7ff ff61 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b44      	ldr	r3, [pc, #272]	@ (80015c4 <HAL_I2S_MspInit+0x168>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a43      	ldr	r2, [pc, #268]	@ (80015c4 <HAL_I2S_MspInit+0x168>)
 80014b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b41      	ldr	r3, [pc, #260]	@ (80015c4 <HAL_I2S_MspInit+0x168>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b3d      	ldr	r3, [pc, #244]	@ (80015c4 <HAL_I2S_MspInit+0x168>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a3c      	ldr	r2, [pc, #240]	@ (80015c4 <HAL_I2S_MspInit+0x168>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b3a      	ldr	r3, [pc, #232]	@ (80015c4 <HAL_I2S_MspInit+0x168>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b36      	ldr	r3, [pc, #216]	@ (80015c4 <HAL_I2S_MspInit+0x168>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a35      	ldr	r2, [pc, #212]	@ (80015c4 <HAL_I2S_MspInit+0x168>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b33      	ldr	r3, [pc, #204]	@ (80015c4 <HAL_I2S_MspInit+0x168>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001502:	2310      	movs	r3, #16
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001512:	2306      	movs	r3, #6
 8001514:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151a:	4619      	mov	r1, r3
 800151c:	482a      	ldr	r0, [pc, #168]	@ (80015c8 <HAL_I2S_MspInit+0x16c>)
 800151e:	f000 feef 	bl	8002300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001522:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001534:	2306      	movs	r3, #6
 8001536:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	4823      	ldr	r0, [pc, #140]	@ (80015cc <HAL_I2S_MspInit+0x170>)
 8001540:	f000 fede 	bl	8002300 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8001544:	4b22      	ldr	r3, [pc, #136]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 8001546:	4a23      	ldr	r2, [pc, #140]	@ (80015d4 <HAL_I2S_MspInit+0x178>)
 8001548:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800154a:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 800154c:	2200      	movs	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001550:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 8001552:	2240      	movs	r2, #64	@ 0x40
 8001554:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	4b1e      	ldr	r3, [pc, #120]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 800155e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001562:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001564:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 8001566:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800156a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800156c:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 800156e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001572:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 8001576:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800157a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001582:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 8001584:	2204      	movs	r2, #4
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 800158a:	2203      	movs	r2, #3
 800158c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 8001590:	2200      	movs	r2, #0
 8001592:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001594:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 8001596:	2200      	movs	r2, #0
 8001598:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800159a:	480d      	ldr	r0, [pc, #52]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 800159c:	f000 fad0 	bl	8001b40 <HAL_DMA_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 80015a6:	f7ff fee3 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 80015ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80015b0:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <HAL_I2S_MspInit+0x174>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3738      	adds	r7, #56	@ 0x38
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40003c00 	.word	0x40003c00
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020800 	.word	0x40020800
 80015d0:	200009f4 	.word	0x200009f4
 80015d4:	400260b8 	.word	0x400260b8

080015d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a30      	ldr	r2, [pc, #192]	@ (80016b8 <HAL_UART_MspInit+0xe0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d159      	bne.n	80016ae <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b2f      	ldr	r3, [pc, #188]	@ (80016bc <HAL_UART_MspInit+0xe4>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a2e      	ldr	r2, [pc, #184]	@ (80016bc <HAL_UART_MspInit+0xe4>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b2c      	ldr	r3, [pc, #176]	@ (80016bc <HAL_UART_MspInit+0xe4>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b28      	ldr	r3, [pc, #160]	@ (80016bc <HAL_UART_MspInit+0xe4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a27      	ldr	r2, [pc, #156]	@ (80016bc <HAL_UART_MspInit+0xe4>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b25      	ldr	r3, [pc, #148]	@ (80016bc <HAL_UART_MspInit+0xe4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001632:	230c      	movs	r3, #12
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001642:	2307      	movs	r3, #7
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	481c      	ldr	r0, [pc, #112]	@ (80016c0 <HAL_UART_MspInit+0xe8>)
 800164e:	f000 fe57 	bl	8002300 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001652:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001654:	4a1c      	ldr	r2, [pc, #112]	@ (80016c8 <HAL_UART_MspInit+0xf0>)
 8001656:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 800165a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800165e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001660:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800166c:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 800166e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001672:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800167a:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001680:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800168c:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001692:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001694:	f000 fa54 	bl	8001b40 <HAL_DMA_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800169e:	f7ff fe67 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 80016a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016a8:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40004400 	.word	0x40004400
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	20000a9c 	.word	0x20000a9c
 80016c8:	40026088 	.word	0x40026088

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <NMI_Handler+0x4>

080016d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <MemManage_Handler+0x4>

080016e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001722:	f000 f8b7 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}

0800172a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	AudioToggle();
 800172e:	f7ff f9cd 	bl	8000acc <AudioToggle>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001732:	2001      	movs	r0, #1
 8001734:	f000 ff9a 	bl	800266c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <DMA1_Stream5_IRQHandler+0x10>)
 8001742:	f000 fb73 	bl	8001e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000a9c 	.word	0x20000a9c

08001750 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <DMA1_Stream7_IRQHandler+0x10>)
 8001756:	f000 fb69 	bl	8001e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200009f4 	.word	0x200009f4

08001764 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <OTG_FS_IRQHandler+0x10>)
 800176a:	f003 f89b 	bl	80048a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20001fe0 	.word	0x20001fe0

08001778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017a0:	f7ff ffea 	bl	8001778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	@ (80017dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	@ (80017e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f009 fbb7 	bl	800af3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7ff fbe9 	bl	8000fa4 <main>
  bx  lr    
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80017e0:	0800c004 	.word	0x0800c004
  ldr r2, =_sbss
 80017e4:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80017e8:	200026e4 	.word	0x200026e4

080017ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <HAL_Init+0x40>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <HAL_Init+0x40>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800180a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <HAL_Init+0x40>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 f94f 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f808 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fdaa 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800183c:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <HAL_InitTick+0x54>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_InitTick+0x58>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f967 	bl	8001b26 <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00e      	b.n	8001880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d80a      	bhi.n	800187e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f000 f92f 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4a06      	ldr	r2, [pc, #24]	@ (8001890 <HAL_InitTick+0x5c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000008 	.word	0x20000008
 800188c:	20000010 	.word	0x20000010
 8001890:	2000000c 	.word	0x2000000c

08001894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_IncTick+0x20>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_IncTick+0x24>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <HAL_IncTick+0x24>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000010 	.word	0x20000010
 80018b8:	20000afc 	.word	0x20000afc

080018bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <HAL_GetTick+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000afc 	.word	0x20000afc

080018d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff ffee 	bl	80018bc <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d005      	beq.n	80018fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <HAL_Delay+0x44>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018fa:	bf00      	nop
 80018fc:	f7ff ffde 	bl	80018bc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d8f7      	bhi.n	80018fc <HAL_Delay+0x28>
  {
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000010 	.word	0x20000010

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4907      	ldr	r1, [pc, #28]	@ (80019b8 <__NVIC_EnableIRQ+0x38>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	@ (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff29 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff3e 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff31 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa2 	bl	8001a78 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff feb6 	bl	80018bc <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e099      	b.n	8001c90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7c:	e00f      	b.n	8001b9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b7e:	f7ff fe9d 	bl	80018bc <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d908      	bls.n	8001b9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2203      	movs	r2, #3
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e078      	b.n	8001c90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e8      	bne.n	8001b7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4b38      	ldr	r3, [pc, #224]	@ (8001c98 <HAL_DMA_Init+0x158>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d107      	bne.n	8001c08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	4313      	orrs	r3, r2
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f023 0307 	bic.w	r3, r3, #7
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d117      	bne.n	8001c62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00e      	beq.n	8001c62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fadf 	bl	8002208 <DMA_CheckFifoParam>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2240      	movs	r2, #64	@ 0x40
 8001c54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e016      	b.n	8001c90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fa96 	bl	800219c <DMA_CalcBaseAndBitshift>
 8001c70:	4603      	mov	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c78:	223f      	movs	r2, #63	@ 0x3f
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	f010803f 	.word	0xf010803f

08001c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_DMA_Start_IT+0x26>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e040      	b.n	8001d44 <HAL_DMA_Start_IT+0xa8>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d12f      	bne.n	8001d36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 fa28 	bl	8002140 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf4:	223f      	movs	r2, #63	@ 0x3f
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0216 	orr.w	r2, r2, #22
 8001d0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0208 	orr.w	r2, r2, #8
 8001d22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	e005      	b.n	8001d42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d5a:	f7ff fdaf 	bl	80018bc <HAL_GetTick>
 8001d5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d008      	beq.n	8001d7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2280      	movs	r2, #128	@ 0x80
 8001d70:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e052      	b.n	8001e24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0216 	bic.w	r2, r2, #22
 8001d8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <HAL_DMA_Abort+0x62>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0208 	bic.w	r2, r2, #8
 8001dbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dce:	e013      	b.n	8001df8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dd0:	f7ff fd74 	bl	80018bc <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d90c      	bls.n	8001df8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2220      	movs	r2, #32
 8001de2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2203      	movs	r2, #3
 8001de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e015      	b.n	8001e24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e4      	bne.n	8001dd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	223f      	movs	r2, #63	@ 0x3f
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e38:	4b8e      	ldr	r3, [pc, #568]	@ (8002074 <HAL_DMA_IRQHandler+0x248>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a8e      	ldr	r2, [pc, #568]	@ (8002078 <HAL_DMA_IRQHandler+0x24c>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0a9b      	lsrs	r3, r3, #10
 8001e44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e56:	2208      	movs	r2, #8
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d01a      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0204 	bic.w	r2, r2, #4
 8001e7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e84:	2208      	movs	r2, #8
 8001e86:	409a      	lsls	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e90:	f043 0201 	orr.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d012      	beq.n	8001ece <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eba:	2201      	movs	r2, #1
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec6:	f043 0202 	orr.w	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d012      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efc:	f043 0204 	orr.w	r2, r3, #4
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	2210      	movs	r2, #16
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d043      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d03c      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f26:	2210      	movs	r2, #16
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d018      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d108      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d024      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4798      	blx	r3
 8001f5a:	e01f      	b.n	8001f9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
 8001f6c:	e016      	b.n	8001f9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0208 	bic.w	r2, r2, #8
 8001f8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 808f 	beq.w	80020cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8087 	beq.w	80020cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d136      	bne.n	8002044 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0216 	bic.w	r2, r2, #22
 8001fe4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ff4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <HAL_DMA_IRQHandler+0x1da>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0208 	bic.w	r2, r2, #8
 8002014:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	223f      	movs	r2, #63	@ 0x3f
 800201c:	409a      	lsls	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002036:	2b00      	cmp	r3, #0
 8002038:	d07e      	beq.n	8002138 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
        }
        return;
 8002042:	e079      	b.n	8002138 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01d      	beq.n	800208e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10d      	bne.n	800207c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002064:	2b00      	cmp	r3, #0
 8002066:	d031      	beq.n	80020cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	e02c      	b.n	80020cc <HAL_DMA_IRQHandler+0x2a0>
 8002072:	bf00      	nop
 8002074:	20000008 	.word	0x20000008
 8002078:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	2b00      	cmp	r3, #0
 8002082:	d023      	beq.n	80020cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
 800208c:	e01e      	b.n	80020cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10f      	bne.n	80020bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0210 	bic.w	r2, r2, #16
 80020aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d032      	beq.n	800213a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d022      	beq.n	8002126 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2205      	movs	r2, #5
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	3301      	adds	r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	d307      	bcc.n	8002114 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f2      	bne.n	80020f8 <HAL_DMA_IRQHandler+0x2cc>
 8002112:	e000      	b.n	8002116 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002114:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
 8002136:	e000      	b.n	800213a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002138:	bf00      	nop
    }
  }
}
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800215c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b40      	cmp	r3, #64	@ 0x40
 800216c:	d108      	bne.n	8002180 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800217e:	e007      	b.n	8002190 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	3b10      	subs	r3, #16
 80021ac:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <DMA_CalcBaseAndBitshift+0x64>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021b6:	4a13      	ldr	r2, [pc, #76]	@ (8002204 <DMA_CalcBaseAndBitshift+0x68>)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d909      	bls.n	80021de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	1d1a      	adds	r2, r3, #4
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	659a      	str	r2, [r3, #88]	@ 0x58
 80021dc:	e007      	b.n	80021ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	aaaaaaab 	.word	0xaaaaaaab
 8002204:	0800bc1c 	.word	0x0800bc1c

08002208 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d11f      	bne.n	8002262 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d856      	bhi.n	80022d6 <DMA_CheckFifoParam+0xce>
 8002228:	a201      	add	r2, pc, #4	@ (adr r2, 8002230 <DMA_CheckFifoParam+0x28>)
 800222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222e:	bf00      	nop
 8002230:	08002241 	.word	0x08002241
 8002234:	08002253 	.word	0x08002253
 8002238:	08002241 	.word	0x08002241
 800223c:	080022d7 	.word	0x080022d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d046      	beq.n	80022da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002250:	e043      	b.n	80022da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002256:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800225a:	d140      	bne.n	80022de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002260:	e03d      	b.n	80022de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800226a:	d121      	bne.n	80022b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d837      	bhi.n	80022e2 <DMA_CheckFifoParam+0xda>
 8002272:	a201      	add	r2, pc, #4	@ (adr r2, 8002278 <DMA_CheckFifoParam+0x70>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	08002289 	.word	0x08002289
 800227c:	0800228f 	.word	0x0800228f
 8002280:	08002289 	.word	0x08002289
 8002284:	080022a1 	.word	0x080022a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
      break;
 800228c:	e030      	b.n	80022f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002292:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d025      	beq.n	80022e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800229e:	e022      	b.n	80022e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022a8:	d11f      	bne.n	80022ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022ae:	e01c      	b.n	80022ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d903      	bls.n	80022be <DMA_CheckFifoParam+0xb6>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d003      	beq.n	80022c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022bc:	e018      	b.n	80022f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
      break;
 80022c2:	e015      	b.n	80022f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00e      	beq.n	80022ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
      break;
 80022d4:	e00b      	b.n	80022ee <DMA_CheckFifoParam+0xe6>
      break;
 80022d6:	bf00      	nop
 80022d8:	e00a      	b.n	80022f0 <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
 80022dc:	e008      	b.n	80022f0 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
 80022e0:	e006      	b.n	80022f0 <DMA_CheckFifoParam+0xe8>
      break;
 80022e2:	bf00      	nop
 80022e4:	e004      	b.n	80022f0 <DMA_CheckFifoParam+0xe8>
      break;
 80022e6:	bf00      	nop
 80022e8:	e002      	b.n	80022f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80022ea:	bf00      	nop
 80022ec:	e000      	b.n	80022f0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ee:	bf00      	nop
    }
  } 
  
  return status; 
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	@ 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e16b      	b.n	80025f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 815a 	bne.w	80025ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d005      	beq.n	8002352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	2b02      	cmp	r3, #2
 8002350:	d130      	bne.n	80023b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 0201 	and.w	r2, r3, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d017      	beq.n	80023f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d123      	bne.n	8002444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80b4 	beq.w	80025ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b60      	ldr	r3, [pc, #384]	@ (800260c <HAL_GPIO_Init+0x30c>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	4a5f      	ldr	r2, [pc, #380]	@ (800260c <HAL_GPIO_Init+0x30c>)
 8002490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002494:	6453      	str	r3, [r2, #68]	@ 0x44
 8002496:	4b5d      	ldr	r3, [pc, #372]	@ (800260c <HAL_GPIO_Init+0x30c>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002610 <HAL_GPIO_Init+0x310>)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a52      	ldr	r2, [pc, #328]	@ (8002614 <HAL_GPIO_Init+0x314>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d02b      	beq.n	8002526 <HAL_GPIO_Init+0x226>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a51      	ldr	r2, [pc, #324]	@ (8002618 <HAL_GPIO_Init+0x318>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d025      	beq.n	8002522 <HAL_GPIO_Init+0x222>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a50      	ldr	r2, [pc, #320]	@ (800261c <HAL_GPIO_Init+0x31c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01f      	beq.n	800251e <HAL_GPIO_Init+0x21e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002620 <HAL_GPIO_Init+0x320>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d019      	beq.n	800251a <HAL_GPIO_Init+0x21a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002624 <HAL_GPIO_Init+0x324>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_GPIO_Init+0x216>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002628 <HAL_GPIO_Init+0x328>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00d      	beq.n	8002512 <HAL_GPIO_Init+0x212>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4c      	ldr	r2, [pc, #304]	@ (800262c <HAL_GPIO_Init+0x32c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <HAL_GPIO_Init+0x20e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4b      	ldr	r2, [pc, #300]	@ (8002630 <HAL_GPIO_Init+0x330>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_GPIO_Init+0x20a>
 8002506:	2307      	movs	r3, #7
 8002508:	e00e      	b.n	8002528 <HAL_GPIO_Init+0x228>
 800250a:	2308      	movs	r3, #8
 800250c:	e00c      	b.n	8002528 <HAL_GPIO_Init+0x228>
 800250e:	2306      	movs	r3, #6
 8002510:	e00a      	b.n	8002528 <HAL_GPIO_Init+0x228>
 8002512:	2305      	movs	r3, #5
 8002514:	e008      	b.n	8002528 <HAL_GPIO_Init+0x228>
 8002516:	2304      	movs	r3, #4
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x228>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x228>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x228>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x228>
 8002526:	2300      	movs	r3, #0
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f002 0203 	and.w	r2, r2, #3
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002538:	4935      	ldr	r1, [pc, #212]	@ (8002610 <HAL_GPIO_Init+0x310>)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b3b      	ldr	r3, [pc, #236]	@ (8002634 <HAL_GPIO_Init+0x334>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256a:	4a32      	ldr	r2, [pc, #200]	@ (8002634 <HAL_GPIO_Init+0x334>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002570:	4b30      	ldr	r3, [pc, #192]	@ (8002634 <HAL_GPIO_Init+0x334>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002594:	4a27      	ldr	r2, [pc, #156]	@ (8002634 <HAL_GPIO_Init+0x334>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800259a:	4b26      	ldr	r3, [pc, #152]	@ (8002634 <HAL_GPIO_Init+0x334>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025be:	4a1d      	ldr	r2, [pc, #116]	@ (8002634 <HAL_GPIO_Init+0x334>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002634 <HAL_GPIO_Init+0x334>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e8:	4a12      	ldr	r2, [pc, #72]	@ (8002634 <HAL_GPIO_Init+0x334>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3301      	adds	r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	f67f ae90 	bls.w	800231c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3724      	adds	r7, #36	@ 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	40013800 	.word	0x40013800
 8002614:	40020000 	.word	0x40020000
 8002618:	40020400 	.word	0x40020400
 800261c:	40020800 	.word	0x40020800
 8002620:	40020c00 	.word	0x40020c00
 8002624:	40021000 	.word	0x40021000
 8002628:	40021400 	.word	0x40021400
 800262c:	40021800 	.word	0x40021800
 8002630:	40021c00 	.word	0x40021c00
 8002634:	40013c00 	.word	0x40013c00

08002638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002648:	787b      	ldrb	r3, [r7, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002654:	e003      	b.n	800265e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	619a      	str	r2, [r3, #24]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002676:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002682:	4a05      	ldr	r2, [pc, #20]	@ (8002698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f806 	bl	800269c <HAL_GPIO_EXTI_Callback>
  }
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40013c00 	.word	0x40013c00

0800269c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e12b      	b.n	800291e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fe76 	bl	80013cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	@ 0x24
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002718:	f003 fe40 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 800271c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a81      	ldr	r2, [pc, #516]	@ (8002928 <HAL_I2C_Init+0x274>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d807      	bhi.n	8002738 <HAL_I2C_Init+0x84>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a80      	ldr	r2, [pc, #512]	@ (800292c <HAL_I2C_Init+0x278>)
 800272c:	4293      	cmp	r3, r2
 800272e:	bf94      	ite	ls
 8002730:	2301      	movls	r3, #1
 8002732:	2300      	movhi	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e006      	b.n	8002746 <HAL_I2C_Init+0x92>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a7d      	ldr	r2, [pc, #500]	@ (8002930 <HAL_I2C_Init+0x27c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	bf94      	ite	ls
 8002740:	2301      	movls	r3, #1
 8002742:	2300      	movhi	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0e7      	b.n	800291e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4a78      	ldr	r2, [pc, #480]	@ (8002934 <HAL_I2C_Init+0x280>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0c9b      	lsrs	r3, r3, #18
 8002758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a6a      	ldr	r2, [pc, #424]	@ (8002928 <HAL_I2C_Init+0x274>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d802      	bhi.n	8002788 <HAL_I2C_Init+0xd4>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3301      	adds	r3, #1
 8002786:	e009      	b.n	800279c <HAL_I2C_Init+0xe8>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	4a69      	ldr	r2, [pc, #420]	@ (8002938 <HAL_I2C_Init+0x284>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	3301      	adds	r3, #1
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	495c      	ldr	r1, [pc, #368]	@ (8002928 <HAL_I2C_Init+0x274>)
 80027b8:	428b      	cmp	r3, r1
 80027ba:	d819      	bhi.n	80027f0 <HAL_I2C_Init+0x13c>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e59      	subs	r1, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ca:	1c59      	adds	r1, r3, #1
 80027cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027d0:	400b      	ands	r3, r1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_I2C_Init+0x138>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1e59      	subs	r1, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ea:	e051      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 80027ec:	2304      	movs	r3, #4
 80027ee:	e04f      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d111      	bne.n	800281c <HAL_I2C_Init+0x168>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	440b      	add	r3, r1
 8002806:	fbb0 f3f3 	udiv	r3, r0, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e012      	b.n	8002842 <HAL_I2C_Init+0x18e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	0099      	lsls	r1, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Init+0x196>
 8002846:	2301      	movs	r3, #1
 8002848:	e022      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10e      	bne.n	8002870 <HAL_I2C_Init+0x1bc>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1e58      	subs	r0, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	440b      	add	r3, r1
 8002860:	fbb0 f3f3 	udiv	r3, r0, r3
 8002864:	3301      	adds	r3, #1
 8002866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800286e:	e00f      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e58      	subs	r0, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	0099      	lsls	r1, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	fbb0 f3f3 	udiv	r3, r0, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	6809      	ldr	r1, [r1, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6911      	ldr	r1, [r2, #16]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	4311      	orrs	r1, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	000186a0 	.word	0x000186a0
 800292c:	001e847f 	.word	0x001e847f
 8002930:	003d08ff 	.word	0x003d08ff
 8002934:	431bde83 	.word	0x431bde83
 8002938:	10624dd3 	.word	0x10624dd3

0800293c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	461a      	mov	r2, r3
 8002948:	460b      	mov	r3, r1
 800294a:	817b      	strh	r3, [r7, #10]
 800294c:	4613      	mov	r3, r2
 800294e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002950:	f7fe ffb4 	bl	80018bc <HAL_GetTick>
 8002954:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b20      	cmp	r3, #32
 8002960:	f040 80e0 	bne.w	8002b24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2319      	movs	r3, #25
 800296a:	2201      	movs	r2, #1
 800296c:	4970      	ldr	r1, [pc, #448]	@ (8002b30 <HAL_I2C_Master_Transmit+0x1f4>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fc64 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
 800297c:	e0d3      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_I2C_Master_Transmit+0x50>
 8002988:	2302      	movs	r3, #2
 800298a:	e0cc      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d007      	beq.n	80029b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2221      	movs	r2, #33	@ 0x21
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2210      	movs	r2, #16
 80029ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	893a      	ldrh	r2, [r7, #8]
 80029e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a50      	ldr	r2, [pc, #320]	@ (8002b34 <HAL_I2C_Master_Transmit+0x1f8>)
 80029f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029f4:	8979      	ldrh	r1, [r7, #10]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	6a3a      	ldr	r2, [r7, #32]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 face 	bl	8002f9c <I2C_MasterRequestWrite>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e08d      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a20:	e066      	b.n	8002af0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	6a39      	ldr	r1, [r7, #32]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fd22 	bl	8003470 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00d      	beq.n	8002a4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d107      	bne.n	8002a4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e06b      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	781a      	ldrb	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_I2C_Master_Transmit+0x188>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d017      	beq.n	8002ac4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	6a39      	ldr	r1, [r7, #32]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fd19 	bl	8003500 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d107      	bne.n	8002aec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e01a      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d194      	bne.n	8002a22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e000      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	00100002 	.word	0x00100002
 8002b34:	ffff0000 	.word	0xffff0000

08002b38 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	@ 0x30
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	461a      	mov	r2, r3
 8002b44:	460b      	mov	r3, r1
 8002b46:	817b      	strh	r3, [r7, #10]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7fe feb6 	bl	80018bc <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	f040 8217 	bne.w	8002f8e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2319      	movs	r3, #25
 8002b66:	2201      	movs	r2, #1
 8002b68:	497c      	ldr	r1, [pc, #496]	@ (8002d5c <HAL_I2C_Master_Receive+0x224>)
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fb66 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
 8002b78:	e20a      	b.n	8002f90 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_I2C_Master_Receive+0x50>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e203      	b.n	8002f90 <HAL_I2C_Master_Receive+0x458>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d007      	beq.n	8002bae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2222      	movs	r2, #34	@ 0x22
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	893a      	ldrh	r2, [r7, #8]
 8002bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4a5c      	ldr	r2, [pc, #368]	@ (8002d60 <HAL_I2C_Master_Receive+0x228>)
 8002bee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bf0:	8979      	ldrh	r1, [r7, #10]
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fa52 	bl	80030a0 <I2C_MasterRequestRead>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e1c4      	b.n	8002f90 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d113      	bne.n	8002c36 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	623b      	str	r3, [r7, #32]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	623b      	str	r3, [r7, #32]
 8002c22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e198      	b.n	8002f68 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d11b      	bne.n	8002c76 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e178      	b.n	8002f68 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d11b      	bne.n	8002cb6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	e158      	b.n	8002f68 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002cdc:	e144      	b.n	8002f68 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	f200 80f1 	bhi.w	8002eca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d123      	bne.n	8002d38 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 fc4b 	bl	8003590 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e145      	b.n	8002f90 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d36:	e117      	b.n	8002f68 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d14e      	bne.n	8002dde <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	2200      	movs	r2, #0
 8002d48:	4906      	ldr	r1, [pc, #24]	@ (8002d64 <HAL_I2C_Master_Receive+0x22c>)
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fa76 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e11a      	b.n	8002f90 <HAL_I2C_Master_Receive+0x458>
 8002d5a:	bf00      	nop
 8002d5c:	00100002 	.word	0x00100002
 8002d60:	ffff0000 	.word	0xffff0000
 8002d64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ddc:	e0c4      	b.n	8002f68 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de4:	2200      	movs	r2, #0
 8002de6:	496c      	ldr	r1, [pc, #432]	@ (8002f98 <HAL_I2C_Master_Receive+0x460>)
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fa27 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0cb      	b.n	8002f90 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	2200      	movs	r2, #0
 8002e42:	4955      	ldr	r1, [pc, #340]	@ (8002f98 <HAL_I2C_Master_Receive+0x460>)
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f9f9 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e09d      	b.n	8002f90 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ec8:	e04e      	b.n	8002f68 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ecc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fb5e 	bl	8003590 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e058      	b.n	8002f90 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d124      	bne.n	8002f68 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d107      	bne.n	8002f36 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f34:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f47f aeb6 	bne.w	8002cde <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
  }
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3728      	adds	r7, #40	@ 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	00010004 	.word	0x00010004

08002f9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d006      	beq.n	8002fc6 <I2C_MasterRequestWrite+0x2a>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d003      	beq.n	8002fc6 <I2C_MasterRequestWrite+0x2a>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fc4:	d108      	bne.n	8002fd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e00b      	b.n	8002ff0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	2b12      	cmp	r3, #18
 8002fde:	d107      	bne.n	8002ff0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f91d 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00d      	beq.n	8003024 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003016:	d103      	bne.n	8003020 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e035      	b.n	8003090 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800302c:	d108      	bne.n	8003040 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800302e:	897b      	ldrh	r3, [r7, #10]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800303c:	611a      	str	r2, [r3, #16]
 800303e:	e01b      	b.n	8003078 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003040:	897b      	ldrh	r3, [r7, #10]
 8003042:	11db      	asrs	r3, r3, #7
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f003 0306 	and.w	r3, r3, #6
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f063 030f 	orn	r3, r3, #15
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	490e      	ldr	r1, [pc, #56]	@ (8003098 <I2C_MasterRequestWrite+0xfc>)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f966 	bl	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e010      	b.n	8003090 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800306e:	897b      	ldrh	r3, [r7, #10]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4907      	ldr	r1, [pc, #28]	@ (800309c <I2C_MasterRequestWrite+0x100>)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f956 	bl	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	00010008 	.word	0x00010008
 800309c:	00010002 	.word	0x00010002

080030a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	460b      	mov	r3, r1
 80030ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d006      	beq.n	80030da <I2C_MasterRequestRead+0x3a>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d003      	beq.n	80030da <I2C_MasterRequestRead+0x3a>
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030d8:	d108      	bne.n	80030ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e00b      	b.n	8003104 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f0:	2b11      	cmp	r3, #17
 80030f2:	d107      	bne.n	8003104 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003102:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f893 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00d      	beq.n	8003138 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800312a:	d103      	bne.n	8003134 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003132:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e079      	b.n	800322c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003140:	d108      	bne.n	8003154 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003142:	897b      	ldrh	r3, [r7, #10]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	b2da      	uxtb	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	611a      	str	r2, [r3, #16]
 8003152:	e05f      	b.n	8003214 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003154:	897b      	ldrh	r3, [r7, #10]
 8003156:	11db      	asrs	r3, r3, #7
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f003 0306 	and.w	r3, r3, #6
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f063 030f 	orn	r3, r3, #15
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4930      	ldr	r1, [pc, #192]	@ (8003234 <I2C_MasterRequestRead+0x194>)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8dc 	bl	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e054      	b.n	800322c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4929      	ldr	r1, [pc, #164]	@ (8003238 <I2C_MasterRequestRead+0x198>)
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f8cc 	bl	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e044      	b.n	800322c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f831 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ee:	d103      	bne.n	80031f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031f6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e017      	b.n	800322c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80031fc:	897b      	ldrh	r3, [r7, #10]
 80031fe:	11db      	asrs	r3, r3, #7
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f003 0306 	and.w	r3, r3, #6
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f063 030e 	orn	r3, r3, #14
 800320c:	b2da      	uxtb	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4907      	ldr	r1, [pc, #28]	@ (8003238 <I2C_MasterRequestRead+0x198>)
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f888 	bl	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	00010008 	.word	0x00010008
 8003238:	00010002 	.word	0x00010002

0800323c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800324c:	e048      	b.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d044      	beq.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003256:	f7fe fb31 	bl	80018bc <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d302      	bcc.n	800326c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d139      	bne.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10d      	bne.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	43da      	mvns	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4013      	ands	r3, r2
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	e00c      	b.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	43da      	mvns	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4013      	ands	r3, r2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d116      	bne.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e023      	b.n	8003328 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	0c1b      	lsrs	r3, r3, #16
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d10d      	bne.n	8003306 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	43da      	mvns	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4013      	ands	r3, r2
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	e00c      	b.n	8003320 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	43da      	mvns	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4013      	ands	r3, r2
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	429a      	cmp	r2, r3
 8003324:	d093      	beq.n	800324e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800333e:	e071      	b.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334e:	d123      	bne.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003368:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f043 0204 	orr.w	r2, r3, #4
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e067      	b.n	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d041      	beq.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a0:	f7fe fa8c 	bl	80018bc <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d302      	bcc.n	80033b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d136      	bne.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d10c      	bne.n	80033da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	43da      	mvns	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4013      	ands	r3, r2
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bf14      	ite	ne
 80033d2:	2301      	movne	r3, #1
 80033d4:	2300      	moveq	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	e00b      	b.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e021      	b.n	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d10c      	bne.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	43da      	mvns	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4013      	ands	r3, r2
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e00b      	b.n	8003460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	43da      	mvns	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	bf14      	ite	ne
 800345a:	2301      	movne	r3, #1
 800345c:	2300      	moveq	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	f47f af6d 	bne.w	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800347c:	e034      	b.n	80034e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f8e3 	bl	800364a <I2C_IsAcknowledgeFailed>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e034      	b.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d028      	beq.n	80034e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003496:	f7fe fa11 	bl	80018bc <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d11d      	bne.n	80034e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b6:	2b80      	cmp	r3, #128	@ 0x80
 80034b8:	d016      	beq.n	80034e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e007      	b.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f2:	2b80      	cmp	r3, #128	@ 0x80
 80034f4:	d1c3      	bne.n	800347e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800350c:	e034      	b.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f89b 	bl	800364a <I2C_IsAcknowledgeFailed>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e034      	b.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d028      	beq.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe f9c9 	bl	80018bc <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d11d      	bne.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b04      	cmp	r3, #4
 8003548:	d016      	beq.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e007      	b.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b04      	cmp	r3, #4
 8003584:	d1c3      	bne.n	800350e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800359c:	e049      	b.n	8003632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d119      	bne.n	80035e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0210 	mvn.w	r2, #16
 80035b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e030      	b.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e0:	f7fe f96c 	bl	80018bc <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11d      	bne.n	8003632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003600:	2b40      	cmp	r3, #64	@ 0x40
 8003602:	d016      	beq.n	8003632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e007      	b.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363c:	2b40      	cmp	r3, #64	@ 0x40
 800363e:	d1ae      	bne.n	800359e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003660:	d11b      	bne.n	800369a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800366a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	f043 0204 	orr.w	r2, r3, #4
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e128      	b.n	800390c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a90      	ldr	r2, [pc, #576]	@ (8003914 <HAL_I2S_Init+0x26c>)
 80036d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7fd fec1 	bl	800145c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80036f0:	f023 030f 	bic.w	r3, r3, #15
 80036f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2202      	movs	r2, #2
 80036fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d060      	beq.n	80037c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800370e:	2310      	movs	r3, #16
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e001      	b.n	8003718 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003714:	2320      	movs	r3, #32
 8003716:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b20      	cmp	r3, #32
 800371e:	d802      	bhi.n	8003726 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003726:	2001      	movs	r0, #1
 8003728:	f002 ff42 	bl	80065b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800372c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003736:	d125      	bne.n	8003784 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d010      	beq.n	8003762 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	fbb2 f2f3 	udiv	r2, r2, r3
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	461a      	mov	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	3305      	adds	r3, #5
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	e01f      	b.n	80037a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	fbb2 f2f3 	udiv	r2, r2, r3
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	461a      	mov	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	fbb2 f3f3 	udiv	r3, r2, r3
 800377e:	3305      	adds	r3, #5
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e00e      	b.n	80037a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	fbb2 f2f3 	udiv	r2, r2, r3
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	3305      	adds	r3, #5
 80037a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4a5c      	ldr	r2, [pc, #368]	@ (8003918 <HAL_I2S_Init+0x270>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	08db      	lsrs	r3, r3, #3
 80037ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	085b      	lsrs	r3, r3, #1
 80037be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	e003      	b.n	80037d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80037c8:	2302      	movs	r3, #2
 80037ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d902      	bls.n	80037dc <HAL_I2S_Init+0x134>
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	2bff      	cmp	r3, #255	@ 0xff
 80037da:	d907      	bls.n	80037ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e0:	f043 0210 	orr.w	r2, r3, #16
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e08f      	b.n	800390c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	ea42 0103 	orr.w	r1, r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800380a:	f023 030f 	bic.w	r3, r3, #15
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6851      	ldr	r1, [r2, #4]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6892      	ldr	r2, [r2, #8]
 8003816:	4311      	orrs	r1, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68d2      	ldr	r2, [r2, #12]
 800381c:	4311      	orrs	r1, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6992      	ldr	r2, [r2, #24]
 8003822:	430a      	orrs	r2, r1
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800382e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d161      	bne.n	80038fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a38      	ldr	r2, [pc, #224]	@ (800391c <HAL_I2S_Init+0x274>)
 800383c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a37      	ldr	r2, [pc, #220]	@ (8003920 <HAL_I2S_Init+0x278>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_I2S_Init+0x1a4>
 8003848:	4b36      	ldr	r3, [pc, #216]	@ (8003924 <HAL_I2S_Init+0x27c>)
 800384a:	e001      	b.n	8003850 <HAL_I2S_Init+0x1a8>
 800384c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	4932      	ldr	r1, [pc, #200]	@ (8003920 <HAL_I2S_Init+0x278>)
 8003858:	428a      	cmp	r2, r1
 800385a:	d101      	bne.n	8003860 <HAL_I2S_Init+0x1b8>
 800385c:	4a31      	ldr	r2, [pc, #196]	@ (8003924 <HAL_I2S_Init+0x27c>)
 800385e:	e001      	b.n	8003864 <HAL_I2S_Init+0x1bc>
 8003860:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003864:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003868:	f023 030f 	bic.w	r3, r3, #15
 800386c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2b      	ldr	r2, [pc, #172]	@ (8003920 <HAL_I2S_Init+0x278>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d101      	bne.n	800387c <HAL_I2S_Init+0x1d4>
 8003878:	4b2a      	ldr	r3, [pc, #168]	@ (8003924 <HAL_I2S_Init+0x27c>)
 800387a:	e001      	b.n	8003880 <HAL_I2S_Init+0x1d8>
 800387c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003880:	2202      	movs	r2, #2
 8003882:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a25      	ldr	r2, [pc, #148]	@ (8003920 <HAL_I2S_Init+0x278>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_I2S_Init+0x1ea>
 800388e:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <HAL_I2S_Init+0x27c>)
 8003890:	e001      	b.n	8003896 <HAL_I2S_Init+0x1ee>
 8003892:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a2:	d003      	beq.n	80038ac <HAL_I2S_Init+0x204>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	e001      	b.n	80038b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038c2:	4313      	orrs	r3, r2
 80038c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038cc:	4313      	orrs	r3, r2
 80038ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038d6:	4313      	orrs	r3, r2
 80038d8:	b29a      	uxth	r2, r3
 80038da:	897b      	ldrh	r3, [r7, #10]
 80038dc:	4313      	orrs	r3, r2
 80038de:	b29b      	uxth	r3, r3
 80038e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003920 <HAL_I2S_Init+0x278>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_I2S_Init+0x24c>
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <HAL_I2S_Init+0x27c>)
 80038f2:	e001      	b.n	80038f8 <HAL_I2S_Init+0x250>
 80038f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038f8:	897a      	ldrh	r2, [r7, #10]
 80038fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	08003fe1 	.word	0x08003fe1
 8003918:	cccccccd 	.word	0xcccccccd
 800391c:	08004169 	.word	0x08004169
 8003920:	40003800 	.word	0x40003800
 8003924:	40003400 	.word	0x40003400

08003928 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_I2S_Transmit_DMA+0x1a>
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e08e      	b.n	8003a64 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_I2S_Transmit_DMA+0x2e>
 8003952:	2302      	movs	r3, #2
 8003954:	e086      	b.n	8003a64 <HAL_I2S_Transmit_DMA+0x13c>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d005      	beq.n	8003976 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
 8003974:	e076      	b.n	8003a64 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2203      	movs	r2, #3
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d002      	beq.n	80039a2 <HAL_I2S_Transmit_DMA+0x7a>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d10a      	bne.n	80039b8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80039ac:	88fb      	ldrh	r3, [r7, #6]
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039b6:	e005      	b.n	80039c4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	88fa      	ldrh	r2, [r7, #6]
 80039bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	88fa      	ldrh	r2, [r7, #6]
 80039c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c8:	4a28      	ldr	r2, [pc, #160]	@ (8003a6c <HAL_I2S_Transmit_DMA+0x144>)
 80039ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d0:	4a27      	ldr	r2, [pc, #156]	@ (8003a70 <HAL_I2S_Transmit_DMA+0x148>)
 80039d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d8:	4a26      	ldr	r2, [pc, #152]	@ (8003a74 <HAL_I2S_Transmit_DMA+0x14c>)
 80039da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039e4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039ec:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039f4:	f7fe f952 	bl	8001c9c <HAL_DMA_Start_IT>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00f      	beq.n	8003a1e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f043 0208 	orr.w	r2, r3, #8
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e022      	b.n	8003a64 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a3a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d107      	bne.n	8003a5a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0202 	orr.w	r2, r2, #2
 8003a58:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	08003ebf 	.word	0x08003ebf
 8003a70:	08003e7d 	.word	0x08003e7d
 8003a74:	08003edb 	.word	0x08003edb

08003a78 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a8c:	d004      	beq.n	8003a98 <HAL_I2S_DMAStop+0x20>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 80d1 	bne.w	8003c3a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00f      	beq.n	8003ac0 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe f951 	bl	8001d4c <HAL_DMA_Abort>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab4:	f043 0208 	orr.w	r2, r3, #8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003ac0:	2364      	movs	r3, #100	@ 0x64
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fb14 	bl	80040f4 <I2S_WaitFlagStateUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003aea:	2364      	movs	r3, #100	@ 0x64
 8003aec:	2200      	movs	r2, #0
 8003aee:	2180      	movs	r1, #128	@ 0x80
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 faff 	bl	80040f4 <I2S_WaitFlagStateUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b22:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0202 	bic.w	r2, r2, #2
 8003b40:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b05      	cmp	r3, #5
 8003b4c:	f040 8165 	bne.w	8003e1a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00f      	beq.n	8003b78 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe f8f5 	bl	8001d4c <HAL_DMA_Abort>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6c:	f043 0208 	orr.w	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a8a      	ldr	r2, [pc, #552]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d101      	bne.n	8003b86 <HAL_I2S_DMAStop+0x10e>
 8003b82:	4b8a      	ldr	r3, [pc, #552]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003b84:	e001      	b.n	8003b8a <HAL_I2S_DMAStop+0x112>
 8003b86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4985      	ldr	r1, [pc, #532]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003b92:	428b      	cmp	r3, r1
 8003b94:	d101      	bne.n	8003b9a <HAL_I2S_DMAStop+0x122>
 8003b96:	4b85      	ldr	r3, [pc, #532]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003b98:	e001      	b.n	8003b9e <HAL_I2S_DMAStop+0x126>
 8003b9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba2:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a7e      	ldr	r2, [pc, #504]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2S_DMAStop+0x13e>
 8003bb2:	4b7e      	ldr	r3, [pc, #504]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003bb4:	e001      	b.n	8003bba <HAL_I2S_DMAStop+0x142>
 8003bb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a79      	ldr	r2, [pc, #484]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2S_DMAStop+0x154>
 8003bc8:	4b78      	ldr	r3, [pc, #480]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_DMAStop+0x158>
 8003bcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a73      	ldr	r2, [pc, #460]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_I2S_DMAStop+0x16c>
 8003be0:	4b72      	ldr	r3, [pc, #456]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003be2:	e001      	b.n	8003be8 <HAL_I2S_DMAStop+0x170>
 8003be4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	496e      	ldr	r1, [pc, #440]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003bf0:	428b      	cmp	r3, r1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2S_DMAStop+0x180>
 8003bf4:	4b6d      	ldr	r3, [pc, #436]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003bf6:	e001      	b.n	8003bfc <HAL_I2S_DMAStop+0x184>
 8003bf8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bfc:	f022 0201 	bic.w	r2, r2, #1
 8003c00:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10c      	bne.n	8003c24 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003c22:	e0fa      	b.n	8003e1a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a5f      	ldr	r2, [pc, #380]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2S_DMAStop+0x1ba>
 8003c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003c30:	e001      	b.n	8003c36 <HAL_I2S_DMAStop+0x1be>
 8003c32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c36:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003c38:	e0ef      	b.n	8003e1a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c42:	d005      	beq.n	8003c50 <HAL_I2S_DMAStop+0x1d8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c4c:	f040 80e5 	bne.w	8003e1a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00f      	beq.n	8003c78 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe f875 	bl	8001d4c <HAL_DMA_Abort>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6c:	f043 0208 	orr.w	r2, r3, #8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	f040 809a 	bne.w	8003dba <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00f      	beq.n	8003cae <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe f85a 	bl	8001d4c <HAL_DMA_Abort>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca2:	f043 0208 	orr.w	r2, r3, #8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8003cae:	f7fd fe05 	bl	80018bc <HAL_GetTick>
 8003cb2:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003cb4:	e012      	b.n	8003cdc <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8003cb6:	f7fd fe01 	bl	80018bc <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b64      	cmp	r3, #100	@ 0x64
 8003cc2:	d90b      	bls.n	8003cdc <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a31      	ldr	r2, [pc, #196]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d101      	bne.n	8003cea <HAL_I2S_DMAStop+0x272>
 8003ce6:	4b31      	ldr	r3, [pc, #196]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003ce8:	e001      	b.n	8003cee <HAL_I2S_DMAStop+0x276>
 8003cea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d1de      	bne.n	8003cb6 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8003cf8:	e012      	b.n	8003d20 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8003cfa:	f7fd fddf 	bl	80018bc <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b64      	cmp	r3, #100	@ 0x64
 8003d06:	d90b      	bls.n	8003d20 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0c:	f043 0201 	orr.w	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a20      	ldr	r2, [pc, #128]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_I2S_DMAStop+0x2b6>
 8003d2a:	4b20      	ldr	r3, [pc, #128]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003d2c:	e001      	b.n	8003d32 <HAL_I2S_DMAStop+0x2ba>
 8003d2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d38:	2b80      	cmp	r3, #128	@ 0x80
 8003d3a:	d0de      	beq.n	8003cfa <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a19      	ldr	r2, [pc, #100]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_I2S_DMAStop+0x2d2>
 8003d46:	4b19      	ldr	r3, [pc, #100]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003d48:	e001      	b.n	8003d4e <HAL_I2S_DMAStop+0x2d6>
 8003d4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4914      	ldr	r1, [pc, #80]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003d56:	428b      	cmp	r3, r1
 8003d58:	d101      	bne.n	8003d5e <HAL_I2S_DMAStop+0x2e6>
 8003d5a:	4b14      	ldr	r3, [pc, #80]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003d5c:	e001      	b.n	8003d62 <HAL_I2S_DMAStop+0x2ea>
 8003d5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d66:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a0d      	ldr	r2, [pc, #52]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d101      	bne.n	8003d7a <HAL_I2S_DMAStop+0x302>
 8003d76:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003d78:	e001      	b.n	8003d7e <HAL_I2S_DMAStop+0x306>
 8003d7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a07      	ldr	r2, [pc, #28]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d101      	bne.n	8003d92 <HAL_I2S_DMAStop+0x31a>
 8003d8e:	4b07      	ldr	r3, [pc, #28]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003d90:	e001      	b.n	8003d96 <HAL_I2S_DMAStop+0x31e>
 8003d92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4902      	ldr	r1, [pc, #8]	@ (8003da8 <HAL_I2S_DMAStop+0x330>)
 8003d9e:	428b      	cmp	r3, r1
 8003da0:	d106      	bne.n	8003db0 <HAL_I2S_DMAStop+0x338>
 8003da2:	4b02      	ldr	r3, [pc, #8]	@ (8003dac <HAL_I2S_DMAStop+0x334>)
 8003da4:	e006      	b.n	8003db4 <HAL_I2S_DMAStop+0x33c>
 8003da6:	bf00      	nop
 8003da8:	40003800 	.word	0x40003800
 8003dac:	40003400 	.word	0x40003400
 8003db0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003db4:	f022 0202 	bic.w	r2, r2, #2
 8003db8:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df8:	d10c      	bne.n	8003e14 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e002      	b.n	8003e1a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8003e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3720      	adds	r7, #32
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10e      	bne.n	8003eb0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0202 	bic.w	r2, r2, #2
 8003ea0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7ff ffc5 	bl	8003e40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff ffad 	bl	8003e2c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0203 	bic.w	r2, r2, #3
 8003ef6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f10:	f043 0208 	orr.w	r2, r3, #8
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7ff ffa5 	bl	8003e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	881a      	ldrh	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	1c9a      	adds	r2, r3, #2
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10e      	bne.n	8003f7a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f6a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff ff63 	bl	8003e40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	b292      	uxth	r2, r2
 8003f96:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	1c9a      	adds	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10e      	bne.n	8003fd8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fc8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff ff3e 	bl	8003e54 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d13a      	bne.n	8004072 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b01      	cmp	r3, #1
 8004004:	d109      	bne.n	800401a <I2S_IRQHandler+0x3a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004010:	2b40      	cmp	r3, #64	@ 0x40
 8004012:	d102      	bne.n	800401a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff ffb4 	bl	8003f82 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b40      	cmp	r3, #64	@ 0x40
 8004022:	d126      	bne.n	8004072 <I2S_IRQHandler+0x92>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b20      	cmp	r3, #32
 8004030:	d11f      	bne.n	8004072 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004040:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004064:	f043 0202 	orr.w	r2, r3, #2
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff fefb 	bl	8003e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b03      	cmp	r3, #3
 800407c:	d136      	bne.n	80040ec <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b02      	cmp	r3, #2
 8004086:	d109      	bne.n	800409c <I2S_IRQHandler+0xbc>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004092:	2b80      	cmp	r3, #128	@ 0x80
 8004094:	d102      	bne.n	800409c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ff45 	bl	8003f26 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d122      	bne.n	80040ec <I2S_IRQHandler+0x10c>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d11b      	bne.n	80040ec <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040c2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f043 0204 	orr.w	r2, r3, #4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff febe 	bl	8003e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004104:	f7fd fbda 	bl	80018bc <HAL_GetTick>
 8004108:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800410a:	e018      	b.n	800413e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d014      	beq.n	800413e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004114:	f7fd fbd2 	bl	80018bc <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d902      	bls.n	800412a <I2S_WaitFlagStateUntilTimeout+0x36>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e00f      	b.n	800415e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	429a      	cmp	r2, r3
 800415a:	d1d7      	bne.n	800410c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a92      	ldr	r2, [pc, #584]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004182:	4b92      	ldr	r3, [pc, #584]	@ (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004184:	e001      	b.n	800418a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004186:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a8b      	ldr	r2, [pc, #556]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041a0:	4b8a      	ldr	r3, [pc, #552]	@ (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a2:	e001      	b.n	80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b4:	d004      	beq.n	80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 8099 	bne.w	80042f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d107      	bne.n	80041da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f925 	bl	8004424 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d107      	bne.n	80041f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f9c8 	bl	8004584 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fa:	2b40      	cmp	r3, #64	@ 0x40
 80041fc:	d13a      	bne.n	8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d035      	beq.n	8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a6e      	ldr	r2, [pc, #440]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004212:	4b6e      	ldr	r3, [pc, #440]	@ (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004214:	e001      	b.n	800421a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004216:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4969      	ldr	r1, [pc, #420]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004222:	428b      	cmp	r3, r1
 8004224:	d101      	bne.n	800422a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004226:	4b69      	ldr	r3, [pc, #420]	@ (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004228:	e001      	b.n	800422e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800422a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800422e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004232:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004242:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	f043 0202 	orr.w	r2, r3, #2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fdfa 	bl	8003e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b08      	cmp	r3, #8
 800427c:	f040 80c3 	bne.w	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80bd 	beq.w	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800429a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a49      	ldr	r2, [pc, #292]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042a6:	4b49      	ldr	r3, [pc, #292]	@ (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042a8:	e001      	b.n	80042ae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4944      	ldr	r1, [pc, #272]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b6:	428b      	cmp	r3, r1
 80042b8:	d101      	bne.n	80042be <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042ba:	4b44      	ldr	r3, [pc, #272]	@ (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042bc:	e001      	b.n	80042c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042c6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e2:	f043 0204 	orr.w	r2, r3, #4
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff fdbc 	bl	8003e68 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042f0:	e089      	b.n	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d107      	bne.n	800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8be 	bl	8004488 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d107      	bne.n	8004326 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f8fd 	bl	8004520 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432c:	2b40      	cmp	r3, #64	@ 0x40
 800432e:	d12f      	bne.n	8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d02a      	beq.n	8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004348:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1e      	ldr	r2, [pc, #120]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d101      	bne.n	8004358 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004354:	4b1d      	ldr	r3, [pc, #116]	@ (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004356:	e001      	b.n	800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004358:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4919      	ldr	r1, [pc, #100]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004364:	428b      	cmp	r3, r1
 8004366:	d101      	bne.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004368:	4b18      	ldr	r3, [pc, #96]	@ (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800436a:	e001      	b.n	8004370 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800436c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004370:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004374:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	f043 0202 	orr.w	r2, r3, #2
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fd6c 	bl	8003e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b08      	cmp	r3, #8
 8004398:	d136      	bne.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d031      	beq.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a07      	ldr	r2, [pc, #28]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d101      	bne.n	80043b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043ae:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043b0:	e001      	b.n	80043b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4902      	ldr	r1, [pc, #8]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043be:	428b      	cmp	r3, r1
 80043c0:	d106      	bne.n	80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80043c2:	4b02      	ldr	r3, [pc, #8]	@ (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043c4:	e006      	b.n	80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80043c6:	bf00      	nop
 80043c8:	40003800 	.word	0x40003800
 80043cc:	40003400 	.word	0x40003400
 80043d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043d8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f6:	f043 0204 	orr.w	r2, r3, #4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fd32 	bl	8003e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004404:	e000      	b.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004406:	bf00      	nop
}
 8004408:	bf00      	nop
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	1c99      	adds	r1, r3, #2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6251      	str	r1, [r2, #36]	@ 0x24
 8004436:	881a      	ldrh	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d113      	bne.n	800447e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004464:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d106      	bne.n	800447e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ffc9 	bl	8004410 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	1c99      	adds	r1, r3, #2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6251      	str	r1, [r2, #36]	@ 0x24
 800449a:	8819      	ldrh	r1, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004518 <I2SEx_TxISR_I2SExt+0x90>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d101      	bne.n	80044aa <I2SEx_TxISR_I2SExt+0x22>
 80044a6:	4b1d      	ldr	r3, [pc, #116]	@ (800451c <I2SEx_TxISR_I2SExt+0x94>)
 80044a8:	e001      	b.n	80044ae <I2SEx_TxISR_I2SExt+0x26>
 80044aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044ae:	460a      	mov	r2, r1
 80044b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d121      	bne.n	800450e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a12      	ldr	r2, [pc, #72]	@ (8004518 <I2SEx_TxISR_I2SExt+0x90>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <I2SEx_TxISR_I2SExt+0x50>
 80044d4:	4b11      	ldr	r3, [pc, #68]	@ (800451c <I2SEx_TxISR_I2SExt+0x94>)
 80044d6:	e001      	b.n	80044dc <I2SEx_TxISR_I2SExt+0x54>
 80044d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	490d      	ldr	r1, [pc, #52]	@ (8004518 <I2SEx_TxISR_I2SExt+0x90>)
 80044e4:	428b      	cmp	r3, r1
 80044e6:	d101      	bne.n	80044ec <I2SEx_TxISR_I2SExt+0x64>
 80044e8:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <I2SEx_TxISR_I2SExt+0x94>)
 80044ea:	e001      	b.n	80044f0 <I2SEx_TxISR_I2SExt+0x68>
 80044ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ff81 	bl	8004410 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40003800 	.word	0x40003800
 800451c:	40003400 	.word	0x40003400

08004520 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68d8      	ldr	r0, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004532:	1c99      	adds	r1, r3, #2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004538:	b282      	uxth	r2, r0
 800453a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d113      	bne.n	800457c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004562:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ff4a 	bl	8004410 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a20      	ldr	r2, [pc, #128]	@ (8004614 <I2SEx_RxISR_I2SExt+0x90>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d101      	bne.n	800459a <I2SEx_RxISR_I2SExt+0x16>
 8004596:	4b20      	ldr	r3, [pc, #128]	@ (8004618 <I2SEx_RxISR_I2SExt+0x94>)
 8004598:	e001      	b.n	800459e <I2SEx_RxISR_I2SExt+0x1a>
 800459a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800459e:	68d8      	ldr	r0, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	1c99      	adds	r1, r3, #2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80045aa:	b282      	uxth	r2, r0
 80045ac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d121      	bne.n	800460a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a12      	ldr	r2, [pc, #72]	@ (8004614 <I2SEx_RxISR_I2SExt+0x90>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <I2SEx_RxISR_I2SExt+0x50>
 80045d0:	4b11      	ldr	r3, [pc, #68]	@ (8004618 <I2SEx_RxISR_I2SExt+0x94>)
 80045d2:	e001      	b.n	80045d8 <I2SEx_RxISR_I2SExt+0x54>
 80045d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	490d      	ldr	r1, [pc, #52]	@ (8004614 <I2SEx_RxISR_I2SExt+0x90>)
 80045e0:	428b      	cmp	r3, r1
 80045e2:	d101      	bne.n	80045e8 <I2SEx_RxISR_I2SExt+0x64>
 80045e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004618 <I2SEx_RxISR_I2SExt+0x94>)
 80045e6:	e001      	b.n	80045ec <I2SEx_RxISR_I2SExt+0x68>
 80045e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045f0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff03 	bl	8004410 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40003800 	.word	0x40003800
 8004618:	40003400 	.word	0x40003400

0800461c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af02      	add	r7, sp, #8
 8004622:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e101      	b.n	8004832 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f006 f95b 	bl	800a904 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2203      	movs	r2, #3
 8004652:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800465c:	d102      	bne.n	8004664 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f002 fdba 	bl	80071e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	7c1a      	ldrb	r2, [r3, #16]
 8004676:	f88d 2000 	strb.w	r2, [sp]
 800467a:	3304      	adds	r3, #4
 800467c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800467e:	f002 fc99 	bl	8006fb4 <USB_CoreInit>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0ce      	b.n	8004832 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f002 fdb2 	bl	8007204 <USB_SetCurrentMode>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e0bf      	b.n	8004832 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	e04a      	b.n	800474e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046b8:	7bfa      	ldrb	r2, [r7, #15]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	3315      	adds	r3, #21
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046cc:	7bfa      	ldrb	r2, [r7, #15]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	3314      	adds	r3, #20
 80046dc:	7bfa      	ldrb	r2, [r7, #15]
 80046de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046e0:	7bfa      	ldrb	r2, [r7, #15]
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	b298      	uxth	r0, r3
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	332e      	adds	r3, #46	@ 0x2e
 80046f4:	4602      	mov	r2, r0
 80046f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046f8:	7bfa      	ldrb	r2, [r7, #15]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	3318      	adds	r3, #24
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800470c:	7bfa      	ldrb	r2, [r7, #15]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	331c      	adds	r3, #28
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	3320      	adds	r3, #32
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	3324      	adds	r3, #36	@ 0x24
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	3301      	adds	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	791b      	ldrb	r3, [r3, #4]
 8004752:	7bfa      	ldrb	r2, [r7, #15]
 8004754:	429a      	cmp	r2, r3
 8004756:	d3af      	bcc.n	80046b8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004758:	2300      	movs	r3, #0
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	e044      	b.n	80047e8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004774:	7bfa      	ldrb	r2, [r7, #15]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004786:	7bfa      	ldrb	r2, [r7, #15]
 8004788:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047a0:	7bfa      	ldrb	r2, [r7, #15]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047b6:	7bfa      	ldrb	r2, [r7, #15]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047cc:	7bfa      	ldrb	r2, [r7, #15]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	3301      	adds	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	791b      	ldrb	r3, [r3, #4]
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d3b5      	bcc.n	800475e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	7c1a      	ldrb	r2, [r3, #16]
 80047fa:	f88d 2000 	strb.w	r2, [sp]
 80047fe:	3304      	adds	r3, #4
 8004800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004802:	f002 fd4b 	bl	800729c <USB_DevInit>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e00c      	b.n	8004832 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f003 fd8f 	bl	800834e <USB_DevDisconnect>

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_PCD_Start+0x1c>
 8004852:	2302      	movs	r3, #2
 8004854:	e022      	b.n	800489c <HAL_PCD_Start+0x62>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800486e:	2b01      	cmp	r3, #1
 8004870:	d105      	bne.n	800487e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004876:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f002 fc9c 	bl	80071c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f003 fd3d 	bl	800830c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048a4:	b590      	push	{r4, r7, lr}
 80048a6:	b08d      	sub	sp, #52	@ 0x34
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f003 fdfb 	bl	80084b6 <USB_GetMode>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f040 848c 	bne.w	80051e0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f003 fd5f 	bl	8008390 <USB_ReadInterrupts>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8482 	beq.w	80051de <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f003 fd4c 	bl	8008390 <USB_ReadInterrupts>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d107      	bne.n	8004912 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f002 0202 	and.w	r2, r2, #2
 8004910:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f003 fd3a 	bl	8008390 <USB_ReadInterrupts>
 800491c:	4603      	mov	r3, r0
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b10      	cmp	r3, #16
 8004924:	d161      	bne.n	80049ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699a      	ldr	r2, [r3, #24]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0210 	bic.w	r2, r2, #16
 8004934:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f003 020f 	and.w	r2, r3, #15
 8004942:	4613      	mov	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	3304      	adds	r3, #4
 8004954:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	0c5b      	lsrs	r3, r3, #17
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	2b02      	cmp	r3, #2
 8004960:	d124      	bne.n	80049ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d035      	beq.n	80049da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800497c:	b29b      	uxth	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	6a38      	ldr	r0, [r7, #32]
 8004982:	f003 fb71 	bl	8008068 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004992:	441a      	add	r2, r3
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049a4:	441a      	add	r2, r3
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	615a      	str	r2, [r3, #20]
 80049aa:	e016      	b.n	80049da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	0c5b      	lsrs	r3, r3, #17
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	2b06      	cmp	r3, #6
 80049b6:	d110      	bne.n	80049da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80049be:	2208      	movs	r2, #8
 80049c0:	4619      	mov	r1, r3
 80049c2:	6a38      	ldr	r0, [r7, #32]
 80049c4:	f003 fb50 	bl	8008068 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049d4:	441a      	add	r2, r3
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0210 	orr.w	r2, r2, #16
 80049e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f003 fcce 	bl	8008390 <USB_ReadInterrupts>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80049fe:	f040 80a7 	bne.w	8004b50 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f003 fcd3 	bl	80083b6 <USB_ReadDevAllOutEpInterrupt>
 8004a10:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004a12:	e099      	b.n	8004b48 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 808e 	beq.w	8004b3c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f003 fcf7 	bl	800841e <USB_ReadDevOutEPInterrupt>
 8004a30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00c      	beq.n	8004a56 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fea1 	bl	8005798 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00c      	beq.n	8004a7a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2308      	movs	r3, #8
 8004a70:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 ff77 	bl	8005968 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a90:	461a      	mov	r2, r3
 8004a92:	2310      	movs	r3, #16
 8004a94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d030      	beq.n	8004b02 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa8:	2b80      	cmp	r3, #128	@ 0x80
 8004aaa:	d109      	bne.n	8004ac0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004abe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	78db      	ldrb	r3, [r3, #3]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d108      	bne.n	8004af0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f006 f810 	bl	800ab10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afc:	461a      	mov	r2, r3
 8004afe:	2302      	movs	r3, #2
 8004b00:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b34:	461a      	mov	r2, r3
 8004b36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b3a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	3301      	adds	r3, #1
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f47f af62 	bne.w	8004a14 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f003 fc1b 	bl	8008390 <USB_ReadInterrupts>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b64:	f040 80db 	bne.w	8004d1e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f003 fc3c 	bl	80083ea <USB_ReadDevAllInEpInterrupt>
 8004b72:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004b78:	e0cd      	b.n	8004d16 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80c2 	beq.w	8004d0a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	4611      	mov	r1, r2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f003 fc62 	bl	800845a <USB_ReadDevInEPInterrupt>
 8004b96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d057      	beq.n	8004c52 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	2201      	movs	r2, #1
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69f9      	ldr	r1, [r7, #28]
 8004bbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	799b      	ldrb	r3, [r3, #6]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d132      	bne.n	8004c46 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be4:	4613      	mov	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	3320      	adds	r3, #32
 8004bf0:	6819      	ldr	r1, [r3, #0]
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4403      	add	r3, r0
 8004c00:	331c      	adds	r3, #28
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4419      	add	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4403      	add	r3, r0
 8004c14:	3320      	adds	r3, #32
 8004c16:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d113      	bne.n	8004c46 <HAL_PCD_IRQHandler+0x3a2>
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c22:	4613      	mov	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	3324      	adds	r3, #36	@ 0x24
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d108      	bne.n	8004c46 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2101      	movs	r1, #1
 8004c42:	f003 fc69 	bl	8008518 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f005 feda 	bl	800aa06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c84:	461a      	mov	r2, r3
 8004c86:	2310      	movs	r3, #16
 8004c88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2340      	movs	r3, #64	@ 0x40
 8004ca4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d023      	beq.n	8004cf8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004cb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cb2:	6a38      	ldr	r0, [r7, #32]
 8004cb4:	f002 fc56 	bl	8007564 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	3310      	adds	r3, #16
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3304      	adds	r3, #4
 8004cca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	78db      	ldrb	r3, [r3, #3]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d108      	bne.n	8004ce6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f005 ff27 	bl	800ab34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004d02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fcbb 	bl	8005680 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f47f af2e 	bne.w	8004b7a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f003 fb34 	bl	8008390 <USB_ReadInterrupts>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d32:	d122      	bne.n	8004d7a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d108      	bne.n	8004d64 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fea1 	bl	8005aa4 <HAL_PCDEx_LPM_Callback>
 8004d62:	e002      	b.n	8004d6a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f005 fec5 	bl	800aaf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f003 fb06 	bl	8008390 <USB_ReadInterrupts>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d8e:	d112      	bne.n	8004db6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f005 fe81 	bl	800aaa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004db4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f003 fae8 	bl	8008390 <USB_ReadInterrupts>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dca:	f040 80b7 	bne.w	8004f3c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2110      	movs	r1, #16
 8004de8:	4618      	mov	r0, r3
 8004dea:	f002 fbbb 	bl	8007564 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dee:	2300      	movs	r3, #0
 8004df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004df2:	e046      	b.n	8004e82 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e00:	461a      	mov	r2, r3
 8004e02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e18:	0151      	lsls	r1, r2, #5
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	440a      	add	r2, r1
 8004e1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e34:	461a      	mov	r2, r3
 8004e36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7e:	3301      	adds	r3, #1
 8004e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	791b      	ldrb	r3, [r3, #4]
 8004e86:	461a      	mov	r2, r3
 8004e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d3b2      	bcc.n	8004df4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e9c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004ea0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	7bdb      	ldrb	r3, [r3, #15]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d016      	beq.n	8004ed8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004eba:	f043 030b 	orr.w	r3, r3, #11
 8004ebe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ed0:	f043 030b 	orr.w	r3, r3, #11
 8004ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ed6:	e015      	b.n	8004f04 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ee6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004eea:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004eee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004efe:	f043 030b 	orr.w	r3, r3, #11
 8004f02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004f16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f26:	461a      	mov	r2, r3
 8004f28:	f003 faf6 	bl	8008518 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004f3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f003 fa25 	bl	8008390 <USB_ReadInterrupts>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f50:	d123      	bne.n	8004f9a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f003 fabb 	bl	80084d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f002 fb78 	bl	8007656 <USB_GetDevSpeed>
 8004f66:	4603      	mov	r3, r0
 8004f68:	461a      	mov	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681c      	ldr	r4, [r3, #0]
 8004f72:	f001 fa07 	bl	8006384 <HAL_RCC_GetHCLKFreq>
 8004f76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f002 f87c 	bl	800707c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f005 fd66 	bl	800aa56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f003 f9f6 	bl	8008390 <USB_ReadInterrupts>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d10a      	bne.n	8004fc4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f005 fd43 	bl	800aa3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f002 0208 	and.w	r2, r2, #8
 8004fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f003 f9e1 	bl	8008390 <USB_ReadInterrupts>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd4:	2b80      	cmp	r3, #128	@ 0x80
 8004fd6:	d123      	bne.n	8005020 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe8:	e014      	b.n	8005014 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fee:	4613      	mov	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d105      	bne.n	800500e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	b2db      	uxtb	r3, r3
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fb08 	bl	800561e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	3301      	adds	r3, #1
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	791b      	ldrb	r3, [r3, #4]
 8005018:	461a      	mov	r2, r3
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	4293      	cmp	r3, r2
 800501e:	d3e4      	bcc.n	8004fea <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f003 f9b3 	bl	8008390 <USB_ReadInterrupts>
 800502a:	4603      	mov	r3, r0
 800502c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005034:	d13c      	bne.n	80050b0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005036:	2301      	movs	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
 800503a:	e02b      	b.n	8005094 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	3318      	adds	r3, #24
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d115      	bne.n	800508e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005062:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005064:	2b00      	cmp	r3, #0
 8005066:	da12      	bge.n	800508e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506c:	4613      	mov	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	3317      	adds	r3, #23
 8005078:	2201      	movs	r2, #1
 800507a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005084:	b2db      	uxtb	r3, r3
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fac8 	bl	800561e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	3301      	adds	r3, #1
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	791b      	ldrb	r3, [r3, #4]
 8005098:	461a      	mov	r2, r3
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	4293      	cmp	r3, r2
 800509e:	d3cd      	bcc.n	800503c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80050ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f003 f96b 	bl	8008390 <USB_ReadInterrupts>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050c4:	d156      	bne.n	8005174 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050c6:	2301      	movs	r3, #1
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ca:	e045      	b.n	8005158 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e0:	4613      	mov	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d12e      	bne.n	8005152 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80050f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	da2b      	bge.n	8005152 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005106:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800510a:	429a      	cmp	r2, r3
 800510c:	d121      	bne.n	8005152 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005112:	4613      	mov	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800514a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800514e:	6053      	str	r3, [r2, #4]
            break;
 8005150:	e008      	b.n	8005164 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	3301      	adds	r3, #1
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	791b      	ldrb	r3, [r3, #4]
 800515c:	461a      	mov	r2, r3
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	4293      	cmp	r3, r2
 8005162:	d3b3      	bcc.n	80050cc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f003 f909 	bl	8008390 <USB_ReadInterrupts>
 800517e:	4603      	mov	r3, r0
 8005180:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005188:	d10a      	bne.n	80051a0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f005 fce4 	bl	800ab58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695a      	ldr	r2, [r3, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800519e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f003 f8f3 	bl	8008390 <USB_ReadInterrupts>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d115      	bne.n	80051e0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f005 fcd4 	bl	800ab74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
 80051dc:	e000      	b.n	80051e0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80051de:	bf00      	nop
    }
  }
}
 80051e0:	3734      	adds	r7, #52	@ 0x34
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd90      	pop	{r4, r7, pc}

080051e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	460b      	mov	r3, r1
 80051f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_PCD_SetAddress+0x1a>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e012      	b.n	8005226 <HAL_PCD_SetAddress+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f003 f852 	bl	80082c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	4608      	mov	r0, r1
 8005238:	4611      	mov	r1, r2
 800523a:	461a      	mov	r2, r3
 800523c:	4603      	mov	r3, r0
 800523e:	70fb      	strb	r3, [r7, #3]
 8005240:	460b      	mov	r3, r1
 8005242:	803b      	strh	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800524c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005250:	2b00      	cmp	r3, #0
 8005252:	da0f      	bge.n	8005274 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	f003 020f 	and.w	r2, r3, #15
 800525a:	4613      	mov	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	4413      	add	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	3310      	adds	r3, #16
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	3304      	adds	r3, #4
 800526a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	705a      	strb	r2, [r3, #1]
 8005272:	e00f      	b.n	8005294 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	f003 020f 	and.w	r2, r3, #15
 800527a:	4613      	mov	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4413      	add	r3, r2
 800528a:	3304      	adds	r3, #4
 800528c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	b2da      	uxtb	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80052a0:	883a      	ldrh	r2, [r7, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	78ba      	ldrb	r2, [r7, #2]
 80052aa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052be:	78bb      	ldrb	r3, [r7, #2]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d102      	bne.n	80052ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_PCD_EP_Open+0xaa>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e00e      	b.n	80052f6 <HAL_PCD_EP_Open+0xc8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68f9      	ldr	r1, [r7, #12]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f002 f9da 	bl	80076a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80052f4:	7afb      	ldrb	r3, [r7, #11]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800530a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800530e:	2b00      	cmp	r3, #0
 8005310:	da0f      	bge.n	8005332 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	4613      	mov	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	3310      	adds	r3, #16
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	4413      	add	r3, r2
 8005326:	3304      	adds	r3, #4
 8005328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	705a      	strb	r2, [r3, #1]
 8005330:	e00f      	b.n	8005352 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	f003 020f 	and.w	r2, r3, #15
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	4413      	add	r3, r2
 8005348:	3304      	adds	r3, #4
 800534a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	b2da      	uxtb	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_PCD_EP_Close+0x6e>
 8005368:	2302      	movs	r3, #2
 800536a:	e00e      	b.n	800538a <HAL_PCD_EP_Close+0x8c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68f9      	ldr	r1, [r7, #12]
 800537a:	4618      	mov	r0, r3
 800537c:	f002 fa18 	bl	80077b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	460b      	mov	r3, r1
 80053a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053a2:	7afb      	ldrb	r3, [r7, #11]
 80053a4:	f003 020f 	and.w	r2, r3, #15
 80053a8:	4613      	mov	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	3304      	adds	r3, #4
 80053ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2200      	movs	r2, #0
 80053cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2200      	movs	r2, #0
 80053d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053d4:	7afb      	ldrb	r3, [r7, #11]
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	799b      	ldrb	r3, [r3, #6]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d102      	bne.n	80053ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	799b      	ldrb	r3, [r3, #6]
 80053f6:	461a      	mov	r2, r3
 80053f8:	6979      	ldr	r1, [r7, #20]
 80053fa:	f002 fab5 	bl	8007968 <USB_EPStartXfer>

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	460b      	mov	r3, r1
 8005446:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005448:	7afb      	ldrb	r3, [r7, #11]
 800544a:	f003 020f 	and.w	r2, r3, #15
 800544e:	4613      	mov	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	3310      	adds	r3, #16
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	3304      	adds	r3, #4
 800545e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2200      	movs	r2, #0
 8005470:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2201      	movs	r2, #1
 8005476:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005478:	7afb      	ldrb	r3, [r7, #11]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	b2da      	uxtb	r2, r3
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	799b      	ldrb	r3, [r3, #6]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d102      	bne.n	8005492 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	799b      	ldrb	r3, [r3, #6]
 800549a:	461a      	mov	r2, r3
 800549c:	6979      	ldr	r1, [r7, #20]
 800549e:	f002 fa63 	bl	8007968 <USB_EPStartXfer>

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	7912      	ldrb	r2, [r2, #4]
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e04f      	b.n	800556a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	da0f      	bge.n	80054f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	f003 020f 	and.w	r2, r3, #15
 80054d8:	4613      	mov	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	3310      	adds	r3, #16
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4413      	add	r3, r2
 80054e6:	3304      	adds	r3, #4
 80054e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	705a      	strb	r2, [r3, #1]
 80054f0:	e00d      	b.n	800550e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	4613      	mov	r3, r2
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	4413      	add	r3, r2
 8005504:	3304      	adds	r3, #4
 8005506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	b2da      	uxtb	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_PCD_EP_SetStall+0x82>
 800552a:	2302      	movs	r3, #2
 800552c:	e01d      	b.n	800556a <HAL_PCD_EP_SetStall+0xbe>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	4618      	mov	r0, r3
 800553e:	f002 fdeb 	bl	8008118 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	2b00      	cmp	r3, #0
 800554a:	d109      	bne.n	8005560 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	7999      	ldrb	r1, [r3, #6]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800555a:	461a      	mov	r2, r3
 800555c:	f002 ffdc 	bl	8008518 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	7912      	ldrb	r2, [r2, #4]
 8005588:	4293      	cmp	r3, r2
 800558a:	d901      	bls.n	8005590 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e042      	b.n	8005616 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	da0f      	bge.n	80055b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	f003 020f 	and.w	r2, r3, #15
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	3310      	adds	r3, #16
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	4413      	add	r3, r2
 80055ac:	3304      	adds	r3, #4
 80055ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	705a      	strb	r2, [r3, #1]
 80055b6:	e00f      	b.n	80055d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	f003 020f 	and.w	r2, r3, #15
 80055be:	4613      	mov	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	3304      	adds	r3, #4
 80055d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_PCD_EP_ClrStall+0x86>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e00e      	b.n	8005616 <HAL_PCD_EP_ClrStall+0xa4>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68f9      	ldr	r1, [r7, #12]
 8005606:	4618      	mov	r0, r3
 8005608:	f002 fdf4 	bl	80081f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800562a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800562e:	2b00      	cmp	r3, #0
 8005630:	da0c      	bge.n	800564c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	f003 020f 	and.w	r2, r3, #15
 8005638:	4613      	mov	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	3310      	adds	r3, #16
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	3304      	adds	r3, #4
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	e00c      	b.n	8005666 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	f003 020f 	and.w	r2, r3, #15
 8005652:	4613      	mov	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	4413      	add	r3, r2
 8005662:	3304      	adds	r3, #4
 8005664:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68f9      	ldr	r1, [r7, #12]
 800566c:	4618      	mov	r0, r3
 800566e:	f002 fc13 	bl	8007e98 <USB_EPStopXfer>
 8005672:	4603      	mov	r3, r0
 8005674:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005676:	7afb      	ldrb	r3, [r7, #11]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08a      	sub	sp, #40	@ 0x28
 8005684:	af02      	add	r7, sp, #8
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	4613      	mov	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	3310      	adds	r3, #16
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	4413      	add	r3, r2
 80056a4:	3304      	adds	r3, #4
 80056a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d901      	bls.n	80056b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e06b      	b.n	8005790 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d902      	bls.n	80056d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	3303      	adds	r3, #3
 80056d8:	089b      	lsrs	r3, r3, #2
 80056da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056dc:	e02a      	b.n	8005734 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d902      	bls.n	80056fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	3303      	adds	r3, #3
 80056fe:	089b      	lsrs	r3, r3, #2
 8005700:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68d9      	ldr	r1, [r3, #12]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	4603      	mov	r3, r0
 8005716:	6978      	ldr	r0, [r7, #20]
 8005718:	f002 fc68 	bl	8007fec <USB_WritePacket>

    ep->xfer_buff  += len;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	441a      	add	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	695a      	ldr	r2, [r3, #20]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	441a      	add	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	429a      	cmp	r2, r3
 8005748:	d809      	bhi.n	800575e <PCD_WriteEmptyTxFifo+0xde>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005752:	429a      	cmp	r2, r3
 8005754:	d203      	bcs.n	800575e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1bf      	bne.n	80056de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	429a      	cmp	r2, r3
 8005768:	d811      	bhi.n	800578e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	2201      	movs	r2, #1
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800577e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	43db      	mvns	r3, r3
 8005784:	6939      	ldr	r1, [r7, #16]
 8005786:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800578a:	4013      	ands	r3, r2
 800578c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	333c      	adds	r3, #60	@ 0x3c
 80057b0:	3304      	adds	r3, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	799b      	ldrb	r3, [r3, #6]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d17b      	bne.n	80058c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f003 0308 	and.w	r3, r3, #8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d015      	beq.n	8005804 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4a61      	ldr	r2, [pc, #388]	@ (8005960 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	f240 80b9 	bls.w	8005954 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80b3 	beq.w	8005954 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057fa:	461a      	mov	r2, r3
 80057fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005800:	6093      	str	r3, [r2, #8]
 8005802:	e0a7      	b.n	8005954 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581a:	461a      	mov	r2, r3
 800581c:	2320      	movs	r3, #32
 800581e:	6093      	str	r3, [r2, #8]
 8005820:	e098      	b.n	8005954 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005828:	2b00      	cmp	r3, #0
 800582a:	f040 8093 	bne.w	8005954 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	4a4b      	ldr	r2, [pc, #300]	@ (8005960 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d90f      	bls.n	8005856 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800584c:	461a      	mov	r2, r3
 800584e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005852:	6093      	str	r3, [r2, #8]
 8005854:	e07e      	b.n	8005954 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	4413      	add	r3, r2
 8005868:	3304      	adds	r3, #4
 800586a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	0159      	lsls	r1, r3, #5
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	440b      	add	r3, r1
 8005878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005882:	1ad2      	subs	r2, r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d114      	bne.n	80058b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058a0:	461a      	mov	r2, r3
 80058a2:	2101      	movs	r1, #1
 80058a4:	f002 fe38 	bl	8008518 <USB_EP0_OutStart>
 80058a8:	e006      	b.n	80058b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	441a      	add	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f005 f886 	bl	800a9d0 <HAL_PCD_DataOutStageCallback>
 80058c4:	e046      	b.n	8005954 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	4a26      	ldr	r2, [pc, #152]	@ (8005964 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d124      	bne.n	8005918 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e4:	461a      	mov	r2, r3
 80058e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ea:	6093      	str	r3, [r2, #8]
 80058ec:	e032      	b.n	8005954 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005904:	461a      	mov	r2, r3
 8005906:	2320      	movs	r3, #32
 8005908:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f005 f85d 	bl	800a9d0 <HAL_PCD_DataOutStageCallback>
 8005916:	e01d      	b.n	8005954 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d114      	bne.n	8005948 <PCD_EP_OutXfrComplete_int+0x1b0>
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	4613      	mov	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d108      	bne.n	8005948 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005940:	461a      	mov	r2, r3
 8005942:	2100      	movs	r1, #0
 8005944:	f002 fde8 	bl	8008518 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f005 f83e 	bl	800a9d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	4f54300a 	.word	0x4f54300a
 8005964:	4f54310a 	.word	0x4f54310a

08005968 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	333c      	adds	r3, #60	@ 0x3c
 8005980:	3304      	adds	r3, #4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a15      	ldr	r2, [pc, #84]	@ (80059f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d90e      	bls.n	80059bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d009      	beq.n	80059bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b4:	461a      	mov	r2, r3
 80059b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f004 fff5 	bl	800a9ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4a0a      	ldr	r2, [pc, #40]	@ (80059f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d90c      	bls.n	80059e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	799b      	ldrb	r3, [r3, #6]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d108      	bne.n	80059e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059dc:	461a      	mov	r2, r3
 80059de:	2101      	movs	r1, #1
 80059e0:	f002 fd9a 	bl	8008518 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	4f54300a 	.word	0x4f54300a

080059f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	70fb      	strb	r3, [r7, #3]
 8005a00:	4613      	mov	r3, r2
 8005a02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d107      	bne.n	8005a22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005a12:	883b      	ldrh	r3, [r7, #0]
 8005a14:	0419      	lsls	r1, r3, #16
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a20:	e028      	b.n	8005a74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a28:	0c1b      	lsrs	r3, r3, #16
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a30:	2300      	movs	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]
 8005a34:	e00d      	b.n	8005a52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	3340      	adds	r3, #64	@ 0x40
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	0c1b      	lsrs	r3, r3, #16
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4413      	add	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	73fb      	strb	r3, [r7, #15]
 8005a52:	7bfa      	ldrb	r2, [r7, #15]
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d3ec      	bcc.n	8005a36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a5c:	883b      	ldrh	r3, [r7, #0]
 8005a5e:	0418      	lsls	r0, r3, #16
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	4302      	orrs	r2, r0
 8005a6c:	3340      	adds	r3, #64	@ 0x40
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	887a      	ldrh	r2, [r7, #2]
 8005a94:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e267      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d075      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ada:	4b88      	ldr	r3, [pc, #544]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 030c 	and.w	r3, r3, #12
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d00c      	beq.n	8005b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ae6:	4b85      	ldr	r3, [pc, #532]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d112      	bne.n	8005b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005af2:	4b82      	ldr	r3, [pc, #520]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005afe:	d10b      	bne.n	8005b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b00:	4b7e      	ldr	r3, [pc, #504]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d05b      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x108>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d157      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e242      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b20:	d106      	bne.n	8005b30 <HAL_RCC_OscConfig+0x74>
 8005b22:	4b76      	ldr	r3, [pc, #472]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a75      	ldr	r2, [pc, #468]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	e01d      	b.n	8005b6c <HAL_RCC_OscConfig+0xb0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b38:	d10c      	bne.n	8005b54 <HAL_RCC_OscConfig+0x98>
 8005b3a:	4b70      	ldr	r3, [pc, #448]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a6f      	ldr	r2, [pc, #444]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	4b6d      	ldr	r3, [pc, #436]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a6c      	ldr	r2, [pc, #432]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	e00b      	b.n	8005b6c <HAL_RCC_OscConfig+0xb0>
 8005b54:	4b69      	ldr	r3, [pc, #420]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a68      	ldr	r2, [pc, #416]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	4b66      	ldr	r3, [pc, #408]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a65      	ldr	r2, [pc, #404]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d013      	beq.n	8005b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b74:	f7fb fea2 	bl	80018bc <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b7c:	f7fb fe9e 	bl	80018bc <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b64      	cmp	r3, #100	@ 0x64
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e207      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0f0      	beq.n	8005b7c <HAL_RCC_OscConfig+0xc0>
 8005b9a:	e014      	b.n	8005bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9c:	f7fb fe8e 	bl	80018bc <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba4:	f7fb fe8a 	bl	80018bc <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b64      	cmp	r3, #100	@ 0x64
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e1f3      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bb6:	4b51      	ldr	r3, [pc, #324]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f0      	bne.n	8005ba4 <HAL_RCC_OscConfig+0xe8>
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d063      	beq.n	8005c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 030c 	and.w	r3, r3, #12
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bde:	4b47      	ldr	r3, [pc, #284]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d11c      	bne.n	8005c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bea:	4b44      	ldr	r3, [pc, #272]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d116      	bne.n	8005c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bf6:	4b41      	ldr	r3, [pc, #260]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_RCC_OscConfig+0x152>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d001      	beq.n	8005c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e1c7      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4937      	ldr	r1, [pc, #220]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c22:	e03a      	b.n	8005c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d020      	beq.n	8005c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c2c:	4b34      	ldr	r3, [pc, #208]	@ (8005d00 <HAL_RCC_OscConfig+0x244>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c32:	f7fb fe43 	bl	80018bc <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c3a:	f7fb fe3f 	bl	80018bc <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e1a8      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c58:	4b28      	ldr	r3, [pc, #160]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	4925      	ldr	r1, [pc, #148]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	600b      	str	r3, [r1, #0]
 8005c6c:	e015      	b.n	8005c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c6e:	4b24      	ldr	r3, [pc, #144]	@ (8005d00 <HAL_RCC_OscConfig+0x244>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c74:	f7fb fe22 	bl	80018bc <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c7c:	f7fb fe1e 	bl	80018bc <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e187      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d036      	beq.n	8005d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d016      	beq.n	8005cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cae:	4b15      	ldr	r3, [pc, #84]	@ (8005d04 <HAL_RCC_OscConfig+0x248>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb4:	f7fb fe02 	bl	80018bc <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cbc:	f7fb fdfe 	bl	80018bc <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e167      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cce:	4b0b      	ldr	r3, [pc, #44]	@ (8005cfc <HAL_RCC_OscConfig+0x240>)
 8005cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f0      	beq.n	8005cbc <HAL_RCC_OscConfig+0x200>
 8005cda:	e01b      	b.n	8005d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cdc:	4b09      	ldr	r3, [pc, #36]	@ (8005d04 <HAL_RCC_OscConfig+0x248>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ce2:	f7fb fdeb 	bl	80018bc <HAL_GetTick>
 8005ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce8:	e00e      	b.n	8005d08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cea:	f7fb fde7 	bl	80018bc <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d907      	bls.n	8005d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e150      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	42470000 	.word	0x42470000
 8005d04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d08:	4b88      	ldr	r3, [pc, #544]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1ea      	bne.n	8005cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8097 	beq.w	8005e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d22:	2300      	movs	r3, #0
 8005d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d26:	4b81      	ldr	r3, [pc, #516]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10f      	bne.n	8005d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d32:	2300      	movs	r3, #0
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	4b7d      	ldr	r3, [pc, #500]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3a:	4a7c      	ldr	r2, [pc, #496]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d42:	4b7a      	ldr	r3, [pc, #488]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d52:	4b77      	ldr	r3, [pc, #476]	@ (8005f30 <HAL_RCC_OscConfig+0x474>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d118      	bne.n	8005d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d5e:	4b74      	ldr	r3, [pc, #464]	@ (8005f30 <HAL_RCC_OscConfig+0x474>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a73      	ldr	r2, [pc, #460]	@ (8005f30 <HAL_RCC_OscConfig+0x474>)
 8005d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d6a:	f7fb fda7 	bl	80018bc <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d72:	f7fb fda3 	bl	80018bc <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e10c      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d84:	4b6a      	ldr	r3, [pc, #424]	@ (8005f30 <HAL_RCC_OscConfig+0x474>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f0      	beq.n	8005d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d106      	bne.n	8005da6 <HAL_RCC_OscConfig+0x2ea>
 8005d98:	4b64      	ldr	r3, [pc, #400]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9c:	4a63      	ldr	r2, [pc, #396]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005d9e:	f043 0301 	orr.w	r3, r3, #1
 8005da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005da4:	e01c      	b.n	8005de0 <HAL_RCC_OscConfig+0x324>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	2b05      	cmp	r3, #5
 8005dac:	d10c      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x30c>
 8005dae:	4b5f      	ldr	r3, [pc, #380]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db2:	4a5e      	ldr	r2, [pc, #376]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005db4:	f043 0304 	orr.w	r3, r3, #4
 8005db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dba:	4b5c      	ldr	r3, [pc, #368]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbe:	4a5b      	ldr	r2, [pc, #364]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dc6:	e00b      	b.n	8005de0 <HAL_RCC_OscConfig+0x324>
 8005dc8:	4b58      	ldr	r3, [pc, #352]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dcc:	4a57      	ldr	r2, [pc, #348]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dd4:	4b55      	ldr	r3, [pc, #340]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd8:	4a54      	ldr	r2, [pc, #336]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005dda:	f023 0304 	bic.w	r3, r3, #4
 8005dde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d015      	beq.n	8005e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de8:	f7fb fd68 	bl	80018bc <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dee:	e00a      	b.n	8005e06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005df0:	f7fb fd64 	bl	80018bc <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e0cb      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e06:	4b49      	ldr	r3, [pc, #292]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0ee      	beq.n	8005df0 <HAL_RCC_OscConfig+0x334>
 8005e12:	e014      	b.n	8005e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e14:	f7fb fd52 	bl	80018bc <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e1a:	e00a      	b.n	8005e32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e1c:	f7fb fd4e 	bl	80018bc <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e0b5      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e32:	4b3e      	ldr	r3, [pc, #248]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1ee      	bne.n	8005e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d105      	bne.n	8005e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e44:	4b39      	ldr	r3, [pc, #228]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e48:	4a38      	ldr	r2, [pc, #224]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 80a1 	beq.w	8005f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e5a:	4b34      	ldr	r3, [pc, #208]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d05c      	beq.n	8005f20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d141      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e6e:	4b31      	ldr	r3, [pc, #196]	@ (8005f34 <HAL_RCC_OscConfig+0x478>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e74:	f7fb fd22 	bl	80018bc <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e7c:	f7fb fd1e 	bl	80018bc <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e087      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8e:	4b27      	ldr	r3, [pc, #156]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea8:	019b      	lsls	r3, r3, #6
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb0:	085b      	lsrs	r3, r3, #1
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	041b      	lsls	r3, r3, #16
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	061b      	lsls	r3, r3, #24
 8005ebe:	491b      	ldr	r1, [pc, #108]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f34 <HAL_RCC_OscConfig+0x478>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eca:	f7fb fcf7 	bl	80018bc <HAL_GetTick>
 8005ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ed2:	f7fb fcf3 	bl	80018bc <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e05c      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee4:	4b11      	ldr	r3, [pc, #68]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x416>
 8005ef0:	e054      	b.n	8005f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef2:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <HAL_RCC_OscConfig+0x478>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef8:	f7fb fce0 	bl	80018bc <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f00:	f7fb fcdc 	bl	80018bc <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e045      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f12:	4b06      	ldr	r3, [pc, #24]	@ (8005f2c <HAL_RCC_OscConfig+0x470>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f0      	bne.n	8005f00 <HAL_RCC_OscConfig+0x444>
 8005f1e:	e03d      	b.n	8005f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d107      	bne.n	8005f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e038      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	40007000 	.word	0x40007000
 8005f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f38:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <HAL_RCC_OscConfig+0x4ec>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d028      	beq.n	8005f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d121      	bne.n	8005f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d11a      	bne.n	8005f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f68:	4013      	ands	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d111      	bne.n	8005f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	3b01      	subs	r3, #1
 8005f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d107      	bne.n	8005f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d001      	beq.n	8005f9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40023800 	.word	0x40023800

08005fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0cc      	b.n	800615a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc0:	4b68      	ldr	r3, [pc, #416]	@ (8006164 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d90c      	bls.n	8005fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fce:	4b65      	ldr	r3, [pc, #404]	@ (8006164 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd6:	4b63      	ldr	r3, [pc, #396]	@ (8006164 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d001      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0b8      	b.n	800615a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d020      	beq.n	8006036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006000:	4b59      	ldr	r3, [pc, #356]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	4a58      	ldr	r2, [pc, #352]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800600a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006018:	4b53      	ldr	r3, [pc, #332]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4a52      	ldr	r2, [pc, #328]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006024:	4b50      	ldr	r3, [pc, #320]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	494d      	ldr	r1, [pc, #308]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	4313      	orrs	r3, r2
 8006034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d044      	beq.n	80060cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d107      	bne.n	800605a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604a:	4b47      	ldr	r3, [pc, #284]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d119      	bne.n	800608a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e07f      	b.n	800615a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d003      	beq.n	800606a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006066:	2b03      	cmp	r3, #3
 8006068:	d107      	bne.n	800607a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800606a:	4b3f      	ldr	r3, [pc, #252]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e06f      	b.n	800615a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800607a:	4b3b      	ldr	r3, [pc, #236]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e067      	b.n	800615a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800608a:	4b37      	ldr	r3, [pc, #220]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f023 0203 	bic.w	r2, r3, #3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	4934      	ldr	r1, [pc, #208]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 8006098:	4313      	orrs	r3, r2
 800609a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800609c:	f7fb fc0e 	bl	80018bc <HAL_GetTick>
 80060a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a2:	e00a      	b.n	80060ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a4:	f7fb fc0a 	bl	80018bc <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e04f      	b.n	800615a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 020c 	and.w	r2, r3, #12
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d1eb      	bne.n	80060a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060cc:	4b25      	ldr	r3, [pc, #148]	@ (8006164 <HAL_RCC_ClockConfig+0x1b8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d20c      	bcs.n	80060f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060da:	4b22      	ldr	r3, [pc, #136]	@ (8006164 <HAL_RCC_ClockConfig+0x1b8>)
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e2:	4b20      	ldr	r3, [pc, #128]	@ (8006164 <HAL_RCC_ClockConfig+0x1b8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e032      	b.n	800615a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d008      	beq.n	8006112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006100:	4b19      	ldr	r3, [pc, #100]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	4916      	ldr	r1, [pc, #88]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	4313      	orrs	r3, r2
 8006110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0308 	and.w	r3, r3, #8
 800611a:	2b00      	cmp	r3, #0
 800611c:	d009      	beq.n	8006132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800611e:	4b12      	ldr	r3, [pc, #72]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	490e      	ldr	r1, [pc, #56]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 800612e:	4313      	orrs	r3, r2
 8006130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006132:	f000 f821 	bl	8006178 <HAL_RCC_GetSysClockFreq>
 8006136:	4602      	mov	r2, r0
 8006138:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <HAL_RCC_ClockConfig+0x1bc>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	490a      	ldr	r1, [pc, #40]	@ (800616c <HAL_RCC_ClockConfig+0x1c0>)
 8006144:	5ccb      	ldrb	r3, [r1, r3]
 8006146:	fa22 f303 	lsr.w	r3, r2, r3
 800614a:	4a09      	ldr	r2, [pc, #36]	@ (8006170 <HAL_RCC_ClockConfig+0x1c4>)
 800614c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800614e:	4b09      	ldr	r3, [pc, #36]	@ (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f7fb fb6e 	bl	8001834 <HAL_InitTick>

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40023c00 	.word	0x40023c00
 8006168:	40023800 	.word	0x40023800
 800616c:	0800bc04 	.word	0x0800bc04
 8006170:	20000008 	.word	0x20000008
 8006174:	2000000c 	.word	0x2000000c

08006178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800617c:	b094      	sub	sp, #80	@ 0x50
 800617e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	647b      	str	r3, [r7, #68]	@ 0x44
 8006184:	2300      	movs	r3, #0
 8006186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006188:	2300      	movs	r3, #0
 800618a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006190:	4b79      	ldr	r3, [pc, #484]	@ (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 030c 	and.w	r3, r3, #12
 8006198:	2b08      	cmp	r3, #8
 800619a:	d00d      	beq.n	80061b8 <HAL_RCC_GetSysClockFreq+0x40>
 800619c:	2b08      	cmp	r3, #8
 800619e:	f200 80e1 	bhi.w	8006364 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_RCC_GetSysClockFreq+0x34>
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d003      	beq.n	80061b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80061aa:	e0db      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061ac:	4b73      	ldr	r3, [pc, #460]	@ (800637c <HAL_RCC_GetSysClockFreq+0x204>)
 80061ae:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80061b0:	e0db      	b.n	800636a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061b2:	4b73      	ldr	r3, [pc, #460]	@ (8006380 <HAL_RCC_GetSysClockFreq+0x208>)
 80061b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061b6:	e0d8      	b.n	800636a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061b8:	4b6f      	ldr	r3, [pc, #444]	@ (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061c2:	4b6d      	ldr	r3, [pc, #436]	@ (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d063      	beq.n	8006296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	099b      	lsrs	r3, r3, #6
 80061d4:	2200      	movs	r2, #0
 80061d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80061da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80061e2:	2300      	movs	r3, #0
 80061e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80061ea:	4622      	mov	r2, r4
 80061ec:	462b      	mov	r3, r5
 80061ee:	f04f 0000 	mov.w	r0, #0
 80061f2:	f04f 0100 	mov.w	r1, #0
 80061f6:	0159      	lsls	r1, r3, #5
 80061f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061fc:	0150      	lsls	r0, r2, #5
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4621      	mov	r1, r4
 8006204:	1a51      	subs	r1, r2, r1
 8006206:	6139      	str	r1, [r7, #16]
 8006208:	4629      	mov	r1, r5
 800620a:	eb63 0301 	sbc.w	r3, r3, r1
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800621c:	4659      	mov	r1, fp
 800621e:	018b      	lsls	r3, r1, #6
 8006220:	4651      	mov	r1, sl
 8006222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006226:	4651      	mov	r1, sl
 8006228:	018a      	lsls	r2, r1, #6
 800622a:	4651      	mov	r1, sl
 800622c:	ebb2 0801 	subs.w	r8, r2, r1
 8006230:	4659      	mov	r1, fp
 8006232:	eb63 0901 	sbc.w	r9, r3, r1
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	f04f 0300 	mov.w	r3, #0
 800623e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800624a:	4690      	mov	r8, r2
 800624c:	4699      	mov	r9, r3
 800624e:	4623      	mov	r3, r4
 8006250:	eb18 0303 	adds.w	r3, r8, r3
 8006254:	60bb      	str	r3, [r7, #8]
 8006256:	462b      	mov	r3, r5
 8006258:	eb49 0303 	adc.w	r3, r9, r3
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800626a:	4629      	mov	r1, r5
 800626c:	024b      	lsls	r3, r1, #9
 800626e:	4621      	mov	r1, r4
 8006270:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006274:	4621      	mov	r1, r4
 8006276:	024a      	lsls	r2, r1, #9
 8006278:	4610      	mov	r0, r2
 800627a:	4619      	mov	r1, r3
 800627c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800627e:	2200      	movs	r2, #0
 8006280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006288:	f7f9 ff9e 	bl	80001c8 <__aeabi_uldivmod>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4613      	mov	r3, r2
 8006292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006294:	e058      	b.n	8006348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006296:	4b38      	ldr	r3, [pc, #224]	@ (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	099b      	lsrs	r3, r3, #6
 800629c:	2200      	movs	r2, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	4611      	mov	r1, r2
 80062a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062a6:	623b      	str	r3, [r7, #32]
 80062a8:	2300      	movs	r3, #0
 80062aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	f04f 0000 	mov.w	r0, #0
 80062b8:	f04f 0100 	mov.w	r1, #0
 80062bc:	0159      	lsls	r1, r3, #5
 80062be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062c2:	0150      	lsls	r0, r2, #5
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4641      	mov	r1, r8
 80062ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80062ce:	4649      	mov	r1, r9
 80062d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062e8:	ebb2 040a 	subs.w	r4, r2, sl
 80062ec:	eb63 050b 	sbc.w	r5, r3, fp
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	00eb      	lsls	r3, r5, #3
 80062fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062fe:	00e2      	lsls	r2, r4, #3
 8006300:	4614      	mov	r4, r2
 8006302:	461d      	mov	r5, r3
 8006304:	4643      	mov	r3, r8
 8006306:	18e3      	adds	r3, r4, r3
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	464b      	mov	r3, r9
 800630c:	eb45 0303 	adc.w	r3, r5, r3
 8006310:	607b      	str	r3, [r7, #4]
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800631e:	4629      	mov	r1, r5
 8006320:	028b      	lsls	r3, r1, #10
 8006322:	4621      	mov	r1, r4
 8006324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006328:	4621      	mov	r1, r4
 800632a:	028a      	lsls	r2, r1, #10
 800632c:	4610      	mov	r0, r2
 800632e:	4619      	mov	r1, r3
 8006330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006332:	2200      	movs	r2, #0
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	61fa      	str	r2, [r7, #28]
 8006338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800633c:	f7f9 ff44 	bl	80001c8 <__aeabi_uldivmod>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4613      	mov	r3, r2
 8006346:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006348:	4b0b      	ldr	r3, [pc, #44]	@ (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	0c1b      	lsrs	r3, r3, #16
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	3301      	adds	r3, #1
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006358:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800635a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800635c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006360:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006362:	e002      	b.n	800636a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006364:	4b05      	ldr	r3, [pc, #20]	@ (800637c <HAL_RCC_GetSysClockFreq+0x204>)
 8006366:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800636a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800636c:	4618      	mov	r0, r3
 800636e:	3750      	adds	r7, #80	@ 0x50
 8006370:	46bd      	mov	sp, r7
 8006372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006376:	bf00      	nop
 8006378:	40023800 	.word	0x40023800
 800637c:	00f42400 	.word	0x00f42400
 8006380:	007a1200 	.word	0x007a1200

08006384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006388:	4b03      	ldr	r3, [pc, #12]	@ (8006398 <HAL_RCC_GetHCLKFreq+0x14>)
 800638a:	681b      	ldr	r3, [r3, #0]
}
 800638c:	4618      	mov	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000008 	.word	0x20000008

0800639c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063a0:	f7ff fff0 	bl	8006384 <HAL_RCC_GetHCLKFreq>
 80063a4:	4602      	mov	r2, r0
 80063a6:	4b05      	ldr	r3, [pc, #20]	@ (80063bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	0a9b      	lsrs	r3, r3, #10
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	4903      	ldr	r1, [pc, #12]	@ (80063c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063b2:	5ccb      	ldrb	r3, [r1, r3]
 80063b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40023800 	.word	0x40023800
 80063c0:	0800bc14 	.word	0x0800bc14

080063c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063c8:	f7ff ffdc 	bl	8006384 <HAL_RCC_GetHCLKFreq>
 80063cc:	4602      	mov	r2, r0
 80063ce:	4b05      	ldr	r3, [pc, #20]	@ (80063e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	0b5b      	lsrs	r3, r3, #13
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	4903      	ldr	r1, [pc, #12]	@ (80063e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063da:	5ccb      	ldrb	r3, [r1, r3]
 80063dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40023800 	.word	0x40023800
 80063e8:	0800bc14 	.word	0x0800bc14

080063ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d105      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006410:	2b00      	cmp	r3, #0
 8006412:	d035      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006414:	4b62      	ldr	r3, [pc, #392]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800641a:	f7fb fa4f 	bl	80018bc <HAL_GetTick>
 800641e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006420:	e008      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006422:	f7fb fa4b 	bl	80018bc <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e0b0      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006434:	4b5b      	ldr	r3, [pc, #364]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f0      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	019a      	lsls	r2, r3, #6
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	071b      	lsls	r3, r3, #28
 800644c:	4955      	ldr	r1, [pc, #340]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006454:	4b52      	ldr	r3, [pc, #328]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800645a:	f7fb fa2f 	bl	80018bc <HAL_GetTick>
 800645e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006460:	e008      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006462:	f7fb fa2b 	bl	80018bc <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e090      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006474:	4b4b      	ldr	r3, [pc, #300]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 8083 	beq.w	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	4b44      	ldr	r3, [pc, #272]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	4a43      	ldr	r2, [pc, #268]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800649c:	6413      	str	r3, [r2, #64]	@ 0x40
 800649e:	4b41      	ldr	r3, [pc, #260]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064aa:	4b3f      	ldr	r3, [pc, #252]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a3e      	ldr	r2, [pc, #248]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064b6:	f7fb fa01 	bl	80018bc <HAL_GetTick>
 80064ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064bc:	e008      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064be:	f7fb f9fd 	bl	80018bc <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e062      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064d0:	4b35      	ldr	r3, [pc, #212]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0f0      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064dc:	4b31      	ldr	r3, [pc, #196]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d02f      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d028      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064fa:	4b2a      	ldr	r3, [pc, #168]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006502:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006504:	4b29      	ldr	r3, [pc, #164]	@ (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006506:	2201      	movs	r2, #1
 8006508:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800650a:	4b28      	ldr	r3, [pc, #160]	@ (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006510:	4a24      	ldr	r2, [pc, #144]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006516:	4b23      	ldr	r3, [pc, #140]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b01      	cmp	r3, #1
 8006520:	d114      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006522:	f7fb f9cb 	bl	80018bc <HAL_GetTick>
 8006526:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006528:	e00a      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800652a:	f7fb f9c7 	bl	80018bc <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006538:	4293      	cmp	r3, r2
 800653a:	d901      	bls.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e02a      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006540:	4b18      	ldr	r3, [pc, #96]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0ee      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006558:	d10d      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800655a:	4b12      	ldr	r3, [pc, #72]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800656a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800656e:	490d      	ldr	r1, [pc, #52]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006570:	4313      	orrs	r3, r2
 8006572:	608b      	str	r3, [r1, #8]
 8006574:	e005      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006576:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	4a0a      	ldr	r2, [pc, #40]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800657c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006580:	6093      	str	r3, [r2, #8]
 8006582:	4b08      	ldr	r3, [pc, #32]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006584:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800658e:	4905      	ldr	r1, [pc, #20]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006590:	4313      	orrs	r3, r2
 8006592:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	42470068 	.word	0x42470068
 80065a4:	40023800 	.word	0x40023800
 80065a8:	40007000 	.word	0x40007000
 80065ac:	42470e40 	.word	0x42470e40

080065b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d13f      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80065ce:	4b24      	ldr	r3, [pc, #144]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d006      	beq.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80065e4:	d12f      	bne.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80065e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80065e8:	617b      	str	r3, [r7, #20]
          break;
 80065ea:	e02f      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80065ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065f8:	d108      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80065fa:	4b19      	ldr	r3, [pc, #100]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006602:	4a19      	ldr	r2, [pc, #100]	@ (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006604:	fbb2 f3f3 	udiv	r3, r2, r3
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	e007      	b.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800660c:	4b14      	ldr	r3, [pc, #80]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006614:	4a15      	ldr	r2, [pc, #84]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006616:	fbb2 f3f3 	udiv	r3, r2, r3
 800661a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800661c:	4b10      	ldr	r3, [pc, #64]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800661e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006622:	099b      	lsrs	r3, r3, #6
 8006624:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	fb02 f303 	mul.w	r3, r2, r3
 800662e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006630:	4b0b      	ldr	r3, [pc, #44]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006636:	0f1b      	lsrs	r3, r3, #28
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006642:	617b      	str	r3, [r7, #20]
          break;
 8006644:	e002      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
          break;
 800664a:	bf00      	nop
        }
      }
      break;
 800664c:	e000      	b.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800664e:	bf00      	nop
    }
  }
  return frequency;
 8006650:	697b      	ldr	r3, [r7, #20]
}
 8006652:	4618      	mov	r0, r3
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40023800 	.word	0x40023800
 8006664:	00bb8000 	.word	0x00bb8000
 8006668:	007a1200 	.word	0x007a1200
 800666c:	00f42400 	.word	0x00f42400

08006670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e042      	b.n	8006708 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fa ff9e 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2224      	movs	r2, #36	@ 0x24
 80066a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fa09 	bl	8006acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695a      	ldr	r2, [r3, #20]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08a      	sub	sp, #40	@ 0x28
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b20      	cmp	r3, #32
 800672e:	d175      	bne.n	800681c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_UART_Transmit+0x2c>
 8006736:	88fb      	ldrh	r3, [r7, #6]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e06e      	b.n	800681e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2221      	movs	r2, #33	@ 0x21
 800674a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800674e:	f7fb f8b5 	bl	80018bc <HAL_GetTick>
 8006752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	88fa      	ldrh	r2, [r7, #6]
 8006758:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	88fa      	ldrh	r2, [r7, #6]
 800675e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006768:	d108      	bne.n	800677c <HAL_UART_Transmit+0x6c>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e003      	b.n	8006784 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006780:	2300      	movs	r3, #0
 8006782:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006784:	e02e      	b.n	80067e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2200      	movs	r2, #0
 800678e:	2180      	movs	r1, #128	@ 0x80
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f8df 	bl	8006954 <UART_WaitOnFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e03a      	b.n	800681e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10b      	bne.n	80067c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	3302      	adds	r3, #2
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	e007      	b.n	80067d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	781a      	ldrb	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	3301      	adds	r3, #1
 80067d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1cb      	bne.n	8006786 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2200      	movs	r2, #0
 80067f6:	2140      	movs	r1, #64	@ 0x40
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f8ab 	bl	8006954 <UART_WaitOnFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e006      	b.n	800681e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	e000      	b.n	800681e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800681c:	2302      	movs	r3, #2
  }
}
 800681e:	4618      	mov	r0, r3
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b08a      	sub	sp, #40	@ 0x28
 800682a:	af02      	add	r7, sp, #8
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	603b      	str	r3, [r7, #0]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b20      	cmp	r3, #32
 8006844:	f040 8081 	bne.w	800694a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_UART_Receive+0x2e>
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e079      	b.n	800694c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2222      	movs	r2, #34	@ 0x22
 8006862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800686c:	f7fb f826 	bl	80018bc <HAL_GetTick>
 8006870:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	88fa      	ldrh	r2, [r7, #6]
 800687c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006886:	d108      	bne.n	800689a <HAL_UART_Receive+0x74>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006890:	2300      	movs	r3, #0
 8006892:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	61bb      	str	r3, [r7, #24]
 8006898:	e003      	b.n	80068a2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80068a2:	e047      	b.n	8006934 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2200      	movs	r2, #0
 80068ac:	2120      	movs	r1, #32
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f850 	bl	8006954 <UART_WaitOnFlagUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e042      	b.n	800694c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10c      	bne.n	80068e6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d8:	b29a      	uxth	r2, r3
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	3302      	adds	r3, #2
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	e01f      	b.n	8006926 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ee:	d007      	beq.n	8006900 <HAL_UART_Receive+0xda>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <HAL_UART_Receive+0xe8>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	b2da      	uxtb	r2, r3
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	e008      	b.n	8006920 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800691a:	b2da      	uxtb	r2, r3
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	3301      	adds	r3, #1
 8006924:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1b2      	bne.n	80068a4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	e000      	b.n	800694c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800694a:	2302      	movs	r3, #2
  }
}
 800694c:	4618      	mov	r0, r3
 800694e:	3720      	adds	r7, #32
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	4613      	mov	r3, r2
 8006962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006964:	e03b      	b.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696c:	d037      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696e:	f7fa ffa5 	bl	80018bc <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	429a      	cmp	r2, r3
 800697c:	d302      	bcc.n	8006984 <UART_WaitOnFlagUntilTimeout+0x30>
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e03a      	b.n	80069fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0304 	and.w	r3, r3, #4
 8006992:	2b00      	cmp	r3, #0
 8006994:	d023      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b80      	cmp	r3, #128	@ 0x80
 800699a:	d020      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b40      	cmp	r3, #64	@ 0x40
 80069a0:	d01d      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d116      	bne.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f81d 	bl	8006a06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2208      	movs	r2, #8
 80069d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e00f      	b.n	80069fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4013      	ands	r3, r2
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	bf0c      	ite	eq
 80069ee:	2301      	moveq	r3, #1
 80069f0:	2300      	movne	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	79fb      	ldrb	r3, [r7, #7]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d0b4      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b095      	sub	sp, #84	@ 0x54
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	330c      	adds	r3, #12
 8006a14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	330c      	adds	r3, #12
 8006a2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e5      	bne.n	8006a0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3314      	adds	r3, #20
 8006a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	f023 0301 	bic.w	r3, r3, #1
 8006a58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3314      	adds	r3, #20
 8006a60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e5      	bne.n	8006a42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d119      	bne.n	8006ab2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	330c      	adds	r3, #12
 8006a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f023 0310 	bic.w	r3, r3, #16
 8006a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a9e:	61ba      	str	r2, [r7, #24]
 8006aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6979      	ldr	r1, [r7, #20]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e5      	bne.n	8006a7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ac0:	bf00      	nop
 8006ac2:	3754      	adds	r7, #84	@ 0x54
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ad0:	b0c0      	sub	sp, #256	@ 0x100
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae8:	68d9      	ldr	r1, [r3, #12]
 8006aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	ea40 0301 	orr.w	r3, r0, r1
 8006af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	431a      	orrs	r2, r3
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b24:	f021 010c 	bic.w	r1, r1, #12
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b32:	430b      	orrs	r3, r1
 8006b34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b46:	6999      	ldr	r1, [r3, #24]
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	ea40 0301 	orr.w	r3, r0, r1
 8006b52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b8f      	ldr	r3, [pc, #572]	@ (8006d98 <UART_SetConfig+0x2cc>)
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d005      	beq.n	8006b6c <UART_SetConfig+0xa0>
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b8d      	ldr	r3, [pc, #564]	@ (8006d9c <UART_SetConfig+0x2d0>)
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d104      	bne.n	8006b76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b6c:	f7ff fc2a 	bl	80063c4 <HAL_RCC_GetPCLK2Freq>
 8006b70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b74:	e003      	b.n	8006b7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b76:	f7ff fc11 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 8006b7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b88:	f040 810c 	bne.w	8006da4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006b9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006b9e:	4622      	mov	r2, r4
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	1891      	adds	r1, r2, r2
 8006ba4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006ba6:	415b      	adcs	r3, r3
 8006ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006baa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006bae:	4621      	mov	r1, r4
 8006bb0:	eb12 0801 	adds.w	r8, r2, r1
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	eb43 0901 	adc.w	r9, r3, r1
 8006bba:	f04f 0200 	mov.w	r2, #0
 8006bbe:	f04f 0300 	mov.w	r3, #0
 8006bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bce:	4690      	mov	r8, r2
 8006bd0:	4699      	mov	r9, r3
 8006bd2:	4623      	mov	r3, r4
 8006bd4:	eb18 0303 	adds.w	r3, r8, r3
 8006bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bdc:	462b      	mov	r3, r5
 8006bde:	eb49 0303 	adc.w	r3, r9, r3
 8006be2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bf2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	18db      	adds	r3, r3, r3
 8006bfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c00:	4613      	mov	r3, r2
 8006c02:	eb42 0303 	adc.w	r3, r2, r3
 8006c06:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c10:	f7f9 fada 	bl	80001c8 <__aeabi_uldivmod>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4b61      	ldr	r3, [pc, #388]	@ (8006da0 <UART_SetConfig+0x2d4>)
 8006c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	011c      	lsls	r4, r3, #4
 8006c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c34:	4642      	mov	r2, r8
 8006c36:	464b      	mov	r3, r9
 8006c38:	1891      	adds	r1, r2, r2
 8006c3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c3c:	415b      	adcs	r3, r3
 8006c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c44:	4641      	mov	r1, r8
 8006c46:	eb12 0a01 	adds.w	sl, r2, r1
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	eb43 0b01 	adc.w	fp, r3, r1
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c64:	4692      	mov	sl, r2
 8006c66:	469b      	mov	fp, r3
 8006c68:	4643      	mov	r3, r8
 8006c6a:	eb1a 0303 	adds.w	r3, sl, r3
 8006c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c72:	464b      	mov	r3, r9
 8006c74:	eb4b 0303 	adc.w	r3, fp, r3
 8006c78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006c8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c90:	460b      	mov	r3, r1
 8006c92:	18db      	adds	r3, r3, r3
 8006c94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c96:	4613      	mov	r3, r2
 8006c98:	eb42 0303 	adc.w	r3, r2, r3
 8006c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ca2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ca6:	f7f9 fa8f 	bl	80001c8 <__aeabi_uldivmod>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8006da0 <UART_SetConfig+0x2d4>)
 8006cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	2264      	movs	r2, #100	@ 0x64
 8006cba:	fb02 f303 	mul.w	r3, r2, r3
 8006cbe:	1acb      	subs	r3, r1, r3
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006cc6:	4b36      	ldr	r3, [pc, #216]	@ (8006da0 <UART_SetConfig+0x2d4>)
 8006cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006cd4:	441c      	add	r4, r3
 8006cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ce0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ce4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ce8:	4642      	mov	r2, r8
 8006cea:	464b      	mov	r3, r9
 8006cec:	1891      	adds	r1, r2, r2
 8006cee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006cf0:	415b      	adcs	r3, r3
 8006cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	1851      	adds	r1, r2, r1
 8006cfc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006cfe:	4649      	mov	r1, r9
 8006d00:	414b      	adcs	r3, r1
 8006d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d10:	4659      	mov	r1, fp
 8006d12:	00cb      	lsls	r3, r1, #3
 8006d14:	4651      	mov	r1, sl
 8006d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d1a:	4651      	mov	r1, sl
 8006d1c:	00ca      	lsls	r2, r1, #3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	4619      	mov	r1, r3
 8006d22:	4603      	mov	r3, r0
 8006d24:	4642      	mov	r2, r8
 8006d26:	189b      	adds	r3, r3, r2
 8006d28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	460a      	mov	r2, r1
 8006d30:	eb42 0303 	adc.w	r3, r2, r3
 8006d34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	18db      	adds	r3, r3, r3
 8006d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d52:	4613      	mov	r3, r2
 8006d54:	eb42 0303 	adc.w	r3, r2, r3
 8006d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d62:	f7f9 fa31 	bl	80001c8 <__aeabi_uldivmod>
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <UART_SetConfig+0x2d4>)
 8006d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d70:	095b      	lsrs	r3, r3, #5
 8006d72:	2164      	movs	r1, #100	@ 0x64
 8006d74:	fb01 f303 	mul.w	r3, r1, r3
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	3332      	adds	r3, #50	@ 0x32
 8006d7e:	4a08      	ldr	r2, [pc, #32]	@ (8006da0 <UART_SetConfig+0x2d4>)
 8006d80:	fba2 2303 	umull	r2, r3, r2, r3
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	f003 0207 	and.w	r2, r3, #7
 8006d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4422      	add	r2, r4
 8006d92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d94:	e106      	b.n	8006fa4 <UART_SetConfig+0x4d8>
 8006d96:	bf00      	nop
 8006d98:	40011000 	.word	0x40011000
 8006d9c:	40011400 	.word	0x40011400
 8006da0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006da8:	2200      	movs	r2, #0
 8006daa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006db2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006db6:	4642      	mov	r2, r8
 8006db8:	464b      	mov	r3, r9
 8006dba:	1891      	adds	r1, r2, r2
 8006dbc:	6239      	str	r1, [r7, #32]
 8006dbe:	415b      	adcs	r3, r3
 8006dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dc6:	4641      	mov	r1, r8
 8006dc8:	1854      	adds	r4, r2, r1
 8006dca:	4649      	mov	r1, r9
 8006dcc:	eb43 0501 	adc.w	r5, r3, r1
 8006dd0:	f04f 0200 	mov.w	r2, #0
 8006dd4:	f04f 0300 	mov.w	r3, #0
 8006dd8:	00eb      	lsls	r3, r5, #3
 8006dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dde:	00e2      	lsls	r2, r4, #3
 8006de0:	4614      	mov	r4, r2
 8006de2:	461d      	mov	r5, r3
 8006de4:	4643      	mov	r3, r8
 8006de6:	18e3      	adds	r3, r4, r3
 8006de8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006dec:	464b      	mov	r3, r9
 8006dee:	eb45 0303 	adc.w	r3, r5, r3
 8006df2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e12:	4629      	mov	r1, r5
 8006e14:	008b      	lsls	r3, r1, #2
 8006e16:	4621      	mov	r1, r4
 8006e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	008a      	lsls	r2, r1, #2
 8006e20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e24:	f7f9 f9d0 	bl	80001c8 <__aeabi_uldivmod>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4b60      	ldr	r3, [pc, #384]	@ (8006fb0 <UART_SetConfig+0x4e4>)
 8006e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e32:	095b      	lsrs	r3, r3, #5
 8006e34:	011c      	lsls	r4, r3, #4
 8006e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e48:	4642      	mov	r2, r8
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	1891      	adds	r1, r2, r2
 8006e4e:	61b9      	str	r1, [r7, #24]
 8006e50:	415b      	adcs	r3, r3
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e58:	4641      	mov	r1, r8
 8006e5a:	1851      	adds	r1, r2, r1
 8006e5c:	6139      	str	r1, [r7, #16]
 8006e5e:	4649      	mov	r1, r9
 8006e60:	414b      	adcs	r3, r1
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e70:	4659      	mov	r1, fp
 8006e72:	00cb      	lsls	r3, r1, #3
 8006e74:	4651      	mov	r1, sl
 8006e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e7a:	4651      	mov	r1, sl
 8006e7c:	00ca      	lsls	r2, r1, #3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	4619      	mov	r1, r3
 8006e82:	4603      	mov	r3, r0
 8006e84:	4642      	mov	r2, r8
 8006e86:	189b      	adds	r3, r3, r2
 8006e88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	460a      	mov	r2, r1
 8006e90:	eb42 0303 	adc.w	r3, r2, r3
 8006e94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ea2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006eb0:	4649      	mov	r1, r9
 8006eb2:	008b      	lsls	r3, r1, #2
 8006eb4:	4641      	mov	r1, r8
 8006eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eba:	4641      	mov	r1, r8
 8006ebc:	008a      	lsls	r2, r1, #2
 8006ebe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ec2:	f7f9 f981 	bl	80001c8 <__aeabi_uldivmod>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4b38      	ldr	r3, [pc, #224]	@ (8006fb0 <UART_SetConfig+0x4e4>)
 8006ece:	fba3 2301 	umull	r2, r3, r3, r1
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	2264      	movs	r2, #100	@ 0x64
 8006ed6:	fb02 f303 	mul.w	r3, r2, r3
 8006eda:	1acb      	subs	r3, r1, r3
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	3332      	adds	r3, #50	@ 0x32
 8006ee0:	4a33      	ldr	r2, [pc, #204]	@ (8006fb0 <UART_SetConfig+0x4e4>)
 8006ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006eec:	441c      	add	r4, r3
 8006eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ef6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ef8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006efc:	4642      	mov	r2, r8
 8006efe:	464b      	mov	r3, r9
 8006f00:	1891      	adds	r1, r2, r2
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	415b      	adcs	r3, r3
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f0c:	4641      	mov	r1, r8
 8006f0e:	1851      	adds	r1, r2, r1
 8006f10:	6039      	str	r1, [r7, #0]
 8006f12:	4649      	mov	r1, r9
 8006f14:	414b      	adcs	r3, r1
 8006f16:	607b      	str	r3, [r7, #4]
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f24:	4659      	mov	r1, fp
 8006f26:	00cb      	lsls	r3, r1, #3
 8006f28:	4651      	mov	r1, sl
 8006f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f2e:	4651      	mov	r1, sl
 8006f30:	00ca      	lsls	r2, r1, #3
 8006f32:	4610      	mov	r0, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	4642      	mov	r2, r8
 8006f3a:	189b      	adds	r3, r3, r2
 8006f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f3e:	464b      	mov	r3, r9
 8006f40:	460a      	mov	r2, r1
 8006f42:	eb42 0303 	adc.w	r3, r2, r3
 8006f46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f52:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f60:	4649      	mov	r1, r9
 8006f62:	008b      	lsls	r3, r1, #2
 8006f64:	4641      	mov	r1, r8
 8006f66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f6a:	4641      	mov	r1, r8
 8006f6c:	008a      	lsls	r2, r1, #2
 8006f6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f72:	f7f9 f929 	bl	80001c8 <__aeabi_uldivmod>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb0 <UART_SetConfig+0x4e4>)
 8006f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	2164      	movs	r1, #100	@ 0x64
 8006f84:	fb01 f303 	mul.w	r3, r1, r3
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	3332      	adds	r3, #50	@ 0x32
 8006f8e:	4a08      	ldr	r2, [pc, #32]	@ (8006fb0 <UART_SetConfig+0x4e4>)
 8006f90:	fba2 2303 	umull	r2, r3, r2, r3
 8006f94:	095b      	lsrs	r3, r3, #5
 8006f96:	f003 020f 	and.w	r2, r3, #15
 8006f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4422      	add	r2, r4
 8006fa2:	609a      	str	r2, [r3, #8]
}
 8006fa4:	bf00      	nop
 8006fa6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006faa:	46bd      	mov	sp, r7
 8006fac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fb0:	51eb851f 	.word	0x51eb851f

08006fb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	f107 001c 	add.w	r0, r7, #28
 8006fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fc6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d123      	bne.n	8007016 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ff6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d105      	bne.n	800700a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fae2 	bl	80085d4 <USB_CoreReset>
 8007010:	4603      	mov	r3, r0
 8007012:	73fb      	strb	r3, [r7, #15]
 8007014:	e01b      	b.n	800704e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fad6 	bl	80085d4 <USB_CoreReset>
 8007028:	4603      	mov	r3, r0
 800702a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800702c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007038:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007040:	e005      	b.n	800704e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007046:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800704e:	7fbb      	ldrb	r3, [r7, #30]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d10b      	bne.n	800706c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f043 0206 	orr.w	r2, r3, #6
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f043 0220 	orr.w	r2, r3, #32
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007078:	b004      	add	sp, #16
 800707a:	4770      	bx	lr

0800707c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	2b02      	cmp	r3, #2
 800708e:	d165      	bne.n	800715c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4a41      	ldr	r2, [pc, #260]	@ (8007198 <USB_SetTurnaroundTime+0x11c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d906      	bls.n	80070a6 <USB_SetTurnaroundTime+0x2a>
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4a40      	ldr	r2, [pc, #256]	@ (800719c <USB_SetTurnaroundTime+0x120>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d202      	bcs.n	80070a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070a0:	230f      	movs	r3, #15
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e062      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4a3c      	ldr	r2, [pc, #240]	@ (800719c <USB_SetTurnaroundTime+0x120>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d306      	bcc.n	80070bc <USB_SetTurnaroundTime+0x40>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4a3b      	ldr	r2, [pc, #236]	@ (80071a0 <USB_SetTurnaroundTime+0x124>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d202      	bcs.n	80070bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070b6:	230e      	movs	r3, #14
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	e057      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4a38      	ldr	r2, [pc, #224]	@ (80071a0 <USB_SetTurnaroundTime+0x124>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d306      	bcc.n	80070d2 <USB_SetTurnaroundTime+0x56>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a37      	ldr	r2, [pc, #220]	@ (80071a4 <USB_SetTurnaroundTime+0x128>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d202      	bcs.n	80070d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070cc:	230d      	movs	r3, #13
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	e04c      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	4a33      	ldr	r2, [pc, #204]	@ (80071a4 <USB_SetTurnaroundTime+0x128>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d306      	bcc.n	80070e8 <USB_SetTurnaroundTime+0x6c>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	4a32      	ldr	r2, [pc, #200]	@ (80071a8 <USB_SetTurnaroundTime+0x12c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d802      	bhi.n	80070e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80070e2:	230c      	movs	r3, #12
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	e041      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4a2f      	ldr	r2, [pc, #188]	@ (80071a8 <USB_SetTurnaroundTime+0x12c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d906      	bls.n	80070fe <USB_SetTurnaroundTime+0x82>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4a2e      	ldr	r2, [pc, #184]	@ (80071ac <USB_SetTurnaroundTime+0x130>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d802      	bhi.n	80070fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80070f8:	230b      	movs	r3, #11
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	e036      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	4a2a      	ldr	r2, [pc, #168]	@ (80071ac <USB_SetTurnaroundTime+0x130>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d906      	bls.n	8007114 <USB_SetTurnaroundTime+0x98>
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	4a29      	ldr	r2, [pc, #164]	@ (80071b0 <USB_SetTurnaroundTime+0x134>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d802      	bhi.n	8007114 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800710e:	230a      	movs	r3, #10
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	e02b      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4a26      	ldr	r2, [pc, #152]	@ (80071b0 <USB_SetTurnaroundTime+0x134>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d906      	bls.n	800712a <USB_SetTurnaroundTime+0xae>
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4a25      	ldr	r2, [pc, #148]	@ (80071b4 <USB_SetTurnaroundTime+0x138>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d202      	bcs.n	800712a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007124:	2309      	movs	r3, #9
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	e020      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4a21      	ldr	r2, [pc, #132]	@ (80071b4 <USB_SetTurnaroundTime+0x138>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d306      	bcc.n	8007140 <USB_SetTurnaroundTime+0xc4>
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4a20      	ldr	r2, [pc, #128]	@ (80071b8 <USB_SetTurnaroundTime+0x13c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d802      	bhi.n	8007140 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800713a:	2308      	movs	r3, #8
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	e015      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4a1d      	ldr	r2, [pc, #116]	@ (80071b8 <USB_SetTurnaroundTime+0x13c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d906      	bls.n	8007156 <USB_SetTurnaroundTime+0xda>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4a1c      	ldr	r2, [pc, #112]	@ (80071bc <USB_SetTurnaroundTime+0x140>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d202      	bcs.n	8007156 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007150:	2307      	movs	r3, #7
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	e00a      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007156:	2306      	movs	r3, #6
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	e007      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d102      	bne.n	8007168 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007162:	2309      	movs	r3, #9
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e001      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007168:	2309      	movs	r3, #9
 800716a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	029b      	lsls	r3, r3, #10
 8007180:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007184:	431a      	orrs	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	00d8acbf 	.word	0x00d8acbf
 800719c:	00e4e1c0 	.word	0x00e4e1c0
 80071a0:	00f42400 	.word	0x00f42400
 80071a4:	01067380 	.word	0x01067380
 80071a8:	011a499f 	.word	0x011a499f
 80071ac:	01312cff 	.word	0x01312cff
 80071b0:	014ca43f 	.word	0x014ca43f
 80071b4:	016e3600 	.word	0x016e3600
 80071b8:	01a6ab1f 	.word	0x01a6ab1f
 80071bc:	01e84800 	.word	0x01e84800

080071c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f043 0201 	orr.w	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f023 0201 	bic.w	r2, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	460b      	mov	r3, r1
 800720e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d115      	bne.n	8007252 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007232:	200a      	movs	r0, #10
 8007234:	f7fa fb4e 	bl	80018d4 <HAL_Delay>
      ms += 10U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	330a      	adds	r3, #10
 800723c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 f939 	bl	80084b6 <USB_GetMode>
 8007244:	4603      	mov	r3, r0
 8007246:	2b01      	cmp	r3, #1
 8007248:	d01e      	beq.n	8007288 <USB_SetCurrentMode+0x84>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2bc7      	cmp	r3, #199	@ 0xc7
 800724e:	d9f0      	bls.n	8007232 <USB_SetCurrentMode+0x2e>
 8007250:	e01a      	b.n	8007288 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d115      	bne.n	8007284 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007264:	200a      	movs	r0, #10
 8007266:	f7fa fb35 	bl	80018d4 <HAL_Delay>
      ms += 10U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	330a      	adds	r3, #10
 800726e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 f920 	bl	80084b6 <USB_GetMode>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <USB_SetCurrentMode+0x84>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007280:	d9f0      	bls.n	8007264 <USB_SetCurrentMode+0x60>
 8007282:	e001      	b.n	8007288 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e005      	b.n	8007294 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2bc8      	cmp	r3, #200	@ 0xc8
 800728c:	d101      	bne.n	8007292 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800729c:	b084      	sub	sp, #16
 800729e:	b580      	push	{r7, lr}
 80072a0:	b086      	sub	sp, #24
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80072aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072b6:	2300      	movs	r3, #0
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	e009      	b.n	80072d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	3340      	adds	r3, #64	@ 0x40
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	3301      	adds	r3, #1
 80072ce:	613b      	str	r3, [r7, #16]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2b0e      	cmp	r3, #14
 80072d4:	d9f2      	bls.n	80072bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d11c      	bne.n	8007318 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072ec:	f043 0302 	orr.w	r3, r3, #2
 80072f0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007302:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	639a      	str	r2, [r3, #56]	@ 0x38
 8007316:	e00b      	b.n	8007330 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007328:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007336:	461a      	mov	r2, r3
 8007338:	2300      	movs	r3, #0
 800733a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800733c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007340:	2b01      	cmp	r3, #1
 8007342:	d10d      	bne.n	8007360 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007344:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007348:	2b00      	cmp	r3, #0
 800734a:	d104      	bne.n	8007356 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800734c:	2100      	movs	r1, #0
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f968 	bl	8007624 <USB_SetDevSpeed>
 8007354:	e008      	b.n	8007368 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007356:	2101      	movs	r1, #1
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f963 	bl	8007624 <USB_SetDevSpeed>
 800735e:	e003      	b.n	8007368 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007360:	2103      	movs	r1, #3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f95e 	bl	8007624 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007368:	2110      	movs	r1, #16
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f8fa 	bl	8007564 <USB_FlushTxFifo>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f924 	bl	80075c8 <USB_FlushRxFifo>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007390:	461a      	mov	r2, r3
 8007392:	2300      	movs	r3, #0
 8007394:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800739c:	461a      	mov	r2, r3
 800739e:	2300      	movs	r3, #0
 80073a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a8:	461a      	mov	r2, r3
 80073aa:	2300      	movs	r3, #0
 80073ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073ae:	2300      	movs	r3, #0
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	e043      	b.n	800743c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073ca:	d118      	bne.n	80073fe <USB_DevInit+0x162>
    {
      if (i == 0U)
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073de:	461a      	mov	r2, r3
 80073e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	e013      	b.n	8007410 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f4:	461a      	mov	r2, r3
 80073f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	e008      	b.n	8007410 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	4413      	add	r3, r2
 8007406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800740a:	461a      	mov	r2, r3
 800740c:	2300      	movs	r3, #0
 800740e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800741c:	461a      	mov	r2, r3
 800741e:	2300      	movs	r3, #0
 8007420:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800742e:	461a      	mov	r2, r3
 8007430:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007434:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	3301      	adds	r3, #1
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007440:	461a      	mov	r2, r3
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4293      	cmp	r3, r2
 8007446:	d3b5      	bcc.n	80073b4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007448:	2300      	movs	r3, #0
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	e043      	b.n	80074d6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007460:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007464:	d118      	bne.n	8007498 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10a      	bne.n	8007482 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007478:	461a      	mov	r2, r3
 800747a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	e013      	b.n	80074aa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748e:	461a      	mov	r2, r3
 8007490:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	e008      	b.n	80074aa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a4:	461a      	mov	r2, r3
 80074a6:	2300      	movs	r3, #0
 80074a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b6:	461a      	mov	r2, r3
 80074b8:	2300      	movs	r3, #0
 80074ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c8:	461a      	mov	r2, r3
 80074ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80074ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	3301      	adds	r3, #1
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80074da:	461a      	mov	r2, r3
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	4293      	cmp	r3, r2
 80074e0:	d3b5      	bcc.n	800744e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007502:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007504:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	f043 0210 	orr.w	r2, r3, #16
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699a      	ldr	r2, [r3, #24]
 800751c:	4b10      	ldr	r3, [pc, #64]	@ (8007560 <USB_DevInit+0x2c4>)
 800751e:	4313      	orrs	r3, r2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007524:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	f043 0208 	orr.w	r2, r3, #8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007538:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800753c:	2b01      	cmp	r3, #1
 800753e:	d107      	bne.n	8007550 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007548:	f043 0304 	orr.w	r3, r3, #4
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800755c:	b004      	add	sp, #16
 800755e:	4770      	bx	lr
 8007560:	803c3800 	.word	0x803c3800

08007564 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3301      	adds	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800757e:	d901      	bls.n	8007584 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e01b      	b.n	80075bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	daf2      	bge.n	8007572 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	019b      	lsls	r3, r3, #6
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3301      	adds	r3, #1
 80075a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075a8:	d901      	bls.n	80075ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e006      	b.n	80075bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	d0f0      	beq.n	800759c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075e0:	d901      	bls.n	80075e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e018      	b.n	8007618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	daf2      	bge.n	80075d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2210      	movs	r2, #16
 80075f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007604:	d901      	bls.n	800760a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e006      	b.n	8007618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b10      	cmp	r3, #16
 8007614:	d0f0      	beq.n	80075f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	68f9      	ldr	r1, [r7, #12]
 8007640:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007644:	4313      	orrs	r3, r2
 8007646:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007656:	b480      	push	{r7}
 8007658:	b087      	sub	sp, #28
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 0306 	and.w	r3, r3, #6
 800766e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d102      	bne.n	800767c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007676:	2300      	movs	r3, #0
 8007678:	75fb      	strb	r3, [r7, #23]
 800767a:	e00a      	b.n	8007692 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d002      	beq.n	8007688 <USB_GetDevSpeed+0x32>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b06      	cmp	r3, #6
 8007686:	d102      	bne.n	800768e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007688:	2302      	movs	r3, #2
 800768a:	75fb      	strb	r3, [r7, #23]
 800768c:	e001      	b.n	8007692 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800768e:	230f      	movs	r3, #15
 8007690:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
}
 8007694:	4618      	mov	r0, r3
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d13a      	bne.n	8007732 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	2101      	movs	r1, #1
 80076ce:	fa01 f303 	lsl.w	r3, r1, r3
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	68f9      	ldr	r1, [r7, #12]
 80076d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076da:	4313      	orrs	r3, r2
 80076dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d155      	bne.n	80077a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	791b      	ldrb	r3, [r3, #4]
 800770e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007710:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	059b      	lsls	r3, r3, #22
 8007716:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007718:	4313      	orrs	r3, r2
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800772a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	e036      	b.n	80077a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007738:	69da      	ldr	r2, [r3, #28]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	2101      	movs	r1, #1
 8007744:	fa01 f303 	lsl.w	r3, r1, r3
 8007748:	041b      	lsls	r3, r3, #16
 800774a:	68f9      	ldr	r1, [r7, #12]
 800774c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007750:	4313      	orrs	r3, r2
 8007752:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d11a      	bne.n	80077a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	791b      	ldrb	r3, [r3, #4]
 8007784:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007786:	430b      	orrs	r3, r1
 8007788:	4313      	orrs	r3, r2
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800779a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800779e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	785b      	ldrb	r3, [r3, #1]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d161      	bne.n	8007890 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077e2:	d11f      	bne.n	8007824 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	0151      	lsls	r1, r2, #5
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	440a      	add	r2, r1
 80077fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007802:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	440a      	add	r2, r1
 800781a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800781e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007822:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800782a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	f003 030f 	and.w	r3, r3, #15
 8007834:	2101      	movs	r1, #1
 8007836:	fa01 f303 	lsl.w	r3, r1, r3
 800783a:	b29b      	uxth	r3, r3
 800783c:	43db      	mvns	r3, r3
 800783e:	68f9      	ldr	r1, [r7, #12]
 8007840:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007844:	4013      	ands	r3, r2
 8007846:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800784e:	69da      	ldr	r2, [r3, #28]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f003 030f 	and.w	r3, r3, #15
 8007858:	2101      	movs	r1, #1
 800785a:	fa01 f303 	lsl.w	r3, r1, r3
 800785e:	b29b      	uxth	r3, r3
 8007860:	43db      	mvns	r3, r3
 8007862:	68f9      	ldr	r1, [r7, #12]
 8007864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007868:	4013      	ands	r3, r2
 800786a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	0159      	lsls	r1, r3, #5
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	440b      	add	r3, r1
 8007882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007886:	4619      	mov	r1, r3
 8007888:	4b35      	ldr	r3, [pc, #212]	@ (8007960 <USB_DeactivateEndpoint+0x1b0>)
 800788a:	4013      	ands	r3, r2
 800788c:	600b      	str	r3, [r1, #0]
 800788e:	e060      	b.n	8007952 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078a6:	d11f      	bne.n	80078e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	0151      	lsls	r1, r2, #5
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	440a      	add	r2, r1
 80078be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80078c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	2101      	movs	r1, #1
 80078fa:	fa01 f303 	lsl.w	r3, r1, r3
 80078fe:	041b      	lsls	r3, r3, #16
 8007900:	43db      	mvns	r3, r3
 8007902:	68f9      	ldr	r1, [r7, #12]
 8007904:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007908:	4013      	ands	r3, r2
 800790a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007912:	69da      	ldr	r2, [r3, #28]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	2101      	movs	r1, #1
 800791e:	fa01 f303 	lsl.w	r3, r1, r3
 8007922:	041b      	lsls	r3, r3, #16
 8007924:	43db      	mvns	r3, r3
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800792c:	4013      	ands	r3, r2
 800792e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	0159      	lsls	r1, r3, #5
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	440b      	add	r3, r1
 8007946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800794a:	4619      	mov	r1, r3
 800794c:	4b05      	ldr	r3, [pc, #20]	@ (8007964 <USB_DeactivateEndpoint+0x1b4>)
 800794e:	4013      	ands	r3, r2
 8007950:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	ec337800 	.word	0xec337800
 8007964:	eff37800 	.word	0xeff37800

08007968 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08a      	sub	sp, #40	@ 0x28
 800796c:	af02      	add	r7, sp, #8
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	4613      	mov	r3, r2
 8007974:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b01      	cmp	r3, #1
 8007986:	f040 817a 	bne.w	8007c7e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d132      	bne.n	80079f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	0151      	lsls	r1, r2, #5
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	440a      	add	r2, r1
 80079a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80079b0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80079b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079f0:	0cdb      	lsrs	r3, r3, #19
 80079f2:	04db      	lsls	r3, r3, #19
 80079f4:	6113      	str	r3, [r2, #16]
 80079f6:	e092      	b.n	8007b1e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a12:	0cdb      	lsrs	r3, r3, #19
 8007a14:	04db      	lsls	r3, r3, #19
 8007a16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	0151      	lsls	r1, r2, #5
 8007a2a:	69fa      	ldr	r2, [r7, #28]
 8007a2c:	440a      	add	r2, r1
 8007a2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a32:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007a36:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a3a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d11a      	bne.n	8007a78 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	691a      	ldr	r2, [r3, #16]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d903      	bls.n	8007a56 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	0151      	lsls	r1, r2, #5
 8007a68:	69fa      	ldr	r2, [r7, #28]
 8007a6a:	440a      	add	r2, r1
 8007a6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a74:	6113      	str	r3, [r2, #16]
 8007a76:	e01b      	b.n	8007ab0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a84:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6919      	ldr	r1, [r3, #16]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	440b      	add	r3, r1
 8007a90:	1e59      	subs	r1, r3, #1
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a9a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a9c:	4ba2      	ldr	r3, [pc, #648]	@ (8007d28 <USB_EPStartXfer+0x3c0>)
 8007a9e:	400b      	ands	r3, r1
 8007aa0:	69b9      	ldr	r1, [r7, #24]
 8007aa2:	0148      	lsls	r0, r1, #5
 8007aa4:	69f9      	ldr	r1, [r7, #28]
 8007aa6:	4401      	add	r1, r0
 8007aa8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007aac:	4313      	orrs	r3, r2
 8007aae:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007abc:	691a      	ldr	r2, [r3, #16]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ac6:	69b9      	ldr	r1, [r7, #24]
 8007ac8:	0148      	lsls	r0, r1, #5
 8007aca:	69f9      	ldr	r1, [r7, #28]
 8007acc:	4401      	add	r1, r0
 8007ace:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	791b      	ldrb	r3, [r3, #4]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d11f      	bne.n	8007b1e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007af8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007afc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	0151      	lsls	r1, r2, #5
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	440a      	add	r2, r1
 8007b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d14b      	bne.n	8007bbc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d009      	beq.n	8007b40 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b38:	461a      	mov	r2, r3
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	791b      	ldrb	r3, [r3, #4]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d128      	bne.n	8007b9a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d110      	bne.n	8007b7a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	0151      	lsls	r1, r2, #5
 8007b6a:	69fa      	ldr	r2, [r7, #28]
 8007b6c:	440a      	add	r2, r1
 8007b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b72:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	e00f      	b.n	8007b9a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	0151      	lsls	r1, r2, #5
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	440a      	add	r2, r1
 8007b90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bb4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	e165      	b.n	8007e88 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	0151      	lsls	r1, r2, #5
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	440a      	add	r2, r1
 8007bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bd6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007bda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	791b      	ldrb	r3, [r3, #4]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d015      	beq.n	8007c10 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 814d 	beq.w	8007e88 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	f003 030f 	and.w	r3, r3, #15
 8007bfe:	2101      	movs	r1, #1
 8007c00:	fa01 f303 	lsl.w	r3, r1, r3
 8007c04:	69f9      	ldr	r1, [r7, #28]
 8007c06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	634b      	str	r3, [r1, #52]	@ 0x34
 8007c0e:	e13b      	b.n	8007e88 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d110      	bne.n	8007c42 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	69fa      	ldr	r2, [r7, #28]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c3e:	6013      	str	r3, [r2, #0]
 8007c40:	e00f      	b.n	8007c62 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	0151      	lsls	r1, r2, #5
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	440a      	add	r2, r1
 8007c58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	68d9      	ldr	r1, [r3, #12]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	781a      	ldrb	r2, [r3, #0]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	b298      	uxth	r0, r3
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	4603      	mov	r3, r0
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 f9b8 	bl	8007fec <USB_WritePacket>
 8007c7c:	e104      	b.n	8007e88 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	0151      	lsls	r1, r2, #5
 8007c90:	69fa      	ldr	r2, [r7, #28]
 8007c92:	440a      	add	r2, r1
 8007c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c98:	0cdb      	lsrs	r3, r3, #19
 8007c9a:	04db      	lsls	r3, r3, #19
 8007c9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cb8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007cbc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007cc0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d131      	bne.n	8007d2c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cf6:	69b9      	ldr	r1, [r7, #24]
 8007cf8:	0148      	lsls	r0, r1, #5
 8007cfa:	69f9      	ldr	r1, [r7, #28]
 8007cfc:	4401      	add	r1, r0
 8007cfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d02:	4313      	orrs	r3, r2
 8007d04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	0151      	lsls	r1, r2, #5
 8007d18:	69fa      	ldr	r2, [r7, #28]
 8007d1a:	440a      	add	r2, r1
 8007d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d24:	6113      	str	r3, [r2, #16]
 8007d26:	e061      	b.n	8007dec <USB_EPStartXfer+0x484>
 8007d28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d123      	bne.n	8007d7c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d40:	691a      	ldr	r2, [r3, #16]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d4a:	69b9      	ldr	r1, [r7, #24]
 8007d4c:	0148      	lsls	r0, r1, #5
 8007d4e:	69f9      	ldr	r1, [r7, #28]
 8007d50:	4401      	add	r1, r0
 8007d52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d56:	4313      	orrs	r3, r2
 8007d58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	0151      	lsls	r1, r2, #5
 8007d6c:	69fa      	ldr	r2, [r7, #28]
 8007d6e:	440a      	add	r2, r1
 8007d70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d78:	6113      	str	r3, [r2, #16]
 8007d7a:	e037      	b.n	8007dec <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	4413      	add	r3, r2
 8007d86:	1e5a      	subs	r2, r3, #1
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d90:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	8afa      	ldrh	r2, [r7, #22]
 8007d98:	fb03 f202 	mul.w	r2, r3, r2
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	8afb      	ldrh	r3, [r7, #22]
 8007db0:	04d9      	lsls	r1, r3, #19
 8007db2:	4b38      	ldr	r3, [pc, #224]	@ (8007e94 <USB_EPStartXfer+0x52c>)
 8007db4:	400b      	ands	r3, r1
 8007db6:	69b9      	ldr	r1, [r7, #24]
 8007db8:	0148      	lsls	r0, r1, #5
 8007dba:	69f9      	ldr	r1, [r7, #28]
 8007dbc:	4401      	add	r1, r0
 8007dbe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ddc:	69b9      	ldr	r1, [r7, #24]
 8007dde:	0148      	lsls	r0, r1, #5
 8007de0:	69f9      	ldr	r1, [r7, #28]
 8007de2:	4401      	add	r1, r0
 8007de4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007de8:	4313      	orrs	r3, r2
 8007dea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d10d      	bne.n	8007e0e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d009      	beq.n	8007e0e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	68d9      	ldr	r1, [r3, #12]
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	791b      	ldrb	r3, [r3, #4]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d128      	bne.n	8007e68 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d110      	bne.n	8007e48 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	0151      	lsls	r1, r2, #5
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	e00f      	b.n	8007e68 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	0151      	lsls	r1, r2, #5
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	0151      	lsls	r1, r2, #5
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	440a      	add	r2, r1
 8007e7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3720      	adds	r7, #32
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	1ff80000 	.word	0x1ff80000

08007e98 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d14a      	bne.n	8007f4c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007eca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ece:	f040 8086 	bne.w	8007fde <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	7812      	ldrb	r2, [r2, #0]
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ef0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ef4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	7812      	ldrb	r2, [r2, #0]
 8007f0a:	0151      	lsls	r1, r2, #5
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	440a      	add	r2, r1
 8007f10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d902      	bls.n	8007f30 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f2e:	e056      	b.n	8007fde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f48:	d0e7      	beq.n	8007f1a <USB_EPStopXfer+0x82>
 8007f4a:	e048      	b.n	8007fde <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f64:	d13b      	bne.n	8007fde <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	7812      	ldrb	r2, [r2, #0]
 8007f7a:	0151      	lsls	r1, r2, #5
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	440a      	add	r2, r1
 8007f80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f88:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	7812      	ldrb	r2, [r2, #0]
 8007f9e:	0151      	lsls	r1, r2, #5
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	440a      	add	r2, r1
 8007fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d902      	bls.n	8007fc4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8007fc2:	e00c      	b.n	8007fde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fdc:	d0e7      	beq.n	8007fae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b089      	sub	sp, #36	@ 0x24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	71fb      	strb	r3, [r7, #7]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800800a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	d123      	bne.n	800805a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008012:	88bb      	ldrh	r3, [r7, #4]
 8008014:	3303      	adds	r3, #3
 8008016:	089b      	lsrs	r3, r3, #2
 8008018:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800801a:	2300      	movs	r3, #0
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	e018      	b.n	8008052 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	031a      	lsls	r2, r3, #12
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	4413      	add	r3, r2
 8008028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800802c:	461a      	mov	r2, r3
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	3301      	adds	r3, #1
 8008038:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	3301      	adds	r3, #1
 800803e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	3301      	adds	r3, #1
 8008044:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	3301      	adds	r3, #1
 800804a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	3301      	adds	r3, #1
 8008050:	61bb      	str	r3, [r7, #24]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	429a      	cmp	r2, r3
 8008058:	d3e2      	bcc.n	8008020 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3724      	adds	r7, #36	@ 0x24
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008068:	b480      	push	{r7}
 800806a:	b08b      	sub	sp, #44	@ 0x2c
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800807e:	88fb      	ldrh	r3, [r7, #6]
 8008080:	089b      	lsrs	r3, r3, #2
 8008082:	b29b      	uxth	r3, r3
 8008084:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800808e:	2300      	movs	r3, #0
 8008090:	623b      	str	r3, [r7, #32]
 8008092:	e014      	b.n	80080be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809e:	601a      	str	r2, [r3, #0]
    pDest++;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a2:	3301      	adds	r3, #1
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	3301      	adds	r3, #1
 80080aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	3301      	adds	r3, #1
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	3301      	adds	r3, #1
 80080b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	3301      	adds	r3, #1
 80080bc:	623b      	str	r3, [r7, #32]
 80080be:	6a3a      	ldr	r2, [r7, #32]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d3e6      	bcc.n	8008094 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080c6:	8bfb      	ldrh	r3, [r7, #30]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d01e      	beq.n	800810a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080d6:	461a      	mov	r2, r3
 80080d8:	f107 0310 	add.w	r3, r7, #16
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	fa22 f303 	lsr.w	r3, r2, r3
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	701a      	strb	r2, [r3, #0]
      i++;
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	3301      	adds	r3, #1
 80080f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80080f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fa:	3301      	adds	r3, #1
 80080fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80080fe:	8bfb      	ldrh	r3, [r7, #30]
 8008100:	3b01      	subs	r3, #1
 8008102:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008104:	8bfb      	ldrh	r3, [r7, #30]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1ea      	bne.n	80080e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800810c:	4618      	mov	r0, r3
 800810e:	372c      	adds	r7, #44	@ 0x2c
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	785b      	ldrb	r3, [r3, #1]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d12c      	bne.n	800818e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4413      	add	r3, r2
 800813c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	db12      	blt.n	800816c <USB_EPSetStall+0x54>
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00f      	beq.n	800816c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	0151      	lsls	r1, r2, #5
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	440a      	add	r2, r1
 8008162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008166:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800816a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	0151      	lsls	r1, r2, #5
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	440a      	add	r2, r1
 8008182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008186:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	e02b      	b.n	80081e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4413      	add	r3, r2
 8008196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	db12      	blt.n	80081c6 <USB_EPSetStall+0xae>
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00f      	beq.n	80081c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	0151      	lsls	r1, r2, #5
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	440a      	add	r2, r1
 80081bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80081c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	0151      	lsls	r1, r2, #5
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	440a      	add	r2, r1
 80081dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d128      	bne.n	8008262 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	0151      	lsls	r1, r2, #5
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	440a      	add	r2, r1
 8008226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800822a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800822e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	791b      	ldrb	r3, [r3, #4]
 8008234:	2b03      	cmp	r3, #3
 8008236:	d003      	beq.n	8008240 <USB_EPClearStall+0x4c>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	791b      	ldrb	r3, [r3, #4]
 800823c:	2b02      	cmp	r3, #2
 800823e:	d138      	bne.n	80082b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	0151      	lsls	r1, r2, #5
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	440a      	add	r2, r1
 8008256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800825a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	e027      	b.n	80082b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	0151      	lsls	r1, r2, #5
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	440a      	add	r2, r1
 8008278:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800827c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008280:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	791b      	ldrb	r3, [r3, #4]
 8008286:	2b03      	cmp	r3, #3
 8008288:	d003      	beq.n	8008292 <USB_EPClearStall+0x9e>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	791b      	ldrb	r3, [r3, #4]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d10f      	bne.n	80082b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4413      	add	r3, r2
 800829a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	0151      	lsls	r1, r2, #5
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	440a      	add	r2, r1
 80082a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80082e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	78fb      	ldrb	r3, [r7, #3]
 80082ee:	011b      	lsls	r3, r3, #4
 80082f0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80082f4:	68f9      	ldr	r1, [r7, #12]
 80082f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082fa:	4313      	orrs	r3, r2
 80082fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008326:	f023 0303 	bic.w	r3, r3, #3
 800832a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800833a:	f023 0302 	bic.w	r3, r3, #2
 800833e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800834e:	b480      	push	{r7}
 8008350:	b085      	sub	sp, #20
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008368:	f023 0303 	bic.w	r3, r3, #3
 800836c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800837c:	f043 0302 	orr.w	r3, r3, #2
 8008380:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4013      	ands	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083a8:	68fb      	ldr	r3, [r7, #12]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b085      	sub	sp, #20
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	4013      	ands	r3, r2
 80083d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	0c1b      	lsrs	r3, r3, #16
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	4013      	ands	r3, r2
 800840c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	b29b      	uxth	r3, r3
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	460b      	mov	r3, r1
 8008428:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	4013      	ands	r3, r2
 800844a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800844c:	68bb      	ldr	r3, [r7, #8]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800845a:	b480      	push	{r7}
 800845c:	b087      	sub	sp, #28
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800847a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800847c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	fa22 f303 	lsr.w	r3, r2, r3
 800848a:	01db      	lsls	r3, r3, #7
 800848c:	b2db      	uxtb	r3, r3
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	4013      	ands	r3, r2
 80084a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084a8:	68bb      	ldr	r3, [r7, #8]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	f003 0301 	and.w	r3, r3, #1
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80084f0:	f023 0307 	bic.w	r3, r3, #7
 80084f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008508:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	460b      	mov	r3, r1
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	333c      	adds	r3, #60	@ 0x3c
 800852e:	3304      	adds	r3, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	4a26      	ldr	r2, [pc, #152]	@ (80085d0 <USB_EP0_OutStart+0xb8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d90a      	bls.n	8008552 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008548:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800854c:	d101      	bne.n	8008552 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	e037      	b.n	80085c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008558:	461a      	mov	r2, r3
 800855a:	2300      	movs	r3, #0
 800855c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800856c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008580:	f043 0318 	orr.w	r3, r3, #24
 8008584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008594:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008598:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800859a:	7afb      	ldrb	r3, [r7, #11]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d10f      	bne.n	80085c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a6:	461a      	mov	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80085be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	371c      	adds	r7, #28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	4f54300a 	.word	0x4f54300a

080085d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3301      	adds	r3, #1
 80085e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085ec:	d901      	bls.n	80085f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e01b      	b.n	800862a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	daf2      	bge.n	80085e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	f043 0201 	orr.w	r2, r3, #1
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3301      	adds	r3, #1
 800860e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008616:	d901      	bls.n	800861c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e006      	b.n	800862a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	2b01      	cmp	r3, #1
 8008626:	d0f0      	beq.n	800860a <USB_CoreReset+0x36>

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008644:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008648:	f002 fc2c 	bl	800aea4 <USBD_static_malloc>
 800864c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d109      	bne.n	8008668 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	32b0      	adds	r2, #176	@ 0xb0
 800865e:	2100      	movs	r1, #0
 8008660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008664:	2302      	movs	r3, #2
 8008666:	e0d4      	b.n	8008812 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008668:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800866c:	2100      	movs	r1, #0
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f002 fc5c 	bl	800af2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	32b0      	adds	r2, #176	@ 0xb0
 800867e:	68f9      	ldr	r1, [r7, #12]
 8008680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	32b0      	adds	r2, #176	@ 0xb0
 800868e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	7c1b      	ldrb	r3, [r3, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d138      	bne.n	8008712 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086a0:	4b5e      	ldr	r3, [pc, #376]	@ (800881c <USBD_CDC_Init+0x1e4>)
 80086a2:	7819      	ldrb	r1, [r3, #0]
 80086a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086a8:	2202      	movs	r2, #2
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f002 fad7 	bl	800ac5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086b0:	4b5a      	ldr	r3, [pc, #360]	@ (800881c <USBD_CDC_Init+0x1e4>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	f003 020f 	and.w	r2, r3, #15
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	440b      	add	r3, r1
 80086c4:	3324      	adds	r3, #36	@ 0x24
 80086c6:	2201      	movs	r2, #1
 80086c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80086ca:	4b55      	ldr	r3, [pc, #340]	@ (8008820 <USBD_CDC_Init+0x1e8>)
 80086cc:	7819      	ldrb	r1, [r3, #0]
 80086ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086d2:	2202      	movs	r2, #2
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f002 fac2 	bl	800ac5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80086da:	4b51      	ldr	r3, [pc, #324]	@ (8008820 <USBD_CDC_Init+0x1e8>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	f003 020f 	and.w	r2, r3, #15
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	440b      	add	r3, r1
 80086ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086f2:	2201      	movs	r2, #1
 80086f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80086f6:	4b4b      	ldr	r3, [pc, #300]	@ (8008824 <USBD_CDC_Init+0x1ec>)
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	f003 020f 	and.w	r2, r3, #15
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	440b      	add	r3, r1
 800870a:	3326      	adds	r3, #38	@ 0x26
 800870c:	2210      	movs	r2, #16
 800870e:	801a      	strh	r2, [r3, #0]
 8008710:	e035      	b.n	800877e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008712:	4b42      	ldr	r3, [pc, #264]	@ (800881c <USBD_CDC_Init+0x1e4>)
 8008714:	7819      	ldrb	r1, [r3, #0]
 8008716:	2340      	movs	r3, #64	@ 0x40
 8008718:	2202      	movs	r2, #2
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f002 fa9f 	bl	800ac5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008720:	4b3e      	ldr	r3, [pc, #248]	@ (800881c <USBD_CDC_Init+0x1e4>)
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	f003 020f 	and.w	r2, r3, #15
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	440b      	add	r3, r1
 8008734:	3324      	adds	r3, #36	@ 0x24
 8008736:	2201      	movs	r2, #1
 8008738:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800873a:	4b39      	ldr	r3, [pc, #228]	@ (8008820 <USBD_CDC_Init+0x1e8>)
 800873c:	7819      	ldrb	r1, [r3, #0]
 800873e:	2340      	movs	r3, #64	@ 0x40
 8008740:	2202      	movs	r2, #2
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f002 fa8b 	bl	800ac5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008748:	4b35      	ldr	r3, [pc, #212]	@ (8008820 <USBD_CDC_Init+0x1e8>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	f003 020f 	and.w	r2, r3, #15
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008760:	2201      	movs	r2, #1
 8008762:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008764:	4b2f      	ldr	r3, [pc, #188]	@ (8008824 <USBD_CDC_Init+0x1ec>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	f003 020f 	and.w	r2, r3, #15
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	3326      	adds	r3, #38	@ 0x26
 800877a:	2210      	movs	r2, #16
 800877c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800877e:	4b29      	ldr	r3, [pc, #164]	@ (8008824 <USBD_CDC_Init+0x1ec>)
 8008780:	7819      	ldrb	r1, [r3, #0]
 8008782:	2308      	movs	r3, #8
 8008784:	2203      	movs	r2, #3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f002 fa69 	bl	800ac5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800878c:	4b25      	ldr	r3, [pc, #148]	@ (8008824 <USBD_CDC_Init+0x1ec>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	f003 020f 	and.w	r2, r3, #15
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	3324      	adds	r3, #36	@ 0x24
 80087a2:	2201      	movs	r2, #1
 80087a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	33b0      	adds	r3, #176	@ 0xb0
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80087dc:	2302      	movs	r3, #2
 80087de:	e018      	b.n	8008812 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	7c1b      	ldrb	r3, [r3, #16]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008820 <USBD_CDC_Init+0x1e8>)
 80087ea:	7819      	ldrb	r1, [r3, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f002 fb20 	bl	800ae3c <USBD_LL_PrepareReceive>
 80087fc:	e008      	b.n	8008810 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087fe:	4b08      	ldr	r3, [pc, #32]	@ (8008820 <USBD_CDC_Init+0x1e8>)
 8008800:	7819      	ldrb	r1, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008808:	2340      	movs	r3, #64	@ 0x40
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f002 fb16 	bl	800ae3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	2000009b 	.word	0x2000009b
 8008820:	2000009c 	.word	0x2000009c
 8008824:	2000009d 	.word	0x2000009d

08008828 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008834:	4b3a      	ldr	r3, [pc, #232]	@ (8008920 <USBD_CDC_DeInit+0xf8>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f002 fa35 	bl	800acaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008840:	4b37      	ldr	r3, [pc, #220]	@ (8008920 <USBD_CDC_DeInit+0xf8>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	f003 020f 	and.w	r2, r3, #15
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	3324      	adds	r3, #36	@ 0x24
 8008856:	2200      	movs	r2, #0
 8008858:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800885a:	4b32      	ldr	r3, [pc, #200]	@ (8008924 <USBD_CDC_DeInit+0xfc>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f002 fa22 	bl	800acaa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008866:	4b2f      	ldr	r3, [pc, #188]	@ (8008924 <USBD_CDC_DeInit+0xfc>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	f003 020f 	and.w	r2, r3, #15
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	4613      	mov	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800887e:	2200      	movs	r2, #0
 8008880:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008882:	4b29      	ldr	r3, [pc, #164]	@ (8008928 <USBD_CDC_DeInit+0x100>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f002 fa0e 	bl	800acaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800888e:	4b26      	ldr	r3, [pc, #152]	@ (8008928 <USBD_CDC_DeInit+0x100>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	f003 020f 	and.w	r2, r3, #15
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	440b      	add	r3, r1
 80088a2:	3324      	adds	r3, #36	@ 0x24
 80088a4:	2200      	movs	r2, #0
 80088a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80088a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008928 <USBD_CDC_DeInit+0x100>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f003 020f 	and.w	r2, r3, #15
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	4613      	mov	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	440b      	add	r3, r1
 80088bc:	3326      	adds	r3, #38	@ 0x26
 80088be:	2200      	movs	r2, #0
 80088c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	32b0      	adds	r2, #176	@ 0xb0
 80088cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d01f      	beq.n	8008914 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	33b0      	adds	r3, #176	@ 0xb0
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	32b0      	adds	r2, #176	@ 0xb0
 80088f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f002 fae2 	bl	800aec0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	32b0      	adds	r2, #176	@ 0xb0
 8008906:	2100      	movs	r1, #0
 8008908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	2000009b 	.word	0x2000009b
 8008924:	2000009c 	.word	0x2000009c
 8008928:	2000009d 	.word	0x2000009d

0800892c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	32b0      	adds	r2, #176	@ 0xb0
 8008940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008944:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008958:	2303      	movs	r3, #3
 800895a:	e0bf      	b.n	8008adc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008964:	2b00      	cmp	r3, #0
 8008966:	d050      	beq.n	8008a0a <USBD_CDC_Setup+0xde>
 8008968:	2b20      	cmp	r3, #32
 800896a:	f040 80af 	bne.w	8008acc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	88db      	ldrh	r3, [r3, #6]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d03a      	beq.n	80089ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	b25b      	sxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	da1b      	bge.n	80089b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	33b0      	adds	r3, #176	@ 0xb0
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008996:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	88d2      	ldrh	r2, [r2, #6]
 800899c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	88db      	ldrh	r3, [r3, #6]
 80089a2:	2b07      	cmp	r3, #7
 80089a4:	bf28      	it	cs
 80089a6:	2307      	movcs	r3, #7
 80089a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	89fa      	ldrh	r2, [r7, #14]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 fd47 	bl	800a444 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80089b6:	e090      	b.n	8008ada <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	785a      	ldrb	r2, [r3, #1]
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	88db      	ldrh	r3, [r3, #6]
 80089c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80089c8:	d803      	bhi.n	80089d2 <USBD_CDC_Setup+0xa6>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	88db      	ldrh	r3, [r3, #6]
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	e000      	b.n	80089d4 <USBD_CDC_Setup+0xa8>
 80089d2:	2240      	movs	r2, #64	@ 0x40
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80089da:	6939      	ldr	r1, [r7, #16]
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80089e2:	461a      	mov	r2, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 fd59 	bl	800a49c <USBD_CtlPrepareRx>
      break;
 80089ea:	e076      	b.n	8008ada <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	33b0      	adds	r3, #176	@ 0xb0
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	7850      	ldrb	r0, [r2, #1]
 8008a02:	2200      	movs	r2, #0
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	4798      	blx	r3
      break;
 8008a08:	e067      	b.n	8008ada <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	785b      	ldrb	r3, [r3, #1]
 8008a0e:	2b0b      	cmp	r3, #11
 8008a10:	d851      	bhi.n	8008ab6 <USBD_CDC_Setup+0x18a>
 8008a12:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <USBD_CDC_Setup+0xec>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a49 	.word	0x08008a49
 8008a1c:	08008ac5 	.word	0x08008ac5
 8008a20:	08008ab7 	.word	0x08008ab7
 8008a24:	08008ab7 	.word	0x08008ab7
 8008a28:	08008ab7 	.word	0x08008ab7
 8008a2c:	08008ab7 	.word	0x08008ab7
 8008a30:	08008ab7 	.word	0x08008ab7
 8008a34:	08008ab7 	.word	0x08008ab7
 8008a38:	08008ab7 	.word	0x08008ab7
 8008a3c:	08008ab7 	.word	0x08008ab7
 8008a40:	08008a73 	.word	0x08008a73
 8008a44:	08008a9d 	.word	0x08008a9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	d107      	bne.n	8008a64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a54:	f107 030a 	add.w	r3, r7, #10
 8008a58:	2202      	movs	r2, #2
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 fcf1 	bl	800a444 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a62:	e032      	b.n	8008aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 fc7b 	bl	800a362 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	75fb      	strb	r3, [r7, #23]
          break;
 8008a70:	e02b      	b.n	8008aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d107      	bne.n	8008a8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a7e:	f107 030d 	add.w	r3, r7, #13
 8008a82:	2201      	movs	r2, #1
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 fcdc 	bl	800a444 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a8c:	e01d      	b.n	8008aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 fc66 	bl	800a362 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a96:	2303      	movs	r3, #3
 8008a98:	75fb      	strb	r3, [r7, #23]
          break;
 8008a9a:	e016      	b.n	8008aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d00f      	beq.n	8008ac8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f001 fc59 	bl	800a362 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ab4:	e008      	b.n	8008ac8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f001 fc52 	bl	800a362 <USBD_CtlError>
          ret = USBD_FAIL;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ac2:	e002      	b.n	8008aca <USBD_CDC_Setup+0x19e>
          break;
 8008ac4:	bf00      	nop
 8008ac6:	e008      	b.n	8008ada <USBD_CDC_Setup+0x1ae>
          break;
 8008ac8:	bf00      	nop
      }
      break;
 8008aca:	e006      	b.n	8008ada <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fc47 	bl	800a362 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad8:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008af6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	32b0      	adds	r2, #176	@ 0xb0
 8008b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e065      	b.n	8008bda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	32b0      	adds	r2, #176	@ 0xb0
 8008b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	f003 020f 	and.w	r2, r3, #15
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	440b      	add	r3, r1
 8008b30:	3318      	adds	r3, #24
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d02f      	beq.n	8008b98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	f003 020f 	and.w	r2, r3, #15
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	440b      	add	r3, r1
 8008b4a:	3318      	adds	r3, #24
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	78fb      	ldrb	r3, [r7, #3]
 8008b50:	f003 010f 	and.w	r1, r3, #15
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	460b      	mov	r3, r1
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	440b      	add	r3, r1
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4403      	add	r3, r0
 8008b60:	331c      	adds	r3, #28
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b68:	fb01 f303 	mul.w	r3, r1, r3
 8008b6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d112      	bne.n	8008b98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	f003 020f 	and.w	r2, r3, #15
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	3318      	adds	r3, #24
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b8a:	78f9      	ldrb	r1, [r7, #3]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	2200      	movs	r2, #0
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f002 f932 	bl	800adfa <USBD_LL_Transmit>
 8008b96:	e01f      	b.n	8008bd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	33b0      	adds	r3, #176	@ 0xb0
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d010      	beq.n	8008bd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	33b0      	adds	r3, #176	@ 0xb0
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008bd4:	78fa      	ldrb	r2, [r7, #3]
 8008bd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	32b0      	adds	r2, #176	@ 0xb0
 8008bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	32b0      	adds	r2, #176	@ 0xb0
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e01a      	b.n	8008c4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f002 f930 	bl	800ae7e <USBD_LL_GetRxDataSize>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	33b0      	adds	r3, #176	@ 0xb0
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008c44:	4611      	mov	r1, r2
 8008c46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	32b0      	adds	r2, #176	@ 0xb0
 8008c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e024      	b.n	8008cbe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	33b0      	adds	r3, #176	@ 0xb0
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d019      	beq.n	8008cbc <USBD_CDC_EP0_RxReady+0x6a>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008c8e:	2bff      	cmp	r3, #255	@ 0xff
 8008c90:	d014      	beq.n	8008cbc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	33b0      	adds	r3, #176	@ 0xb0
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008caa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008cb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	22ff      	movs	r2, #255	@ 0xff
 8008cb8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
	...

08008cc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008cd0:	2182      	movs	r1, #130	@ 0x82
 8008cd2:	4818      	ldr	r0, [pc, #96]	@ (8008d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008cd4:	f000 fd0f 	bl	80096f6 <USBD_GetEpDesc>
 8008cd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008cda:	2101      	movs	r1, #1
 8008cdc:	4815      	ldr	r0, [pc, #84]	@ (8008d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008cde:	f000 fd0a 	bl	80096f6 <USBD_GetEpDesc>
 8008ce2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ce4:	2181      	movs	r1, #129	@ 0x81
 8008ce6:	4813      	ldr	r0, [pc, #76]	@ (8008d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ce8:	f000 fd05 	bl	80096f6 <USBD_GetEpDesc>
 8008cec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2210      	movs	r2, #16
 8008cf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d006      	beq.n	8008d0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d08:	711a      	strb	r2, [r3, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d006      	beq.n	8008d22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d1c:	711a      	strb	r2, [r3, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2243      	movs	r2, #67	@ 0x43
 8008d26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d28:	4b02      	ldr	r3, [pc, #8]	@ (8008d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3718      	adds	r7, #24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20000058 	.word	0x20000058

08008d38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d40:	2182      	movs	r1, #130	@ 0x82
 8008d42:	4818      	ldr	r0, [pc, #96]	@ (8008da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d44:	f000 fcd7 	bl	80096f6 <USBD_GetEpDesc>
 8008d48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	4815      	ldr	r0, [pc, #84]	@ (8008da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d4e:	f000 fcd2 	bl	80096f6 <USBD_GetEpDesc>
 8008d52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d54:	2181      	movs	r1, #129	@ 0x81
 8008d56:	4813      	ldr	r0, [pc, #76]	@ (8008da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d58:	f000 fccd 	bl	80096f6 <USBD_GetEpDesc>
 8008d5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d002      	beq.n	8008d6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	2210      	movs	r2, #16
 8008d68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d006      	beq.n	8008d7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	2200      	movs	r2, #0
 8008d74:	711a      	strb	r2, [r3, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f042 0202 	orr.w	r2, r2, #2
 8008d7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d006      	beq.n	8008d92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	711a      	strb	r2, [r3, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f042 0202 	orr.w	r2, r2, #2
 8008d90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2243      	movs	r2, #67	@ 0x43
 8008d96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d98:	4b02      	ldr	r3, [pc, #8]	@ (8008da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000058 	.word	0x20000058

08008da8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008db0:	2182      	movs	r1, #130	@ 0x82
 8008db2:	4818      	ldr	r0, [pc, #96]	@ (8008e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008db4:	f000 fc9f 	bl	80096f6 <USBD_GetEpDesc>
 8008db8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008dba:	2101      	movs	r1, #1
 8008dbc:	4815      	ldr	r0, [pc, #84]	@ (8008e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008dbe:	f000 fc9a 	bl	80096f6 <USBD_GetEpDesc>
 8008dc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008dc4:	2181      	movs	r1, #129	@ 0x81
 8008dc6:	4813      	ldr	r0, [pc, #76]	@ (8008e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008dc8:	f000 fc95 	bl	80096f6 <USBD_GetEpDesc>
 8008dcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2210      	movs	r2, #16
 8008dd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d006      	beq.n	8008dee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008de8:	711a      	strb	r2, [r3, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d006      	beq.n	8008e02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dfc:	711a      	strb	r2, [r3, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2243      	movs	r2, #67	@ 0x43
 8008e06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e08:	4b02      	ldr	r3, [pc, #8]	@ (8008e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20000058 	.word	0x20000058

08008e18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	220a      	movs	r2, #10
 8008e24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e26:	4b03      	ldr	r3, [pc, #12]	@ (8008e34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	20000014 	.word	0x20000014

08008e38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e009      	b.n	8008e60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	33b0      	adds	r3, #176	@ 0xb0
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	32b0      	adds	r2, #176	@ 0xb0
 8008e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e008      	b.n	8008ea4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	32b0      	adds	r2, #176	@ 0xb0
 8008ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e004      	b.n	8008ede <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	32b0      	adds	r2, #176	@ 0xb0
 8008efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	32b0      	adds	r2, #176	@ 0xb0
 8008f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e018      	b.n	8008f4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	7c1b      	ldrb	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f22:	4b0c      	ldr	r3, [pc, #48]	@ (8008f54 <USBD_CDC_ReceivePacket+0x68>)
 8008f24:	7819      	ldrb	r1, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 ff83 	bl	800ae3c <USBD_LL_PrepareReceive>
 8008f36:	e008      	b.n	8008f4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f38:	4b06      	ldr	r3, [pc, #24]	@ (8008f54 <USBD_CDC_ReceivePacket+0x68>)
 8008f3a:	7819      	ldrb	r1, [r3, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f42:	2340      	movs	r3, #64	@ 0x40
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 ff79 	bl	800ae3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	2000009c 	.word	0x2000009c

08008f58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e01f      	b.n	8008fb0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	79fa      	ldrb	r2, [r7, #7]
 8008fa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f001 fdf3 	bl	800ab90 <USBD_LL_Init>
 8008faa:	4603      	mov	r3, r0
 8008fac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e025      	b.n	800901c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	32ae      	adds	r2, #174	@ 0xae
 8008fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00f      	beq.n	800900c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	32ae      	adds	r2, #174	@ 0xae
 8008ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffc:	f107 020e 	add.w	r2, r7, #14
 8009000:	4610      	mov	r0, r2
 8009002:	4798      	blx	r3
 8009004:	4602      	mov	r2, r0
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009012:	1c5a      	adds	r2, r3, #1
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 fdfb 	bl	800ac28 <USBD_LL_Start>
 8009032:	4603      	mov	r3, r0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009044:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009046:	4618      	mov	r0, r3
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009068:	2b00      	cmp	r3, #0
 800906a:	d009      	beq.n	8009080 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	78fa      	ldrb	r2, [r7, #3]
 8009076:	4611      	mov	r1, r2
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	4798      	blx	r3
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009080:	7bfb      	ldrb	r3, [r7, #15]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	78fa      	ldrb	r2, [r7, #3]
 80090a4:	4611      	mov	r1, r2
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	4798      	blx	r3
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80090b0:	2303      	movs	r3, #3
 80090b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 f90c 	bl	800a2ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80090e4:	461a      	mov	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80090f2:	f003 031f 	and.w	r3, r3, #31
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d01a      	beq.n	8009130 <USBD_LL_SetupStage+0x72>
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d822      	bhi.n	8009144 <USBD_LL_SetupStage+0x86>
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <USBD_LL_SetupStage+0x4a>
 8009102:	2b01      	cmp	r3, #1
 8009104:	d00a      	beq.n	800911c <USBD_LL_SetupStage+0x5e>
 8009106:	e01d      	b.n	8009144 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fb63 	bl	80097dc <USBD_StdDevReq>
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]
      break;
 800911a:	e020      	b.n	800915e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fbcb 	bl	80098c0 <USBD_StdItfReq>
 800912a:	4603      	mov	r3, r0
 800912c:	73fb      	strb	r3, [r7, #15]
      break;
 800912e:	e016      	b.n	800915e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fc2d 	bl	8009998 <USBD_StdEPReq>
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
      break;
 8009142:	e00c      	b.n	800915e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800914a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800914e:	b2db      	uxtb	r3, r3
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 fdc8 	bl	800ace8 <USBD_LL_StallEP>
 8009158:	4603      	mov	r3, r0
 800915a:	73fb      	strb	r3, [r7, #15]
      break;
 800915c:	bf00      	nop
  }

  return ret;
 800915e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	460b      	mov	r3, r1
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800917a:	7afb      	ldrb	r3, [r7, #11]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d16e      	bne.n	800925e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009186:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800918e:	2b03      	cmp	r3, #3
 8009190:	f040 8098 	bne.w	80092c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	689a      	ldr	r2, [r3, #8]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	429a      	cmp	r2, r3
 800919e:	d913      	bls.n	80091c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	1ad2      	subs	r2, r2, r3
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	68da      	ldr	r2, [r3, #12]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	4293      	cmp	r3, r2
 80091b8:	bf28      	it	cs
 80091ba:	4613      	movcs	r3, r2
 80091bc:	461a      	mov	r2, r3
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f001 f988 	bl	800a4d6 <USBD_CtlContinueRx>
 80091c6:	e07d      	b.n	80092c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80091ce:	f003 031f 	and.w	r3, r3, #31
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d014      	beq.n	8009200 <USBD_LL_DataOutStage+0x98>
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d81d      	bhi.n	8009216 <USBD_LL_DataOutStage+0xae>
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <USBD_LL_DataOutStage+0x7c>
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d003      	beq.n	80091ea <USBD_LL_DataOutStage+0x82>
 80091e2:	e018      	b.n	8009216 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	75bb      	strb	r3, [r7, #22]
            break;
 80091e8:	e018      	b.n	800921c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	4619      	mov	r1, r3
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 fa64 	bl	80096c2 <USBD_CoreFindIF>
 80091fa:	4603      	mov	r3, r0
 80091fc:	75bb      	strb	r3, [r7, #22]
            break;
 80091fe:	e00d      	b.n	800921c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009206:	b2db      	uxtb	r3, r3
 8009208:	4619      	mov	r1, r3
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fa66 	bl	80096dc <USBD_CoreFindEP>
 8009210:	4603      	mov	r3, r0
 8009212:	75bb      	strb	r3, [r7, #22]
            break;
 8009214:	e002      	b.n	800921c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	75bb      	strb	r3, [r7, #22]
            break;
 800921a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800921c:	7dbb      	ldrb	r3, [r7, #22]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d119      	bne.n	8009256 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b03      	cmp	r3, #3
 800922c:	d113      	bne.n	8009256 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800922e:	7dba      	ldrb	r2, [r7, #22]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	32ae      	adds	r2, #174	@ 0xae
 8009234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00b      	beq.n	8009256 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800923e:	7dba      	ldrb	r2, [r7, #22]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009246:	7dba      	ldrb	r2, [r7, #22]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	32ae      	adds	r2, #174	@ 0xae
 800924c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f001 f94e 	bl	800a4f8 <USBD_CtlSendStatus>
 800925c:	e032      	b.n	80092c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800925e:	7afb      	ldrb	r3, [r7, #11]
 8009260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009264:	b2db      	uxtb	r3, r3
 8009266:	4619      	mov	r1, r3
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f000 fa37 	bl	80096dc <USBD_CoreFindEP>
 800926e:	4603      	mov	r3, r0
 8009270:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009272:	7dbb      	ldrb	r3, [r7, #22]
 8009274:	2bff      	cmp	r3, #255	@ 0xff
 8009276:	d025      	beq.n	80092c4 <USBD_LL_DataOutStage+0x15c>
 8009278:	7dbb      	ldrb	r3, [r7, #22]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d122      	bne.n	80092c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b03      	cmp	r3, #3
 8009288:	d117      	bne.n	80092ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800928a:	7dba      	ldrb	r2, [r7, #22]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	32ae      	adds	r2, #174	@ 0xae
 8009290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00f      	beq.n	80092ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800929a:	7dba      	ldrb	r2, [r7, #22]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80092a2:	7dba      	ldrb	r2, [r7, #22]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	32ae      	adds	r2, #174	@ 0xae
 80092a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	7afa      	ldrb	r2, [r7, #11]
 80092b0:	4611      	mov	r1, r2
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	4798      	blx	r3
 80092b6:	4603      	mov	r3, r0
 80092b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	e000      	b.n	80092c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b086      	sub	sp, #24
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	460b      	mov	r3, r1
 80092d8:	607a      	str	r2, [r7, #4]
 80092da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80092dc:	7afb      	ldrb	r3, [r7, #11]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d16f      	bne.n	80093c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3314      	adds	r3, #20
 80092e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d15a      	bne.n	80093a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	689a      	ldr	r2, [r3, #8]
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d914      	bls.n	8009328 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	689a      	ldr	r2, [r3, #8]
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	1ad2      	subs	r2, r2, r3
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	461a      	mov	r2, r3
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f001 f8b0 	bl	800a47a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800931a:	2300      	movs	r3, #0
 800931c:	2200      	movs	r2, #0
 800931e:	2100      	movs	r1, #0
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f001 fd8b 	bl	800ae3c <USBD_LL_PrepareReceive>
 8009326:	e03f      	b.n	80093a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	68da      	ldr	r2, [r3, #12]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	429a      	cmp	r2, r3
 8009332:	d11c      	bne.n	800936e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	685a      	ldr	r2, [r3, #4]
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800933c:	429a      	cmp	r2, r3
 800933e:	d316      	bcc.n	800936e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800934a:	429a      	cmp	r2, r3
 800934c:	d20f      	bcs.n	800936e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800934e:	2200      	movs	r2, #0
 8009350:	2100      	movs	r1, #0
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f001 f891 	bl	800a47a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009360:	2300      	movs	r3, #0
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f001 fd68 	bl	800ae3c <USBD_LL_PrepareReceive>
 800936c:	e01c      	b.n	80093a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b03      	cmp	r3, #3
 8009378:	d10f      	bne.n	800939a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d009      	beq.n	800939a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800939a:	2180      	movs	r1, #128	@ 0x80
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f001 fca3 	bl	800ace8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f001 f8bb 	bl	800a51e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d03a      	beq.n	8009428 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f7ff fe42 	bl	800903c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80093c0:	e032      	b.n	8009428 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80093c2:	7afb      	ldrb	r3, [r7, #11]
 80093c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	4619      	mov	r1, r3
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f000 f985 	bl	80096dc <USBD_CoreFindEP>
 80093d2:	4603      	mov	r3, r0
 80093d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	2bff      	cmp	r3, #255	@ 0xff
 80093da:	d025      	beq.n	8009428 <USBD_LL_DataInStage+0x15a>
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d122      	bne.n	8009428 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d11c      	bne.n	8009428 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80093ee:	7dfa      	ldrb	r2, [r7, #23]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	32ae      	adds	r2, #174	@ 0xae
 80093f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d014      	beq.n	8009428 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80093fe:	7dfa      	ldrb	r2, [r7, #23]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009406:	7dfa      	ldrb	r2, [r7, #23]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	32ae      	adds	r2, #174	@ 0xae
 800940c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	7afa      	ldrb	r2, [r7, #11]
 8009414:	4611      	mov	r1, r2
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	4798      	blx	r3
 800941a:	4603      	mov	r3, r0
 800941c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800941e:	7dbb      	ldrb	r3, [r7, #22]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009424:	7dbb      	ldrb	r3, [r7, #22]
 8009426:	e000      	b.n	800942a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800946a:	2b00      	cmp	r3, #0
 800946c:	d014      	beq.n	8009498 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00e      	beq.n	8009498 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	6852      	ldr	r2, [r2, #4]
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	4611      	mov	r1, r2
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	4798      	blx	r3
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009494:	2303      	movs	r3, #3
 8009496:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009498:	2340      	movs	r3, #64	@ 0x40
 800949a:	2200      	movs	r2, #0
 800949c:	2100      	movs	r1, #0
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f001 fbdd 	bl	800ac5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2240      	movs	r2, #64	@ 0x40
 80094b0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094b4:	2340      	movs	r3, #64	@ 0x40
 80094b6:	2200      	movs	r2, #0
 80094b8:	2180      	movs	r1, #128	@ 0x80
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 fbcf 	bl	800ac5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2240      	movs	r2, #64	@ 0x40
 80094ca:	621a      	str	r2, [r3, #32]

  return ret;
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b083      	sub	sp, #12
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	78fa      	ldrb	r2, [r7, #3]
 80094e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b083      	sub	sp, #12
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b04      	cmp	r3, #4
 8009508:	d006      	beq.n	8009518 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009510:	b2da      	uxtb	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2204      	movs	r2, #4
 800951c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800952e:	b480      	push	{r7}
 8009530:	b083      	sub	sp, #12
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b04      	cmp	r3, #4
 8009540:	d106      	bne.n	8009550 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009548:	b2da      	uxtb	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	370c      	adds	r7, #12
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b03      	cmp	r3, #3
 8009570:	d110      	bne.n	8009594 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00b      	beq.n	8009594 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d005      	beq.n	8009594 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800958e:	69db      	ldr	r3, [r3, #28]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b082      	sub	sp, #8
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	460b      	mov	r3, r1
 80095a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	32ae      	adds	r2, #174	@ 0xae
 80095b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80095bc:	2303      	movs	r3, #3
 80095be:	e01c      	b.n	80095fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d115      	bne.n	80095f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	32ae      	adds	r2, #174	@ 0xae
 80095d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00b      	beq.n	80095f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	32ae      	adds	r2, #174	@ 0xae
 80095ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	78fa      	ldrb	r2, [r7, #3]
 80095f2:	4611      	mov	r1, r2
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	460b      	mov	r3, r1
 800960c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	32ae      	adds	r2, #174	@ 0xae
 8009618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009620:	2303      	movs	r3, #3
 8009622:	e01c      	b.n	800965e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b03      	cmp	r3, #3
 800962e:	d115      	bne.n	800965c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	32ae      	adds	r2, #174	@ 0xae
 800963a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00b      	beq.n	800965c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	32ae      	adds	r2, #174	@ 0xae
 800964e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	4611      	mov	r1, r2
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00e      	beq.n	80096b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	6852      	ldr	r2, [r2, #4]
 80096a6:	b2d2      	uxtb	r2, r2
 80096a8:	4611      	mov	r1, r2
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	4798      	blx	r3
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80096b4:	2303      	movs	r3, #3
 80096b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b083      	sub	sp, #12
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	460b      	mov	r3, r1
 80096cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b086      	sub	sp, #24
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800970a:	2300      	movs	r3, #0
 800970c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	885b      	ldrh	r3, [r3, #2]
 8009712:	b29b      	uxth	r3, r3
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	7812      	ldrb	r2, [r2, #0]
 8009718:	4293      	cmp	r3, r2
 800971a:	d91f      	bls.n	800975c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009722:	e013      	b.n	800974c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009724:	f107 030a 	add.w	r3, r7, #10
 8009728:	4619      	mov	r1, r3
 800972a:	6978      	ldr	r0, [r7, #20]
 800972c:	f000 f81b 	bl	8009766 <USBD_GetNextDesc>
 8009730:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	785b      	ldrb	r3, [r3, #1]
 8009736:	2b05      	cmp	r3, #5
 8009738:	d108      	bne.n	800974c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	789b      	ldrb	r3, [r3, #2]
 8009742:	78fa      	ldrb	r2, [r7, #3]
 8009744:	429a      	cmp	r2, r3
 8009746:	d008      	beq.n	800975a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009748:	2300      	movs	r3, #0
 800974a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	885b      	ldrh	r3, [r3, #2]
 8009750:	b29a      	uxth	r2, r3
 8009752:	897b      	ldrh	r3, [r7, #10]
 8009754:	429a      	cmp	r2, r3
 8009756:	d8e5      	bhi.n	8009724 <USBD_GetEpDesc+0x2e>
 8009758:	e000      	b.n	800975c <USBD_GetEpDesc+0x66>
          break;
 800975a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800975c:	693b      	ldr	r3, [r7, #16]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009766:	b480      	push	{r7}
 8009768:	b085      	sub	sp, #20
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	881b      	ldrh	r3, [r3, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	7812      	ldrb	r2, [r2, #0]
 800977c:	4413      	add	r3, r2
 800977e:	b29a      	uxth	r2, r3
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	461a      	mov	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4413      	add	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009790:	68fb      	ldr	r3, [r7, #12]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800979e:	b480      	push	{r7}
 80097a0:	b087      	sub	sp, #28
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	3301      	adds	r3, #1
 80097b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80097bc:	8a3b      	ldrh	r3, [r7, #16]
 80097be:	021b      	lsls	r3, r3, #8
 80097c0:	b21a      	sxth	r2, r3
 80097c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	b21b      	sxth	r3, r3
 80097ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80097cc:	89fb      	ldrh	r3, [r7, #14]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	371c      	adds	r7, #28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
	...

080097dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097f2:	2b40      	cmp	r3, #64	@ 0x40
 80097f4:	d005      	beq.n	8009802 <USBD_StdDevReq+0x26>
 80097f6:	2b40      	cmp	r3, #64	@ 0x40
 80097f8:	d857      	bhi.n	80098aa <USBD_StdDevReq+0xce>
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00f      	beq.n	800981e <USBD_StdDevReq+0x42>
 80097fe:	2b20      	cmp	r3, #32
 8009800:	d153      	bne.n	80098aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	32ae      	adds	r2, #174	@ 0xae
 800980c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	4798      	blx	r3
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]
      break;
 800981c:	e04a      	b.n	80098b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	785b      	ldrb	r3, [r3, #1]
 8009822:	2b09      	cmp	r3, #9
 8009824:	d83b      	bhi.n	800989e <USBD_StdDevReq+0xc2>
 8009826:	a201      	add	r2, pc, #4	@ (adr r2, 800982c <USBD_StdDevReq+0x50>)
 8009828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982c:	08009881 	.word	0x08009881
 8009830:	08009895 	.word	0x08009895
 8009834:	0800989f 	.word	0x0800989f
 8009838:	0800988b 	.word	0x0800988b
 800983c:	0800989f 	.word	0x0800989f
 8009840:	0800985f 	.word	0x0800985f
 8009844:	08009855 	.word	0x08009855
 8009848:	0800989f 	.word	0x0800989f
 800984c:	08009877 	.word	0x08009877
 8009850:	08009869 	.word	0x08009869
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa3c 	bl	8009cd4 <USBD_GetDescriptor>
          break;
 800985c:	e024      	b.n	80098a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fba1 	bl	8009fa8 <USBD_SetAddress>
          break;
 8009866:	e01f      	b.n	80098a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fbe0 	bl	800a030 <USBD_SetConfig>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]
          break;
 8009874:	e018      	b.n	80098a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fc83 	bl	800a184 <USBD_GetConfig>
          break;
 800987e:	e013      	b.n	80098a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fcb4 	bl	800a1f0 <USBD_GetStatus>
          break;
 8009888:	e00e      	b.n	80098a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fce3 	bl	800a258 <USBD_SetFeature>
          break;
 8009892:	e009      	b.n	80098a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fd07 	bl	800a2aa <USBD_ClrFeature>
          break;
 800989c:	e004      	b.n	80098a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fd5e 	bl	800a362 <USBD_CtlError>
          break;
 80098a6:	bf00      	nop
      }
      break;
 80098a8:	e004      	b.n	80098b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fd58 	bl	800a362 <USBD_CtlError>
      break;
 80098b2:	bf00      	nop
  }

  return ret;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop

080098c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098d6:	2b40      	cmp	r3, #64	@ 0x40
 80098d8:	d005      	beq.n	80098e6 <USBD_StdItfReq+0x26>
 80098da:	2b40      	cmp	r3, #64	@ 0x40
 80098dc:	d852      	bhi.n	8009984 <USBD_StdItfReq+0xc4>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <USBD_StdItfReq+0x26>
 80098e2:	2b20      	cmp	r3, #32
 80098e4:	d14e      	bne.n	8009984 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	3b01      	subs	r3, #1
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d840      	bhi.n	8009976 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	889b      	ldrh	r3, [r3, #4]
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d836      	bhi.n	800996c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	889b      	ldrh	r3, [r3, #4]
 8009902:	b2db      	uxtb	r3, r3
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff fedb 	bl	80096c2 <USBD_CoreFindIF>
 800990c:	4603      	mov	r3, r0
 800990e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	2bff      	cmp	r3, #255	@ 0xff
 8009914:	d01d      	beq.n	8009952 <USBD_StdItfReq+0x92>
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d11a      	bne.n	8009952 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800991c:	7bba      	ldrb	r2, [r7, #14]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	32ae      	adds	r2, #174	@ 0xae
 8009922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00f      	beq.n	800994c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800992c:	7bba      	ldrb	r2, [r7, #14]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009934:	7bba      	ldrb	r2, [r7, #14]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	32ae      	adds	r2, #174	@ 0xae
 800993a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	4798      	blx	r3
 8009946:	4603      	mov	r3, r0
 8009948:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800994a:	e004      	b.n	8009956 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800994c:	2303      	movs	r3, #3
 800994e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009950:	e001      	b.n	8009956 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009952:	2303      	movs	r3, #3
 8009954:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	88db      	ldrh	r3, [r3, #6]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d110      	bne.n	8009980 <USBD_StdItfReq+0xc0>
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10d      	bne.n	8009980 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fdc7 	bl	800a4f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800996a:	e009      	b.n	8009980 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fcf7 	bl	800a362 <USBD_CtlError>
          break;
 8009974:	e004      	b.n	8009980 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fcf2 	bl	800a362 <USBD_CtlError>
          break;
 800997e:	e000      	b.n	8009982 <USBD_StdItfReq+0xc2>
          break;
 8009980:	bf00      	nop
      }
      break;
 8009982:	e004      	b.n	800998e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fceb 	bl	800a362 <USBD_CtlError>
      break;
 800998c:	bf00      	nop
  }

  return ret;
 800998e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	889b      	ldrh	r3, [r3, #4]
 80099aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099b4:	2b40      	cmp	r3, #64	@ 0x40
 80099b6:	d007      	beq.n	80099c8 <USBD_StdEPReq+0x30>
 80099b8:	2b40      	cmp	r3, #64	@ 0x40
 80099ba:	f200 817f 	bhi.w	8009cbc <USBD_StdEPReq+0x324>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d02a      	beq.n	8009a18 <USBD_StdEPReq+0x80>
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	f040 817a 	bne.w	8009cbc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff fe85 	bl	80096dc <USBD_CoreFindEP>
 80099d2:	4603      	mov	r3, r0
 80099d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099d6:	7b7b      	ldrb	r3, [r7, #13]
 80099d8:	2bff      	cmp	r3, #255	@ 0xff
 80099da:	f000 8174 	beq.w	8009cc6 <USBD_StdEPReq+0x32e>
 80099de:	7b7b      	ldrb	r3, [r7, #13]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f040 8170 	bne.w	8009cc6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80099e6:	7b7a      	ldrb	r2, [r7, #13]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80099ee:	7b7a      	ldrb	r2, [r7, #13]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	32ae      	adds	r2, #174	@ 0xae
 80099f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 8163 	beq.w	8009cc6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a00:	7b7a      	ldrb	r2, [r7, #13]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	32ae      	adds	r2, #174	@ 0xae
 8009a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	4798      	blx	r3
 8009a12:	4603      	mov	r3, r0
 8009a14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a16:	e156      	b.n	8009cc6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	785b      	ldrb	r3, [r3, #1]
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d008      	beq.n	8009a32 <USBD_StdEPReq+0x9a>
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	f300 8145 	bgt.w	8009cb0 <USBD_StdEPReq+0x318>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 809b 	beq.w	8009b62 <USBD_StdEPReq+0x1ca>
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d03c      	beq.n	8009aaa <USBD_StdEPReq+0x112>
 8009a30:	e13e      	b.n	8009cb0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d002      	beq.n	8009a44 <USBD_StdEPReq+0xac>
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d016      	beq.n	8009a70 <USBD_StdEPReq+0xd8>
 8009a42:	e02c      	b.n	8009a9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00d      	beq.n	8009a66 <USBD_StdEPReq+0xce>
 8009a4a:	7bbb      	ldrb	r3, [r7, #14]
 8009a4c:	2b80      	cmp	r3, #128	@ 0x80
 8009a4e:	d00a      	beq.n	8009a66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a50:	7bbb      	ldrb	r3, [r7, #14]
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 f947 	bl	800ace8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a5a:	2180      	movs	r1, #128	@ 0x80
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 f943 	bl	800ace8 <USBD_LL_StallEP>
 8009a62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a64:	e020      	b.n	8009aa8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fc7a 	bl	800a362 <USBD_CtlError>
              break;
 8009a6e:	e01b      	b.n	8009aa8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	885b      	ldrh	r3, [r3, #2]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10e      	bne.n	8009a96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00b      	beq.n	8009a96 <USBD_StdEPReq+0xfe>
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
 8009a80:	2b80      	cmp	r3, #128	@ 0x80
 8009a82:	d008      	beq.n	8009a96 <USBD_StdEPReq+0xfe>
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	88db      	ldrh	r3, [r3, #6]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d104      	bne.n	8009a96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f001 f929 	bl	800ace8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fd2e 	bl	800a4f8 <USBD_CtlSendStatus>

              break;
 8009a9c:	e004      	b.n	8009aa8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fc5e 	bl	800a362 <USBD_CtlError>
              break;
 8009aa6:	bf00      	nop
          }
          break;
 8009aa8:	e107      	b.n	8009cba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d002      	beq.n	8009abc <USBD_StdEPReq+0x124>
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d016      	beq.n	8009ae8 <USBD_StdEPReq+0x150>
 8009aba:	e04b      	b.n	8009b54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00d      	beq.n	8009ade <USBD_StdEPReq+0x146>
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	2b80      	cmp	r3, #128	@ 0x80
 8009ac6:	d00a      	beq.n	8009ade <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f001 f90b 	bl	800ace8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ad2:	2180      	movs	r1, #128	@ 0x80
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 f907 	bl	800ace8 <USBD_LL_StallEP>
 8009ada:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009adc:	e040      	b.n	8009b60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fc3e 	bl	800a362 <USBD_CtlError>
              break;
 8009ae6:	e03b      	b.n	8009b60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	885b      	ldrh	r3, [r3, #2]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d136      	bne.n	8009b5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d004      	beq.n	8009b04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f001 f911 	bl	800ad26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fcf7 	bl	800a4f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff fde4 	bl	80096dc <USBD_CoreFindEP>
 8009b14:	4603      	mov	r3, r0
 8009b16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b18:	7b7b      	ldrb	r3, [r7, #13]
 8009b1a:	2bff      	cmp	r3, #255	@ 0xff
 8009b1c:	d01f      	beq.n	8009b5e <USBD_StdEPReq+0x1c6>
 8009b1e:	7b7b      	ldrb	r3, [r7, #13]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d11c      	bne.n	8009b5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009b24:	7b7a      	ldrb	r2, [r7, #13]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b2c:	7b7a      	ldrb	r2, [r7, #13]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	32ae      	adds	r2, #174	@ 0xae
 8009b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d010      	beq.n	8009b5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b3c:	7b7a      	ldrb	r2, [r7, #13]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	32ae      	adds	r2, #174	@ 0xae
 8009b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	4798      	blx	r3
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b52:	e004      	b.n	8009b5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fc03 	bl	800a362 <USBD_CtlError>
              break;
 8009b5c:	e000      	b.n	8009b60 <USBD_StdEPReq+0x1c8>
              break;
 8009b5e:	bf00      	nop
          }
          break;
 8009b60:	e0ab      	b.n	8009cba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d002      	beq.n	8009b74 <USBD_StdEPReq+0x1dc>
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d032      	beq.n	8009bd8 <USBD_StdEPReq+0x240>
 8009b72:	e097      	b.n	8009ca4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d007      	beq.n	8009b8a <USBD_StdEPReq+0x1f2>
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
 8009b7c:	2b80      	cmp	r3, #128	@ 0x80
 8009b7e:	d004      	beq.n	8009b8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fbed 	bl	800a362 <USBD_CtlError>
                break;
 8009b88:	e091      	b.n	8009cae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	da0b      	bge.n	8009baa <USBD_StdEPReq+0x212>
 8009b92:	7bbb      	ldrb	r3, [r7, #14]
 8009b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b98:	4613      	mov	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	3310      	adds	r3, #16
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	e00b      	b.n	8009bc2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fc37 	bl	800a444 <USBD_CtlSendData>
              break;
 8009bd6:	e06a      	b.n	8009cae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	da11      	bge.n	8009c04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	f003 020f 	and.w	r2, r3, #15
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	440b      	add	r3, r1
 8009bf2:	3324      	adds	r3, #36	@ 0x24
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d117      	bne.n	8009c2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fbb0 	bl	800a362 <USBD_CtlError>
                  break;
 8009c02:	e054      	b.n	8009cae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c04:	7bbb      	ldrb	r3, [r7, #14]
 8009c06:	f003 020f 	and.w	r2, r3, #15
 8009c0a:	6879      	ldr	r1, [r7, #4]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	440b      	add	r3, r1
 8009c16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d104      	bne.n	8009c2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fb9d 	bl	800a362 <USBD_CtlError>
                  break;
 8009c28:	e041      	b.n	8009cae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	da0b      	bge.n	8009c4a <USBD_StdEPReq+0x2b2>
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
 8009c34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c38:	4613      	mov	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	3310      	adds	r3, #16
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	4413      	add	r3, r2
 8009c46:	3304      	adds	r3, #4
 8009c48:	e00b      	b.n	8009c62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	4413      	add	r3, r2
 8009c60:	3304      	adds	r3, #4
 8009c62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <USBD_StdEPReq+0x2d8>
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	2b80      	cmp	r3, #128	@ 0x80
 8009c6e:	d103      	bne.n	8009c78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	e00e      	b.n	8009c96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c78:	7bbb      	ldrb	r3, [r7, #14]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 f871 	bl	800ad64 <USBD_LL_IsStallEP>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d003      	beq.n	8009c90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	e002      	b.n	8009c96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2202      	movs	r2, #2
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fbd1 	bl	800a444 <USBD_CtlSendData>
              break;
 8009ca2:	e004      	b.n	8009cae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fb5b 	bl	800a362 <USBD_CtlError>
              break;
 8009cac:	bf00      	nop
          }
          break;
 8009cae:	e004      	b.n	8009cba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fb55 	bl	800a362 <USBD_CtlError>
          break;
 8009cb8:	bf00      	nop
      }
      break;
 8009cba:	e005      	b.n	8009cc8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fb4f 	bl	800a362 <USBD_CtlError>
      break;
 8009cc4:	e000      	b.n	8009cc8 <USBD_StdEPReq+0x330>
      break;
 8009cc6:	bf00      	nop
  }

  return ret;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	885b      	ldrh	r3, [r3, #2]
 8009cee:	0a1b      	lsrs	r3, r3, #8
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	2b06      	cmp	r3, #6
 8009cf6:	f200 8128 	bhi.w	8009f4a <USBD_GetDescriptor+0x276>
 8009cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8009d00 <USBD_GetDescriptor+0x2c>)
 8009cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d00:	08009d1d 	.word	0x08009d1d
 8009d04:	08009d35 	.word	0x08009d35
 8009d08:	08009d75 	.word	0x08009d75
 8009d0c:	08009f4b 	.word	0x08009f4b
 8009d10:	08009f4b 	.word	0x08009f4b
 8009d14:	08009eeb 	.word	0x08009eeb
 8009d18:	08009f17 	.word	0x08009f17
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	7c12      	ldrb	r2, [r2, #16]
 8009d28:	f107 0108 	add.w	r1, r7, #8
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	4798      	blx	r3
 8009d30:	60f8      	str	r0, [r7, #12]
      break;
 8009d32:	e112      	b.n	8009f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	7c1b      	ldrb	r3, [r3, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10d      	bne.n	8009d58 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d44:	f107 0208 	add.w	r2, r7, #8
 8009d48:	4610      	mov	r0, r2
 8009d4a:	4798      	blx	r3
 8009d4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3301      	adds	r3, #1
 8009d52:	2202      	movs	r2, #2
 8009d54:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d56:	e100      	b.n	8009f5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d60:	f107 0208 	add.w	r2, r7, #8
 8009d64:	4610      	mov	r0, r2
 8009d66:	4798      	blx	r3
 8009d68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	2202      	movs	r2, #2
 8009d70:	701a      	strb	r2, [r3, #0]
      break;
 8009d72:	e0f2      	b.n	8009f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	885b      	ldrh	r3, [r3, #2]
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b05      	cmp	r3, #5
 8009d7c:	f200 80ac 	bhi.w	8009ed8 <USBD_GetDescriptor+0x204>
 8009d80:	a201      	add	r2, pc, #4	@ (adr r2, 8009d88 <USBD_GetDescriptor+0xb4>)
 8009d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d86:	bf00      	nop
 8009d88:	08009da1 	.word	0x08009da1
 8009d8c:	08009dd5 	.word	0x08009dd5
 8009d90:	08009e09 	.word	0x08009e09
 8009d94:	08009e3d 	.word	0x08009e3d
 8009d98:	08009e71 	.word	0x08009e71
 8009d9c:	08009ea5 	.word	0x08009ea5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00b      	beq.n	8009dc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	7c12      	ldrb	r2, [r2, #16]
 8009db8:	f107 0108 	add.w	r1, r7, #8
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4798      	blx	r3
 8009dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dc2:	e091      	b.n	8009ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 facb 	bl	800a362 <USBD_CtlError>
            err++;
 8009dcc:	7afb      	ldrb	r3, [r7, #11]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009dd2:	e089      	b.n	8009ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00b      	beq.n	8009df8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	7c12      	ldrb	r2, [r2, #16]
 8009dec:	f107 0108 	add.w	r1, r7, #8
 8009df0:	4610      	mov	r0, r2
 8009df2:	4798      	blx	r3
 8009df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009df6:	e077      	b.n	8009ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009df8:	6839      	ldr	r1, [r7, #0]
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fab1 	bl	800a362 <USBD_CtlError>
            err++;
 8009e00:	7afb      	ldrb	r3, [r7, #11]
 8009e02:	3301      	adds	r3, #1
 8009e04:	72fb      	strb	r3, [r7, #11]
          break;
 8009e06:	e06f      	b.n	8009ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00b      	beq.n	8009e2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	7c12      	ldrb	r2, [r2, #16]
 8009e20:	f107 0108 	add.w	r1, r7, #8
 8009e24:	4610      	mov	r0, r2
 8009e26:	4798      	blx	r3
 8009e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e2a:	e05d      	b.n	8009ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fa97 	bl	800a362 <USBD_CtlError>
            err++;
 8009e34:	7afb      	ldrb	r3, [r7, #11]
 8009e36:	3301      	adds	r3, #1
 8009e38:	72fb      	strb	r3, [r7, #11]
          break;
 8009e3a:	e055      	b.n	8009ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00b      	beq.n	8009e60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	7c12      	ldrb	r2, [r2, #16]
 8009e54:	f107 0108 	add.w	r1, r7, #8
 8009e58:	4610      	mov	r0, r2
 8009e5a:	4798      	blx	r3
 8009e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e5e:	e043      	b.n	8009ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fa7d 	bl	800a362 <USBD_CtlError>
            err++;
 8009e68:	7afb      	ldrb	r3, [r7, #11]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e6e:	e03b      	b.n	8009ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00b      	beq.n	8009e94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	7c12      	ldrb	r2, [r2, #16]
 8009e88:	f107 0108 	add.w	r1, r7, #8
 8009e8c:	4610      	mov	r0, r2
 8009e8e:	4798      	blx	r3
 8009e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e92:	e029      	b.n	8009ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fa63 	bl	800a362 <USBD_CtlError>
            err++;
 8009e9c:	7afb      	ldrb	r3, [r7, #11]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ea2:	e021      	b.n	8009ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00b      	beq.n	8009ec8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	7c12      	ldrb	r2, [r2, #16]
 8009ebc:	f107 0108 	add.w	r1, r7, #8
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	4798      	blx	r3
 8009ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ec6:	e00f      	b.n	8009ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fa49 	bl	800a362 <USBD_CtlError>
            err++;
 8009ed0:	7afb      	ldrb	r3, [r7, #11]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ed6:	e007      	b.n	8009ee8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fa41 	bl	800a362 <USBD_CtlError>
          err++;
 8009ee0:	7afb      	ldrb	r3, [r7, #11]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009ee6:	bf00      	nop
      }
      break;
 8009ee8:	e037      	b.n	8009f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	7c1b      	ldrb	r3, [r3, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d109      	bne.n	8009f06 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009efa:	f107 0208 	add.w	r2, r7, #8
 8009efe:	4610      	mov	r0, r2
 8009f00:	4798      	blx	r3
 8009f02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f04:	e029      	b.n	8009f5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fa2a 	bl	800a362 <USBD_CtlError>
        err++;
 8009f0e:	7afb      	ldrb	r3, [r7, #11]
 8009f10:	3301      	adds	r3, #1
 8009f12:	72fb      	strb	r3, [r7, #11]
      break;
 8009f14:	e021      	b.n	8009f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	7c1b      	ldrb	r3, [r3, #16]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10d      	bne.n	8009f3a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f26:	f107 0208 	add.w	r2, r7, #8
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	4798      	blx	r3
 8009f2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3301      	adds	r3, #1
 8009f34:	2207      	movs	r2, #7
 8009f36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f38:	e00f      	b.n	8009f5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fa10 	bl	800a362 <USBD_CtlError>
        err++;
 8009f42:	7afb      	ldrb	r3, [r7, #11]
 8009f44:	3301      	adds	r3, #1
 8009f46:	72fb      	strb	r3, [r7, #11]
      break;
 8009f48:	e007      	b.n	8009f5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fa08 	bl	800a362 <USBD_CtlError>
      err++;
 8009f52:	7afb      	ldrb	r3, [r7, #11]
 8009f54:	3301      	adds	r3, #1
 8009f56:	72fb      	strb	r3, [r7, #11]
      break;
 8009f58:	bf00      	nop
  }

  if (err != 0U)
 8009f5a:	7afb      	ldrb	r3, [r7, #11]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d11e      	bne.n	8009f9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	88db      	ldrh	r3, [r3, #6]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d016      	beq.n	8009f96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009f68:	893b      	ldrh	r3, [r7, #8]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00e      	beq.n	8009f8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	88da      	ldrh	r2, [r3, #6]
 8009f72:	893b      	ldrh	r3, [r7, #8]
 8009f74:	4293      	cmp	r3, r2
 8009f76:	bf28      	it	cs
 8009f78:	4613      	movcs	r3, r2
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f7e:	893b      	ldrh	r3, [r7, #8]
 8009f80:	461a      	mov	r2, r3
 8009f82:	68f9      	ldr	r1, [r7, #12]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fa5d 	bl	800a444 <USBD_CtlSendData>
 8009f8a:	e009      	b.n	8009fa0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f9e7 	bl	800a362 <USBD_CtlError>
 8009f94:	e004      	b.n	8009fa0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 faae 	bl	800a4f8 <USBD_CtlSendStatus>
 8009f9c:	e000      	b.n	8009fa0 <USBD_GetDescriptor+0x2cc>
    return;
 8009f9e:	bf00      	nop
  }
}
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop

08009fa8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	889b      	ldrh	r3, [r3, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d131      	bne.n	800a01e <USBD_SetAddress+0x76>
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	88db      	ldrh	r3, [r3, #6]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d12d      	bne.n	800a01e <USBD_SetAddress+0x76>
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	885b      	ldrh	r3, [r3, #2]
 8009fc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fc8:	d829      	bhi.n	800a01e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	885b      	ldrh	r3, [r3, #2]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d104      	bne.n	8009fec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f9bc 	bl	800a362 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fea:	e01d      	b.n	800a028 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	7bfa      	ldrb	r2, [r7, #15]
 8009ff0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fedf 	bl	800adbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fa7a 	bl	800a4f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d004      	beq.n	800a014 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2202      	movs	r2, #2
 800a00e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a012:	e009      	b.n	800a028 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a01c:	e004      	b.n	800a028 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f99e 	bl	800a362 <USBD_CtlError>
  }
}
 800a026:	bf00      	nop
 800a028:	bf00      	nop
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	885b      	ldrh	r3, [r3, #2]
 800a042:	b2da      	uxtb	r2, r3
 800a044:	4b4e      	ldr	r3, [pc, #312]	@ (800a180 <USBD_SetConfig+0x150>)
 800a046:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a048:	4b4d      	ldr	r3, [pc, #308]	@ (800a180 <USBD_SetConfig+0x150>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d905      	bls.n	800a05c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f985 	bl	800a362 <USBD_CtlError>
    return USBD_FAIL;
 800a058:	2303      	movs	r3, #3
 800a05a:	e08c      	b.n	800a176 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b02      	cmp	r3, #2
 800a066:	d002      	beq.n	800a06e <USBD_SetConfig+0x3e>
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d029      	beq.n	800a0c0 <USBD_SetConfig+0x90>
 800a06c:	e075      	b.n	800a15a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a06e:	4b44      	ldr	r3, [pc, #272]	@ (800a180 <USBD_SetConfig+0x150>)
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d020      	beq.n	800a0b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a076:	4b42      	ldr	r3, [pc, #264]	@ (800a180 <USBD_SetConfig+0x150>)
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a080:	4b3f      	ldr	r3, [pc, #252]	@ (800a180 <USBD_SetConfig+0x150>)
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	4619      	mov	r1, r3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7fe ffe3 	bl	8009052 <USBD_SetClassConfig>
 800a08c:	4603      	mov	r3, r0
 800a08e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a090:	7bfb      	ldrb	r3, [r7, #15]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d008      	beq.n	800a0a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 f962 	bl	800a362 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0a6:	e065      	b.n	800a174 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fa25 	bl	800a4f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a0b6:	e05d      	b.n	800a174 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fa1d 	bl	800a4f8 <USBD_CtlSendStatus>
      break;
 800a0be:	e059      	b.n	800a174 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0c0:	4b2f      	ldr	r3, [pc, #188]	@ (800a180 <USBD_SetConfig+0x150>)
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d112      	bne.n	800a0ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a0d0:	4b2b      	ldr	r3, [pc, #172]	@ (800a180 <USBD_SetConfig+0x150>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0da:	4b29      	ldr	r3, [pc, #164]	@ (800a180 <USBD_SetConfig+0x150>)
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7fe ffd2 	bl	800908a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fa06 	bl	800a4f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0ec:	e042      	b.n	800a174 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a0ee:	4b24      	ldr	r3, [pc, #144]	@ (800a180 <USBD_SetConfig+0x150>)
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d02a      	beq.n	800a152 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	b2db      	uxtb	r3, r3
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7fe ffc0 	bl	800908a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a10a:	4b1d      	ldr	r3, [pc, #116]	@ (800a180 <USBD_SetConfig+0x150>)
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	461a      	mov	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a114:	4b1a      	ldr	r3, [pc, #104]	@ (800a180 <USBD_SetConfig+0x150>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7fe ff99 	bl	8009052 <USBD_SetClassConfig>
 800a120:	4603      	mov	r3, r0
 800a122:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a124:	7bfb      	ldrb	r3, [r7, #15]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00f      	beq.n	800a14a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f918 	bl	800a362 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	b2db      	uxtb	r3, r3
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fe ffa5 	bl	800908a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2202      	movs	r2, #2
 800a144:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a148:	e014      	b.n	800a174 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f9d4 	bl	800a4f8 <USBD_CtlSendStatus>
      break;
 800a150:	e010      	b.n	800a174 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f9d0 	bl	800a4f8 <USBD_CtlSendStatus>
      break;
 800a158:	e00c      	b.n	800a174 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f900 	bl	800a362 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a162:	4b07      	ldr	r3, [pc, #28]	@ (800a180 <USBD_SetConfig+0x150>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7fe ff8e 	bl	800908a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a16e:	2303      	movs	r3, #3
 800a170:	73fb      	strb	r3, [r7, #15]
      break;
 800a172:	bf00      	nop
  }

  return ret;
 800a174:	7bfb      	ldrb	r3, [r7, #15]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	20000b00 	.word	0x20000b00

0800a184 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	88db      	ldrh	r3, [r3, #6]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d004      	beq.n	800a1a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f8e2 	bl	800a362 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a19e:	e023      	b.n	800a1e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	dc02      	bgt.n	800a1b2 <USBD_GetConfig+0x2e>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	dc03      	bgt.n	800a1b8 <USBD_GetConfig+0x34>
 800a1b0:	e015      	b.n	800a1de <USBD_GetConfig+0x5a>
 800a1b2:	2b03      	cmp	r3, #3
 800a1b4:	d00b      	beq.n	800a1ce <USBD_GetConfig+0x4a>
 800a1b6:	e012      	b.n	800a1de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f93c 	bl	800a444 <USBD_CtlSendData>
        break;
 800a1cc:	e00c      	b.n	800a1e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f934 	bl	800a444 <USBD_CtlSendData>
        break;
 800a1dc:	e004      	b.n	800a1e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f8be 	bl	800a362 <USBD_CtlError>
        break;
 800a1e6:	bf00      	nop
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a200:	b2db      	uxtb	r3, r3
 800a202:	3b01      	subs	r3, #1
 800a204:	2b02      	cmp	r3, #2
 800a206:	d81e      	bhi.n	800a246 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	88db      	ldrh	r3, [r3, #6]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d004      	beq.n	800a21a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f8a5 	bl	800a362 <USBD_CtlError>
        break;
 800a218:	e01a      	b.n	800a250 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a226:	2b00      	cmp	r3, #0
 800a228:	d005      	beq.n	800a236 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	f043 0202 	orr.w	r2, r3, #2
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	330c      	adds	r3, #12
 800a23a:	2202      	movs	r2, #2
 800a23c:	4619      	mov	r1, r3
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f900 	bl	800a444 <USBD_CtlSendData>
      break;
 800a244:	e004      	b.n	800a250 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f88a 	bl	800a362 <USBD_CtlError>
      break;
 800a24e:	bf00      	nop
  }
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	885b      	ldrh	r3, [r3, #2]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d107      	bne.n	800a27a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f940 	bl	800a4f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a278:	e013      	b.n	800a2a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	885b      	ldrh	r3, [r3, #2]
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d10b      	bne.n	800a29a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	889b      	ldrh	r3, [r3, #4]
 800a286:	0a1b      	lsrs	r3, r3, #8
 800a288:	b29b      	uxth	r3, r3
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f930 	bl	800a4f8 <USBD_CtlSendStatus>
}
 800a298:	e003      	b.n	800a2a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f860 	bl	800a362 <USBD_CtlError>
}
 800a2a2:	bf00      	nop
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d80b      	bhi.n	800a2da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	885b      	ldrh	r3, [r3, #2]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d10c      	bne.n	800a2e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f910 	bl	800a4f8 <USBD_CtlSendStatus>
      }
      break;
 800a2d8:	e004      	b.n	800a2e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f840 	bl	800a362 <USBD_CtlError>
      break;
 800a2e2:	e000      	b.n	800a2e6 <USBD_ClrFeature+0x3c>
      break;
 800a2e4:	bf00      	nop
  }
}
 800a2e6:	bf00      	nop
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	781a      	ldrb	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	3301      	adds	r3, #1
 800a308:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	781a      	ldrb	r2, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3301      	adds	r3, #1
 800a316:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f7ff fa40 	bl	800979e <SWAPBYTE>
 800a31e:	4603      	mov	r3, r0
 800a320:	461a      	mov	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3301      	adds	r3, #1
 800a32a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3301      	adds	r3, #1
 800a330:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7ff fa33 	bl	800979e <SWAPBYTE>
 800a338:	4603      	mov	r3, r0
 800a33a:	461a      	mov	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	3301      	adds	r3, #1
 800a344:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3301      	adds	r3, #1
 800a34a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f7ff fa26 	bl	800979e <SWAPBYTE>
 800a352:	4603      	mov	r3, r0
 800a354:	461a      	mov	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	80da      	strh	r2, [r3, #6]
}
 800a35a:	bf00      	nop
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a36c:	2180      	movs	r1, #128	@ 0x80
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fcba 	bl	800ace8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a374:	2100      	movs	r1, #0
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fcb6 	bl	800ace8 <USBD_LL_StallEP>
}
 800a37c:	bf00      	nop
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d036      	beq.n	800a408 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a39e:	6938      	ldr	r0, [r7, #16]
 800a3a0:	f000 f836 	bl	800a410 <USBD_GetLen>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	7812      	ldrb	r2, [r2, #0]
 800a3bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3c4:	7dfb      	ldrb	r3, [r7, #23]
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a3d4:	e013      	b.n	800a3fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	4413      	add	r3, r2
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	7812      	ldrb	r2, [r2, #0]
 800a3e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	613b      	str	r3, [r7, #16]
    idx++;
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	701a      	strb	r2, [r3, #0]
    idx++;
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1e7      	bne.n	800a3d6 <USBD_GetString+0x52>
 800a406:	e000      	b.n	800a40a <USBD_GetString+0x86>
    return;
 800a408:	bf00      	nop
  }
}
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a418:	2300      	movs	r3, #0
 800a41a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a420:	e005      	b.n	800a42e <USBD_GetLen+0x1e>
  {
    len++;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	3301      	adds	r3, #1
 800a426:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	3301      	adds	r3, #1
 800a42c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1f5      	bne.n	800a422 <USBD_GetLen+0x12>
  }

  return len;
 800a436:	7bfb      	ldrb	r3, [r7, #15]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2202      	movs	r2, #2
 800a454:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	2100      	movs	r1, #0
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f000 fcc5 	bl	800adfa <USBD_LL_Transmit>

  return USBD_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	60f8      	str	r0, [r7, #12]
 800a482:	60b9      	str	r1, [r7, #8]
 800a484:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	2100      	movs	r1, #0
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 fcb4 	bl	800adfa <USBD_LL_Transmit>

  return USBD_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2203      	movs	r2, #3
 800a4ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 fcb8 	bl	800ae3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f000 fca7 	bl	800ae3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2204      	movs	r2, #4
 800a504:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a508:	2300      	movs	r3, #0
 800a50a:	2200      	movs	r2, #0
 800a50c:	2100      	movs	r1, #0
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fc73 	bl	800adfa <USBD_LL_Transmit>

  return USBD_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2205      	movs	r2, #5
 800a52a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a52e:	2300      	movs	r3, #0
 800a530:	2200      	movs	r2, #0
 800a532:	2100      	movs	r1, #0
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fc81 	bl	800ae3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a548:	2200      	movs	r2, #0
 800a54a:	4912      	ldr	r1, [pc, #72]	@ (800a594 <MX_USB_DEVICE_Init+0x50>)
 800a54c:	4812      	ldr	r0, [pc, #72]	@ (800a598 <MX_USB_DEVICE_Init+0x54>)
 800a54e:	f7fe fd03 	bl	8008f58 <USBD_Init>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a558:	f7f6 ff0a 	bl	8001370 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a55c:	490f      	ldr	r1, [pc, #60]	@ (800a59c <MX_USB_DEVICE_Init+0x58>)
 800a55e:	480e      	ldr	r0, [pc, #56]	@ (800a598 <MX_USB_DEVICE_Init+0x54>)
 800a560:	f7fe fd2a 	bl	8008fb8 <USBD_RegisterClass>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a56a:	f7f6 ff01 	bl	8001370 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a56e:	490c      	ldr	r1, [pc, #48]	@ (800a5a0 <MX_USB_DEVICE_Init+0x5c>)
 800a570:	4809      	ldr	r0, [pc, #36]	@ (800a598 <MX_USB_DEVICE_Init+0x54>)
 800a572:	f7fe fc61 	bl	8008e38 <USBD_CDC_RegisterInterface>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d001      	beq.n	800a580 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a57c:	f7f6 fef8 	bl	8001370 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a580:	4805      	ldr	r0, [pc, #20]	@ (800a598 <MX_USB_DEVICE_Init+0x54>)
 800a582:	f7fe fd4f 	bl	8009024 <USBD_Start>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a58c:	f7f6 fef0 	bl	8001370 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a590:	bf00      	nop
 800a592:	bd80      	pop	{r7, pc}
 800a594:	200000b4 	.word	0x200000b4
 800a598:	20000b04 	.word	0x20000b04
 800a59c:	20000020 	.word	0x20000020
 800a5a0:	200000a0 	.word	0x200000a0

0800a5a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	4905      	ldr	r1, [pc, #20]	@ (800a5c0 <CDC_Init_FS+0x1c>)
 800a5ac:	4805      	ldr	r0, [pc, #20]	@ (800a5c4 <CDC_Init_FS+0x20>)
 800a5ae:	f7fe fc5d 	bl	8008e6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5b2:	4905      	ldr	r1, [pc, #20]	@ (800a5c8 <CDC_Init_FS+0x24>)
 800a5b4:	4803      	ldr	r0, [pc, #12]	@ (800a5c4 <CDC_Init_FS+0x20>)
 800a5b6:	f7fe fc7b 	bl	8008eb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	200015e0 	.word	0x200015e0
 800a5c4:	20000b04 	.word	0x20000b04
 800a5c8:	20000de0 	.word	0x20000de0

0800a5cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	6039      	str	r1, [r7, #0]
 800a5e6:	71fb      	strb	r3, [r7, #7]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a5ec:	79fb      	ldrb	r3, [r7, #7]
 800a5ee:	2b23      	cmp	r3, #35	@ 0x23
 800a5f0:	d84a      	bhi.n	800a688 <CDC_Control_FS+0xac>
 800a5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5f8 <CDC_Control_FS+0x1c>)
 800a5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f8:	0800a689 	.word	0x0800a689
 800a5fc:	0800a689 	.word	0x0800a689
 800a600:	0800a689 	.word	0x0800a689
 800a604:	0800a689 	.word	0x0800a689
 800a608:	0800a689 	.word	0x0800a689
 800a60c:	0800a689 	.word	0x0800a689
 800a610:	0800a689 	.word	0x0800a689
 800a614:	0800a689 	.word	0x0800a689
 800a618:	0800a689 	.word	0x0800a689
 800a61c:	0800a689 	.word	0x0800a689
 800a620:	0800a689 	.word	0x0800a689
 800a624:	0800a689 	.word	0x0800a689
 800a628:	0800a689 	.word	0x0800a689
 800a62c:	0800a689 	.word	0x0800a689
 800a630:	0800a689 	.word	0x0800a689
 800a634:	0800a689 	.word	0x0800a689
 800a638:	0800a689 	.word	0x0800a689
 800a63c:	0800a689 	.word	0x0800a689
 800a640:	0800a689 	.word	0x0800a689
 800a644:	0800a689 	.word	0x0800a689
 800a648:	0800a689 	.word	0x0800a689
 800a64c:	0800a689 	.word	0x0800a689
 800a650:	0800a689 	.word	0x0800a689
 800a654:	0800a689 	.word	0x0800a689
 800a658:	0800a689 	.word	0x0800a689
 800a65c:	0800a689 	.word	0x0800a689
 800a660:	0800a689 	.word	0x0800a689
 800a664:	0800a689 	.word	0x0800a689
 800a668:	0800a689 	.word	0x0800a689
 800a66c:	0800a689 	.word	0x0800a689
 800a670:	0800a689 	.word	0x0800a689
 800a674:	0800a689 	.word	0x0800a689
 800a678:	0800a689 	.word	0x0800a689
 800a67c:	0800a689 	.word	0x0800a689
 800a680:	0800a689 	.word	0x0800a689
 800a684:	0800a689 	.word	0x0800a689
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a688:	bf00      	nop
  }

  return (USBD_OK);
 800a68a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	4805      	ldr	r0, [pc, #20]	@ (800a6bc <CDC_Receive_FS+0x24>)
 800a6a6:	f7fe fc03 	bl	8008eb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6aa:	4804      	ldr	r0, [pc, #16]	@ (800a6bc <CDC_Receive_FS+0x24>)
 800a6ac:	f7fe fc1e 	bl	8008eec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a6b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20000b04 	.word	0x20000b04

0800a6c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a6d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	371c      	adds	r7, #28
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
	...

0800a6e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	6039      	str	r1, [r7, #0]
 800a6ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	2212      	movs	r2, #18
 800a6f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a6f6:	4b03      	ldr	r3, [pc, #12]	@ (800a704 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	200000d0 	.word	0x200000d0

0800a708 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	6039      	str	r1, [r7, #0]
 800a712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	2204      	movs	r2, #4
 800a718:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a71a:	4b03      	ldr	r3, [pc, #12]	@ (800a728 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	200000e4 	.word	0x200000e4

0800a72c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	6039      	str	r1, [r7, #0]
 800a736:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a738:	79fb      	ldrb	r3, [r7, #7]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d105      	bne.n	800a74a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	4907      	ldr	r1, [pc, #28]	@ (800a760 <USBD_FS_ProductStrDescriptor+0x34>)
 800a742:	4808      	ldr	r0, [pc, #32]	@ (800a764 <USBD_FS_ProductStrDescriptor+0x38>)
 800a744:	f7ff fe1e 	bl	800a384 <USBD_GetString>
 800a748:	e004      	b.n	800a754 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	4904      	ldr	r1, [pc, #16]	@ (800a760 <USBD_FS_ProductStrDescriptor+0x34>)
 800a74e:	4805      	ldr	r0, [pc, #20]	@ (800a764 <USBD_FS_ProductStrDescriptor+0x38>)
 800a750:	f7ff fe18 	bl	800a384 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a754:	4b02      	ldr	r3, [pc, #8]	@ (800a760 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a756:	4618      	mov	r0, r3
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20001de0 	.word	0x20001de0
 800a764:	0800bbbc 	.word	0x0800bbbc

0800a768 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	4603      	mov	r3, r0
 800a770:	6039      	str	r1, [r7, #0]
 800a772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	4904      	ldr	r1, [pc, #16]	@ (800a788 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a778:	4804      	ldr	r0, [pc, #16]	@ (800a78c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a77a:	f7ff fe03 	bl	800a384 <USBD_GetString>
  return USBD_StrDesc;
 800a77e:	4b02      	ldr	r3, [pc, #8]	@ (800a788 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	20001de0 	.word	0x20001de0
 800a78c:	0800bbd4 	.word	0x0800bbd4

0800a790 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	4603      	mov	r3, r0
 800a798:	6039      	str	r1, [r7, #0]
 800a79a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	221a      	movs	r2, #26
 800a7a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7a2:	f000 f843 	bl	800a82c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7a6:	4b02      	ldr	r3, [pc, #8]	@ (800a7b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	200000e8 	.word	0x200000e8

0800a7b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	6039      	str	r1, [r7, #0]
 800a7be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d105      	bne.n	800a7d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	4907      	ldr	r1, [pc, #28]	@ (800a7e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7ca:	4808      	ldr	r0, [pc, #32]	@ (800a7ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7cc:	f7ff fdda 	bl	800a384 <USBD_GetString>
 800a7d0:	e004      	b.n	800a7dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	4904      	ldr	r1, [pc, #16]	@ (800a7e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7d6:	4805      	ldr	r0, [pc, #20]	@ (800a7ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7d8:	f7ff fdd4 	bl	800a384 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7dc:	4b02      	ldr	r3, [pc, #8]	@ (800a7e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20001de0 	.word	0x20001de0
 800a7ec:	0800bbe8 	.word	0x0800bbe8

0800a7f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	6039      	str	r1, [r7, #0]
 800a7fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7fc:	79fb      	ldrb	r3, [r7, #7]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d105      	bne.n	800a80e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	4907      	ldr	r1, [pc, #28]	@ (800a824 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a806:	4808      	ldr	r0, [pc, #32]	@ (800a828 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a808:	f7ff fdbc 	bl	800a384 <USBD_GetString>
 800a80c:	e004      	b.n	800a818 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	4904      	ldr	r1, [pc, #16]	@ (800a824 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a812:	4805      	ldr	r0, [pc, #20]	@ (800a828 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a814:	f7ff fdb6 	bl	800a384 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a818:	4b02      	ldr	r3, [pc, #8]	@ (800a824 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20001de0 	.word	0x20001de0
 800a828:	0800bbf4 	.word	0x0800bbf4

0800a82c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a832:	4b0f      	ldr	r3, [pc, #60]	@ (800a870 <Get_SerialNum+0x44>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a838:	4b0e      	ldr	r3, [pc, #56]	@ (800a874 <Get_SerialNum+0x48>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a83e:	4b0e      	ldr	r3, [pc, #56]	@ (800a878 <Get_SerialNum+0x4c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4413      	add	r3, r2
 800a84a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d009      	beq.n	800a866 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a852:	2208      	movs	r2, #8
 800a854:	4909      	ldr	r1, [pc, #36]	@ (800a87c <Get_SerialNum+0x50>)
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 f814 	bl	800a884 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a85c:	2204      	movs	r2, #4
 800a85e:	4908      	ldr	r1, [pc, #32]	@ (800a880 <Get_SerialNum+0x54>)
 800a860:	68b8      	ldr	r0, [r7, #8]
 800a862:	f000 f80f 	bl	800a884 <IntToUnicode>
  }
}
 800a866:	bf00      	nop
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	1fff7a10 	.word	0x1fff7a10
 800a874:	1fff7a14 	.word	0x1fff7a14
 800a878:	1fff7a18 	.word	0x1fff7a18
 800a87c:	200000ea 	.word	0x200000ea
 800a880:	200000fa 	.word	0x200000fa

0800a884 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	4613      	mov	r3, r2
 800a890:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a896:	2300      	movs	r3, #0
 800a898:	75fb      	strb	r3, [r7, #23]
 800a89a:	e027      	b.n	800a8ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	0f1b      	lsrs	r3, r3, #28
 800a8a0:	2b09      	cmp	r3, #9
 800a8a2:	d80b      	bhi.n	800a8bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	0f1b      	lsrs	r3, r3, #28
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	440b      	add	r3, r1
 800a8b4:	3230      	adds	r2, #48	@ 0x30
 800a8b6:	b2d2      	uxtb	r2, r2
 800a8b8:	701a      	strb	r2, [r3, #0]
 800a8ba:	e00a      	b.n	800a8d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	0f1b      	lsrs	r3, r3, #28
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	7dfb      	ldrb	r3, [r7, #23]
 800a8c4:	005b      	lsls	r3, r3, #1
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	440b      	add	r3, r1
 800a8cc:	3237      	adds	r2, #55	@ 0x37
 800a8ce:	b2d2      	uxtb	r2, r2
 800a8d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	011b      	lsls	r3, r3, #4
 800a8d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	005b      	lsls	r3, r3, #1
 800a8dc:	3301      	adds	r3, #1
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	75fb      	strb	r3, [r7, #23]
 800a8ec:	7dfa      	ldrb	r2, [r7, #23]
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d3d3      	bcc.n	800a89c <IntToUnicode+0x18>
  }
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop
 800a8f8:	371c      	adds	r7, #28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
	...

0800a904 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b08a      	sub	sp, #40	@ 0x28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a90c:	f107 0314 	add.w	r3, r7, #20
 800a910:	2200      	movs	r2, #0
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	605a      	str	r2, [r3, #4]
 800a916:	609a      	str	r2, [r3, #8]
 800a918:	60da      	str	r2, [r3, #12]
 800a91a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a924:	d13a      	bne.n	800a99c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a926:	2300      	movs	r3, #0
 800a928:	613b      	str	r3, [r7, #16]
 800a92a:	4b1e      	ldr	r3, [pc, #120]	@ (800a9a4 <HAL_PCD_MspInit+0xa0>)
 800a92c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a92e:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a4 <HAL_PCD_MspInit+0xa0>)
 800a930:	f043 0301 	orr.w	r3, r3, #1
 800a934:	6313      	str	r3, [r2, #48]	@ 0x30
 800a936:	4b1b      	ldr	r3, [pc, #108]	@ (800a9a4 <HAL_PCD_MspInit+0xa0>)
 800a938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	613b      	str	r3, [r7, #16]
 800a940:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a942:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a948:	2302      	movs	r3, #2
 800a94a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a94c:	2300      	movs	r3, #0
 800a94e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a950:	2303      	movs	r3, #3
 800a952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a954:	230a      	movs	r3, #10
 800a956:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a958:	f107 0314 	add.w	r3, r7, #20
 800a95c:	4619      	mov	r1, r3
 800a95e:	4812      	ldr	r0, [pc, #72]	@ (800a9a8 <HAL_PCD_MspInit+0xa4>)
 800a960:	f7f7 fcce 	bl	8002300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a964:	4b0f      	ldr	r3, [pc, #60]	@ (800a9a4 <HAL_PCD_MspInit+0xa0>)
 800a966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a968:	4a0e      	ldr	r2, [pc, #56]	@ (800a9a4 <HAL_PCD_MspInit+0xa0>)
 800a96a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a96e:	6353      	str	r3, [r2, #52]	@ 0x34
 800a970:	2300      	movs	r3, #0
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a4 <HAL_PCD_MspInit+0xa0>)
 800a976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a978:	4a0a      	ldr	r2, [pc, #40]	@ (800a9a4 <HAL_PCD_MspInit+0xa0>)
 800a97a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a97e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a980:	4b08      	ldr	r3, [pc, #32]	@ (800a9a4 <HAL_PCD_MspInit+0xa0>)
 800a982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a988:	60fb      	str	r3, [r7, #12]
 800a98a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a98c:	2200      	movs	r2, #0
 800a98e:	2100      	movs	r1, #0
 800a990:	2043      	movs	r0, #67	@ 0x43
 800a992:	f7f7 f89e 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a996:	2043      	movs	r0, #67	@ 0x43
 800a998:	f7f7 f8b7 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a99c:	bf00      	nop
 800a99e:	3728      	adds	r7, #40	@ 0x28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	40023800 	.word	0x40023800
 800a9a8:	40020000 	.word	0x40020000

0800a9ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	f7fe fb7b 	bl	80090be <USBD_LL_SetupStage>
}
 800a9c8:	bf00      	nop
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a9e2:	78fa      	ldrb	r2, [r7, #3]
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	00db      	lsls	r3, r3, #3
 800a9ea:	4413      	add	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	440b      	add	r3, r1
 800a9f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	78fb      	ldrb	r3, [r7, #3]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	f7fe fbb5 	bl	8009168 <USBD_LL_DataOutStage>
}
 800a9fe:	bf00      	nop
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b082      	sub	sp, #8
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa18:	78fa      	ldrb	r2, [r7, #3]
 800aa1a:	6879      	ldr	r1, [r7, #4]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	4413      	add	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	440b      	add	r3, r1
 800aa26:	3320      	adds	r3, #32
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	78fb      	ldrb	r3, [r7, #3]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	f7fe fc4e 	bl	80092ce <USBD_LL_DataInStage>
}
 800aa32:	bf00      	nop
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fd88 	bl	800955e <USBD_LL_SOF>
}
 800aa4e:	bf00      	nop
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b084      	sub	sp, #16
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	79db      	ldrb	r3, [r3, #7]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d102      	bne.n	800aa70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	73fb      	strb	r3, [r7, #15]
 800aa6e:	e008      	b.n	800aa82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	79db      	ldrb	r3, [r3, #7]
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d102      	bne.n	800aa7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	73fb      	strb	r3, [r7, #15]
 800aa7c:	e001      	b.n	800aa82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aa7e:	f7f6 fc77 	bl	8001370 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa88:	7bfa      	ldrb	r2, [r7, #15]
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe fd22 	bl	80094d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe fcca 	bl	8009432 <USBD_LL_Reset>
}
 800aa9e:	bf00      	nop
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
	...

0800aaa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe fd1d 	bl	80094f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	6812      	ldr	r2, [r2, #0]
 800aaca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aace:	f043 0301 	orr.w	r3, r3, #1
 800aad2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	7adb      	ldrb	r3, [r3, #11]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d005      	beq.n	800aae8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aadc:	4b04      	ldr	r3, [pc, #16]	@ (800aaf0 <HAL_PCD_SuspendCallback+0x48>)
 800aade:	691b      	ldr	r3, [r3, #16]
 800aae0:	4a03      	ldr	r2, [pc, #12]	@ (800aaf0 <HAL_PCD_SuspendCallback+0x48>)
 800aae2:	f043 0306 	orr.w	r3, r3, #6
 800aae6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aae8:	bf00      	nop
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	e000ed00 	.word	0xe000ed00

0800aaf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe fd13 	bl	800952e <USBD_LL_Resume>
}
 800ab08:	bf00      	nop
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab22:	78fa      	ldrb	r2, [r7, #3]
 800ab24:	4611      	mov	r1, r2
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe fd6b 	bl	8009602 <USBD_LL_IsoOUTIncomplete>
}
 800ab2c:	bf00      	nop
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab46:	78fa      	ldrb	r2, [r7, #3]
 800ab48:	4611      	mov	r1, r2
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fe fd27 	bl	800959e <USBD_LL_IsoINIncomplete>
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fe fd7d 	bl	8009666 <USBD_LL_DevConnected>
}
 800ab6c:	bf00      	nop
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fe fd7a 	bl	800967c <USBD_LL_DevDisconnected>
}
 800ab88:	bf00      	nop
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d13c      	bne.n	800ac1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aba0:	4a20      	ldr	r2, [pc, #128]	@ (800ac24 <USBD_LL_Init+0x94>)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a1e      	ldr	r2, [pc, #120]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abb0:	4b1c      	ldr	r3, [pc, #112]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800abb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800abb8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abba:	2204      	movs	r2, #4
 800abbc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800abbe:	4b19      	ldr	r3, [pc, #100]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abc0:	2202      	movs	r2, #2
 800abc2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abc4:	4b17      	ldr	r3, [pc, #92]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800abca:	4b16      	ldr	r3, [pc, #88]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abcc:	2202      	movs	r2, #2
 800abce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abd0:	4b14      	ldr	r3, [pc, #80]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800abd6:	4b13      	ldr	r3, [pc, #76]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abd8:	2200      	movs	r2, #0
 800abda:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800abdc:	4b11      	ldr	r3, [pc, #68]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abde:	2200      	movs	r2, #0
 800abe0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800abe2:	4b10      	ldr	r3, [pc, #64]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800abe8:	4b0e      	ldr	r3, [pc, #56]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abea:	2200      	movs	r2, #0
 800abec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800abee:	480d      	ldr	r0, [pc, #52]	@ (800ac24 <USBD_LL_Init+0x94>)
 800abf0:	f7f9 fd14 	bl	800461c <HAL_PCD_Init>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800abfa:	f7f6 fbb9 	bl	8001370 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800abfe:	2180      	movs	r1, #128	@ 0x80
 800ac00:	4808      	ldr	r0, [pc, #32]	@ (800ac24 <USBD_LL_Init+0x94>)
 800ac02:	f7fa ff3e 	bl	8005a82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac06:	2240      	movs	r2, #64	@ 0x40
 800ac08:	2100      	movs	r1, #0
 800ac0a:	4806      	ldr	r0, [pc, #24]	@ (800ac24 <USBD_LL_Init+0x94>)
 800ac0c:	f7fa fef2 	bl	80059f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac10:	2280      	movs	r2, #128	@ 0x80
 800ac12:	2101      	movs	r1, #1
 800ac14:	4803      	ldr	r0, [pc, #12]	@ (800ac24 <USBD_LL_Init+0x94>)
 800ac16:	f7fa feed 	bl	80059f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	20001fe0 	.word	0x20001fe0

0800ac28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7f9 fdfb 	bl	800483a <HAL_PCD_Start>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 f942 	bl	800aed4 <USBD_Get_USB_Status>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	4608      	mov	r0, r1
 800ac68:	4611      	mov	r1, r2
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	70fb      	strb	r3, [r7, #3]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70bb      	strb	r3, [r7, #2]
 800ac74:	4613      	mov	r3, r2
 800ac76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac86:	78bb      	ldrb	r3, [r7, #2]
 800ac88:	883a      	ldrh	r2, [r7, #0]
 800ac8a:	78f9      	ldrb	r1, [r7, #3]
 800ac8c:	f7fa facf 	bl	800522e <HAL_PCD_EP_Open>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f91c 	bl	800aed4 <USBD_Get_USB_Status>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	460b      	mov	r3, r1
 800acb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acc4:	78fa      	ldrb	r2, [r7, #3]
 800acc6:	4611      	mov	r1, r2
 800acc8:	4618      	mov	r0, r3
 800acca:	f7fa fb18 	bl	80052fe <HAL_PCD_EP_Close>
 800acce:	4603      	mov	r3, r0
 800acd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f000 f8fd 	bl	800aed4 <USBD_Get_USB_Status>
 800acda:	4603      	mov	r3, r0
 800acdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acde:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	4611      	mov	r1, r2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fa fbd0 	bl	80054ac <HAL_PCD_EP_SetStall>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 f8de 	bl	800aed4 <USBD_Get_USB_Status>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad40:	78fa      	ldrb	r2, [r7, #3]
 800ad42:	4611      	mov	r1, r2
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fa fc14 	bl	8005572 <HAL_PCD_EP_ClrStall>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 f8bf 	bl	800aed4 <USBD_Get_USB_Status>
 800ad56:	4603      	mov	r3, r0
 800ad58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	da0b      	bge.n	800ad98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad86:	68f9      	ldr	r1, [r7, #12]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	440b      	add	r3, r1
 800ad92:	3316      	adds	r3, #22
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	e00b      	b.n	800adb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad98:	78fb      	ldrb	r3, [r7, #3]
 800ad9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad9e:	68f9      	ldr	r1, [r7, #12]
 800ada0:	4613      	mov	r3, r2
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	4413      	add	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	440b      	add	r3, r1
 800adaa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800adae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800add6:	78fa      	ldrb	r2, [r7, #3]
 800add8:	4611      	mov	r1, r2
 800adda:	4618      	mov	r0, r3
 800addc:	f7fa fa03 	bl	80051e6 <HAL_PCD_SetAddress>
 800ade0:	4603      	mov	r3, r0
 800ade2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 f874 	bl	800aed4 <USBD_Get_USB_Status>
 800adec:	4603      	mov	r3, r0
 800adee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b086      	sub	sp, #24
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	607a      	str	r2, [r7, #4]
 800ae04:	603b      	str	r3, [r7, #0]
 800ae06:	460b      	mov	r3, r1
 800ae08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae18:	7af9      	ldrb	r1, [r7, #11]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	f7fa fb0b 	bl	8005438 <HAL_PCD_EP_Transmit>
 800ae22:	4603      	mov	r3, r0
 800ae24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 f853 	bl	800aed4 <USBD_Get_USB_Status>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae32:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	607a      	str	r2, [r7, #4]
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae5a:	7af9      	ldrb	r1, [r7, #11]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	f7fa fa97 	bl	8005392 <HAL_PCD_EP_Receive>
 800ae64:	4603      	mov	r3, r0
 800ae66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae68:	7dfb      	ldrb	r3, [r7, #23]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 f832 	bl	800aed4 <USBD_Get_USB_Status>
 800ae70:	4603      	mov	r3, r0
 800ae72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae74:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	460b      	mov	r3, r1
 800ae88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae90:	78fa      	ldrb	r2, [r7, #3]
 800ae92:	4611      	mov	r1, r2
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fa fab7 	bl	8005408 <HAL_PCD_EP_GetRxCount>
 800ae9a:	4603      	mov	r3, r0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aeac:	4b03      	ldr	r3, [pc, #12]	@ (800aebc <USBD_static_malloc+0x18>)
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	200024c4 	.word	0x200024c4

0800aec0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]

}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aee2:	79fb      	ldrb	r3, [r7, #7]
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d817      	bhi.n	800af18 <USBD_Get_USB_Status+0x44>
 800aee8:	a201      	add	r2, pc, #4	@ (adr r2, 800aef0 <USBD_Get_USB_Status+0x1c>)
 800aeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeee:	bf00      	nop
 800aef0:	0800af01 	.word	0x0800af01
 800aef4:	0800af07 	.word	0x0800af07
 800aef8:	0800af0d 	.word	0x0800af0d
 800aefc:	0800af13 	.word	0x0800af13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af00:	2300      	movs	r3, #0
 800af02:	73fb      	strb	r3, [r7, #15]
    break;
 800af04:	e00b      	b.n	800af1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af06:	2303      	movs	r3, #3
 800af08:	73fb      	strb	r3, [r7, #15]
    break;
 800af0a:	e008      	b.n	800af1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af0c:	2301      	movs	r3, #1
 800af0e:	73fb      	strb	r3, [r7, #15]
    break;
 800af10:	e005      	b.n	800af1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af12:	2303      	movs	r3, #3
 800af14:	73fb      	strb	r3, [r7, #15]
    break;
 800af16:	e002      	b.n	800af1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af18:	2303      	movs	r3, #3
 800af1a:	73fb      	strb	r3, [r7, #15]
    break;
 800af1c:	bf00      	nop
  }
  return usb_status;
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <memset>:
 800af2c:	4402      	add	r2, r0
 800af2e:	4603      	mov	r3, r0
 800af30:	4293      	cmp	r3, r2
 800af32:	d100      	bne.n	800af36 <memset+0xa>
 800af34:	4770      	bx	lr
 800af36:	f803 1b01 	strb.w	r1, [r3], #1
 800af3a:	e7f9      	b.n	800af30 <memset+0x4>

0800af3c <__libc_init_array>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	4d0d      	ldr	r5, [pc, #52]	@ (800af74 <__libc_init_array+0x38>)
 800af40:	4c0d      	ldr	r4, [pc, #52]	@ (800af78 <__libc_init_array+0x3c>)
 800af42:	1b64      	subs	r4, r4, r5
 800af44:	10a4      	asrs	r4, r4, #2
 800af46:	2600      	movs	r6, #0
 800af48:	42a6      	cmp	r6, r4
 800af4a:	d109      	bne.n	800af60 <__libc_init_array+0x24>
 800af4c:	4d0b      	ldr	r5, [pc, #44]	@ (800af7c <__libc_init_array+0x40>)
 800af4e:	4c0c      	ldr	r4, [pc, #48]	@ (800af80 <__libc_init_array+0x44>)
 800af50:	f000 fd60 	bl	800ba14 <_init>
 800af54:	1b64      	subs	r4, r4, r5
 800af56:	10a4      	asrs	r4, r4, #2
 800af58:	2600      	movs	r6, #0
 800af5a:	42a6      	cmp	r6, r4
 800af5c:	d105      	bne.n	800af6a <__libc_init_array+0x2e>
 800af5e:	bd70      	pop	{r4, r5, r6, pc}
 800af60:	f855 3b04 	ldr.w	r3, [r5], #4
 800af64:	4798      	blx	r3
 800af66:	3601      	adds	r6, #1
 800af68:	e7ee      	b.n	800af48 <__libc_init_array+0xc>
 800af6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af6e:	4798      	blx	r3
 800af70:	3601      	adds	r6, #1
 800af72:	e7f2      	b.n	800af5a <__libc_init_array+0x1e>
 800af74:	0800bffc 	.word	0x0800bffc
 800af78:	0800bffc 	.word	0x0800bffc
 800af7c:	0800bffc 	.word	0x0800bffc
 800af80:	0800c000 	.word	0x0800c000

0800af84 <memcpy>:
 800af84:	440a      	add	r2, r1
 800af86:	4291      	cmp	r1, r2
 800af88:	f100 33ff 	add.w	r3, r0, #4294967295
 800af8c:	d100      	bne.n	800af90 <memcpy+0xc>
 800af8e:	4770      	bx	lr
 800af90:	b510      	push	{r4, lr}
 800af92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af9a:	4291      	cmp	r1, r2
 800af9c:	d1f9      	bne.n	800af92 <memcpy+0xe>
 800af9e:	bd10      	pop	{r4, pc}

0800afa0 <sinf>:
 800afa0:	ee10 3a10 	vmov	r3, s0
 800afa4:	b507      	push	{r0, r1, r2, lr}
 800afa6:	4a1f      	ldr	r2, [pc, #124]	@ (800b024 <sinf+0x84>)
 800afa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afac:	4293      	cmp	r3, r2
 800afae:	d807      	bhi.n	800afc0 <sinf+0x20>
 800afb0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b028 <sinf+0x88>
 800afb4:	2000      	movs	r0, #0
 800afb6:	b003      	add	sp, #12
 800afb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afbc:	f000 b88e 	b.w	800b0dc <__kernel_sinf>
 800afc0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800afc4:	d304      	bcc.n	800afd0 <sinf+0x30>
 800afc6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800afca:	b003      	add	sp, #12
 800afcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800afd0:	4668      	mov	r0, sp
 800afd2:	f000 f8cb 	bl	800b16c <__ieee754_rem_pio2f>
 800afd6:	f000 0003 	and.w	r0, r0, #3
 800afda:	2801      	cmp	r0, #1
 800afdc:	d00a      	beq.n	800aff4 <sinf+0x54>
 800afde:	2802      	cmp	r0, #2
 800afe0:	d00f      	beq.n	800b002 <sinf+0x62>
 800afe2:	b9c0      	cbnz	r0, 800b016 <sinf+0x76>
 800afe4:	eddd 0a01 	vldr	s1, [sp, #4]
 800afe8:	ed9d 0a00 	vldr	s0, [sp]
 800afec:	2001      	movs	r0, #1
 800afee:	f000 f875 	bl	800b0dc <__kernel_sinf>
 800aff2:	e7ea      	b.n	800afca <sinf+0x2a>
 800aff4:	eddd 0a01 	vldr	s1, [sp, #4]
 800aff8:	ed9d 0a00 	vldr	s0, [sp]
 800affc:	f000 f816 	bl	800b02c <__kernel_cosf>
 800b000:	e7e3      	b.n	800afca <sinf+0x2a>
 800b002:	eddd 0a01 	vldr	s1, [sp, #4]
 800b006:	ed9d 0a00 	vldr	s0, [sp]
 800b00a:	2001      	movs	r0, #1
 800b00c:	f000 f866 	bl	800b0dc <__kernel_sinf>
 800b010:	eeb1 0a40 	vneg.f32	s0, s0
 800b014:	e7d9      	b.n	800afca <sinf+0x2a>
 800b016:	eddd 0a01 	vldr	s1, [sp, #4]
 800b01a:	ed9d 0a00 	vldr	s0, [sp]
 800b01e:	f000 f805 	bl	800b02c <__kernel_cosf>
 800b022:	e7f5      	b.n	800b010 <sinf+0x70>
 800b024:	3f490fd8 	.word	0x3f490fd8
 800b028:	00000000 	.word	0x00000000

0800b02c <__kernel_cosf>:
 800b02c:	ee10 3a10 	vmov	r3, s0
 800b030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b034:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b038:	eef0 6a40 	vmov.f32	s13, s0
 800b03c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b040:	d204      	bcs.n	800b04c <__kernel_cosf+0x20>
 800b042:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b046:	ee17 2a90 	vmov	r2, s15
 800b04a:	b342      	cbz	r2, 800b09e <__kernel_cosf+0x72>
 800b04c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b050:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b0bc <__kernel_cosf+0x90>
 800b054:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b0c0 <__kernel_cosf+0x94>
 800b058:	4a1a      	ldr	r2, [pc, #104]	@ (800b0c4 <__kernel_cosf+0x98>)
 800b05a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b05e:	4293      	cmp	r3, r2
 800b060:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b0c8 <__kernel_cosf+0x9c>
 800b064:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b068:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b0cc <__kernel_cosf+0xa0>
 800b06c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b070:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b0d0 <__kernel_cosf+0xa4>
 800b074:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b078:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b0d4 <__kernel_cosf+0xa8>
 800b07c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b080:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b084:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b088:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b08c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b090:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b094:	d804      	bhi.n	800b0a0 <__kernel_cosf+0x74>
 800b096:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b09a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b09e:	4770      	bx	lr
 800b0a0:	4a0d      	ldr	r2, [pc, #52]	@ (800b0d8 <__kernel_cosf+0xac>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	bf9a      	itte	ls
 800b0a6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b0aa:	ee07 3a10 	vmovls	s14, r3
 800b0ae:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b0b2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b0b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0ba:	e7ec      	b.n	800b096 <__kernel_cosf+0x6a>
 800b0bc:	ad47d74e 	.word	0xad47d74e
 800b0c0:	310f74f6 	.word	0x310f74f6
 800b0c4:	3e999999 	.word	0x3e999999
 800b0c8:	b493f27c 	.word	0xb493f27c
 800b0cc:	37d00d01 	.word	0x37d00d01
 800b0d0:	bab60b61 	.word	0xbab60b61
 800b0d4:	3d2aaaab 	.word	0x3d2aaaab
 800b0d8:	3f480000 	.word	0x3f480000

0800b0dc <__kernel_sinf>:
 800b0dc:	ee10 3a10 	vmov	r3, s0
 800b0e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0e4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b0e8:	d204      	bcs.n	800b0f4 <__kernel_sinf+0x18>
 800b0ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b0ee:	ee17 3a90 	vmov	r3, s15
 800b0f2:	b35b      	cbz	r3, 800b14c <__kernel_sinf+0x70>
 800b0f4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b0f8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b150 <__kernel_sinf+0x74>
 800b0fc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b154 <__kernel_sinf+0x78>
 800b100:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b104:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b158 <__kernel_sinf+0x7c>
 800b108:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b10c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b15c <__kernel_sinf+0x80>
 800b110:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b114:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b160 <__kernel_sinf+0x84>
 800b118:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b11c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b120:	b930      	cbnz	r0, 800b130 <__kernel_sinf+0x54>
 800b122:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b164 <__kernel_sinf+0x88>
 800b126:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b12a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b12e:	4770      	bx	lr
 800b130:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b134:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b138:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b13c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b140:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b168 <__kernel_sinf+0x8c>
 800b144:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b148:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	2f2ec9d3 	.word	0x2f2ec9d3
 800b154:	b2d72f34 	.word	0xb2d72f34
 800b158:	3638ef1b 	.word	0x3638ef1b
 800b15c:	b9500d01 	.word	0xb9500d01
 800b160:	3c088889 	.word	0x3c088889
 800b164:	be2aaaab 	.word	0xbe2aaaab
 800b168:	3e2aaaab 	.word	0x3e2aaaab

0800b16c <__ieee754_rem_pio2f>:
 800b16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b16e:	ee10 6a10 	vmov	r6, s0
 800b172:	4b88      	ldr	r3, [pc, #544]	@ (800b394 <__ieee754_rem_pio2f+0x228>)
 800b174:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b178:	429d      	cmp	r5, r3
 800b17a:	b087      	sub	sp, #28
 800b17c:	4604      	mov	r4, r0
 800b17e:	d805      	bhi.n	800b18c <__ieee754_rem_pio2f+0x20>
 800b180:	2300      	movs	r3, #0
 800b182:	ed80 0a00 	vstr	s0, [r0]
 800b186:	6043      	str	r3, [r0, #4]
 800b188:	2000      	movs	r0, #0
 800b18a:	e022      	b.n	800b1d2 <__ieee754_rem_pio2f+0x66>
 800b18c:	4b82      	ldr	r3, [pc, #520]	@ (800b398 <__ieee754_rem_pio2f+0x22c>)
 800b18e:	429d      	cmp	r5, r3
 800b190:	d83a      	bhi.n	800b208 <__ieee754_rem_pio2f+0x9c>
 800b192:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b196:	2e00      	cmp	r6, #0
 800b198:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b39c <__ieee754_rem_pio2f+0x230>
 800b19c:	4a80      	ldr	r2, [pc, #512]	@ (800b3a0 <__ieee754_rem_pio2f+0x234>)
 800b19e:	f023 030f 	bic.w	r3, r3, #15
 800b1a2:	dd18      	ble.n	800b1d6 <__ieee754_rem_pio2f+0x6a>
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b1aa:	bf09      	itett	eq
 800b1ac:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b3a4 <__ieee754_rem_pio2f+0x238>
 800b1b0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b3a8 <__ieee754_rem_pio2f+0x23c>
 800b1b4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b3ac <__ieee754_rem_pio2f+0x240>
 800b1b8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b1bc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b1c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1c4:	ed80 7a00 	vstr	s14, [r0]
 800b1c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b1cc:	edc0 7a01 	vstr	s15, [r0, #4]
 800b1d0:	2001      	movs	r0, #1
 800b1d2:	b007      	add	sp, #28
 800b1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b1dc:	bf09      	itett	eq
 800b1de:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b3a4 <__ieee754_rem_pio2f+0x238>
 800b1e2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b3a8 <__ieee754_rem_pio2f+0x23c>
 800b1e6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b3ac <__ieee754_rem_pio2f+0x240>
 800b1ea:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b1ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b1f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1f6:	ed80 7a00 	vstr	s14, [r0]
 800b1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fe:	edc0 7a01 	vstr	s15, [r0, #4]
 800b202:	f04f 30ff 	mov.w	r0, #4294967295
 800b206:	e7e4      	b.n	800b1d2 <__ieee754_rem_pio2f+0x66>
 800b208:	4b69      	ldr	r3, [pc, #420]	@ (800b3b0 <__ieee754_rem_pio2f+0x244>)
 800b20a:	429d      	cmp	r5, r3
 800b20c:	d873      	bhi.n	800b2f6 <__ieee754_rem_pio2f+0x18a>
 800b20e:	f000 f8dd 	bl	800b3cc <fabsf>
 800b212:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b3b4 <__ieee754_rem_pio2f+0x248>
 800b216:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b21a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b21e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b222:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b226:	ee17 0a90 	vmov	r0, s15
 800b22a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b39c <__ieee754_rem_pio2f+0x230>
 800b22e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b232:	281f      	cmp	r0, #31
 800b234:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b3a8 <__ieee754_rem_pio2f+0x23c>
 800b238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b23c:	eeb1 6a47 	vneg.f32	s12, s14
 800b240:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b244:	ee16 1a90 	vmov	r1, s13
 800b248:	dc09      	bgt.n	800b25e <__ieee754_rem_pio2f+0xf2>
 800b24a:	4a5b      	ldr	r2, [pc, #364]	@ (800b3b8 <__ieee754_rem_pio2f+0x24c>)
 800b24c:	1e47      	subs	r7, r0, #1
 800b24e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b252:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b256:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d107      	bne.n	800b26e <__ieee754_rem_pio2f+0x102>
 800b25e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b262:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b266:	2a08      	cmp	r2, #8
 800b268:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b26c:	dc14      	bgt.n	800b298 <__ieee754_rem_pio2f+0x12c>
 800b26e:	6021      	str	r1, [r4, #0]
 800b270:	ed94 7a00 	vldr	s14, [r4]
 800b274:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b278:	2e00      	cmp	r6, #0
 800b27a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b27e:	ed84 0a01 	vstr	s0, [r4, #4]
 800b282:	daa6      	bge.n	800b1d2 <__ieee754_rem_pio2f+0x66>
 800b284:	eeb1 7a47 	vneg.f32	s14, s14
 800b288:	eeb1 0a40 	vneg.f32	s0, s0
 800b28c:	ed84 7a00 	vstr	s14, [r4]
 800b290:	ed84 0a01 	vstr	s0, [r4, #4]
 800b294:	4240      	negs	r0, r0
 800b296:	e79c      	b.n	800b1d2 <__ieee754_rem_pio2f+0x66>
 800b298:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b3a4 <__ieee754_rem_pio2f+0x238>
 800b29c:	eef0 6a40 	vmov.f32	s13, s0
 800b2a0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b2a4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b2a8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b2ac:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b3ac <__ieee754_rem_pio2f+0x240>
 800b2b0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b2b4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b2b8:	ee15 2a90 	vmov	r2, s11
 800b2bc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b2c0:	1a5b      	subs	r3, r3, r1
 800b2c2:	2b19      	cmp	r3, #25
 800b2c4:	dc04      	bgt.n	800b2d0 <__ieee754_rem_pio2f+0x164>
 800b2c6:	edc4 5a00 	vstr	s11, [r4]
 800b2ca:	eeb0 0a66 	vmov.f32	s0, s13
 800b2ce:	e7cf      	b.n	800b270 <__ieee754_rem_pio2f+0x104>
 800b2d0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b3bc <__ieee754_rem_pio2f+0x250>
 800b2d4:	eeb0 0a66 	vmov.f32	s0, s13
 800b2d8:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b2dc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b2e0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b3c0 <__ieee754_rem_pio2f+0x254>
 800b2e4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b2e8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b2ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b2f0:	ed84 7a00 	vstr	s14, [r4]
 800b2f4:	e7bc      	b.n	800b270 <__ieee754_rem_pio2f+0x104>
 800b2f6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b2fa:	d306      	bcc.n	800b30a <__ieee754_rem_pio2f+0x19e>
 800b2fc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b300:	edc0 7a01 	vstr	s15, [r0, #4]
 800b304:	edc0 7a00 	vstr	s15, [r0]
 800b308:	e73e      	b.n	800b188 <__ieee754_rem_pio2f+0x1c>
 800b30a:	15ea      	asrs	r2, r5, #23
 800b30c:	3a86      	subs	r2, #134	@ 0x86
 800b30e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b312:	ee07 3a90 	vmov	s15, r3
 800b316:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b31a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b3c4 <__ieee754_rem_pio2f+0x258>
 800b31e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b322:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b326:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b32a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b32e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b332:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b336:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b33a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b33e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b342:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34a:	edcd 7a05 	vstr	s15, [sp, #20]
 800b34e:	d11e      	bne.n	800b38e <__ieee754_rem_pio2f+0x222>
 800b350:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b358:	bf0c      	ite	eq
 800b35a:	2301      	moveq	r3, #1
 800b35c:	2302      	movne	r3, #2
 800b35e:	491a      	ldr	r1, [pc, #104]	@ (800b3c8 <__ieee754_rem_pio2f+0x25c>)
 800b360:	9101      	str	r1, [sp, #4]
 800b362:	2102      	movs	r1, #2
 800b364:	9100      	str	r1, [sp, #0]
 800b366:	a803      	add	r0, sp, #12
 800b368:	4621      	mov	r1, r4
 800b36a:	f000 f837 	bl	800b3dc <__kernel_rem_pio2f>
 800b36e:	2e00      	cmp	r6, #0
 800b370:	f6bf af2f 	bge.w	800b1d2 <__ieee754_rem_pio2f+0x66>
 800b374:	edd4 7a00 	vldr	s15, [r4]
 800b378:	eef1 7a67 	vneg.f32	s15, s15
 800b37c:	edc4 7a00 	vstr	s15, [r4]
 800b380:	edd4 7a01 	vldr	s15, [r4, #4]
 800b384:	eef1 7a67 	vneg.f32	s15, s15
 800b388:	edc4 7a01 	vstr	s15, [r4, #4]
 800b38c:	e782      	b.n	800b294 <__ieee754_rem_pio2f+0x128>
 800b38e:	2303      	movs	r3, #3
 800b390:	e7e5      	b.n	800b35e <__ieee754_rem_pio2f+0x1f2>
 800b392:	bf00      	nop
 800b394:	3f490fd8 	.word	0x3f490fd8
 800b398:	4016cbe3 	.word	0x4016cbe3
 800b39c:	3fc90f80 	.word	0x3fc90f80
 800b3a0:	3fc90fd0 	.word	0x3fc90fd0
 800b3a4:	37354400 	.word	0x37354400
 800b3a8:	37354443 	.word	0x37354443
 800b3ac:	2e85a308 	.word	0x2e85a308
 800b3b0:	43490f80 	.word	0x43490f80
 800b3b4:	3f22f984 	.word	0x3f22f984
 800b3b8:	0800bc24 	.word	0x0800bc24
 800b3bc:	2e85a300 	.word	0x2e85a300
 800b3c0:	248d3132 	.word	0x248d3132
 800b3c4:	43800000 	.word	0x43800000
 800b3c8:	0800bca4 	.word	0x0800bca4

0800b3cc <fabsf>:
 800b3cc:	ee10 3a10 	vmov	r3, s0
 800b3d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3d4:	ee00 3a10 	vmov	s0, r3
 800b3d8:	4770      	bx	lr
	...

0800b3dc <__kernel_rem_pio2f>:
 800b3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	ed2d 8b04 	vpush	{d8-d9}
 800b3e4:	b0d9      	sub	sp, #356	@ 0x164
 800b3e6:	4690      	mov	r8, r2
 800b3e8:	9001      	str	r0, [sp, #4]
 800b3ea:	4ab9      	ldr	r2, [pc, #740]	@ (800b6d0 <__kernel_rem_pio2f+0x2f4>)
 800b3ec:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b3ee:	f118 0f04 	cmn.w	r8, #4
 800b3f2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b3f6:	460f      	mov	r7, r1
 800b3f8:	f103 3bff 	add.w	fp, r3, #4294967295
 800b3fc:	db27      	blt.n	800b44e <__kernel_rem_pio2f+0x72>
 800b3fe:	f1b8 0203 	subs.w	r2, r8, #3
 800b402:	bf48      	it	mi
 800b404:	f108 0204 	addmi.w	r2, r8, #4
 800b408:	10d2      	asrs	r2, r2, #3
 800b40a:	1c55      	adds	r5, r2, #1
 800b40c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b40e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800b6e0 <__kernel_rem_pio2f+0x304>
 800b412:	00e8      	lsls	r0, r5, #3
 800b414:	eba2 060b 	sub.w	r6, r2, fp
 800b418:	9002      	str	r0, [sp, #8]
 800b41a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b41e:	eb0a 0c0b 	add.w	ip, sl, fp
 800b422:	ac1c      	add	r4, sp, #112	@ 0x70
 800b424:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b428:	2000      	movs	r0, #0
 800b42a:	4560      	cmp	r0, ip
 800b42c:	dd11      	ble.n	800b452 <__kernel_rem_pio2f+0x76>
 800b42e:	a91c      	add	r1, sp, #112	@ 0x70
 800b430:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b434:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b438:	f04f 0c00 	mov.w	ip, #0
 800b43c:	45d4      	cmp	ip, sl
 800b43e:	dc27      	bgt.n	800b490 <__kernel_rem_pio2f+0xb4>
 800b440:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b444:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800b6e0 <__kernel_rem_pio2f+0x304>
 800b448:	4606      	mov	r6, r0
 800b44a:	2400      	movs	r4, #0
 800b44c:	e016      	b.n	800b47c <__kernel_rem_pio2f+0xa0>
 800b44e:	2200      	movs	r2, #0
 800b450:	e7db      	b.n	800b40a <__kernel_rem_pio2f+0x2e>
 800b452:	42c6      	cmn	r6, r0
 800b454:	bf5d      	ittte	pl
 800b456:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b45a:	ee07 1a90 	vmovpl	s15, r1
 800b45e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b462:	eef0 7a47 	vmovmi.f32	s15, s14
 800b466:	ece4 7a01 	vstmia	r4!, {s15}
 800b46a:	3001      	adds	r0, #1
 800b46c:	e7dd      	b.n	800b42a <__kernel_rem_pio2f+0x4e>
 800b46e:	ecfe 6a01 	vldmia	lr!, {s13}
 800b472:	ed96 7a00 	vldr	s14, [r6]
 800b476:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b47a:	3401      	adds	r4, #1
 800b47c:	455c      	cmp	r4, fp
 800b47e:	f1a6 0604 	sub.w	r6, r6, #4
 800b482:	ddf4      	ble.n	800b46e <__kernel_rem_pio2f+0x92>
 800b484:	ece9 7a01 	vstmia	r9!, {s15}
 800b488:	f10c 0c01 	add.w	ip, ip, #1
 800b48c:	3004      	adds	r0, #4
 800b48e:	e7d5      	b.n	800b43c <__kernel_rem_pio2f+0x60>
 800b490:	a908      	add	r1, sp, #32
 800b492:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b496:	9104      	str	r1, [sp, #16]
 800b498:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b49a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800b6dc <__kernel_rem_pio2f+0x300>
 800b49e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800b6d8 <__kernel_rem_pio2f+0x2fc>
 800b4a2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b4a6:	9203      	str	r2, [sp, #12]
 800b4a8:	4654      	mov	r4, sl
 800b4aa:	00a2      	lsls	r2, r4, #2
 800b4ac:	9205      	str	r2, [sp, #20]
 800b4ae:	aa58      	add	r2, sp, #352	@ 0x160
 800b4b0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b4b4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b4b8:	a944      	add	r1, sp, #272	@ 0x110
 800b4ba:	aa08      	add	r2, sp, #32
 800b4bc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b4c0:	4694      	mov	ip, r2
 800b4c2:	4626      	mov	r6, r4
 800b4c4:	2e00      	cmp	r6, #0
 800b4c6:	f1a0 0004 	sub.w	r0, r0, #4
 800b4ca:	dc4c      	bgt.n	800b566 <__kernel_rem_pio2f+0x18a>
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b4d2:	f000 f9f5 	bl	800b8c0 <scalbnf>
 800b4d6:	eeb0 8a40 	vmov.f32	s16, s0
 800b4da:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b4de:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b4e2:	f000 fa53 	bl	800b98c <floorf>
 800b4e6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b4ea:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b4ee:	2d00      	cmp	r5, #0
 800b4f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4f4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b4f8:	ee17 9a90 	vmov	r9, s15
 800b4fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b500:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b504:	dd41      	ble.n	800b58a <__kernel_rem_pio2f+0x1ae>
 800b506:	f104 3cff 	add.w	ip, r4, #4294967295
 800b50a:	a908      	add	r1, sp, #32
 800b50c:	f1c5 0e08 	rsb	lr, r5, #8
 800b510:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b514:	fa46 f00e 	asr.w	r0, r6, lr
 800b518:	4481      	add	r9, r0
 800b51a:	fa00 f00e 	lsl.w	r0, r0, lr
 800b51e:	1a36      	subs	r6, r6, r0
 800b520:	f1c5 0007 	rsb	r0, r5, #7
 800b524:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b528:	4106      	asrs	r6, r0
 800b52a:	2e00      	cmp	r6, #0
 800b52c:	dd3c      	ble.n	800b5a8 <__kernel_rem_pio2f+0x1cc>
 800b52e:	f04f 0e00 	mov.w	lr, #0
 800b532:	f109 0901 	add.w	r9, r9, #1
 800b536:	4670      	mov	r0, lr
 800b538:	4574      	cmp	r4, lr
 800b53a:	dc68      	bgt.n	800b60e <__kernel_rem_pio2f+0x232>
 800b53c:	2d00      	cmp	r5, #0
 800b53e:	dd03      	ble.n	800b548 <__kernel_rem_pio2f+0x16c>
 800b540:	2d01      	cmp	r5, #1
 800b542:	d074      	beq.n	800b62e <__kernel_rem_pio2f+0x252>
 800b544:	2d02      	cmp	r5, #2
 800b546:	d07d      	beq.n	800b644 <__kernel_rem_pio2f+0x268>
 800b548:	2e02      	cmp	r6, #2
 800b54a:	d12d      	bne.n	800b5a8 <__kernel_rem_pio2f+0x1cc>
 800b54c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b550:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b554:	b340      	cbz	r0, 800b5a8 <__kernel_rem_pio2f+0x1cc>
 800b556:	4628      	mov	r0, r5
 800b558:	9306      	str	r3, [sp, #24]
 800b55a:	f000 f9b1 	bl	800b8c0 <scalbnf>
 800b55e:	9b06      	ldr	r3, [sp, #24]
 800b560:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b564:	e020      	b.n	800b5a8 <__kernel_rem_pio2f+0x1cc>
 800b566:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b56a:	3e01      	subs	r6, #1
 800b56c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b574:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b578:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b57c:	ecac 0a01 	vstmia	ip!, {s0}
 800b580:	ed90 0a00 	vldr	s0, [r0]
 800b584:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b588:	e79c      	b.n	800b4c4 <__kernel_rem_pio2f+0xe8>
 800b58a:	d105      	bne.n	800b598 <__kernel_rem_pio2f+0x1bc>
 800b58c:	1e60      	subs	r0, r4, #1
 800b58e:	a908      	add	r1, sp, #32
 800b590:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b594:	11f6      	asrs	r6, r6, #7
 800b596:	e7c8      	b.n	800b52a <__kernel_rem_pio2f+0x14e>
 800b598:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b59c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a4:	da31      	bge.n	800b60a <__kernel_rem_pio2f+0x22e>
 800b5a6:	2600      	movs	r6, #0
 800b5a8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b0:	f040 8098 	bne.w	800b6e4 <__kernel_rem_pio2f+0x308>
 800b5b4:	1e60      	subs	r0, r4, #1
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	4550      	cmp	r0, sl
 800b5ba:	da4b      	bge.n	800b654 <__kernel_rem_pio2f+0x278>
 800b5bc:	2a00      	cmp	r2, #0
 800b5be:	d065      	beq.n	800b68c <__kernel_rem_pio2f+0x2b0>
 800b5c0:	3c01      	subs	r4, #1
 800b5c2:	ab08      	add	r3, sp, #32
 800b5c4:	3d08      	subs	r5, #8
 800b5c6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0f8      	beq.n	800b5c0 <__kernel_rem_pio2f+0x1e4>
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b5d4:	f000 f974 	bl	800b8c0 <scalbnf>
 800b5d8:	1c63      	adds	r3, r4, #1
 800b5da:	aa44      	add	r2, sp, #272	@ 0x110
 800b5dc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b6dc <__kernel_rem_pio2f+0x300>
 800b5e0:	0099      	lsls	r1, r3, #2
 800b5e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b5e6:	4623      	mov	r3, r4
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f280 80a9 	bge.w	800b740 <__kernel_rem_pio2f+0x364>
 800b5ee:	4623      	mov	r3, r4
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f2c0 80c7 	blt.w	800b784 <__kernel_rem_pio2f+0x3a8>
 800b5f6:	aa44      	add	r2, sp, #272	@ 0x110
 800b5f8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b5fc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b6d4 <__kernel_rem_pio2f+0x2f8>
 800b600:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b6e0 <__kernel_rem_pio2f+0x304>
 800b604:	2000      	movs	r0, #0
 800b606:	1ae2      	subs	r2, r4, r3
 800b608:	e0b1      	b.n	800b76e <__kernel_rem_pio2f+0x392>
 800b60a:	2602      	movs	r6, #2
 800b60c:	e78f      	b.n	800b52e <__kernel_rem_pio2f+0x152>
 800b60e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b612:	b948      	cbnz	r0, 800b628 <__kernel_rem_pio2f+0x24c>
 800b614:	b121      	cbz	r1, 800b620 <__kernel_rem_pio2f+0x244>
 800b616:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b61a:	f842 1c04 	str.w	r1, [r2, #-4]
 800b61e:	2101      	movs	r1, #1
 800b620:	f10e 0e01 	add.w	lr, lr, #1
 800b624:	4608      	mov	r0, r1
 800b626:	e787      	b.n	800b538 <__kernel_rem_pio2f+0x15c>
 800b628:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b62c:	e7f5      	b.n	800b61a <__kernel_rem_pio2f+0x23e>
 800b62e:	f104 3cff 	add.w	ip, r4, #4294967295
 800b632:	aa08      	add	r2, sp, #32
 800b634:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b638:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b63c:	a908      	add	r1, sp, #32
 800b63e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b642:	e781      	b.n	800b548 <__kernel_rem_pio2f+0x16c>
 800b644:	f104 3cff 	add.w	ip, r4, #4294967295
 800b648:	aa08      	add	r2, sp, #32
 800b64a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b64e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b652:	e7f3      	b.n	800b63c <__kernel_rem_pio2f+0x260>
 800b654:	a908      	add	r1, sp, #32
 800b656:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b65a:	3801      	subs	r0, #1
 800b65c:	430a      	orrs	r2, r1
 800b65e:	e7ab      	b.n	800b5b8 <__kernel_rem_pio2f+0x1dc>
 800b660:	3201      	adds	r2, #1
 800b662:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b666:	2e00      	cmp	r6, #0
 800b668:	d0fa      	beq.n	800b660 <__kernel_rem_pio2f+0x284>
 800b66a:	9905      	ldr	r1, [sp, #20]
 800b66c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b670:	eb0d 0001 	add.w	r0, sp, r1
 800b674:	18e6      	adds	r6, r4, r3
 800b676:	a91c      	add	r1, sp, #112	@ 0x70
 800b678:	f104 0c01 	add.w	ip, r4, #1
 800b67c:	384c      	subs	r0, #76	@ 0x4c
 800b67e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b682:	4422      	add	r2, r4
 800b684:	4562      	cmp	r2, ip
 800b686:	da04      	bge.n	800b692 <__kernel_rem_pio2f+0x2b6>
 800b688:	4614      	mov	r4, r2
 800b68a:	e70e      	b.n	800b4aa <__kernel_rem_pio2f+0xce>
 800b68c:	9804      	ldr	r0, [sp, #16]
 800b68e:	2201      	movs	r2, #1
 800b690:	e7e7      	b.n	800b662 <__kernel_rem_pio2f+0x286>
 800b692:	9903      	ldr	r1, [sp, #12]
 800b694:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b698:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b69c:	9105      	str	r1, [sp, #20]
 800b69e:	ee07 1a90 	vmov	s15, r1
 800b6a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6a6:	2400      	movs	r4, #0
 800b6a8:	ece6 7a01 	vstmia	r6!, {s15}
 800b6ac:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b6e0 <__kernel_rem_pio2f+0x304>
 800b6b0:	46b1      	mov	r9, r6
 800b6b2:	455c      	cmp	r4, fp
 800b6b4:	dd04      	ble.n	800b6c0 <__kernel_rem_pio2f+0x2e4>
 800b6b6:	ece0 7a01 	vstmia	r0!, {s15}
 800b6ba:	f10c 0c01 	add.w	ip, ip, #1
 800b6be:	e7e1      	b.n	800b684 <__kernel_rem_pio2f+0x2a8>
 800b6c0:	ecfe 6a01 	vldmia	lr!, {s13}
 800b6c4:	ed39 7a01 	vldmdb	r9!, {s14}
 800b6c8:	3401      	adds	r4, #1
 800b6ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b6ce:	e7f0      	b.n	800b6b2 <__kernel_rem_pio2f+0x2d6>
 800b6d0:	0800bfe8 	.word	0x0800bfe8
 800b6d4:	0800bfbc 	.word	0x0800bfbc
 800b6d8:	43800000 	.word	0x43800000
 800b6dc:	3b800000 	.word	0x3b800000
 800b6e0:	00000000 	.word	0x00000000
 800b6e4:	9b02      	ldr	r3, [sp, #8]
 800b6e6:	eeb0 0a48 	vmov.f32	s0, s16
 800b6ea:	eba3 0008 	sub.w	r0, r3, r8
 800b6ee:	f000 f8e7 	bl	800b8c0 <scalbnf>
 800b6f2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b6d8 <__kernel_rem_pio2f+0x2fc>
 800b6f6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fe:	db19      	blt.n	800b734 <__kernel_rem_pio2f+0x358>
 800b700:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b6dc <__kernel_rem_pio2f+0x300>
 800b704:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b708:	aa08      	add	r2, sp, #32
 800b70a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b70e:	3508      	adds	r5, #8
 800b710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b714:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b71c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b720:	ee10 3a10 	vmov	r3, s0
 800b724:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b728:	ee17 3a90 	vmov	r3, s15
 800b72c:	3401      	adds	r4, #1
 800b72e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b732:	e74c      	b.n	800b5ce <__kernel_rem_pio2f+0x1f2>
 800b734:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b738:	aa08      	add	r2, sp, #32
 800b73a:	ee10 3a10 	vmov	r3, s0
 800b73e:	e7f6      	b.n	800b72e <__kernel_rem_pio2f+0x352>
 800b740:	a808      	add	r0, sp, #32
 800b742:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b746:	9001      	str	r0, [sp, #4]
 800b748:	ee07 0a90 	vmov	s15, r0
 800b74c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b750:	3b01      	subs	r3, #1
 800b752:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b756:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b75a:	ed62 7a01 	vstmdb	r2!, {s15}
 800b75e:	e743      	b.n	800b5e8 <__kernel_rem_pio2f+0x20c>
 800b760:	ecfc 6a01 	vldmia	ip!, {s13}
 800b764:	ecb5 7a01 	vldmia	r5!, {s14}
 800b768:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b76c:	3001      	adds	r0, #1
 800b76e:	4550      	cmp	r0, sl
 800b770:	dc01      	bgt.n	800b776 <__kernel_rem_pio2f+0x39a>
 800b772:	4282      	cmp	r2, r0
 800b774:	daf4      	bge.n	800b760 <__kernel_rem_pio2f+0x384>
 800b776:	a858      	add	r0, sp, #352	@ 0x160
 800b778:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b77c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800b780:	3b01      	subs	r3, #1
 800b782:	e735      	b.n	800b5f0 <__kernel_rem_pio2f+0x214>
 800b784:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b786:	2b02      	cmp	r3, #2
 800b788:	dc09      	bgt.n	800b79e <__kernel_rem_pio2f+0x3c2>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	dc2b      	bgt.n	800b7e6 <__kernel_rem_pio2f+0x40a>
 800b78e:	d044      	beq.n	800b81a <__kernel_rem_pio2f+0x43e>
 800b790:	f009 0007 	and.w	r0, r9, #7
 800b794:	b059      	add	sp, #356	@ 0x164
 800b796:	ecbd 8b04 	vpop	{d8-d9}
 800b79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	d1f5      	bne.n	800b790 <__kernel_rem_pio2f+0x3b4>
 800b7a4:	aa30      	add	r2, sp, #192	@ 0xc0
 800b7a6:	1f0b      	subs	r3, r1, #4
 800b7a8:	4413      	add	r3, r2
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f1a2 0204 	sub.w	r2, r2, #4
 800b7b4:	dc52      	bgt.n	800b85c <__kernel_rem_pio2f+0x480>
 800b7b6:	4622      	mov	r2, r4
 800b7b8:	2a01      	cmp	r2, #1
 800b7ba:	f1a3 0304 	sub.w	r3, r3, #4
 800b7be:	dc5d      	bgt.n	800b87c <__kernel_rem_pio2f+0x4a0>
 800b7c0:	ab30      	add	r3, sp, #192	@ 0xc0
 800b7c2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800b6e0 <__kernel_rem_pio2f+0x304>
 800b7c6:	440b      	add	r3, r1
 800b7c8:	2c01      	cmp	r4, #1
 800b7ca:	dc67      	bgt.n	800b89c <__kernel_rem_pio2f+0x4c0>
 800b7cc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800b7d0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800b7d4:	2e00      	cmp	r6, #0
 800b7d6:	d167      	bne.n	800b8a8 <__kernel_rem_pio2f+0x4cc>
 800b7d8:	edc7 6a00 	vstr	s13, [r7]
 800b7dc:	ed87 7a01 	vstr	s14, [r7, #4]
 800b7e0:	edc7 7a02 	vstr	s15, [r7, #8]
 800b7e4:	e7d4      	b.n	800b790 <__kernel_rem_pio2f+0x3b4>
 800b7e6:	ab30      	add	r3, sp, #192	@ 0xc0
 800b7e8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800b6e0 <__kernel_rem_pio2f+0x304>
 800b7ec:	440b      	add	r3, r1
 800b7ee:	4622      	mov	r2, r4
 800b7f0:	2a00      	cmp	r2, #0
 800b7f2:	da24      	bge.n	800b83e <__kernel_rem_pio2f+0x462>
 800b7f4:	b34e      	cbz	r6, 800b84a <__kernel_rem_pio2f+0x46e>
 800b7f6:	eef1 7a47 	vneg.f32	s15, s14
 800b7fa:	edc7 7a00 	vstr	s15, [r7]
 800b7fe:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800b802:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b806:	aa31      	add	r2, sp, #196	@ 0xc4
 800b808:	2301      	movs	r3, #1
 800b80a:	429c      	cmp	r4, r3
 800b80c:	da20      	bge.n	800b850 <__kernel_rem_pio2f+0x474>
 800b80e:	b10e      	cbz	r6, 800b814 <__kernel_rem_pio2f+0x438>
 800b810:	eef1 7a67 	vneg.f32	s15, s15
 800b814:	edc7 7a01 	vstr	s15, [r7, #4]
 800b818:	e7ba      	b.n	800b790 <__kernel_rem_pio2f+0x3b4>
 800b81a:	ab30      	add	r3, sp, #192	@ 0xc0
 800b81c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800b6e0 <__kernel_rem_pio2f+0x304>
 800b820:	440b      	add	r3, r1
 800b822:	2c00      	cmp	r4, #0
 800b824:	da05      	bge.n	800b832 <__kernel_rem_pio2f+0x456>
 800b826:	b10e      	cbz	r6, 800b82c <__kernel_rem_pio2f+0x450>
 800b828:	eef1 7a67 	vneg.f32	s15, s15
 800b82c:	edc7 7a00 	vstr	s15, [r7]
 800b830:	e7ae      	b.n	800b790 <__kernel_rem_pio2f+0x3b4>
 800b832:	ed33 7a01 	vldmdb	r3!, {s14}
 800b836:	3c01      	subs	r4, #1
 800b838:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b83c:	e7f1      	b.n	800b822 <__kernel_rem_pio2f+0x446>
 800b83e:	ed73 7a01 	vldmdb	r3!, {s15}
 800b842:	3a01      	subs	r2, #1
 800b844:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b848:	e7d2      	b.n	800b7f0 <__kernel_rem_pio2f+0x414>
 800b84a:	eef0 7a47 	vmov.f32	s15, s14
 800b84e:	e7d4      	b.n	800b7fa <__kernel_rem_pio2f+0x41e>
 800b850:	ecb2 7a01 	vldmia	r2!, {s14}
 800b854:	3301      	adds	r3, #1
 800b856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b85a:	e7d6      	b.n	800b80a <__kernel_rem_pio2f+0x42e>
 800b85c:	edd2 7a00 	vldr	s15, [r2]
 800b860:	edd2 6a01 	vldr	s13, [r2, #4]
 800b864:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b868:	3801      	subs	r0, #1
 800b86a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b86e:	ed82 7a00 	vstr	s14, [r2]
 800b872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b876:	edc2 7a01 	vstr	s15, [r2, #4]
 800b87a:	e798      	b.n	800b7ae <__kernel_rem_pio2f+0x3d2>
 800b87c:	edd3 7a00 	vldr	s15, [r3]
 800b880:	edd3 6a01 	vldr	s13, [r3, #4]
 800b884:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b888:	3a01      	subs	r2, #1
 800b88a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b88e:	ed83 7a00 	vstr	s14, [r3]
 800b892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b896:	edc3 7a01 	vstr	s15, [r3, #4]
 800b89a:	e78d      	b.n	800b7b8 <__kernel_rem_pio2f+0x3dc>
 800b89c:	ed33 7a01 	vldmdb	r3!, {s14}
 800b8a0:	3c01      	subs	r4, #1
 800b8a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b8a6:	e78f      	b.n	800b7c8 <__kernel_rem_pio2f+0x3ec>
 800b8a8:	eef1 6a66 	vneg.f32	s13, s13
 800b8ac:	eeb1 7a47 	vneg.f32	s14, s14
 800b8b0:	edc7 6a00 	vstr	s13, [r7]
 800b8b4:	ed87 7a01 	vstr	s14, [r7, #4]
 800b8b8:	eef1 7a67 	vneg.f32	s15, s15
 800b8bc:	e790      	b.n	800b7e0 <__kernel_rem_pio2f+0x404>
 800b8be:	bf00      	nop

0800b8c0 <scalbnf>:
 800b8c0:	ee10 3a10 	vmov	r3, s0
 800b8c4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b8c8:	d02b      	beq.n	800b922 <scalbnf+0x62>
 800b8ca:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b8ce:	d302      	bcc.n	800b8d6 <scalbnf+0x16>
 800b8d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b8d4:	4770      	bx	lr
 800b8d6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b8da:	d123      	bne.n	800b924 <scalbnf+0x64>
 800b8dc:	4b24      	ldr	r3, [pc, #144]	@ (800b970 <scalbnf+0xb0>)
 800b8de:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b974 <scalbnf+0xb4>
 800b8e2:	4298      	cmp	r0, r3
 800b8e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b8e8:	db17      	blt.n	800b91a <scalbnf+0x5a>
 800b8ea:	ee10 3a10 	vmov	r3, s0
 800b8ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b8f2:	3a19      	subs	r2, #25
 800b8f4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b8f8:	4288      	cmp	r0, r1
 800b8fa:	dd15      	ble.n	800b928 <scalbnf+0x68>
 800b8fc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b978 <scalbnf+0xb8>
 800b900:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b97c <scalbnf+0xbc>
 800b904:	ee10 3a10 	vmov	r3, s0
 800b908:	eeb0 7a67 	vmov.f32	s14, s15
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	bfb8      	it	lt
 800b910:	eef0 7a66 	vmovlt.f32	s15, s13
 800b914:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b918:	4770      	bx	lr
 800b91a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b980 <scalbnf+0xc0>
 800b91e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b922:	4770      	bx	lr
 800b924:	0dd2      	lsrs	r2, r2, #23
 800b926:	e7e5      	b.n	800b8f4 <scalbnf+0x34>
 800b928:	4410      	add	r0, r2
 800b92a:	28fe      	cmp	r0, #254	@ 0xfe
 800b92c:	dce6      	bgt.n	800b8fc <scalbnf+0x3c>
 800b92e:	2800      	cmp	r0, #0
 800b930:	dd06      	ble.n	800b940 <scalbnf+0x80>
 800b932:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b936:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b93a:	ee00 3a10 	vmov	s0, r3
 800b93e:	4770      	bx	lr
 800b940:	f110 0f16 	cmn.w	r0, #22
 800b944:	da09      	bge.n	800b95a <scalbnf+0x9a>
 800b946:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b980 <scalbnf+0xc0>
 800b94a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b984 <scalbnf+0xc4>
 800b94e:	ee10 3a10 	vmov	r3, s0
 800b952:	eeb0 7a67 	vmov.f32	s14, s15
 800b956:	2b00      	cmp	r3, #0
 800b958:	e7d9      	b.n	800b90e <scalbnf+0x4e>
 800b95a:	3019      	adds	r0, #25
 800b95c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b960:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b964:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b988 <scalbnf+0xc8>
 800b968:	ee07 3a90 	vmov	s15, r3
 800b96c:	e7d7      	b.n	800b91e <scalbnf+0x5e>
 800b96e:	bf00      	nop
 800b970:	ffff3cb0 	.word	0xffff3cb0
 800b974:	4c000000 	.word	0x4c000000
 800b978:	7149f2ca 	.word	0x7149f2ca
 800b97c:	f149f2ca 	.word	0xf149f2ca
 800b980:	0da24260 	.word	0x0da24260
 800b984:	8da24260 	.word	0x8da24260
 800b988:	33000000 	.word	0x33000000

0800b98c <floorf>:
 800b98c:	ee10 3a10 	vmov	r3, s0
 800b990:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b994:	3a7f      	subs	r2, #127	@ 0x7f
 800b996:	2a16      	cmp	r2, #22
 800b998:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b99c:	dc2b      	bgt.n	800b9f6 <floorf+0x6a>
 800b99e:	2a00      	cmp	r2, #0
 800b9a0:	da12      	bge.n	800b9c8 <floorf+0x3c>
 800b9a2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ba08 <floorf+0x7c>
 800b9a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b9aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b2:	dd06      	ble.n	800b9c2 <floorf+0x36>
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	da24      	bge.n	800ba02 <floorf+0x76>
 800b9b8:	2900      	cmp	r1, #0
 800b9ba:	4b14      	ldr	r3, [pc, #80]	@ (800ba0c <floorf+0x80>)
 800b9bc:	bf08      	it	eq
 800b9be:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b9c2:	ee00 3a10 	vmov	s0, r3
 800b9c6:	4770      	bx	lr
 800b9c8:	4911      	ldr	r1, [pc, #68]	@ (800ba10 <floorf+0x84>)
 800b9ca:	4111      	asrs	r1, r2
 800b9cc:	420b      	tst	r3, r1
 800b9ce:	d0fa      	beq.n	800b9c6 <floorf+0x3a>
 800b9d0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800ba08 <floorf+0x7c>
 800b9d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b9d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e0:	ddef      	ble.n	800b9c2 <floorf+0x36>
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	bfbe      	ittt	lt
 800b9e6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800b9ea:	fa40 f202 	asrlt.w	r2, r0, r2
 800b9ee:	189b      	addlt	r3, r3, r2
 800b9f0:	ea23 0301 	bic.w	r3, r3, r1
 800b9f4:	e7e5      	b.n	800b9c2 <floorf+0x36>
 800b9f6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b9fa:	d3e4      	bcc.n	800b9c6 <floorf+0x3a>
 800b9fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ba00:	4770      	bx	lr
 800ba02:	2300      	movs	r3, #0
 800ba04:	e7dd      	b.n	800b9c2 <floorf+0x36>
 800ba06:	bf00      	nop
 800ba08:	7149f2ca 	.word	0x7149f2ca
 800ba0c:	bf800000 	.word	0xbf800000
 800ba10:	007fffff 	.word	0x007fffff

0800ba14 <_init>:
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba16:	bf00      	nop
 800ba18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba1a:	bc08      	pop	{r3}
 800ba1c:	469e      	mov	lr, r3
 800ba1e:	4770      	bx	lr

0800ba20 <_fini>:
 800ba20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba22:	bf00      	nop
 800ba24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba26:	bc08      	pop	{r3}
 800ba28:	469e      	mov	lr, r3
 800ba2a:	4770      	bx	lr
