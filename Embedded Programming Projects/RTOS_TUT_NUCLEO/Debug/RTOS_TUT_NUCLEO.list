
RTOS_TUT_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b5c  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08004c1c  08004c1c  00005c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e20  08004e20  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004e20  08004e20  00005e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e28  08004e28  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e28  08004e28  00005e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e2c  08004e2c  00005e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004e30  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f9c  20000060  08004e90  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ffc  08004e90  00006ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bb5  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c37  00000000  00000000  00019c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0001c878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e98  00000000  00000000  0001db20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e64  00000000  00000000  0001e9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e59  00000000  00000000  0002181c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a8d1  00000000  00000000  00036675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0f46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004660  00000000  00000000  000d0f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d55ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c04 	.word	0x08004c04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08004c04 	.word	0x08004c04

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b5b0      	push	{r4, r5, r7, lr}
 800045e:	b090      	sub	sp, #64	@ 0x40
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000462:	f000 fb69 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000466:	f000 f84d 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046a:	f000 f8dd 	bl	8000628 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800046e:	f000 f8a7 	bl	80005c0 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 8000472:	2300      	movs	r3, #0
 8000474:	63fb      	str	r3, [r7, #60]	@ 0x3c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 8000476:	233c      	movs	r3, #60	@ 0x3c
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	2101      	movs	r1, #1
 800047c:	0018      	movs	r0, r3
 800047e:	f002 fba6 	bl	8002bce <osSemaphoreCreate>
 8000482:	0002      	movs	r2, r0
 8000484:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <main+0x8c>)
 8000486:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of NormalTask */
  osThreadDef(NormalTask, StartNormalTask, osPriorityNormal, 0, 128);
 8000488:	2528      	movs	r5, #40	@ 0x28
 800048a:	197b      	adds	r3, r7, r5
 800048c:	4a17      	ldr	r2, [pc, #92]	@ (80004ec <main+0x90>)
 800048e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000490:	c313      	stmia	r3!, {r0, r1, r4}
 8000492:	ca03      	ldmia	r2!, {r0, r1}
 8000494:	c303      	stmia	r3!, {r0, r1}
  NormalTaskHandle = osThreadCreate(osThread(NormalTask), NULL);
 8000496:	197b      	adds	r3, r7, r5
 8000498:	2100      	movs	r1, #0
 800049a:	0018      	movs	r0, r3
 800049c:	f002 fb5b 	bl	8002b56 <osThreadCreate>
 80004a0:	0002      	movs	r2, r0
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <main+0x94>)
 80004a4:	601a      	str	r2, [r3, #0]

  /* definition and creation of HighTasl */
  osThreadDef(HighTasl, StartHighTask, osPriorityAboveNormal, 0, 128);
 80004a6:	2514      	movs	r5, #20
 80004a8:	197b      	adds	r3, r7, r5
 80004aa:	4a12      	ldr	r2, [pc, #72]	@ (80004f4 <main+0x98>)
 80004ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004ae:	c313      	stmia	r3!, {r0, r1, r4}
 80004b0:	ca03      	ldmia	r2!, {r0, r1}
 80004b2:	c303      	stmia	r3!, {r0, r1}
  HighTaslHandle = osThreadCreate(osThread(HighTasl), NULL);
 80004b4:	197b      	adds	r3, r7, r5
 80004b6:	2100      	movs	r1, #0
 80004b8:	0018      	movs	r0, r3
 80004ba:	f002 fb4c 	bl	8002b56 <osThreadCreate>
 80004be:	0002      	movs	r2, r0
 80004c0:	4b0d      	ldr	r3, [pc, #52]	@ (80004f8 <main+0x9c>)
 80004c2:	601a      	str	r2, [r3, #0]

  /* definition and creation of LowTask */
  osThreadDef(LowTask, StartLowTask, osPriorityBelowNormal, 0, 128);
 80004c4:	003b      	movs	r3, r7
 80004c6:	4a0d      	ldr	r2, [pc, #52]	@ (80004fc <main+0xa0>)
 80004c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004ca:	c313      	stmia	r3!, {r0, r1, r4}
 80004cc:	ca03      	ldmia	r2!, {r0, r1}
 80004ce:	c303      	stmia	r3!, {r0, r1}
  LowTaskHandle = osThreadCreate(osThread(LowTask), NULL);
 80004d0:	003b      	movs	r3, r7
 80004d2:	2100      	movs	r1, #0
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 fb3e 	bl	8002b56 <osThreadCreate>
 80004da:	0002      	movs	r2, r0
 80004dc:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <main+0xa4>)
 80004de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004e0:	f002 fb31 	bl	8002b46 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	e7fd      	b.n	80004e4 <main+0x88>
 80004e8:	2000011c 	.word	0x2000011c
 80004ec:	08004c28 	.word	0x08004c28
 80004f0:	20000110 	.word	0x20000110
 80004f4:	08004c48 	.word	0x08004c48
 80004f8:	20000114 	.word	0x20000114
 80004fc:	08004c64 	.word	0x08004c64
 8000500:	20000118 	.word	0x20000118

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b093      	sub	sp, #76	@ 0x4c
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	2410      	movs	r4, #16
 800050c:	193b      	adds	r3, r7, r4
 800050e:	0018      	movs	r0, r3
 8000510:	2338      	movs	r3, #56	@ 0x38
 8000512:	001a      	movs	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f004 fa83 	bl	8004a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051a:	003b      	movs	r3, r7
 800051c:	0018      	movs	r0, r3
 800051e:	2310      	movs	r3, #16
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f004 fa7c 	bl	8004a20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	2380      	movs	r3, #128	@ 0x80
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fd8b 	bl	8001048 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2202      	movs	r2, #2
 8000536:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2280      	movs	r2, #128	@ 0x80
 800053c:	0052      	lsls	r2, r2, #1
 800053e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000540:	0021      	movs	r1, r4
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2240      	movs	r2, #64	@ 0x40
 800054c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2202      	movs	r2, #2
 8000552:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2202      	movs	r2, #2
 8000558:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2208      	movs	r2, #8
 8000564:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	0292      	lsls	r2, r2, #10
 800056c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2280      	movs	r2, #128	@ 0x80
 8000572:	0492      	lsls	r2, r2, #18
 8000574:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2280      	movs	r2, #128	@ 0x80
 800057a:	0592      	lsls	r2, r2, #22
 800057c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	187b      	adds	r3, r7, r1
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fdad 	bl	80010e0 <HAL_RCC_OscConfig>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800058a:	f000 f991 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	003b      	movs	r3, r7
 8000590:	2207      	movs	r2, #7
 8000592:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	003b      	movs	r3, r7
 8000596:	2202      	movs	r2, #2
 8000598:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	003b      	movs	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	003b      	movs	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a6:	003b      	movs	r3, r7
 80005a8:	2102      	movs	r1, #2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 f8b2 	bl	8001714 <HAL_RCC_ClockConfig>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005b4:	f000 f97c 	bl	80008b0 <Error_Handler>
  }
}
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b013      	add	sp, #76	@ 0x4c
 80005be:	bd90      	pop	{r4, r7, pc}

080005c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 80005c6:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <MX_USART2_UART_Init+0x64>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 80005cc:	22e1      	movs	r2, #225	@ 0xe1
 80005ce:	0252      	lsls	r2, r2, #9
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000602:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 8000604:	2200      	movs	r2, #0
 8000606:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <MX_USART2_UART_Init+0x60>)
 800060a:	0018      	movs	r0, r3
 800060c:	f001 fcce 	bl	8001fac <HAL_UART_Init>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000614:	f000 f94c 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000618:	46c0      	nop			@ (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	2000007c 	.word	0x2000007c
 8000624:	40004400 	.word	0x40004400

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b089      	sub	sp, #36	@ 0x24
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	240c      	movs	r4, #12
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0018      	movs	r0, r3
 8000634:	2314      	movs	r3, #20
 8000636:	001a      	movs	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f004 f9f1 	bl	8004a20 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000642:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000644:	2104      	movs	r1, #4
 8000646:	430a      	orrs	r2, r1
 8000648:	635a      	str	r2, [r3, #52]	@ 0x34
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 800064c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800064e:	2204      	movs	r2, #4
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000656:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800065a:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 800065c:	2120      	movs	r1, #32
 800065e:	430a      	orrs	r2, r1
 8000660:	635a      	str	r2, [r3, #52]	@ 0x34
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000666:	2220      	movs	r2, #32
 8000668:	4013      	ands	r3, r2
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000672:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	635a      	str	r2, [r3, #52]	@ 0x34
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 800067c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 8000688:	2200      	movs	r2, #0
 800068a:	2140      	movs	r1, #64	@ 0x40
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fcbe 	bl	800100e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2204      	movs	r2, #4
 8000696:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2201      	movs	r2, #1
 80006a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	4a10      	ldr	r2, [pc, #64]	@ (80006e8 <MX_GPIO_Init+0xc0>)
 80006a8:	0019      	movs	r1, r3
 80006aa:	0010      	movs	r0, r2
 80006ac:	f000 fb2e 	bl	8000d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006b0:	0021      	movs	r1, r4
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2240      	movs	r2, #64	@ 0x40
 80006b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2201      	movs	r2, #1
 80006bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 80006ce:	0019      	movs	r1, r3
 80006d0:	0010      	movs	r0, r2
 80006d2:	f000 fb1b 	bl	8000d0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b009      	add	sp, #36	@ 0x24
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	40021000 	.word	0x40021000
 80006e4:	50000800 	.word	0x50000800
 80006e8:	50001400 	.word	0x50001400

080006ec <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void const * argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
		  char *str1 = "Entered NormalTask\n\r";
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <StartNormalTask+0x50>)
 80006f6:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 500);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff fd04 	bl	8000108 <strlen>
 8000700:	0003      	movs	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	23fa      	movs	r3, #250	@ 0xfa
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	480d      	ldr	r0, [pc, #52]	@ (8000740 <StartNormalTask+0x54>)
 800070c:	f001 fca4 	bl	8002058 <HAL_UART_Transmit>

		  char *str2 = "Leaving NormalTask\n\n\r";
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <StartNormalTask+0x58>)
 8000712:	60bb      	str	r3, [r7, #8]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), 500);
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	0018      	movs	r0, r3
 8000718:	f7ff fcf6 	bl	8000108 <strlen>
 800071c:	0003      	movs	r3, r0
 800071e:	b29a      	uxth	r2, r3
 8000720:	23fa      	movs	r3, #250	@ 0xfa
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	68b9      	ldr	r1, [r7, #8]
 8000726:	4806      	ldr	r0, [pc, #24]	@ (8000740 <StartNormalTask+0x54>)
 8000728:	f001 fc96 	bl	8002058 <HAL_UART_Transmit>

		  osDelay(500);
 800072c:	23fa      	movs	r3, #250	@ 0xfa
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	0018      	movs	r0, r3
 8000732:	f002 fa38 	bl	8002ba6 <osDelay>
	  {
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	e7dc      	b.n	80006f4 <StartNormalTask+0x8>
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	08004c78 	.word	0x08004c78
 8000740:	2000007c 	.word	0x2000007c
 8000744:	08004c90 	.word	0x08004c90

08000748 <StartHighTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHighTask */
void StartHighTask(void const * argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHighTask */
  /* Infinite loop */
	  for(;;)
	  {
		  char *str1 = "Entered HighTask and waiting for semaphore\n\r";
 8000750:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <StartHighTask+0x84>)
 8000752:	617b      	str	r3, [r7, #20]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 500);
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff fcd6 	bl	8000108 <strlen>
 800075c:	0003      	movs	r3, r0
 800075e:	b29a      	uxth	r2, r3
 8000760:	23fa      	movs	r3, #250	@ 0xfa
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	6979      	ldr	r1, [r7, #20]
 8000766:	481a      	ldr	r0, [pc, #104]	@ (80007d0 <StartHighTask+0x88>)
 8000768:	f001 fc76 	bl	8002058 <HAL_UART_Transmit>

		  osSemaphoreWait(BinSemHandle, osWaitForever);
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <StartHighTask+0x8c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2201      	movs	r2, #1
 8000772:	4252      	negs	r2, r2
 8000774:	0011      	movs	r1, r2
 8000776:	0018      	movs	r0, r3
 8000778:	f002 fa48 	bl	8002c0c <osSemaphoreWait>

		  char *str3 = "Semaphore acquired by HighTask\n\r";
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <StartHighTask+0x90>)
 800077e:	613b      	str	r3, [r7, #16]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen(str3), 500);
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff fcc0 	bl	8000108 <strlen>
 8000788:	0003      	movs	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	23fa      	movs	r3, #250	@ 0xfa
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	6939      	ldr	r1, [r7, #16]
 8000792:	480f      	ldr	r0, [pc, #60]	@ (80007d0 <StartHighTask+0x88>)
 8000794:	f001 fc60 	bl	8002058 <HAL_UART_Transmit>

		  char *str2 = "Leaving HighTask and releasing semaphore\n\n\r";
 8000798:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <StartHighTask+0x94>)
 800079a:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), 500);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fcb2 	bl	8000108 <strlen>
 80007a4:	0003      	movs	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	23fa      	movs	r3, #250	@ 0xfa
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	68f9      	ldr	r1, [r7, #12]
 80007ae:	4808      	ldr	r0, [pc, #32]	@ (80007d0 <StartHighTask+0x88>)
 80007b0:	f001 fc52 	bl	8002058 <HAL_UART_Transmit>

		  osSemaphoreRelease(BinSemHandle);
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <StartHighTask+0x8c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 fa71 	bl	8002ca0 <osSemaphoreRelease>

		  osDelay(500);
 80007be:	23fa      	movs	r3, #250	@ 0xfa
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 f9ef 	bl	8002ba6 <osDelay>
	  {
 80007c8:	46c0      	nop			@ (mov r8, r8)
 80007ca:	e7c1      	b.n	8000750 <StartHighTask+0x8>
 80007cc:	08004ca8 	.word	0x08004ca8
 80007d0:	2000007c 	.word	0x2000007c
 80007d4:	2000011c 	.word	0x2000011c
 80007d8:	08004cd8 	.word	0x08004cd8
 80007dc:	08004cfc 	.word	0x08004cfc

080007e0 <StartLowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowTask */
void StartLowTask(void const * argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLowTask */
  /* Infinite loop */
	  for(;;)
	  {
		  char *str1 = "Entered LowTask and waiting for semaphore\n\r";
 80007e8:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <StartLowTask+0x94>)
 80007ea:	617b      	str	r3, [r7, #20]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 500);
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fc8a 	bl	8000108 <strlen>
 80007f4:	0003      	movs	r3, r0
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	23fa      	movs	r3, #250	@ 0xfa
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	6979      	ldr	r1, [r7, #20]
 80007fe:	481e      	ldr	r0, [pc, #120]	@ (8000878 <StartLowTask+0x98>)
 8000800:	f001 fc2a 	bl	8002058 <HAL_UART_Transmit>

		  osSemaphoreWait(BinSemHandle, osWaitForever);
 8000804:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <StartLowTask+0x9c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2201      	movs	r2, #1
 800080a:	4252      	negs	r2, r2
 800080c:	0011      	movs	r1, r2
 800080e:	0018      	movs	r0, r3
 8000810:	f002 f9fc 	bl	8002c0c <osSemaphoreWait>

		  char *str3 = "Semaphore acquired by LowTask\n\r";
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <StartLowTask+0xa0>)
 8000816:	613b      	str	r3, [r7, #16]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen(str3), 500);
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	0018      	movs	r0, r3
 800081c:	f7ff fc74 	bl	8000108 <strlen>
 8000820:	0003      	movs	r3, r0
 8000822:	b29a      	uxth	r2, r3
 8000824:	23fa      	movs	r3, #250	@ 0xfa
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	6939      	ldr	r1, [r7, #16]
 800082a:	4813      	ldr	r0, [pc, #76]	@ (8000878 <StartLowTask+0x98>)
 800082c:	f001 fc14 	bl	8002058 <HAL_UART_Transmit>

		  while(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin));
 8000830:	46c0      	nop			@ (mov r8, r8)
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <StartLowTask+0xa4>)
 8000834:	2104      	movs	r1, #4
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fbcc 	bl	8000fd4 <HAL_GPIO_ReadPin>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d1f8      	bne.n	8000832 <StartLowTask+0x52>

		  char *str2 = "Leaving LowTask and releasing semaphore\n\n\r";
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <StartLowTask+0xa8>)
 8000842:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), 500);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff fc5e 	bl	8000108 <strlen>
 800084c:	0003      	movs	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	23fa      	movs	r3, #250	@ 0xfa
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	68f9      	ldr	r1, [r7, #12]
 8000856:	4808      	ldr	r0, [pc, #32]	@ (8000878 <StartLowTask+0x98>)
 8000858:	f001 fbfe 	bl	8002058 <HAL_UART_Transmit>

		  osSemaphoreRelease(BinSemHandle);
 800085c:	4b07      	ldr	r3, [pc, #28]	@ (800087c <StartLowTask+0x9c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	0018      	movs	r0, r3
 8000862:	f002 fa1d 	bl	8002ca0 <osSemaphoreRelease>

		  osDelay(500);
 8000866:	23fa      	movs	r3, #250	@ 0xfa
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	0018      	movs	r0, r3
 800086c:	f002 f99b 	bl	8002ba6 <osDelay>
	  {
 8000870:	e7ba      	b.n	80007e8 <StartLowTask+0x8>
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	08004d28 	.word	0x08004d28
 8000878:	2000007c 	.word	0x2000007c
 800087c:	2000011c 	.word	0x2000011c
 8000880:	08004d54 	.word	0x08004d54
 8000884:	50001400 	.word	0x50001400
 8000888:	08004d74 	.word	0x08004d74

0800088c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d101      	bne.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089e:	f000 f96b 	bl	8000b78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b002      	add	sp, #8
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	40012c00 	.word	0x40012c00

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_MspInit+0x50>)
 80008c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <HAL_MspInit+0x50>)
 80008c8:	2101      	movs	r1, #1
 80008ca:	430a      	orrs	r2, r1
 80008cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80008ce:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <HAL_MspInit+0x50>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	2201      	movs	r2, #1
 80008d4:	4013      	ands	r3, r2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <HAL_MspInit+0x50>)
 80008dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <HAL_MspInit+0x50>)
 80008e0:	2180      	movs	r1, #128	@ 0x80
 80008e2:	0549      	lsls	r1, r1, #21
 80008e4:	430a      	orrs	r2, r1
 80008e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008e8:	4b08      	ldr	r3, [pc, #32]	@ (800090c <HAL_MspInit+0x50>)
 80008ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	055b      	lsls	r3, r3, #21
 80008f0:	4013      	ands	r3, r2
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80008f6:	2302      	movs	r3, #2
 80008f8:	425b      	negs	r3, r3
 80008fa:	2200      	movs	r2, #0
 80008fc:	2103      	movs	r1, #3
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 f9de 	bl	8000cc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000904:	46c0      	nop			@ (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b08b      	sub	sp, #44	@ 0x2c
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	2414      	movs	r4, #20
 800091a:	193b      	adds	r3, r7, r4
 800091c:	0018      	movs	r0, r3
 800091e:	2314      	movs	r3, #20
 8000920:	001a      	movs	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	f004 f87c 	bl	8004a20 <memset>
  if(huart->Instance==USART2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a1b      	ldr	r2, [pc, #108]	@ (800099c <HAL_UART_MspInit+0x8c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d130      	bne.n	8000994 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_UART_MspInit+0x90>)
 8000934:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_UART_MspInit+0x90>)
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	0289      	lsls	r1, r1, #10
 800093c:	430a      	orrs	r2, r1
 800093e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_UART_MspInit+0x90>)
 8000942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000944:	2380      	movs	r3, #128	@ 0x80
 8000946:	029b      	lsls	r3, r3, #10
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <HAL_UART_MspInit+0x90>)
 8000950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_UART_MspInit+0x90>)
 8000954:	2101      	movs	r1, #1
 8000956:	430a      	orrs	r2, r1
 8000958:	635a      	str	r2, [r3, #52]	@ 0x34
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_UART_MspInit+0x90>)
 800095c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800095e:	2201      	movs	r2, #1
 8000960:	4013      	ands	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000966:	0021      	movs	r1, r4
 8000968:	187b      	adds	r3, r7, r1
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2202      	movs	r2, #2
 8000972:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2201      	movs	r2, #1
 8000984:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	187a      	adds	r2, r7, r1
 8000988:	23a0      	movs	r3, #160	@ 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f000 f9bc 	bl	8000d0c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b00b      	add	sp, #44	@ 0x2c
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	40004400 	.word	0x40004400
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b5b0      	push	{r4, r5, r7, lr}
 80009a6:	b08c      	sub	sp, #48	@ 0x30
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009ac:	232b      	movs	r3, #43	@ 0x2b
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009b4:	4b38      	ldr	r3, [pc, #224]	@ (8000a98 <HAL_InitTick+0xf4>)
 80009b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009b8:	4b37      	ldr	r3, [pc, #220]	@ (8000a98 <HAL_InitTick+0xf4>)
 80009ba:	2180      	movs	r1, #128	@ 0x80
 80009bc:	0109      	lsls	r1, r1, #4
 80009be:	430a      	orrs	r2, r1
 80009c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80009c2:	4b35      	ldr	r3, [pc, #212]	@ (8000a98 <HAL_InitTick+0xf4>)
 80009c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009c6:	2380      	movs	r3, #128	@ 0x80
 80009c8:	011b      	lsls	r3, r3, #4
 80009ca:	4013      	ands	r3, r2
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d0:	230c      	movs	r3, #12
 80009d2:	18fa      	adds	r2, r7, r3
 80009d4:	2410      	movs	r4, #16
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 f844 	bl	8001a68 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d104      	bne.n	80009f6 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ec:	f001 f826 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
 80009f0:	0003      	movs	r3, r0
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009f4:	e004      	b.n	8000a00 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009f6:	f001 f821 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
 80009fa:	0003      	movs	r3, r0
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a02:	4926      	ldr	r1, [pc, #152]	@ (8000a9c <HAL_InitTick+0xf8>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff fb87 	bl	8000118 <__udivsi3>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a10:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <HAL_InitTick+0xfc>)
 8000a12:	4a24      	ldr	r2, [pc, #144]	@ (8000aa4 <HAL_InitTick+0x100>)
 8000a14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a16:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <HAL_InitTick+0xfc>)
 8000a18:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <HAL_InitTick+0x104>)
 8000a1a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a1c:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <HAL_InitTick+0xfc>)
 8000a1e:	6a3a      	ldr	r2, [r7, #32]
 8000a20:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <HAL_InitTick+0xfc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <HAL_InitTick+0xfc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <HAL_InitTick+0xfc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a34:	252b      	movs	r5, #43	@ 0x2b
 8000a36:	197c      	adds	r4, r7, r5
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_InitTick+0xfc>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 f83e 	bl	8001abc <HAL_TIM_Base_Init>
 8000a40:	0003      	movs	r3, r0
 8000a42:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000a44:	197b      	adds	r3, r7, r5
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d11e      	bne.n	8000a8a <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a4c:	197c      	adds	r4, r7, r5
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <HAL_InitTick+0xfc>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 f893 	bl	8001b7c <HAL_TIM_Base_Start_IT>
 8000a56:	0003      	movs	r3, r0
 8000a58:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000a5a:	197b      	adds	r3, r7, r5
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d113      	bne.n	8000a8a <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000a62:	200d      	movs	r0, #13
 8000a64:	f000 f941 	bl	8000cea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d809      	bhi.n	8000a82 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	0019      	movs	r1, r3
 8000a74:	200d      	movs	r0, #13
 8000a76:	f000 f923 	bl	8000cc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <HAL_InitTick+0x108>)
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	e003      	b.n	8000a8a <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000a82:	232b      	movs	r3, #43	@ 0x2b
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000a8a:	232b      	movs	r3, #43	@ 0x2b
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	781b      	ldrb	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b00c      	add	sp, #48	@ 0x30
 8000a96:	bdb0      	pop	{r4, r5, r7, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	000f4240 	.word	0x000f4240
 8000aa0:	20000120 	.word	0x20000120
 8000aa4:	40012c00 	.word	0x40012c00
 8000aa8:	000003e7 	.word	0x000003e7
 8000aac:	20000004 	.word	0x20000004

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 f8ac 	bl	8001c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	20000120 	.word	0x20000120

08000ad8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae8:	f7ff fff6 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b12:	f003 ffed 	bl	8004af0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b16:	f7ff fca1 	bl	800045c <main>

08000b1a <LoopForever>:

LoopForever:
  b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   r0, =_estack
 8000b1c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b28:	08004e30 	.word	0x08004e30
  ldr r2, =_sbss
 8000b2c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b30:	20000ffc 	.word	0x20000ffc

08000b34 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <HAL_Init+0x3c>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <HAL_Init+0x3c>)
 8000b4a:	2180      	movs	r1, #128	@ 0x80
 8000b4c:	0049      	lsls	r1, r1, #1
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b52:	2003      	movs	r0, #3
 8000b54:	f7ff ff26 	bl	80009a4 <HAL_InitTick>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e001      	b.n	8000b68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff feaa 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <HAL_IncTick+0x1c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	001a      	movs	r2, r3
 8000b82:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	18d2      	adds	r2, r2, r3
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	20000008 	.word	0x20000008
 8000b98:	2000016c 	.word	0x2000016c

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b02      	ldr	r3, [pc, #8]	@ (8000bac <HAL_GetTick+0x10>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	2000016c 	.word	0x2000016c

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bc2:	d809      	bhi.n	8000bd8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	001a      	movs	r2, r3
 8000bca:	231f      	movs	r3, #31
 8000bcc:	401a      	ands	r2, r3
 8000bce:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <__NVIC_EnableIRQ+0x30>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4091      	lsls	r1, r2
 8000bd4:	000a      	movs	r2, r1
 8000bd6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bd8:	46c0      	nop			@ (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	0002      	movs	r2, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bf8:	d828      	bhi.n	8000c4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb8 <__NVIC_SetPriority+0xd4>)
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	33c0      	adds	r3, #192	@ 0xc0
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	589b      	ldr	r3, [r3, r2]
 8000c0a:	1dfa      	adds	r2, r7, #7
 8000c0c:	7812      	ldrb	r2, [r2, #0]
 8000c0e:	0011      	movs	r1, r2
 8000c10:	2203      	movs	r2, #3
 8000c12:	400a      	ands	r2, r1
 8000c14:	00d2      	lsls	r2, r2, #3
 8000c16:	21ff      	movs	r1, #255	@ 0xff
 8000c18:	4091      	lsls	r1, r2
 8000c1a:	000a      	movs	r2, r1
 8000c1c:	43d2      	mvns	r2, r2
 8000c1e:	401a      	ands	r2, r3
 8000c20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	019b      	lsls	r3, r3, #6
 8000c26:	22ff      	movs	r2, #255	@ 0xff
 8000c28:	401a      	ands	r2, r3
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	2303      	movs	r3, #3
 8000c32:	4003      	ands	r3, r0
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c38:	481f      	ldr	r0, [pc, #124]	@ (8000cb8 <__NVIC_SetPriority+0xd4>)
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	430a      	orrs	r2, r1
 8000c44:	33c0      	adds	r3, #192	@ 0xc0
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c4a:	e031      	b.n	8000cb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cbc <__NVIC_SetPriority+0xd8>)
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	0019      	movs	r1, r3
 8000c54:	230f      	movs	r3, #15
 8000c56:	400b      	ands	r3, r1
 8000c58:	3b08      	subs	r3, #8
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3306      	adds	r3, #6
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	18d3      	adds	r3, r2, r3
 8000c62:	3304      	adds	r3, #4
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	1dfa      	adds	r2, r7, #7
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	400a      	ands	r2, r1
 8000c70:	00d2      	lsls	r2, r2, #3
 8000c72:	21ff      	movs	r1, #255	@ 0xff
 8000c74:	4091      	lsls	r1, r2
 8000c76:	000a      	movs	r2, r1
 8000c78:	43d2      	mvns	r2, r2
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	019b      	lsls	r3, r3, #6
 8000c82:	22ff      	movs	r2, #255	@ 0xff
 8000c84:	401a      	ands	r2, r3
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	4003      	ands	r3, r0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c94:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <__NVIC_SetPriority+0xd8>)
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	001c      	movs	r4, r3
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	4023      	ands	r3, r4
 8000ca0:	3b08      	subs	r3, #8
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	3306      	adds	r3, #6
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	18c3      	adds	r3, r0, r3
 8000cac:	3304      	adds	r3, #4
 8000cae:	601a      	str	r2, [r3, #0]
}
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b003      	add	sp, #12
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	210f      	movs	r1, #15
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	1c02      	adds	r2, r0, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ff81 	bl	8000be4 <__NVIC_SetPriority>
}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b004      	add	sp, #16
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff57 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	e147      	b.n	8000fac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	4091      	lsls	r1, r2
 8000d26:	000a      	movs	r2, r1
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <HAL_GPIO_Init+0x28>
 8000d32:	e138      	b.n	8000fa6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2203      	movs	r2, #3
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d005      	beq.n	8000d4c <HAL_GPIO_Init+0x40>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2203      	movs	r2, #3
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d130      	bne.n	8000dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	0013      	movs	r3, r2
 8000d5c:	43da      	mvns	r2, r3
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	0013      	movs	r3, r2
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d82:	2201      	movs	r2, #1
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	091b      	lsrs	r3, r3, #4
 8000d98:	2201      	movs	r2, #1
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2203      	movs	r2, #3
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d017      	beq.n	8000dea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2203      	movs	r2, #3
 8000df0:	4013      	ands	r3, r2
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d123      	bne.n	8000e3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	58d3      	ldr	r3, [r2, r3]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2207      	movs	r2, #7
 8000e08:	4013      	ands	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	43da      	mvns	r2, r3
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2107      	movs	r1, #7
 8000e22:	400b      	ands	r3, r1
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	08da      	lsrs	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	6939      	ldr	r1, [r7, #16]
 8000e3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	23c0      	movs	r3, #192	@ 0xc0
 8000e78:	029b      	lsls	r3, r3, #10
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d100      	bne.n	8000e80 <HAL_GPIO_Init+0x174>
 8000e7e:	e092      	b.n	8000fa6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e80:	4a50      	ldr	r2, [pc, #320]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3318      	adds	r3, #24
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	589b      	ldr	r3, [r3, r2]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2203      	movs	r2, #3
 8000e92:	4013      	ands	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	220f      	movs	r2, #15
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	0013      	movs	r3, r2
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	23a0      	movs	r3, #160	@ 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x1ca>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a45      	ldr	r2, [pc, #276]	@ (8000fc8 <HAL_GPIO_Init+0x2bc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x1c6>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a44      	ldr	r2, [pc, #272]	@ (8000fcc <HAL_GPIO_Init+0x2c0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x1c2>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a43      	ldr	r2, [pc, #268]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x1be>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x1cc>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e004      	b.n	8000ed8 <HAL_GPIO_Init+0x1cc>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_Init+0x1cc>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_GPIO_Init+0x1cc>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	2103      	movs	r1, #3
 8000edc:	400a      	ands	r2, r1
 8000ede:	00d2      	lsls	r2, r2, #3
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ee8:	4936      	ldr	r1, [pc, #216]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3318      	adds	r3, #24
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ef6:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	2380      	movs	r3, #128	@ 0x80
 8000f0c:	035b      	lsls	r3, r3, #13
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f20:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43da      	mvns	r2, r3
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	039b      	lsls	r3, r3, #14
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f4c:	2384      	movs	r3, #132	@ 0x84
 8000f4e:	58d3      	ldr	r3, [r2, r3]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43da      	mvns	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	4013      	ands	r3, r2
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f70:	4914      	ldr	r1, [pc, #80]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f72:	2284      	movs	r2, #132	@ 0x84
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f78:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f7a:	2380      	movs	r3, #128	@ 0x80
 8000f7c:	58d3      	ldr	r3, [r2, r3]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	025b      	lsls	r3, r3, #9
 8000f92:	4013      	ands	r3, r2
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f9e:	4909      	ldr	r1, [pc, #36]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000fa0:	2280      	movs	r2, #128	@ 0x80
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	40da      	lsrs	r2, r3
 8000fb4:	1e13      	subs	r3, r2, #0
 8000fb6:	d000      	beq.n	8000fba <HAL_GPIO_Init+0x2ae>
 8000fb8:	e6b0      	b.n	8000d1c <HAL_GPIO_Init+0x10>
  }
}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b006      	add	sp, #24
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021800 	.word	0x40021800
 8000fc8:	50000400 	.word	0x50000400
 8000fcc:	50000800 	.word	0x50000800
 8000fd0:	50000c00 	.word	0x50000c00

08000fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	000a      	movs	r2, r1
 8000fde:	1cbb      	adds	r3, r7, #2
 8000fe0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	1cba      	adds	r2, r7, #2
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	4013      	ands	r3, r2
 8000fec:	d004      	beq.n	8000ff8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fee:	230f      	movs	r3, #15
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e003      	b.n	8001000 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	781b      	ldrb	r3, [r3, #0]
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b004      	add	sp, #16
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	0008      	movs	r0, r1
 8001018:	0011      	movs	r1, r2
 800101a:	1cbb      	adds	r3, r7, #2
 800101c:	1c02      	adds	r2, r0, #0
 800101e:	801a      	strh	r2, [r3, #0]
 8001020:	1c7b      	adds	r3, r7, #1
 8001022:	1c0a      	adds	r2, r1, #0
 8001024:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001026:	1c7b      	adds	r3, r7, #1
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102e:	1cbb      	adds	r3, r7, #2
 8001030:	881a      	ldrh	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001036:	e003      	b.n	8001040 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001038:	1cbb      	adds	r3, r7, #2
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a19      	ldr	r2, [pc, #100]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001056:	4013      	ands	r3, r2
 8001058:	0019      	movs	r1, r3
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	429a      	cmp	r2, r3
 800106a:	d11f      	bne.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	0013      	movs	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	189b      	adds	r3, r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4912      	ldr	r1, [pc, #72]	@ (80010c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800107a:	0018      	movs	r0, r3
 800107c:	f7ff f84c 	bl	8000118 <__udivsi3>
 8001080:	0003      	movs	r3, r0
 8001082:	3301      	adds	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001086:	e008      	b.n	800109a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3b01      	subs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e001      	b.n	800109a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e009      	b.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	2380      	movs	r3, #128	@ 0x80
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	401a      	ands	r2, r3
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d0ed      	beq.n	8001088 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b004      	add	sp, #16
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	40007000 	.word	0x40007000
 80010bc:	fffff9ff 	.word	0xfffff9ff
 80010c0:	20000000 	.word	0x20000000
 80010c4:	000f4240 	.word	0x000f4240

080010c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010cc:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	23e0      	movs	r3, #224	@ 0xe0
 80010d2:	01db      	lsls	r3, r3, #7
 80010d4:	4013      	ands	r3, r2
}
 80010d6:	0018      	movs	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e2fe      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	4013      	ands	r3, r2
 80010fa:	d100      	bne.n	80010fe <HAL_RCC_OscConfig+0x1e>
 80010fc:	e07c      	b.n	80011f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010fe:	4bc3      	ldr	r3, [pc, #780]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2238      	movs	r2, #56	@ 0x38
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001108:	4bc0      	ldr	r3, [pc, #768]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	2203      	movs	r2, #3
 800110e:	4013      	ands	r3, r2
 8001110:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b10      	cmp	r3, #16
 8001116:	d102      	bne.n	800111e <HAL_RCC_OscConfig+0x3e>
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2b03      	cmp	r3, #3
 800111c:	d002      	beq.n	8001124 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	2b08      	cmp	r3, #8
 8001122:	d10b      	bne.n	800113c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001124:	4bb9      	ldr	r3, [pc, #740]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	029b      	lsls	r3, r3, #10
 800112c:	4013      	ands	r3, r2
 800112e:	d062      	beq.n	80011f6 <HAL_RCC_OscConfig+0x116>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d15e      	bne.n	80011f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e2d9      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	2380      	movs	r3, #128	@ 0x80
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	429a      	cmp	r2, r3
 8001146:	d107      	bne.n	8001158 <HAL_RCC_OscConfig+0x78>
 8001148:	4bb0      	ldr	r3, [pc, #704]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4baf      	ldr	r3, [pc, #700]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 800114e:	2180      	movs	r1, #128	@ 0x80
 8001150:	0249      	lsls	r1, r1, #9
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e020      	b.n	800119a <HAL_RCC_OscConfig+0xba>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	23a0      	movs	r3, #160	@ 0xa0
 800115e:	02db      	lsls	r3, r3, #11
 8001160:	429a      	cmp	r2, r3
 8001162:	d10e      	bne.n	8001182 <HAL_RCC_OscConfig+0xa2>
 8001164:	4ba9      	ldr	r3, [pc, #676]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4ba8      	ldr	r3, [pc, #672]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 800116a:	2180      	movs	r1, #128	@ 0x80
 800116c:	02c9      	lsls	r1, r1, #11
 800116e:	430a      	orrs	r2, r1
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	4ba6      	ldr	r3, [pc, #664]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4ba5      	ldr	r3, [pc, #660]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001178:	2180      	movs	r1, #128	@ 0x80
 800117a:	0249      	lsls	r1, r1, #9
 800117c:	430a      	orrs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	e00b      	b.n	800119a <HAL_RCC_OscConfig+0xba>
 8001182:	4ba2      	ldr	r3, [pc, #648]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4ba1      	ldr	r3, [pc, #644]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001188:	49a1      	ldr	r1, [pc, #644]	@ (8001410 <HAL_RCC_OscConfig+0x330>)
 800118a:	400a      	ands	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	4b9f      	ldr	r3, [pc, #636]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b9e      	ldr	r3, [pc, #632]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001194:	499f      	ldr	r1, [pc, #636]	@ (8001414 <HAL_RCC_OscConfig+0x334>)
 8001196:	400a      	ands	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d014      	beq.n	80011cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a2:	f7ff fcfb 	bl	8000b9c <HAL_GetTick>
 80011a6:	0003      	movs	r3, r0
 80011a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fcf6 	bl	8000b9c <HAL_GetTick>
 80011b0:	0002      	movs	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	@ 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e298      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011be:	4b93      	ldr	r3, [pc, #588]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	029b      	lsls	r3, r3, #10
 80011c6:	4013      	ands	r3, r2
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0xcc>
 80011ca:	e015      	b.n	80011f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fce6 	bl	8000b9c <HAL_GetTick>
 80011d0:	0003      	movs	r3, r0
 80011d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d6:	f7ff fce1 	bl	8000b9c <HAL_GetTick>
 80011da:	0002      	movs	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	@ 0x64
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e283      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011e8:	4b88      	ldr	r3, [pc, #544]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	029b      	lsls	r3, r3, #10
 80011f0:	4013      	ands	r3, r2
 80011f2:	d1f0      	bne.n	80011d6 <HAL_RCC_OscConfig+0xf6>
 80011f4:	e000      	b.n	80011f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2202      	movs	r2, #2
 80011fe:	4013      	ands	r3, r2
 8001200:	d100      	bne.n	8001204 <HAL_RCC_OscConfig+0x124>
 8001202:	e099      	b.n	8001338 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001204:	4b81      	ldr	r3, [pc, #516]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2238      	movs	r2, #56	@ 0x38
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800120e:	4b7f      	ldr	r3, [pc, #508]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2203      	movs	r2, #3
 8001214:	4013      	ands	r3, r2
 8001216:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2b10      	cmp	r3, #16
 800121c:	d102      	bne.n	8001224 <HAL_RCC_OscConfig+0x144>
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d002      	beq.n	800122a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d135      	bne.n	8001296 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800122a:	4b78      	ldr	r3, [pc, #480]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	2380      	movs	r3, #128	@ 0x80
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4013      	ands	r3, r2
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x162>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e256      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b72      	ldr	r3, [pc, #456]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a74      	ldr	r2, [pc, #464]	@ (8001418 <HAL_RCC_OscConfig+0x338>)
 8001248:	4013      	ands	r3, r2
 800124a:	0019      	movs	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	021a      	lsls	r2, r3, #8
 8001252:	4b6e      	ldr	r3, [pc, #440]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001254:	430a      	orrs	r2, r1
 8001256:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d112      	bne.n	8001284 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800125e:	4b6b      	ldr	r3, [pc, #428]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a6e      	ldr	r2, [pc, #440]	@ (800141c <HAL_RCC_OscConfig+0x33c>)
 8001264:	4013      	ands	r3, r2
 8001266:	0019      	movs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	4b67      	ldr	r3, [pc, #412]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 800126e:	430a      	orrs	r2, r1
 8001270:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001272:	4b66      	ldr	r3, [pc, #408]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0adb      	lsrs	r3, r3, #11
 8001278:	2207      	movs	r2, #7
 800127a:	4013      	ands	r3, r2
 800127c:	4a68      	ldr	r2, [pc, #416]	@ (8001420 <HAL_RCC_OscConfig+0x340>)
 800127e:	40da      	lsrs	r2, r3
 8001280:	4b68      	ldr	r3, [pc, #416]	@ (8001424 <HAL_RCC_OscConfig+0x344>)
 8001282:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001284:	4b68      	ldr	r3, [pc, #416]	@ (8001428 <HAL_RCC_OscConfig+0x348>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	0018      	movs	r0, r3
 800128a:	f7ff fb8b 	bl	80009a4 <HAL_InitTick>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d051      	beq.n	8001336 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e22c      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d030      	beq.n	8001300 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800129e:	4b5b      	ldr	r3, [pc, #364]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a5e      	ldr	r2, [pc, #376]	@ (800141c <HAL_RCC_OscConfig+0x33c>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	4b57      	ldr	r3, [pc, #348]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012b2:	4b56      	ldr	r3, [pc, #344]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4b55      	ldr	r3, [pc, #340]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80012b8:	2180      	movs	r1, #128	@ 0x80
 80012ba:	0049      	lsls	r1, r1, #1
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc6c 	bl	8000b9c <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff fc67 	bl	8000b9c <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e209      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012dc:	4b4b      	ldr	r3, [pc, #300]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2380      	movs	r3, #128	@ 0x80
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4013      	ands	r3, r2
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e8:	4b48      	ldr	r3, [pc, #288]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001418 <HAL_RCC_OscConfig+0x338>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	021a      	lsls	r2, r3, #8
 80012f8:	4b44      	ldr	r3, [pc, #272]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	e01b      	b.n	8001338 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001300:	4b42      	ldr	r3, [pc, #264]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b41      	ldr	r3, [pc, #260]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001306:	4949      	ldr	r1, [pc, #292]	@ (800142c <HAL_RCC_OscConfig+0x34c>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fc46 	bl	8000b9c <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fc41 	bl	8000b9c <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e1e3      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001328:	4b38      	ldr	r3, [pc, #224]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	@ 0x80
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4013      	ands	r3, r2
 8001332:	d1f0      	bne.n	8001316 <HAL_RCC_OscConfig+0x236>
 8001334:	e000      	b.n	8001338 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001336:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2208      	movs	r2, #8
 800133e:	4013      	ands	r3, r2
 8001340:	d047      	beq.n	80013d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001342:	4b32      	ldr	r3, [pc, #200]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2238      	movs	r2, #56	@ 0x38
 8001348:	4013      	ands	r3, r2
 800134a:	2b18      	cmp	r3, #24
 800134c:	d10a      	bne.n	8001364 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800134e:	4b2f      	ldr	r3, [pc, #188]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001352:	2202      	movs	r2, #2
 8001354:	4013      	ands	r3, r2
 8001356:	d03c      	beq.n	80013d2 <HAL_RCC_OscConfig+0x2f2>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d138      	bne.n	80013d2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e1c5      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d019      	beq.n	80013a0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800136c:	4b27      	ldr	r3, [pc, #156]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 800136e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001370:	4b26      	ldr	r3, [pc, #152]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001372:	2101      	movs	r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fc10 	bl	8000b9c <HAL_GetTick>
 800137c:	0003      	movs	r3, r0
 800137e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001382:	f7ff fc0b 	bl	8000b9c <HAL_GetTick>
 8001386:	0002      	movs	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e1ad      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 8001396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001398:	2202      	movs	r2, #2
 800139a:	4013      	ands	r3, r2
 800139c:	d0f1      	beq.n	8001382 <HAL_RCC_OscConfig+0x2a2>
 800139e:	e018      	b.n	80013d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80013a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013a4:	4b19      	ldr	r3, [pc, #100]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	438a      	bics	r2, r1
 80013aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fbf6 	bl	8000b9c <HAL_GetTick>
 80013b0:	0003      	movs	r3, r0
 80013b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b6:	f7ff fbf1 	bl	8000b9c <HAL_GetTick>
 80013ba:	0002      	movs	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e193      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c8:	4b10      	ldr	r3, [pc, #64]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80013ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013cc:	2202      	movs	r2, #2
 80013ce:	4013      	ands	r3, r2
 80013d0:	d1f1      	bne.n	80013b6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2204      	movs	r2, #4
 80013d8:	4013      	ands	r3, r2
 80013da:	d100      	bne.n	80013de <HAL_RCC_OscConfig+0x2fe>
 80013dc:	e0c6      	b.n	800156c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013de:	231f      	movs	r3, #31
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2238      	movs	r2, #56	@ 0x38
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b20      	cmp	r3, #32
 80013f0:	d11e      	bne.n	8001430 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_RCC_OscConfig+0x32c>)
 80013f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f6:	2202      	movs	r2, #2
 80013f8:	4013      	ands	r3, r2
 80013fa:	d100      	bne.n	80013fe <HAL_RCC_OscConfig+0x31e>
 80013fc:	e0b6      	b.n	800156c <HAL_RCC_OscConfig+0x48c>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d000      	beq.n	8001408 <HAL_RCC_OscConfig+0x328>
 8001406:	e0b1      	b.n	800156c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e171      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
 800140c:	40021000 	.word	0x40021000
 8001410:	fffeffff 	.word	0xfffeffff
 8001414:	fffbffff 	.word	0xfffbffff
 8001418:	ffff80ff 	.word	0xffff80ff
 800141c:	ffffc7ff 	.word	0xffffc7ff
 8001420:	00f42400 	.word	0x00f42400
 8001424:	20000000 	.word	0x20000000
 8001428:	20000004 	.word	0x20000004
 800142c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001430:	4bb1      	ldr	r3, [pc, #708]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001432:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	055b      	lsls	r3, r3, #21
 8001438:	4013      	ands	r3, r2
 800143a:	d101      	bne.n	8001440 <HAL_RCC_OscConfig+0x360>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x362>
 8001440:	2300      	movs	r3, #0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d011      	beq.n	800146a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4bac      	ldr	r3, [pc, #688]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001448:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800144a:	4bab      	ldr	r3, [pc, #684]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 800144c:	2180      	movs	r1, #128	@ 0x80
 800144e:	0549      	lsls	r1, r1, #21
 8001450:	430a      	orrs	r2, r1
 8001452:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001454:	4ba8      	ldr	r3, [pc, #672]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001458:	2380      	movs	r3, #128	@ 0x80
 800145a:	055b      	lsls	r3, r3, #21
 800145c:	4013      	ands	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001462:	231f      	movs	r3, #31
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146a:	4ba4      	ldr	r3, [pc, #656]	@ (80016fc <HAL_RCC_OscConfig+0x61c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4013      	ands	r3, r2
 8001474:	d11a      	bne.n	80014ac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001476:	4ba1      	ldr	r3, [pc, #644]	@ (80016fc <HAL_RCC_OscConfig+0x61c>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4ba0      	ldr	r3, [pc, #640]	@ (80016fc <HAL_RCC_OscConfig+0x61c>)
 800147c:	2180      	movs	r1, #128	@ 0x80
 800147e:	0049      	lsls	r1, r1, #1
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001484:	f7ff fb8a 	bl	8000b9c <HAL_GetTick>
 8001488:	0003      	movs	r3, r0
 800148a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148e:	f7ff fb85 	bl	8000b9c <HAL_GetTick>
 8001492:	0002      	movs	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e127      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a0:	4b96      	ldr	r3, [pc, #600]	@ (80016fc <HAL_RCC_OscConfig+0x61c>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4013      	ands	r3, r2
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x3e2>
 80014b4:	4b90      	ldr	r3, [pc, #576]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80014b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014b8:	4b8f      	ldr	r3, [pc, #572]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014c0:	e01c      	b.n	80014fc <HAL_RCC_OscConfig+0x41c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x404>
 80014ca:	4b8b      	ldr	r3, [pc, #556]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80014cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014ce:	4b8a      	ldr	r3, [pc, #552]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80014d0:	2104      	movs	r1, #4
 80014d2:	430a      	orrs	r2, r1
 80014d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014d6:	4b88      	ldr	r3, [pc, #544]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80014d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014da:	4b87      	ldr	r3, [pc, #540]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80014dc:	2101      	movs	r1, #1
 80014de:	430a      	orrs	r2, r1
 80014e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0x41c>
 80014e4:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80014e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014e8:	4b83      	ldr	r3, [pc, #524]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	438a      	bics	r2, r1
 80014ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014f0:	4b81      	ldr	r3, [pc, #516]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80014f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014f4:	4b80      	ldr	r3, [pc, #512]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80014f6:	2104      	movs	r1, #4
 80014f8:	438a      	bics	r2, r1
 80014fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d014      	beq.n	800152e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fb4a 	bl	8000b9c <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800150c:	e009      	b.n	8001522 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fb45 	bl	8000b9c <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	4a79      	ldr	r2, [pc, #484]	@ (8001700 <HAL_RCC_OscConfig+0x620>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e0e6      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001522:	4b75      	ldr	r3, [pc, #468]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001526:	2202      	movs	r2, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x42e>
 800152c:	e013      	b.n	8001556 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fb35 	bl	8000b9c <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001536:	e009      	b.n	800154c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff fb30 	bl	8000b9c <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	4a6f      	ldr	r2, [pc, #444]	@ (8001700 <HAL_RCC_OscConfig+0x620>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0d1      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800154c:	4b6a      	ldr	r3, [pc, #424]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 800154e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001550:	2202      	movs	r2, #2
 8001552:	4013      	ands	r3, r2
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001556:	231f      	movs	r3, #31
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001560:	4b65      	ldr	r3, [pc, #404]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001564:	4b64      	ldr	r3, [pc, #400]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001566:	4967      	ldr	r1, [pc, #412]	@ (8001704 <HAL_RCC_OscConfig+0x624>)
 8001568:	400a      	ands	r2, r1
 800156a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0x496>
 8001574:	e0bb      	b.n	80016ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001576:	4b60      	ldr	r3, [pc, #384]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2238      	movs	r2, #56	@ 0x38
 800157c:	4013      	ands	r3, r2
 800157e:	2b10      	cmp	r3, #16
 8001580:	d100      	bne.n	8001584 <HAL_RCC_OscConfig+0x4a4>
 8001582:	e07b      	b.n	800167c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d156      	bne.n	800163a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158c:	4b5a      	ldr	r3, [pc, #360]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b59      	ldr	r3, [pc, #356]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001592:	495d      	ldr	r1, [pc, #372]	@ (8001708 <HAL_RCC_OscConfig+0x628>)
 8001594:	400a      	ands	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fb00 	bl	8000b9c <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fafb 	bl	8000b9c <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e09d      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b4:	4b50      	ldr	r3, [pc, #320]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	049b      	lsls	r3, r3, #18
 80015bc:	4013      	ands	r3, r2
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c0:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4a51      	ldr	r2, [pc, #324]	@ (800170c <HAL_RCC_OscConfig+0x62c>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1a      	ldr	r2, [r3, #32]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ec:	431a      	orrs	r2, r3
 80015ee:	4b42      	ldr	r3, [pc, #264]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f4:	4b40      	ldr	r3, [pc, #256]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b3f      	ldr	r3, [pc, #252]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 80015fa:	2180      	movs	r1, #128	@ 0x80
 80015fc:	0449      	lsls	r1, r1, #17
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001602:	4b3d      	ldr	r3, [pc, #244]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	4b3c      	ldr	r3, [pc, #240]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001608:	2180      	movs	r1, #128	@ 0x80
 800160a:	0549      	lsls	r1, r1, #21
 800160c:	430a      	orrs	r2, r1
 800160e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fac4 	bl	8000b9c <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff fabf 	bl	8000b9c <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e061      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162c:	4b32      	ldr	r3, [pc, #200]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	049b      	lsls	r3, r3, #18
 8001634:	4013      	ands	r3, r2
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x53a>
 8001638:	e059      	b.n	80016ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b2f      	ldr	r3, [pc, #188]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001640:	4931      	ldr	r1, [pc, #196]	@ (8001708 <HAL_RCC_OscConfig+0x628>)
 8001642:	400a      	ands	r2, r1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001646:	f7ff faa9 	bl	8000b9c <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff faa4 	bl	8000b9c <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e046      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001662:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2380      	movs	r3, #128	@ 0x80
 8001668:	049b      	lsls	r3, r3, #18
 800166a:	4013      	ands	r3, r2
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800166e:	4b22      	ldr	r3, [pc, #136]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 8001674:	4926      	ldr	r1, [pc, #152]	@ (8001710 <HAL_RCC_OscConfig+0x630>)
 8001676:	400a      	ands	r2, r1
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	e038      	b.n	80016ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e033      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001688:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <HAL_RCC_OscConfig+0x618>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2203      	movs	r2, #3
 8001692:	401a      	ands	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	429a      	cmp	r2, r3
 800169a:	d126      	bne.n	80016ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2270      	movs	r2, #112	@ 0x70
 80016a0:	401a      	ands	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d11f      	bne.n	80016ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	23fe      	movs	r3, #254	@ 0xfe
 80016ae:	01db      	lsls	r3, r3, #7
 80016b0:	401a      	ands	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d116      	bne.n	80016ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	23f8      	movs	r3, #248	@ 0xf8
 80016c0:	039b      	lsls	r3, r3, #14
 80016c2:	401a      	ands	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d10e      	bne.n	80016ea <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	23e0      	movs	r3, #224	@ 0xe0
 80016d0:	051b      	lsls	r3, r3, #20
 80016d2:	401a      	ands	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	0f5b      	lsrs	r3, r3, #29
 80016e0:	075a      	lsls	r2, r3, #29
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b008      	add	sp, #32
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40007000 	.word	0x40007000
 8001700:	00001388 	.word	0x00001388
 8001704:	efffffff 	.word	0xefffffff
 8001708:	feffffff 	.word	0xfeffffff
 800170c:	11c1808c 	.word	0x11c1808c
 8001710:	eefefffc 	.word	0xeefefffc

08001714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0e9      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b76      	ldr	r3, [pc, #472]	@ (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2207      	movs	r2, #7
 800172e:	4013      	ands	r3, r2
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d91e      	bls.n	8001774 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b73      	ldr	r3, [pc, #460]	@ (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2207      	movs	r2, #7
 800173c:	4393      	bics	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	4b70      	ldr	r3, [pc, #448]	@ (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001748:	f7ff fa28 	bl	8000b9c <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001750:	e009      	b.n	8001766 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001752:	f7ff fa23 	bl	8000b9c <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	4a6a      	ldr	r2, [pc, #424]	@ (8001908 <HAL_RCC_ClockConfig+0x1f4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0ca      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001766:	4b67      	ldr	r3, [pc, #412]	@ (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2207      	movs	r2, #7
 800176c:	4013      	ands	r3, r2
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d1ee      	bne.n	8001752 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d015      	beq.n	80017aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2204      	movs	r2, #4
 8001784:	4013      	ands	r3, r2
 8001786:	d006      	beq.n	8001796 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001788:	4b60      	ldr	r3, [pc, #384]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	4b5f      	ldr	r3, [pc, #380]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 800178e:	21e0      	movs	r1, #224	@ 0xe0
 8001790:	01c9      	lsls	r1, r1, #7
 8001792:	430a      	orrs	r2, r1
 8001794:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001796:	4b5d      	ldr	r3, [pc, #372]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	4a5d      	ldr	r2, [pc, #372]	@ (8001910 <HAL_RCC_ClockConfig+0x1fc>)
 800179c:	4013      	ands	r3, r2
 800179e:	0019      	movs	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	4b59      	ldr	r3, [pc, #356]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2201      	movs	r2, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	d057      	beq.n	8001864 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d107      	bne.n	80017cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017bc:	4b53      	ldr	r3, [pc, #332]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	029b      	lsls	r3, r3, #10
 80017c4:	4013      	ands	r3, r2
 80017c6:	d12b      	bne.n	8001820 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e097      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d107      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d4:	4b4d      	ldr	r3, [pc, #308]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	049b      	lsls	r3, r3, #18
 80017dc:	4013      	ands	r3, r2
 80017de:	d11f      	bne.n	8001820 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e08b      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ec:	4b47      	ldr	r3, [pc, #284]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	@ 0x80
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4013      	ands	r3, r2
 80017f6:	d113      	bne.n	8001820 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e07f      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d106      	bne.n	8001812 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001804:	4b41      	ldr	r3, [pc, #260]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001808:	2202      	movs	r2, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d108      	bne.n	8001820 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e074      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001812:	4b3e      	ldr	r3, [pc, #248]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e06d      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001820:	4b3a      	ldr	r3, [pc, #232]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2207      	movs	r2, #7
 8001826:	4393      	bics	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4b37      	ldr	r3, [pc, #220]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001830:	430a      	orrs	r2, r1
 8001832:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001834:	f7ff f9b2 	bl	8000b9c <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183c:	e009      	b.n	8001852 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183e:	f7ff f9ad 	bl	8000b9c <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	4a2f      	ldr	r2, [pc, #188]	@ (8001908 <HAL_RCC_ClockConfig+0x1f4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e054      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2e      	ldr	r3, [pc, #184]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2238      	movs	r2, #56	@ 0x38
 8001858:	401a      	ands	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	429a      	cmp	r2, r3
 8001862:	d1ec      	bne.n	800183e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2207      	movs	r2, #7
 800186a:	4013      	ands	r3, r2
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d21e      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2207      	movs	r2, #7
 8001878:	4393      	bics	r3, r2
 800187a:	0019      	movs	r1, r3
 800187c:	4b21      	ldr	r3, [pc, #132]	@ (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001884:	f7ff f98a 	bl	8000b9c <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800188c:	e009      	b.n	80018a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188e:	f7ff f985 	bl	8000b9c <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	4a1b      	ldr	r2, [pc, #108]	@ (8001908 <HAL_RCC_ClockConfig+0x1f4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e02c      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2207      	movs	r2, #7
 80018a8:	4013      	ands	r3, r2
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1ee      	bne.n	800188e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2204      	movs	r2, #4
 80018b6:	4013      	ands	r3, r2
 80018b8:	d009      	beq.n	80018ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	4a15      	ldr	r2, [pc, #84]	@ (8001914 <HAL_RCC_ClockConfig+0x200>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	4b10      	ldr	r3, [pc, #64]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80018ca:	430a      	orrs	r2, r1
 80018cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018ce:	f000 f829 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80018d2:	0001      	movs	r1, r0
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	220f      	movs	r2, #15
 80018dc:	401a      	ands	r2, r3
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <HAL_RCC_ClockConfig+0x204>)
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	58d3      	ldr	r3, [r2, r3]
 80018e4:	221f      	movs	r2, #31
 80018e6:	4013      	ands	r3, r2
 80018e8:	000a      	movs	r2, r1
 80018ea:	40da      	lsrs	r2, r3
 80018ec:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <HAL_RCC_ClockConfig+0x208>)
 80018ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <HAL_RCC_ClockConfig+0x20c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff f855 	bl	80009a4 <HAL_InitTick>
 80018fa:	0003      	movs	r3, r0
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b004      	add	sp, #16
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40022000 	.word	0x40022000
 8001908:	00001388 	.word	0x00001388
 800190c:	40021000 	.word	0x40021000
 8001910:	fffff0ff 	.word	0xfffff0ff
 8001914:	ffff8fff 	.word	0xffff8fff
 8001918:	08004da8 	.word	0x08004da8
 800191c:	20000000 	.word	0x20000000
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2238      	movs	r2, #56	@ 0x38
 8001930:	4013      	ands	r3, r2
 8001932:	d10f      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001934:	4b39      	ldr	r3, [pc, #228]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0adb      	lsrs	r3, r3, #11
 800193a:	2207      	movs	r2, #7
 800193c:	4013      	ands	r3, r2
 800193e:	2201      	movs	r2, #1
 8001940:	409a      	lsls	r2, r3
 8001942:	0013      	movs	r3, r2
 8001944:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	4835      	ldr	r0, [pc, #212]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0xfc>)
 800194a:	f7fe fbe5 	bl	8000118 <__udivsi3>
 800194e:	0003      	movs	r3, r0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	e05d      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001954:	4b31      	ldr	r3, [pc, #196]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2238      	movs	r2, #56	@ 0x38
 800195a:	4013      	ands	r3, r2
 800195c:	2b08      	cmp	r3, #8
 800195e:	d102      	bne.n	8001966 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001960:	4b30      	ldr	r3, [pc, #192]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x100>)
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	e054      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001966:	4b2d      	ldr	r3, [pc, #180]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2238      	movs	r2, #56	@ 0x38
 800196c:	4013      	ands	r3, r2
 800196e:	2b10      	cmp	r3, #16
 8001970:	d138      	bne.n	80019e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001972:	4b2a      	ldr	r3, [pc, #168]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2203      	movs	r2, #3
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800197c:	4b27      	ldr	r3, [pc, #156]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	2207      	movs	r2, #7
 8001984:	4013      	ands	r3, r2
 8001986:	3301      	adds	r3, #1
 8001988:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d10d      	bne.n	80019ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	4824      	ldr	r0, [pc, #144]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x100>)
 8001994:	f7fe fbc0 	bl	8000118 <__udivsi3>
 8001998:	0003      	movs	r3, r0
 800199a:	0019      	movs	r1, r3
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	227f      	movs	r2, #127	@ 0x7f
 80019a4:	4013      	ands	r3, r2
 80019a6:	434b      	muls	r3, r1
 80019a8:	617b      	str	r3, [r7, #20]
        break;
 80019aa:	e00d      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	481c      	ldr	r0, [pc, #112]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019b0:	f7fe fbb2 	bl	8000118 <__udivsi3>
 80019b4:	0003      	movs	r3, r0
 80019b6:	0019      	movs	r1, r3
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	227f      	movs	r2, #127	@ 0x7f
 80019c0:	4013      	ands	r3, r2
 80019c2:	434b      	muls	r3, r1
 80019c4:	617b      	str	r3, [r7, #20]
        break;
 80019c6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0f5b      	lsrs	r3, r3, #29
 80019ce:	2207      	movs	r2, #7
 80019d0:	4013      	ands	r3, r2
 80019d2:	3301      	adds	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	6978      	ldr	r0, [r7, #20]
 80019da:	f7fe fb9d 	bl	8000118 <__udivsi3>
 80019de:	0003      	movs	r3, r0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	e015      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019e4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2238      	movs	r2, #56	@ 0x38
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	d103      	bne.n	80019f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2238      	movs	r2, #56	@ 0x38
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b18      	cmp	r3, #24
 8001a02:	d103      	bne.n	8001a0c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a04:	23fa      	movs	r3, #250	@ 0xfa
 8001a06:	01db      	lsls	r3, r3, #7
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	e001      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a10:	693b      	ldr	r3, [r7, #16]
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b006      	add	sp, #24
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	007a1200 	.word	0x007a1200

08001a28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a2c:	4b02      	ldr	r3, [pc, #8]	@ (8001a38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	20000000 	.word	0x20000000

08001a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a3c:	b5b0      	push	{r4, r5, r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a40:	f7ff fff2 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a44:	0004      	movs	r4, r0
 8001a46:	f7ff fb3f 	bl	80010c8 <LL_RCC_GetAPB1Prescaler>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	0b1a      	lsrs	r2, r3, #12
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	58d3      	ldr	r3, [r2, r3]
 8001a54:	221f      	movs	r2, #31
 8001a56:	4013      	ands	r3, r2
 8001a58:	40dc      	lsrs	r4, r3
 8001a5a:	0023      	movs	r3, r4
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bdb0      	pop	{r4, r5, r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	08004de8 	.word	0x08004de8

08001a68 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a78:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <HAL_RCC_GetClockConfig+0x4c>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	401a      	ands	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_RCC_GetClockConfig+0x4c>)
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	23f0      	movs	r3, #240	@ 0xf0
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <HAL_RCC_GetClockConfig+0x4c>)
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	23e0      	movs	r3, #224	@ 0xe0
 8001a98:	01db      	lsls	r3, r3, #7
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_RCC_GetClockConfig+0x50>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	601a      	str	r2, [r3, #0]
}
 8001aac:	46c0      	nop			@ (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40022000 	.word	0x40022000

08001abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e04a      	b.n	8001b64 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	223d      	movs	r2, #61	@ 0x3d
 8001ad2:	5c9b      	ldrb	r3, [r3, r2]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d107      	bne.n	8001aea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	223c      	movs	r2, #60	@ 0x3c
 8001ade:	2100      	movs	r1, #0
 8001ae0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 f841 	bl	8001b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	223d      	movs	r2, #61	@ 0x3d
 8001aee:	2102      	movs	r1, #2
 8001af0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3304      	adds	r3, #4
 8001afa:	0019      	movs	r1, r3
 8001afc:	0010      	movs	r0, r2
 8001afe:	f000 f9b9 	bl	8001e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2248      	movs	r2, #72	@ 0x48
 8001b06:	2101      	movs	r1, #1
 8001b08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	223e      	movs	r2, #62	@ 0x3e
 8001b0e:	2101      	movs	r1, #1
 8001b10:	5499      	strb	r1, [r3, r2]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	223f      	movs	r2, #63	@ 0x3f
 8001b16:	2101      	movs	r1, #1
 8001b18:	5499      	strb	r1, [r3, r2]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2240      	movs	r2, #64	@ 0x40
 8001b1e:	2101      	movs	r1, #1
 8001b20:	5499      	strb	r1, [r3, r2]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2241      	movs	r2, #65	@ 0x41
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2242      	movs	r2, #66	@ 0x42
 8001b2e:	2101      	movs	r1, #1
 8001b30:	5499      	strb	r1, [r3, r2]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2243      	movs	r2, #67	@ 0x43
 8001b36:	2101      	movs	r1, #1
 8001b38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2244      	movs	r2, #68	@ 0x44
 8001b3e:	2101      	movs	r1, #1
 8001b40:	5499      	strb	r1, [r3, r2]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2245      	movs	r2, #69	@ 0x45
 8001b46:	2101      	movs	r1, #1
 8001b48:	5499      	strb	r1, [r3, r2]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2246      	movs	r2, #70	@ 0x46
 8001b4e:	2101      	movs	r1, #1
 8001b50:	5499      	strb	r1, [r3, r2]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2247      	movs	r2, #71	@ 0x47
 8001b56:	2101      	movs	r1, #1
 8001b58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	223d      	movs	r2, #61	@ 0x3d
 8001b5e:	2101      	movs	r1, #1
 8001b60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b002      	add	sp, #8
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b74:	46c0      	nop			@ (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	223d      	movs	r2, #61	@ 0x3d
 8001b88:	5c9b      	ldrb	r3, [r3, r2]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d001      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e03d      	b.n	8001c10 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	223d      	movs	r2, #61	@ 0x3d
 8001b98:	2102      	movs	r1, #2
 8001b9a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	@ (8001c18 <HAL_TIM_Base_Start_IT+0x9c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00a      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x50>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	@ 0x80
 8001bbc:	05db      	lsls	r3, r3, #23
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d004      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x50>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a15      	ldr	r2, [pc, #84]	@ (8001c1c <HAL_TIM_Base_Start_IT+0xa0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d116      	bne.n	8001bfa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4a13      	ldr	r2, [pc, #76]	@ (8001c20 <HAL_TIM_Base_Start_IT+0xa4>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d016      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x90>
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d011      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf8:	e008      	b.n	8001c0c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e000      	b.n	8001c0e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b004      	add	sp, #16
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40012c00 	.word	0x40012c00
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	00010007 	.word	0x00010007

08001c24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	4013      	ands	r3, r2
 8001c42:	d021      	beq.n	8001c88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d01d      	beq.n	8001c88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2203      	movs	r2, #3
 8001c52:	4252      	negs	r2, r2
 8001c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2203      	movs	r2, #3
 8001c64:	4013      	ands	r3, r2
 8001c66:	d004      	beq.n	8001c72 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 f8ea 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
 8001c70:	e007      	b.n	8001c82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f000 f8dd 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 f8e9 	bl	8001e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d022      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2204      	movs	r2, #4
 8001c94:	4013      	ands	r3, r2
 8001c96:	d01e      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2205      	movs	r2, #5
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	23c0      	movs	r3, #192	@ 0xc0
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 f8c3 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
 8001cbe:	e007      	b.n	8001cd0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f000 f8b6 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f000 f8c2 	bl	8001e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2208      	movs	r2, #8
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d021      	beq.n	8001d22 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d01d      	beq.n	8001d22 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2209      	movs	r2, #9
 8001cec:	4252      	negs	r2, r2
 8001cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 f89d 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
 8001d0a:	e007      	b.n	8001d1c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 f890 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 f89c 	bl	8001e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2210      	movs	r2, #16
 8001d26:	4013      	ands	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d01e      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2211      	movs	r2, #17
 8001d38:	4252      	negs	r2, r2
 8001d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2208      	movs	r2, #8
 8001d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69da      	ldr	r2, [r3, #28]
 8001d48:	23c0      	movs	r3, #192	@ 0xc0
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d004      	beq.n	8001d5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f000 f876 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
 8001d58:	e007      	b.n	8001d6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 f869 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	0018      	movs	r0, r3
 8001d66:	f000 f875 	bl	8001e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2201      	movs	r2, #1
 8001d74:	4013      	ands	r3, r2
 8001d76:	d00c      	beq.n	8001d92 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d008      	beq.n	8001d92 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2202      	movs	r2, #2
 8001d86:	4252      	negs	r2, r2
 8001d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7fe fd7d 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2280      	movs	r2, #128	@ 0x80
 8001d96:	4013      	ands	r3, r2
 8001d98:	d104      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	2380      	movs	r3, #128	@ 0x80
 8001d9e:	019b      	lsls	r3, r3, #6
 8001da0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001da2:	d00b      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2280      	movs	r2, #128	@ 0x80
 8001da8:	4013      	ands	r3, r2
 8001daa:	d007      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <HAL_TIM_IRQHandler+0x208>)
 8001db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	0018      	movs	r0, r3
 8001db8:	f000 f8e8 	bl	8001f8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d00b      	beq.n	8001dde <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2280      	movs	r2, #128	@ 0x80
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d007      	beq.n	8001dde <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a17      	ldr	r2, [pc, #92]	@ (8001e30 <HAL_TIM_IRQHandler+0x20c>)
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f000 f8df 	bl	8001f9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2240      	movs	r2, #64	@ 0x40
 8001de2:	4013      	ands	r3, r2
 8001de4:	d00c      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2240      	movs	r2, #64	@ 0x40
 8001dea:	4013      	ands	r3, r2
 8001dec:	d008      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2241      	movs	r2, #65	@ 0x41
 8001df4:	4252      	negs	r2, r2
 8001df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 f832 	bl	8001e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2220      	movs	r2, #32
 8001e04:	4013      	ands	r3, r2
 8001e06:	d00c      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d008      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2221      	movs	r2, #33	@ 0x21
 8001e16:	4252      	negs	r2, r2
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 f8ad 	bl	8001f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b004      	add	sp, #16
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	ffffdf7f 	.word	0xffffdf7f
 8001e30:	fffffeff 	.word	0xfffffeff

08001e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e3c:	46c0      	nop			@ (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b002      	add	sp, #8
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e4c:	46c0      	nop			@ (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b002      	add	sp, #8
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e6c:	46c0      	nop			@ (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a37      	ldr	r2, [pc, #220]	@ (8001f64 <TIM_Base_SetConfig+0xf0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d008      	beq.n	8001e9e <TIM_Base_SetConfig+0x2a>
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	2380      	movs	r3, #128	@ 0x80
 8001e90:	05db      	lsls	r3, r3, #23
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d003      	beq.n	8001e9e <TIM_Base_SetConfig+0x2a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a33      	ldr	r2, [pc, #204]	@ (8001f68 <TIM_Base_SetConfig+0xf4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d108      	bne.n	8001eb0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2270      	movs	r2, #112	@ 0x70
 8001ea2:	4393      	bics	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f64 <TIM_Base_SetConfig+0xf0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d014      	beq.n	8001ee2 <TIM_Base_SetConfig+0x6e>
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	2380      	movs	r3, #128	@ 0x80
 8001ebc:	05db      	lsls	r3, r3, #23
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d00f      	beq.n	8001ee2 <TIM_Base_SetConfig+0x6e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a28      	ldr	r2, [pc, #160]	@ (8001f68 <TIM_Base_SetConfig+0xf4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00b      	beq.n	8001ee2 <TIM_Base_SetConfig+0x6e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a27      	ldr	r2, [pc, #156]	@ (8001f6c <TIM_Base_SetConfig+0xf8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <TIM_Base_SetConfig+0x6e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a26      	ldr	r2, [pc, #152]	@ (8001f70 <TIM_Base_SetConfig+0xfc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d003      	beq.n	8001ee2 <TIM_Base_SetConfig+0x6e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a25      	ldr	r2, [pc, #148]	@ (8001f74 <TIM_Base_SetConfig+0x100>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d108      	bne.n	8001ef4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a24      	ldr	r2, [pc, #144]	@ (8001f78 <TIM_Base_SetConfig+0x104>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	4393      	bics	r3, r2
 8001efa:	001a      	movs	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a11      	ldr	r2, [pc, #68]	@ (8001f64 <TIM_Base_SetConfig+0xf0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d007      	beq.n	8001f32 <TIM_Base_SetConfig+0xbe>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <TIM_Base_SetConfig+0xfc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d003      	beq.n	8001f32 <TIM_Base_SetConfig+0xbe>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <TIM_Base_SetConfig+0x100>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d103      	bne.n	8001f3a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2201      	movs	r2, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d106      	bne.n	8001f5a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2201      	movs	r2, #1
 8001f52:	4393      	bics	r3, r2
 8001f54:	001a      	movs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	611a      	str	r2, [r3, #16]
  }
}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b004      	add	sp, #16
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	40002000 	.word	0x40002000
 8001f70:	40014400 	.word	0x40014400
 8001f74:	40014800 	.word	0x40014800
 8001f78:	fffffcff 	.word	0xfffffcff

08001f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f84:	46c0      	nop			@ (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f94:	46c0      	nop			@ (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b002      	add	sp, #8
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001fa4:	46c0      	nop			@ (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e046      	b.n	800204c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2288      	movs	r2, #136	@ 0x88
 8001fc2:	589b      	ldr	r3, [r3, r2]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2284      	movs	r2, #132	@ 0x84
 8001fcc:	2100      	movs	r1, #0
 8001fce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f7fe fc9c 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2288      	movs	r2, #136	@ 0x88
 8001fdc:	2124      	movs	r1, #36	@ 0x24
 8001fde:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2101      	movs	r1, #1
 8001fec:	438a      	bics	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 fb48 	bl	8002690 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	0018      	movs	r0, r3
 8002004:	f000 f8cc 	bl	80021a0 <UART_SetConfig>
 8002008:	0003      	movs	r3, r0
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e01c      	b.n	800204c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	490d      	ldr	r1, [pc, #52]	@ (8002054 <HAL_UART_Init+0xa8>)
 800201e:	400a      	ands	r2, r1
 8002020:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	212a      	movs	r1, #42	@ 0x2a
 800202e:	438a      	bics	r2, r1
 8002030:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 fbd7 	bl	80027f8 <UART_CheckIdleState>
 800204a:	0003      	movs	r3, r0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b002      	add	sp, #8
 8002052:	bd80      	pop	{r7, pc}
 8002054:	ffffb7ff 	.word	0xffffb7ff

08002058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	1dbb      	adds	r3, r7, #6
 8002066:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2288      	movs	r2, #136	@ 0x88
 800206c:	589b      	ldr	r3, [r3, r2]
 800206e:	2b20      	cmp	r3, #32
 8002070:	d000      	beq.n	8002074 <HAL_UART_Transmit+0x1c>
 8002072:	e090      	b.n	8002196 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_UART_Transmit+0x2a>
 800207a:	1dbb      	adds	r3, r7, #6
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e088      	b.n	8002198 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	015b      	lsls	r3, r3, #5
 800208e:	429a      	cmp	r2, r3
 8002090:	d109      	bne.n	80020a6 <HAL_UART_Transmit+0x4e>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d105      	bne.n	80020a6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2201      	movs	r2, #1
 800209e:	4013      	ands	r3, r2
 80020a0:	d001      	beq.n	80020a6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e078      	b.n	8002198 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2290      	movs	r2, #144	@ 0x90
 80020aa:	2100      	movs	r1, #0
 80020ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2288      	movs	r2, #136	@ 0x88
 80020b2:	2121      	movs	r1, #33	@ 0x21
 80020b4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020b6:	f7fe fd71 	bl	8000b9c <HAL_GetTick>
 80020ba:	0003      	movs	r3, r0
 80020bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1dba      	adds	r2, r7, #6
 80020c2:	2154      	movs	r1, #84	@ 0x54
 80020c4:	8812      	ldrh	r2, [r2, #0]
 80020c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1dba      	adds	r2, r7, #6
 80020cc:	2156      	movs	r1, #86	@ 0x56
 80020ce:	8812      	ldrh	r2, [r2, #0]
 80020d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	015b      	lsls	r3, r3, #5
 80020da:	429a      	cmp	r2, r3
 80020dc:	d108      	bne.n	80020f0 <HAL_UART_Transmit+0x98>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d104      	bne.n	80020f0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	e003      	b.n	80020f8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020f8:	e030      	b.n	800215c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	0013      	movs	r3, r2
 8002104:	2200      	movs	r2, #0
 8002106:	2180      	movs	r1, #128	@ 0x80
 8002108:	f000 fc20 	bl	800294c <UART_WaitOnFlagUntilTimeout>
 800210c:	1e03      	subs	r3, r0, #0
 800210e:	d005      	beq.n	800211c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2288      	movs	r2, #136	@ 0x88
 8002114:	2120      	movs	r1, #32
 8002116:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e03d      	b.n	8002198 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10b      	bne.n	800213a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	001a      	movs	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	05d2      	lsls	r2, r2, #23
 800212e:	0dd2      	lsrs	r2, r2, #23
 8002130:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3302      	adds	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e007      	b.n	800214a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2256      	movs	r2, #86	@ 0x56
 800214e:	5a9b      	ldrh	r3, [r3, r2]
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b299      	uxth	r1, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2256      	movs	r2, #86	@ 0x56
 800215a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2256      	movs	r2, #86	@ 0x56
 8002160:	5a9b      	ldrh	r3, [r3, r2]
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1c8      	bne.n	80020fa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	0013      	movs	r3, r2
 8002172:	2200      	movs	r2, #0
 8002174:	2140      	movs	r1, #64	@ 0x40
 8002176:	f000 fbe9 	bl	800294c <UART_WaitOnFlagUntilTimeout>
 800217a:	1e03      	subs	r3, r0, #0
 800217c:	d005      	beq.n	800218a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2288      	movs	r2, #136	@ 0x88
 8002182:	2120      	movs	r1, #32
 8002184:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e006      	b.n	8002198 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2288      	movs	r2, #136	@ 0x88
 800218e:	2120      	movs	r1, #32
 8002190:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e000      	b.n	8002198 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002196:	2302      	movs	r3, #2
  }
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b008      	add	sp, #32
 800219e:	bd80      	pop	{r7, pc}

080021a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b090      	sub	sp, #64	@ 0x40
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021a8:	231a      	movs	r3, #26
 80021aa:	2220      	movs	r2, #32
 80021ac:	189b      	adds	r3, r3, r2
 80021ae:	19db      	adds	r3, r3, r7
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	431a      	orrs	r2, r3
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4ac4      	ldr	r2, [pc, #784]	@ (80024e4 <UART_SetConfig+0x344>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021de:	430b      	orrs	r3, r1
 80021e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4abf      	ldr	r2, [pc, #764]	@ (80024e8 <UART_SetConfig+0x348>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	0018      	movs	r0, r3
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	68d9      	ldr	r1, [r3, #12]
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	0003      	movs	r3, r0
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4ab9      	ldr	r2, [pc, #740]	@ (80024ec <UART_SetConfig+0x34c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d004      	beq.n	8002216 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002212:	4313      	orrs	r3, r2
 8002214:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4ab4      	ldr	r2, [pc, #720]	@ (80024f0 <UART_SetConfig+0x350>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002228:	430b      	orrs	r3, r1
 800222a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800222c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002232:	220f      	movs	r2, #15
 8002234:	4393      	bics	r3, r2
 8002236:	0018      	movs	r0, r3
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	0003      	movs	r3, r0
 8002242:	430b      	orrs	r3, r1
 8002244:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4aaa      	ldr	r2, [pc, #680]	@ (80024f4 <UART_SetConfig+0x354>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d131      	bne.n	80022b4 <UART_SetConfig+0x114>
 8002250:	4ba9      	ldr	r3, [pc, #676]	@ (80024f8 <UART_SetConfig+0x358>)
 8002252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002254:	2203      	movs	r2, #3
 8002256:	4013      	ands	r3, r2
 8002258:	2b03      	cmp	r3, #3
 800225a:	d01d      	beq.n	8002298 <UART_SetConfig+0xf8>
 800225c:	d823      	bhi.n	80022a6 <UART_SetConfig+0x106>
 800225e:	2b02      	cmp	r3, #2
 8002260:	d00c      	beq.n	800227c <UART_SetConfig+0xdc>
 8002262:	d820      	bhi.n	80022a6 <UART_SetConfig+0x106>
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <UART_SetConfig+0xce>
 8002268:	2b01      	cmp	r3, #1
 800226a:	d00e      	beq.n	800228a <UART_SetConfig+0xea>
 800226c:	e01b      	b.n	80022a6 <UART_SetConfig+0x106>
 800226e:	231b      	movs	r3, #27
 8002270:	2220      	movs	r2, #32
 8002272:	189b      	adds	r3, r3, r2
 8002274:	19db      	adds	r3, r3, r7
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e071      	b.n	8002360 <UART_SetConfig+0x1c0>
 800227c:	231b      	movs	r3, #27
 800227e:	2220      	movs	r2, #32
 8002280:	189b      	adds	r3, r3, r2
 8002282:	19db      	adds	r3, r3, r7
 8002284:	2202      	movs	r2, #2
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e06a      	b.n	8002360 <UART_SetConfig+0x1c0>
 800228a:	231b      	movs	r3, #27
 800228c:	2220      	movs	r2, #32
 800228e:	189b      	adds	r3, r3, r2
 8002290:	19db      	adds	r3, r3, r7
 8002292:	2204      	movs	r2, #4
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	e063      	b.n	8002360 <UART_SetConfig+0x1c0>
 8002298:	231b      	movs	r3, #27
 800229a:	2220      	movs	r2, #32
 800229c:	189b      	adds	r3, r3, r2
 800229e:	19db      	adds	r3, r3, r7
 80022a0:	2208      	movs	r2, #8
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e05c      	b.n	8002360 <UART_SetConfig+0x1c0>
 80022a6:	231b      	movs	r3, #27
 80022a8:	2220      	movs	r2, #32
 80022aa:	189b      	adds	r3, r3, r2
 80022ac:	19db      	adds	r3, r3, r7
 80022ae:	2210      	movs	r2, #16
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	e055      	b.n	8002360 <UART_SetConfig+0x1c0>
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a90      	ldr	r2, [pc, #576]	@ (80024fc <UART_SetConfig+0x35c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d106      	bne.n	80022cc <UART_SetConfig+0x12c>
 80022be:	231b      	movs	r3, #27
 80022c0:	2220      	movs	r2, #32
 80022c2:	189b      	adds	r3, r3, r2
 80022c4:	19db      	adds	r3, r3, r7
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e049      	b.n	8002360 <UART_SetConfig+0x1c0>
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a86      	ldr	r2, [pc, #536]	@ (80024ec <UART_SetConfig+0x34c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d13e      	bne.n	8002354 <UART_SetConfig+0x1b4>
 80022d6:	4b88      	ldr	r3, [pc, #544]	@ (80024f8 <UART_SetConfig+0x358>)
 80022d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022da:	23c0      	movs	r3, #192	@ 0xc0
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	4013      	ands	r3, r2
 80022e0:	22c0      	movs	r2, #192	@ 0xc0
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d027      	beq.n	8002338 <UART_SetConfig+0x198>
 80022e8:	22c0      	movs	r2, #192	@ 0xc0
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d82a      	bhi.n	8002346 <UART_SetConfig+0x1a6>
 80022f0:	2280      	movs	r2, #128	@ 0x80
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d011      	beq.n	800231c <UART_SetConfig+0x17c>
 80022f8:	2280      	movs	r2, #128	@ 0x80
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d822      	bhi.n	8002346 <UART_SetConfig+0x1a6>
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <UART_SetConfig+0x16e>
 8002304:	2280      	movs	r2, #128	@ 0x80
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	4293      	cmp	r3, r2
 800230a:	d00e      	beq.n	800232a <UART_SetConfig+0x18a>
 800230c:	e01b      	b.n	8002346 <UART_SetConfig+0x1a6>
 800230e:	231b      	movs	r3, #27
 8002310:	2220      	movs	r2, #32
 8002312:	189b      	adds	r3, r3, r2
 8002314:	19db      	adds	r3, r3, r7
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e021      	b.n	8002360 <UART_SetConfig+0x1c0>
 800231c:	231b      	movs	r3, #27
 800231e:	2220      	movs	r2, #32
 8002320:	189b      	adds	r3, r3, r2
 8002322:	19db      	adds	r3, r3, r7
 8002324:	2202      	movs	r2, #2
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e01a      	b.n	8002360 <UART_SetConfig+0x1c0>
 800232a:	231b      	movs	r3, #27
 800232c:	2220      	movs	r2, #32
 800232e:	189b      	adds	r3, r3, r2
 8002330:	19db      	adds	r3, r3, r7
 8002332:	2204      	movs	r2, #4
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	e013      	b.n	8002360 <UART_SetConfig+0x1c0>
 8002338:	231b      	movs	r3, #27
 800233a:	2220      	movs	r2, #32
 800233c:	189b      	adds	r3, r3, r2
 800233e:	19db      	adds	r3, r3, r7
 8002340:	2208      	movs	r2, #8
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	e00c      	b.n	8002360 <UART_SetConfig+0x1c0>
 8002346:	231b      	movs	r3, #27
 8002348:	2220      	movs	r2, #32
 800234a:	189b      	adds	r3, r3, r2
 800234c:	19db      	adds	r3, r3, r7
 800234e:	2210      	movs	r2, #16
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e005      	b.n	8002360 <UART_SetConfig+0x1c0>
 8002354:	231b      	movs	r3, #27
 8002356:	2220      	movs	r2, #32
 8002358:	189b      	adds	r3, r3, r2
 800235a:	19db      	adds	r3, r3, r7
 800235c:	2210      	movs	r2, #16
 800235e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a61      	ldr	r2, [pc, #388]	@ (80024ec <UART_SetConfig+0x34c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d000      	beq.n	800236c <UART_SetConfig+0x1cc>
 800236a:	e092      	b.n	8002492 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800236c:	231b      	movs	r3, #27
 800236e:	2220      	movs	r2, #32
 8002370:	189b      	adds	r3, r3, r2
 8002372:	19db      	adds	r3, r3, r7
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b08      	cmp	r3, #8
 8002378:	d015      	beq.n	80023a6 <UART_SetConfig+0x206>
 800237a:	dc18      	bgt.n	80023ae <UART_SetConfig+0x20e>
 800237c:	2b04      	cmp	r3, #4
 800237e:	d00d      	beq.n	800239c <UART_SetConfig+0x1fc>
 8002380:	dc15      	bgt.n	80023ae <UART_SetConfig+0x20e>
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <UART_SetConfig+0x1ec>
 8002386:	2b02      	cmp	r3, #2
 8002388:	d005      	beq.n	8002396 <UART_SetConfig+0x1f6>
 800238a:	e010      	b.n	80023ae <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800238c:	f7ff fb56 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
 8002390:	0003      	movs	r3, r0
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002394:	e014      	b.n	80023c0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002396:	4b5a      	ldr	r3, [pc, #360]	@ (8002500 <UART_SetConfig+0x360>)
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800239a:	e011      	b.n	80023c0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800239c:	f7ff fac2 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80023a0:	0003      	movs	r3, r0
 80023a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80023a4:	e00c      	b.n	80023c0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80023ac:	e008      	b.n	80023c0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80023b2:	231a      	movs	r3, #26
 80023b4:	2220      	movs	r2, #32
 80023b6:	189b      	adds	r3, r3, r2
 80023b8:	19db      	adds	r3, r3, r7
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
        break;
 80023be:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80023c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d100      	bne.n	80023c8 <UART_SetConfig+0x228>
 80023c6:	e147      	b.n	8002658 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002504 <UART_SetConfig+0x364>)
 80023ce:	0052      	lsls	r2, r2, #1
 80023d0:	5ad3      	ldrh	r3, [r2, r3]
 80023d2:	0019      	movs	r1, r3
 80023d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80023d6:	f7fd fe9f 	bl	8000118 <__udivsi3>
 80023da:	0003      	movs	r3, r0
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	0013      	movs	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	189b      	adds	r3, r3, r2
 80023e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d305      	bcc.n	80023fa <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80023f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d906      	bls.n	8002408 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80023fa:	231a      	movs	r3, #26
 80023fc:	2220      	movs	r2, #32
 80023fe:	189b      	adds	r3, r3, r2
 8002400:	19db      	adds	r3, r3, r7
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e127      	b.n	8002658 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002414:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <UART_SetConfig+0x364>)
 8002416:	0052      	lsls	r2, r2, #1
 8002418:	5ad3      	ldrh	r3, [r2, r3]
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	69b8      	ldr	r0, [r7, #24]
 8002426:	69f9      	ldr	r1, [r7, #28]
 8002428:	f7fd ff02 	bl	8000230 <__aeabi_uldivmod>
 800242c:	0002      	movs	r2, r0
 800242e:	000b      	movs	r3, r1
 8002430:	0e11      	lsrs	r1, r2, #24
 8002432:	021d      	lsls	r5, r3, #8
 8002434:	430d      	orrs	r5, r1
 8002436:	0214      	lsls	r4, r2, #8
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	085b      	lsrs	r3, r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68b8      	ldr	r0, [r7, #8]
 8002446:	68f9      	ldr	r1, [r7, #12]
 8002448:	1900      	adds	r0, r0, r4
 800244a:	4169      	adcs	r1, r5
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f7fd fee9 	bl	8000230 <__aeabi_uldivmod>
 800245e:	0002      	movs	r2, r0
 8002460:	000b      	movs	r3, r1
 8002462:	0013      	movs	r3, r2
 8002464:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002468:	23c0      	movs	r3, #192	@ 0xc0
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d309      	bcc.n	8002484 <UART_SetConfig+0x2e4>
 8002470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	035b      	lsls	r3, r3, #13
 8002476:	429a      	cmp	r2, r3
 8002478:	d204      	bcs.n	8002484 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	e0e9      	b.n	8002658 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8002484:	231a      	movs	r3, #26
 8002486:	2220      	movs	r2, #32
 8002488:	189b      	adds	r3, r3, r2
 800248a:	19db      	adds	r3, r3, r7
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e0e2      	b.n	8002658 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	429a      	cmp	r2, r3
 800249c:	d000      	beq.n	80024a0 <UART_SetConfig+0x300>
 800249e:	e083      	b.n	80025a8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80024a0:	231b      	movs	r3, #27
 80024a2:	2220      	movs	r2, #32
 80024a4:	189b      	adds	r3, r3, r2
 80024a6:	19db      	adds	r3, r3, r7
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d015      	beq.n	80024da <UART_SetConfig+0x33a>
 80024ae:	dc2b      	bgt.n	8002508 <UART_SetConfig+0x368>
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d00d      	beq.n	80024d0 <UART_SetConfig+0x330>
 80024b4:	dc28      	bgt.n	8002508 <UART_SetConfig+0x368>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <UART_SetConfig+0x320>
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d005      	beq.n	80024ca <UART_SetConfig+0x32a>
 80024be:	e023      	b.n	8002508 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024c0:	f7ff fabc 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
 80024c4:	0003      	movs	r3, r0
 80024c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024c8:	e027      	b.n	800251a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <UART_SetConfig+0x360>)
 80024cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024ce:	e024      	b.n	800251a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024d0:	f7ff fa28 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80024d4:	0003      	movs	r3, r0
 80024d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024d8:	e01f      	b.n	800251a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024da:	2380      	movs	r3, #128	@ 0x80
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024e0:	e01b      	b.n	800251a <UART_SetConfig+0x37a>
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	cfff69f3 	.word	0xcfff69f3
 80024e8:	ffffcfff 	.word	0xffffcfff
 80024ec:	40008000 	.word	0x40008000
 80024f0:	11fff4ff 	.word	0x11fff4ff
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40004400 	.word	0x40004400
 8002500:	00f42400 	.word	0x00f42400
 8002504:	08004e08 	.word	0x08004e08
      default:
        pclk = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800250c:	231a      	movs	r3, #26
 800250e:	2220      	movs	r2, #32
 8002510:	189b      	adds	r3, r3, r2
 8002512:	19db      	adds	r3, r3, r7
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
        break;
 8002518:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800251a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251c:	2b00      	cmp	r3, #0
 800251e:	d100      	bne.n	8002522 <UART_SetConfig+0x382>
 8002520:	e09a      	b.n	8002658 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002526:	4b58      	ldr	r3, [pc, #352]	@ (8002688 <UART_SetConfig+0x4e8>)
 8002528:	0052      	lsls	r2, r2, #1
 800252a:	5ad3      	ldrh	r3, [r2, r3]
 800252c:	0019      	movs	r1, r3
 800252e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002530:	f7fd fdf2 	bl	8000118 <__udivsi3>
 8002534:	0003      	movs	r3, r0
 8002536:	005a      	lsls	r2, r3, #1
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	18d2      	adds	r2, r2, r3
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	0019      	movs	r1, r3
 8002546:	0010      	movs	r0, r2
 8002548:	f7fd fde6 	bl	8000118 <__udivsi3>
 800254c:	0003      	movs	r3, r0
 800254e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	2b0f      	cmp	r3, #15
 8002554:	d921      	bls.n	800259a <UART_SetConfig+0x3fa>
 8002556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	429a      	cmp	r2, r3
 800255e:	d21c      	bcs.n	800259a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002562:	b29a      	uxth	r2, r3
 8002564:	200e      	movs	r0, #14
 8002566:	2420      	movs	r4, #32
 8002568:	1903      	adds	r3, r0, r4
 800256a:	19db      	adds	r3, r3, r7
 800256c:	210f      	movs	r1, #15
 800256e:	438a      	bics	r2, r1
 8002570:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	b29b      	uxth	r3, r3
 8002578:	2207      	movs	r2, #7
 800257a:	4013      	ands	r3, r2
 800257c:	b299      	uxth	r1, r3
 800257e:	1903      	adds	r3, r0, r4
 8002580:	19db      	adds	r3, r3, r7
 8002582:	1902      	adds	r2, r0, r4
 8002584:	19d2      	adds	r2, r2, r7
 8002586:	8812      	ldrh	r2, [r2, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1902      	adds	r2, r0, r4
 8002592:	19d2      	adds	r2, r2, r7
 8002594:	8812      	ldrh	r2, [r2, #0]
 8002596:	60da      	str	r2, [r3, #12]
 8002598:	e05e      	b.n	8002658 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800259a:	231a      	movs	r3, #26
 800259c:	2220      	movs	r2, #32
 800259e:	189b      	adds	r3, r3, r2
 80025a0:	19db      	adds	r3, r3, r7
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	e057      	b.n	8002658 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025a8:	231b      	movs	r3, #27
 80025aa:	2220      	movs	r2, #32
 80025ac:	189b      	adds	r3, r3, r2
 80025ae:	19db      	adds	r3, r3, r7
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d015      	beq.n	80025e2 <UART_SetConfig+0x442>
 80025b6:	dc18      	bgt.n	80025ea <UART_SetConfig+0x44a>
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d00d      	beq.n	80025d8 <UART_SetConfig+0x438>
 80025bc:	dc15      	bgt.n	80025ea <UART_SetConfig+0x44a>
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <UART_SetConfig+0x428>
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d005      	beq.n	80025d2 <UART_SetConfig+0x432>
 80025c6:	e010      	b.n	80025ea <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025c8:	f7ff fa38 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
 80025cc:	0003      	movs	r3, r0
 80025ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025d0:	e014      	b.n	80025fc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025d2:	4b2e      	ldr	r3, [pc, #184]	@ (800268c <UART_SetConfig+0x4ec>)
 80025d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025d6:	e011      	b.n	80025fc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025d8:	f7ff f9a4 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80025dc:	0003      	movs	r3, r0
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025e0:	e00c      	b.n	80025fc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025e8:	e008      	b.n	80025fc <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80025ee:	231a      	movs	r3, #26
 80025f0:	2220      	movs	r2, #32
 80025f2:	189b      	adds	r3, r3, r2
 80025f4:	19db      	adds	r3, r3, r7
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
        break;
 80025fa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80025fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d02a      	beq.n	8002658 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002606:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <UART_SetConfig+0x4e8>)
 8002608:	0052      	lsls	r2, r2, #1
 800260a:	5ad3      	ldrh	r3, [r2, r3]
 800260c:	0019      	movs	r1, r3
 800260e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002610:	f7fd fd82 	bl	8000118 <__udivsi3>
 8002614:	0003      	movs	r3, r0
 8002616:	001a      	movs	r2, r3
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	18d2      	adds	r2, r2, r3
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0019      	movs	r1, r3
 8002626:	0010      	movs	r0, r2
 8002628:	f7fd fd76 	bl	8000118 <__udivsi3>
 800262c:	0003      	movs	r3, r0
 800262e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002632:	2b0f      	cmp	r3, #15
 8002634:	d90a      	bls.n	800264c <UART_SetConfig+0x4ac>
 8002636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	025b      	lsls	r3, r3, #9
 800263c:	429a      	cmp	r2, r3
 800263e:	d205      	bcs.n	800264c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002642:	b29a      	uxth	r2, r3
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	e005      	b.n	8002658 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800264c:	231a      	movs	r3, #26
 800264e:	2220      	movs	r2, #32
 8002650:	189b      	adds	r3, r3, r2
 8002652:	19db      	adds	r3, r3, r7
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	226a      	movs	r2, #106	@ 0x6a
 800265c:	2101      	movs	r1, #1
 800265e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	2268      	movs	r2, #104	@ 0x68
 8002664:	2101      	movs	r1, #1
 8002666:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	2200      	movs	r2, #0
 800266c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	2200      	movs	r2, #0
 8002672:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002674:	231a      	movs	r3, #26
 8002676:	2220      	movs	r2, #32
 8002678:	189b      	adds	r3, r3, r2
 800267a:	19db      	adds	r3, r3, r7
 800267c:	781b      	ldrb	r3, [r3, #0]
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b010      	add	sp, #64	@ 0x40
 8002684:	bdb0      	pop	{r4, r5, r7, pc}
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	08004e08 	.word	0x08004e08
 800268c:	00f42400 	.word	0x00f42400

08002690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	2208      	movs	r2, #8
 800269e:	4013      	ands	r3, r2
 80026a0:	d00b      	beq.n	80026ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a4a      	ldr	r2, [pc, #296]	@ (80027d4 <UART_AdvFeatureConfig+0x144>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026be:	2201      	movs	r2, #1
 80026c0:	4013      	ands	r3, r2
 80026c2:	d00b      	beq.n	80026dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4a43      	ldr	r2, [pc, #268]	@ (80027d8 <UART_AdvFeatureConfig+0x148>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	0019      	movs	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	2202      	movs	r2, #2
 80026e2:	4013      	ands	r3, r2
 80026e4:	d00b      	beq.n	80026fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a3b      	ldr	r2, [pc, #236]	@ (80027dc <UART_AdvFeatureConfig+0x14c>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	2204      	movs	r2, #4
 8002704:	4013      	ands	r3, r2
 8002706:	d00b      	beq.n	8002720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a34      	ldr	r2, [pc, #208]	@ (80027e0 <UART_AdvFeatureConfig+0x150>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	2210      	movs	r2, #16
 8002726:	4013      	ands	r3, r2
 8002728:	d00b      	beq.n	8002742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a2c      	ldr	r2, [pc, #176]	@ (80027e4 <UART_AdvFeatureConfig+0x154>)
 8002732:	4013      	ands	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002746:	2220      	movs	r2, #32
 8002748:	4013      	ands	r3, r2
 800274a:	d00b      	beq.n	8002764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4a25      	ldr	r2, [pc, #148]	@ (80027e8 <UART_AdvFeatureConfig+0x158>)
 8002754:	4013      	ands	r3, r2
 8002756:	0019      	movs	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	2240      	movs	r2, #64	@ 0x40
 800276a:	4013      	ands	r3, r2
 800276c:	d01d      	beq.n	80027aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a1d      	ldr	r2, [pc, #116]	@ (80027ec <UART_AdvFeatureConfig+0x15c>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	035b      	lsls	r3, r3, #13
 800278e:	429a      	cmp	r2, r3
 8002790:	d10b      	bne.n	80027aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a15      	ldr	r2, [pc, #84]	@ (80027f0 <UART_AdvFeatureConfig+0x160>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	2280      	movs	r2, #128	@ 0x80
 80027b0:	4013      	ands	r3, r2
 80027b2:	d00b      	beq.n	80027cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a0e      	ldr	r2, [pc, #56]	@ (80027f4 <UART_AdvFeatureConfig+0x164>)
 80027bc:	4013      	ands	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]
  }
}
 80027cc:	46c0      	nop			@ (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	ffff7fff 	.word	0xffff7fff
 80027d8:	fffdffff 	.word	0xfffdffff
 80027dc:	fffeffff 	.word	0xfffeffff
 80027e0:	fffbffff 	.word	0xfffbffff
 80027e4:	ffffefff 	.word	0xffffefff
 80027e8:	ffffdfff 	.word	0xffffdfff
 80027ec:	ffefffff 	.word	0xffefffff
 80027f0:	ff9fffff 	.word	0xff9fffff
 80027f4:	fff7ffff 	.word	0xfff7ffff

080027f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b092      	sub	sp, #72	@ 0x48
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2290      	movs	r2, #144	@ 0x90
 8002804:	2100      	movs	r1, #0
 8002806:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002808:	f7fe f9c8 	bl	8000b9c <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2208      	movs	r2, #8
 8002818:	4013      	ands	r3, r2
 800281a:	2b08      	cmp	r3, #8
 800281c:	d12d      	bne.n	800287a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800281e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002820:	2280      	movs	r2, #128	@ 0x80
 8002822:	0391      	lsls	r1, r2, #14
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4a47      	ldr	r2, [pc, #284]	@ (8002944 <UART_CheckIdleState+0x14c>)
 8002828:	9200      	str	r2, [sp, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	f000 f88e 	bl	800294c <UART_WaitOnFlagUntilTimeout>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d022      	beq.n	800287a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002834:	f3ef 8310 	mrs	r3, PRIMASK
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800283c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800283e:	2301      	movs	r3, #1
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002844:	f383 8810 	msr	PRIMASK, r3
}
 8002848:	46c0      	nop			@ (mov r8, r8)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2180      	movs	r1, #128	@ 0x80
 8002856:	438a      	bics	r2, r1
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	f383 8810 	msr	PRIMASK, r3
}
 8002864:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2288      	movs	r2, #136	@ 0x88
 800286a:	2120      	movs	r1, #32
 800286c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2284      	movs	r2, #132	@ 0x84
 8002872:	2100      	movs	r1, #0
 8002874:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e060      	b.n	800293c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2204      	movs	r2, #4
 8002882:	4013      	ands	r3, r2
 8002884:	2b04      	cmp	r3, #4
 8002886:	d146      	bne.n	8002916 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800288a:	2280      	movs	r2, #128	@ 0x80
 800288c:	03d1      	lsls	r1, r2, #15
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4a2c      	ldr	r2, [pc, #176]	@ (8002944 <UART_CheckIdleState+0x14c>)
 8002892:	9200      	str	r2, [sp, #0]
 8002894:	2200      	movs	r2, #0
 8002896:	f000 f859 	bl	800294c <UART_WaitOnFlagUntilTimeout>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d03b      	beq.n	8002916 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800289e:	f3ef 8310 	mrs	r3, PRIMASK
 80028a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80028a4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028a8:	2301      	movs	r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f383 8810 	msr	PRIMASK, r3
}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4922      	ldr	r1, [pc, #136]	@ (8002948 <UART_CheckIdleState+0x150>)
 80028c0:	400a      	ands	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f383 8810 	msr	PRIMASK, r3
}
 80028ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d0:	f3ef 8310 	mrs	r3, PRIMASK
 80028d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80028d6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028da:	2301      	movs	r3, #1
 80028dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f383 8810 	msr	PRIMASK, r3
}
 80028e4:	46c0      	nop			@ (mov r8, r8)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2101      	movs	r1, #1
 80028f2:	438a      	bics	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f383 8810 	msr	PRIMASK, r3
}
 8002900:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	228c      	movs	r2, #140	@ 0x8c
 8002906:	2120      	movs	r1, #32
 8002908:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2284      	movs	r2, #132	@ 0x84
 800290e:	2100      	movs	r1, #0
 8002910:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e012      	b.n	800293c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2288      	movs	r2, #136	@ 0x88
 800291a:	2120      	movs	r1, #32
 800291c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	228c      	movs	r2, #140	@ 0x8c
 8002922:	2120      	movs	r1, #32
 8002924:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2284      	movs	r2, #132	@ 0x84
 8002936:	2100      	movs	r1, #0
 8002938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b010      	add	sp, #64	@ 0x40
 8002942:	bd80      	pop	{r7, pc}
 8002944:	01ffffff 	.word	0x01ffffff
 8002948:	fffffedf 	.word	0xfffffedf

0800294c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	1dfb      	adds	r3, r7, #7
 800295a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800295c:	e051      	b.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	3301      	adds	r3, #1
 8002962:	d04e      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002964:	f7fe f91a 	bl	8000b9c <HAL_GetTick>
 8002968:	0002      	movs	r2, r0
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	429a      	cmp	r2, r3
 8002972:	d302      	bcc.n	800297a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e051      	b.n	8002a22 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2204      	movs	r2, #4
 8002986:	4013      	ands	r3, r2
 8002988:	d03b      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b80      	cmp	r3, #128	@ 0x80
 800298e:	d038      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b40      	cmp	r3, #64	@ 0x40
 8002994:	d035      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2208      	movs	r2, #8
 800299e:	4013      	ands	r3, r2
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d111      	bne.n	80029c8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2208      	movs	r2, #8
 80029aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 f83c 	bl	8002a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2290      	movs	r2, #144	@ 0x90
 80029b8:	2108      	movs	r1, #8
 80029ba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2284      	movs	r2, #132	@ 0x84
 80029c0:	2100      	movs	r1, #0
 80029c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e02c      	b.n	8002a22 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	2380      	movs	r3, #128	@ 0x80
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	401a      	ands	r2, r3
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	429a      	cmp	r2, r3
 80029da:	d112      	bne.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2280      	movs	r2, #128	@ 0x80
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 f81f 	bl	8002a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2290      	movs	r2, #144	@ 0x90
 80029f2:	2120      	movs	r1, #32
 80029f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2284      	movs	r2, #132	@ 0x84
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e00f      	b.n	8002a22 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	425a      	negs	r2, r3
 8002a12:	4153      	adcs	r3, r2
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	001a      	movs	r2, r3
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d09e      	beq.n	800295e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	0018      	movs	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b004      	add	sp, #16
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08e      	sub	sp, #56	@ 0x38
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a34:	f3ef 8310 	mrs	r3, PRIMASK
 8002a38:	617b      	str	r3, [r7, #20]
  return(result);
 8002a3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f383 8810 	msr	PRIMASK, r3
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4926      	ldr	r1, [pc, #152]	@ (8002af0 <UART_EndRxTransfer+0xc4>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f383 8810 	msr	PRIMASK, r3
}
 8002a64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a66:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6a:	623b      	str	r3, [r7, #32]
  return(result);
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a70:	2301      	movs	r3, #1
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	491b      	ldr	r1, [pc, #108]	@ (8002af4 <UART_EndRxTransfer+0xc8>)
 8002a88:	400a      	ands	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d118      	bne.n	8002ad2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aaa:	2301      	movs	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f383 8810 	msr	PRIMASK, r3
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2110      	movs	r1, #16
 8002ac2:	438a      	bics	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f383 8810 	msr	PRIMASK, r3
}
 8002ad0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	228c      	movs	r2, #140	@ 0x8c
 8002ad6:	2120      	movs	r1, #32
 8002ad8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b00e      	add	sp, #56	@ 0x38
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	fffffedf 	.word	0xfffffedf
 8002af4:	effffffe 	.word	0xeffffffe

08002af8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	0002      	movs	r2, r0
 8002b00:	1dbb      	adds	r3, r7, #6
 8002b02:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b08:	1dbb      	adds	r3, r7, #6
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	5e9b      	ldrsh	r3, [r3, r2]
 8002b0e:	2b84      	cmp	r3, #132	@ 0x84
 8002b10:	d006      	beq.n	8002b20 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002b12:	1dbb      	adds	r3, r7, #6
 8002b14:	2200      	movs	r2, #0
 8002b16:	5e9a      	ldrsh	r2, [r3, r2]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	18d3      	adds	r3, r2, r3
 8002b1c:	3303      	adds	r3, #3
 8002b1e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b20:	68fb      	ldr	r3, [r7, #12]
}
 8002b22:	0018      	movs	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b004      	add	sp, #16
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b30:	f3ef 8305 	mrs	r3, IPSR
 8002b34:	607b      	str	r3, [r7, #4]
  return(result);
 8002b36:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	4193      	sbcs	r3, r2
 8002b3c:	b2db      	uxtb	r3, r3
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b4a:	f000 ff3d 	bl	80039c8 <vTaskStartScheduler>
  
  return osOK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b58:	b087      	sub	sp, #28
 8002b5a:	af02      	add	r7, sp, #8
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685c      	ldr	r4, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b6c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2208      	movs	r2, #8
 8002b72:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7ff ffbf 	bl	8002af8 <makeFreeRtosPriority>
 8002b7a:	0001      	movs	r1, r0
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	230c      	movs	r3, #12
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	9100      	str	r1, [sp, #0]
 8002b86:	0013      	movs	r3, r2
 8002b88:	0032      	movs	r2, r6
 8002b8a:	0029      	movs	r1, r5
 8002b8c:	0020      	movs	r0, r4
 8002b8e:	f000 fdae 	bl	80036ee <xTaskCreate>
 8002b92:	0003      	movs	r3, r0
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d001      	beq.n	8002b9c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e000      	b.n	8002b9e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b005      	add	sp, #20
 8002ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ba6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <osDelay+0x16>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	e000      	b.n	8002bbe <osDelay+0x18>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 fedc 	bl	800397c <vTaskDelay>
  
  return osOK;
 8002bc4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b004      	add	sp, #16
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d111      	bne.n	8002c02 <osSemaphoreCreate+0x34>
    vSemaphoreCreateBinary(sema);
 8002bde:	2203      	movs	r2, #3
 8002be0:	2100      	movs	r1, #0
 8002be2:	2001      	movs	r0, #1
 8002be4:	f000 f98c 	bl	8002f00 <xQueueGenericCreate>
 8002be8:	0003      	movs	r3, r0
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <osSemaphoreCreate+0x30>
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f000 f9d2 	bl	8002fa2 <xQueueGenericSend>
    return sema;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	e000      	b.n	8002c04 <osSemaphoreCreate+0x36>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8002c02:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b004      	add	sp, #16
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002c20:	2380      	movs	r3, #128	@ 0x80
 8002c22:	e036      	b.n	8002c92 <osSemaphoreWait+0x86>
  }
  
  ticks = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	d103      	bne.n	8002c36 <osSemaphoreWait+0x2a>
    ticks = portMAX_DELAY;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	425b      	negs	r3, r3
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e009      	b.n	8002c4a <osSemaphoreWait+0x3e>
  }
  else if (millisec != 0) {
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d006      	beq.n	8002c4a <osSemaphoreWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <osSemaphoreWait+0x3e>
      ticks = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002c4a:	f7ff ff6e 	bl	8002b2a <inHandlerMode>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d013      	beq.n	8002c7a <osSemaphoreWait+0x6e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002c52:	2308      	movs	r3, #8
 8002c54:	18fa      	adds	r2, r7, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2100      	movs	r1, #0
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 fbaf 	bl	80033be <xQueueReceiveFromISR>
 8002c60:	0003      	movs	r3, r0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d001      	beq.n	8002c6a <osSemaphoreWait+0x5e>
      return osErrorOS;
 8002c66:	23ff      	movs	r3, #255	@ 0xff
 8002c68:	e013      	b.n	8002c92 <osSemaphoreWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00f      	beq.n	8002c90 <osSemaphoreWait+0x84>
 8002c70:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <osSemaphoreWait+0x90>)
 8002c72:	2280      	movs	r2, #128	@ 0x80
 8002c74:	0552      	lsls	r2, r2, #21
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e00a      	b.n	8002c90 <osSemaphoreWait+0x84>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	0011      	movs	r1, r2
 8002c80:	0018      	movs	r0, r3
 8002c82:	f000 fabe 	bl	8003202 <xQueueSemaphoreTake>
 8002c86:	0003      	movs	r3, r0
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d001      	beq.n	8002c90 <osSemaphoreWait+0x84>
    return osErrorOS;
 8002c8c:	23ff      	movs	r3, #255	@ 0xff
 8002c8e:	e000      	b.n	8002c92 <osSemaphoreWait+0x86>
  }
  
  return osOK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b004      	add	sp, #16
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	e000ed04 	.word	0xe000ed04

08002ca0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002cb0:	f7ff ff3b 	bl	8002b2a <inHandlerMode>
 8002cb4:	1e03      	subs	r3, r0, #0
 8002cb6:	d013      	beq.n	8002ce0 <osSemaphoreRelease+0x40>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002cb8:	2308      	movs	r3, #8
 8002cba:	18fa      	adds	r2, r7, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 fa36 	bl	8003132 <xQueueGiveFromISR>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d001      	beq.n	8002cd0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002ccc:	23ff      	movs	r3, #255	@ 0xff
 8002cce:	e013      	b.n	8002cf8 <osSemaphoreRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00f      	beq.n	8002cf6 <osSemaphoreRelease+0x56>
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <osSemaphoreRelease+0x60>)
 8002cd8:	2280      	movs	r2, #128	@ 0x80
 8002cda:	0552      	lsls	r2, r2, #21
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e00a      	b.n	8002cf6 <osSemaphoreRelease+0x56>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f000 f95b 	bl	8002fa2 <xQueueGenericSend>
 8002cec:	0003      	movs	r3, r0
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d001      	beq.n	8002cf6 <osSemaphoreRelease+0x56>
      result = osErrorOS;
 8002cf2:	23ff      	movs	r3, #255	@ 0xff
 8002cf4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b004      	add	sp, #16
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	e000ed04 	.word	0xe000ed04

08002d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3308      	adds	r3, #8
 8002d10:	001a      	movs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4252      	negs	r2, r2
 8002d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3308      	adds	r3, #8
 8002d22:	001a      	movs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d38:	46c0      	nop			@ (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b002      	add	sp, #8
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	601a      	str	r2, [r3, #0]
}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	d103      	bne.n	8002db8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e00c      	b.n	8002dd2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3308      	adds	r3, #8
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e002      	b.n	8002dc6 <vListInsert+0x2c>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d2f6      	bcs.n	8002dc0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	601a      	str	r2, [r3, #0]
}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b004      	add	sp, #16
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6892      	ldr	r2, [r2, #8]
 8002e1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6852      	ldr	r2, [r2, #4]
 8002e26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d103      	bne.n	8002e3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1e5a      	subs	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b004      	add	sp, #16
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <xQueueGenericReset+0x1a>
 8002e6a:	b672      	cpsid	i
 8002e6c:	46c0      	nop			@ (mov r8, r8)
 8002e6e:	e7fd      	b.n	8002e6c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8002e70:	f001 fb86 	bl	8004580 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	434b      	muls	r3, r1
 8002e82:	18d2      	adds	r2, r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9e:	1e59      	subs	r1, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	434b      	muls	r3, r1
 8002ea6:	18d2      	adds	r2, r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2244      	movs	r2, #68	@ 0x44
 8002eb0:	21ff      	movs	r1, #255	@ 0xff
 8002eb2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2245      	movs	r2, #69	@ 0x45
 8002eb8:	21ff      	movs	r1, #255	@ 0xff
 8002eba:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10d      	bne.n	8002ede <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d013      	beq.n	8002ef2 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3310      	adds	r3, #16
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 ff7c 	bl	8003dcc <xTaskRemoveFromEventList>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d00c      	beq.n	8002ef2 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ed8:	f001 fb42 	bl	8004560 <vPortYield>
 8002edc:	e009      	b.n	8002ef2 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3310      	adds	r3, #16
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7ff ff0e 	bl	8002d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3324      	adds	r3, #36	@ 0x24
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7ff ff09 	bl	8002d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ef2:	f001 fb57 	bl	80045a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ef6:	2301      	movs	r3, #1
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b004      	add	sp, #16
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b08b      	sub	sp, #44	@ 0x2c
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <xQueueGenericCreate+0x1a>
 8002f14:	b672      	cpsid	i
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	e7fd      	b.n	8002f16 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	4353      	muls	r3, r2
 8002f20:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3348      	adds	r3, #72	@ 0x48
 8002f26:	0018      	movs	r0, r3
 8002f28:	f001 fbc2 	bl	80046b0 <pvPortMalloc>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00e      	beq.n	8002f54 <xQueueGenericCreate+0x54>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	3348      	adds	r3, #72	@ 0x48
 8002f3e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f40:	1dfb      	adds	r3, r7, #7
 8002f42:	781c      	ldrb	r4, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	0023      	movs	r3, r4
 8002f50:	f000 f805 	bl	8002f5e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f54:	69bb      	ldr	r3, [r7, #24]
	}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b009      	add	sp, #36	@ 0x24
 8002f5c:	bd90      	pop	{r4, r7, pc}

08002f5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	1cfb      	adds	r3, r7, #3
 8002f6e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d103      	bne.n	8002f7e <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e002      	b.n	8002f84 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2101      	movs	r1, #1
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7ff ff5e 	bl	8002e56 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b08a      	sub	sp, #40	@ 0x28
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <xQueueGenericSend+0x22>
 8002fbe:	b672      	cpsid	i
 8002fc0:	46c0      	nop			@ (mov r8, r8)
 8002fc2:	e7fd      	b.n	8002fc0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d103      	bne.n	8002fd2 <xQueueGenericSend+0x30>
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <xQueueGenericSend+0x34>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <xQueueGenericSend+0x36>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <xQueueGenericSend+0x40>
 8002fdc:	b672      	cpsid	i
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	e7fd      	b.n	8002fde <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d103      	bne.n	8002ff0 <xQueueGenericSend+0x4e>
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <xQueueGenericSend+0x52>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <xQueueGenericSend+0x54>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <xQueueGenericSend+0x5e>
 8002ffa:	b672      	cpsid	i
 8002ffc:	46c0      	nop			@ (mov r8, r8)
 8002ffe:	e7fd      	b.n	8002ffc <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003000:	f001 f868 	bl	80040d4 <xTaskGetSchedulerState>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d102      	bne.n	800300e <xQueueGenericSend+0x6c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <xQueueGenericSend+0x70>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <xQueueGenericSend+0x72>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <xQueueGenericSend+0x7c>
 8003018:	b672      	cpsid	i
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	e7fd      	b.n	800301a <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800301e:	f001 faaf 	bl	8004580 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <xQueueGenericSend+0x92>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d11e      	bne.n	8003072 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 fa3a 	bl	80034b4 <prvCopyDataToQueue>
 8003040:	0003      	movs	r3, r0
 8003042:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	3324      	adds	r3, #36	@ 0x24
 8003050:	0018      	movs	r0, r3
 8003052:	f000 febb 	bl	8003dcc <xTaskRemoveFromEventList>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d007      	beq.n	800306a <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800305a:	f001 fa81 	bl	8004560 <vPortYield>
 800305e:	e004      	b.n	800306a <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003066:	f001 fa7b 	bl	8004560 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800306a:	f001 fa9b 	bl	80045a4 <vPortExitCritical>
				return pdPASS;
 800306e:	2301      	movs	r3, #1
 8003070:	e05b      	b.n	800312a <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003078:	f001 fa94 	bl	80045a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800307c:	2300      	movs	r3, #0
 800307e:	e054      	b.n	800312a <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003086:	2314      	movs	r3, #20
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	0018      	movs	r0, r3
 800308c:	f000 fefc 	bl	8003e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003090:	2301      	movs	r3, #1
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003094:	f001 fa86 	bl	80045a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003098:	f000 fcd6 	bl	8003a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800309c:	f001 fa70 	bl	8004580 <vPortEnterCritical>
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	2244      	movs	r2, #68	@ 0x44
 80030a4:	5c9b      	ldrb	r3, [r3, r2]
 80030a6:	b25b      	sxtb	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	d103      	bne.n	80030b4 <xQueueGenericSend+0x112>
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	2244      	movs	r2, #68	@ 0x44
 80030b0:	2100      	movs	r1, #0
 80030b2:	5499      	strb	r1, [r3, r2]
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	2245      	movs	r2, #69	@ 0x45
 80030b8:	5c9b      	ldrb	r3, [r3, r2]
 80030ba:	b25b      	sxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	d103      	bne.n	80030c8 <xQueueGenericSend+0x126>
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	2245      	movs	r2, #69	@ 0x45
 80030c4:	2100      	movs	r1, #0
 80030c6:	5499      	strb	r1, [r3, r2]
 80030c8:	f001 fa6c 	bl	80045a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030cc:	1d3a      	adds	r2, r7, #4
 80030ce:	2314      	movs	r3, #20
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	0011      	movs	r1, r2
 80030d4:	0018      	movs	r0, r3
 80030d6:	f000 feeb 	bl	8003eb0 <xTaskCheckForTimeOut>
 80030da:	1e03      	subs	r3, r0, #0
 80030dc:	d11e      	bne.n	800311c <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	0018      	movs	r0, r3
 80030e2:	f000 faec 	bl	80036be <prvIsQueueFull>
 80030e6:	1e03      	subs	r3, r0, #0
 80030e8:	d011      	beq.n	800310e <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	3310      	adds	r3, #16
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	0011      	movs	r1, r2
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 fe4a 	bl	8003d8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 fa6b 	bl	80035d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003100:	f000 fcae 	bl	8003a60 <xTaskResumeAll>
 8003104:	1e03      	subs	r3, r0, #0
 8003106:	d18a      	bne.n	800301e <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8003108:	f001 fa2a 	bl	8004560 <vPortYield>
 800310c:	e787      	b.n	800301e <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	0018      	movs	r0, r3
 8003112:	f000 fa60 	bl	80035d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003116:	f000 fca3 	bl	8003a60 <xTaskResumeAll>
 800311a:	e780      	b.n	800301e <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	0018      	movs	r0, r3
 8003120:	f000 fa59 	bl	80035d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003124:	f000 fc9c 	bl	8003a60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003128:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800312a:	0018      	movs	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	b00a      	add	sp, #40	@ 0x28
 8003130:	bd80      	pop	{r7, pc}

08003132 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b088      	sub	sp, #32
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <xQueueGiveFromISR+0x1a>
 8003146:	b672      	cpsid	i
 8003148:	46c0      	nop			@ (mov r8, r8)
 800314a:	e7fd      	b.n	8003148 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <xQueueGiveFromISR+0x28>
 8003154:	b672      	cpsid	i
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	e7fd      	b.n	8003156 <xQueueGiveFromISR+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <xQueueGiveFromISR+0x38>
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <xQueueGiveFromISR+0x3c>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <xQueueGiveFromISR+0x3e>
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <xQueueGiveFromISR+0x48>
 8003174:	b672      	cpsid	i
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	e7fd      	b.n	8003176 <xQueueGiveFromISR+0x44>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800317a:	f001 fa2b 	bl	80045d4 <ulSetInterruptMaskFromISR>
 800317e:	0003      	movs	r3, r0
 8003180:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003186:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	429a      	cmp	r2, r3
 8003190:	d22c      	bcs.n	80031ec <xQueueGiveFromISR+0xba>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003192:	200f      	movs	r0, #15
 8003194:	183b      	adds	r3, r7, r0
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	2145      	movs	r1, #69	@ 0x45
 800319a:	5c52      	ldrb	r2, [r2, r1]
 800319c:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b25b      	sxtb	r3, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	d111      	bne.n	80031d4 <xQueueGiveFromISR+0xa2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d016      	beq.n	80031e6 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	3324      	adds	r3, #36	@ 0x24
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 fe05 	bl	8003dcc <xTaskRemoveFromEventList>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d00f      	beq.n	80031e6 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00c      	beq.n	80031e6 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e008      	b.n	80031e6 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031d4:	230f      	movs	r3, #15
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	3301      	adds	r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	b259      	sxtb	r1, r3
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2245      	movs	r2, #69	@ 0x45
 80031e4:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80031e6:	2301      	movs	r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	e001      	b.n	80031f0 <xQueueGiveFromISR+0xbe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	0018      	movs	r0, r3
 80031f4:	f001 f9f4 	bl	80045e0 <vClearInterruptMaskFromISR>

	return xReturn;
 80031f8:	69fb      	ldr	r3, [r7, #28]
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b008      	add	sp, #32
 8003200:	bd80      	pop	{r7, pc}

08003202 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b08a      	sub	sp, #40	@ 0x28
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800320c:	2300      	movs	r3, #0
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003214:	2300      	movs	r3, #0
 8003216:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <xQueueSemaphoreTake+0x22>
 800321e:	b672      	cpsid	i
 8003220:	46c0      	nop			@ (mov r8, r8)
 8003222:	e7fd      	b.n	8003220 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <xQueueSemaphoreTake+0x30>
 800322c:	b672      	cpsid	i
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	e7fd      	b.n	800322e <xQueueSemaphoreTake+0x2c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003232:	f000 ff4f 	bl	80040d4 <xTaskGetSchedulerState>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d102      	bne.n	8003240 <xQueueSemaphoreTake+0x3e>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <xQueueSemaphoreTake+0x42>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <xQueueSemaphoreTake+0x44>
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <xQueueSemaphoreTake+0x4e>
 800324a:	b672      	cpsid	i
 800324c:	46c0      	nop			@ (mov r8, r8)
 800324e:	e7fd      	b.n	800324c <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003250:	f001 f996 	bl	8004580 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01d      	beq.n	800329c <xQueueSemaphoreTake+0x9a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	1e5a      	subs	r2, r3, #1
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d104      	bne.n	800327a <xQueueSemaphoreTake+0x78>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003270:	f001 f884 	bl	800437c <pvTaskIncrementMutexHeldCount>
 8003274:	0002      	movs	r2, r0
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <xQueueSemaphoreTake+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3310      	adds	r3, #16
 8003286:	0018      	movs	r0, r3
 8003288:	f000 fda0 	bl	8003dcc <xTaskRemoveFromEventList>
 800328c:	1e03      	subs	r3, r0, #0
 800328e:	d001      	beq.n	8003294 <xQueueSemaphoreTake+0x92>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003290:	f001 f966 	bl	8004560 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003294:	f001 f986 	bl	80045a4 <vPortExitCritical>
				return pdPASS;
 8003298:	2301      	movs	r3, #1
 800329a:	e08c      	b.n	80033b6 <xQueueSemaphoreTake+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <xQueueSemaphoreTake+0xb4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <xQueueSemaphoreTake+0xac>
 80032a8:	b672      	cpsid	i
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	e7fd      	b.n	80032aa <xQueueSemaphoreTake+0xa8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80032ae:	f001 f979 	bl	80045a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e07f      	b.n	80033b6 <xQueueSemaphoreTake+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <xQueueSemaphoreTake+0xc8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032bc:	230c      	movs	r3, #12
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	0018      	movs	r0, r3
 80032c2:	f000 fde1 	bl	8003e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032ca:	f001 f96b 	bl	80045a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032ce:	f000 fbbb 	bl	8003a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032d2:	f001 f955 	bl	8004580 <vPortEnterCritical>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2244      	movs	r2, #68	@ 0x44
 80032da:	5c9b      	ldrb	r3, [r3, r2]
 80032dc:	b25b      	sxtb	r3, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	d103      	bne.n	80032ea <xQueueSemaphoreTake+0xe8>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2244      	movs	r2, #68	@ 0x44
 80032e6:	2100      	movs	r1, #0
 80032e8:	5499      	strb	r1, [r3, r2]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	2245      	movs	r2, #69	@ 0x45
 80032ee:	5c9b      	ldrb	r3, [r3, r2]
 80032f0:	b25b      	sxtb	r3, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	d103      	bne.n	80032fe <xQueueSemaphoreTake+0xfc>
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	2245      	movs	r2, #69	@ 0x45
 80032fa:	2100      	movs	r1, #0
 80032fc:	5499      	strb	r1, [r3, r2]
 80032fe:	f001 f951 	bl	80045a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003302:	003a      	movs	r2, r7
 8003304:	230c      	movs	r3, #12
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	0011      	movs	r1, r2
 800330a:	0018      	movs	r0, r3
 800330c:	f000 fdd0 	bl	8003eb0 <xTaskCheckForTimeOut>
 8003310:	1e03      	subs	r3, r0, #0
 8003312:	d12e      	bne.n	8003372 <xQueueSemaphoreTake+0x170>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	0018      	movs	r0, r3
 8003318:	f000 f9bb 	bl	8003692 <prvIsQueueEmpty>
 800331c:	1e03      	subs	r3, r0, #0
 800331e:	d021      	beq.n	8003364 <xQueueSemaphoreTake+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <xQueueSemaphoreTake+0x13c>
					{
						taskENTER_CRITICAL();
 8003328:	f001 f92a 	bl	8004580 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 feeb 	bl	800410c <xTaskPriorityInherit>
 8003336:	0003      	movs	r3, r0
 8003338:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800333a:	f001 f933 	bl	80045a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3324      	adds	r3, #36	@ 0x24
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	0011      	movs	r1, r2
 8003346:	0018      	movs	r0, r3
 8003348:	f000 fd20 	bl	8003d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	0018      	movs	r0, r3
 8003350:	f000 f941 	bl	80035d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003354:	f000 fb84 	bl	8003a60 <xTaskResumeAll>
 8003358:	1e03      	subs	r3, r0, #0
 800335a:	d000      	beq.n	800335e <xQueueSemaphoreTake+0x15c>
 800335c:	e778      	b.n	8003250 <xQueueSemaphoreTake+0x4e>
				{
					portYIELD_WITHIN_API();
 800335e:	f001 f8ff 	bl	8004560 <vPortYield>
 8003362:	e775      	b.n	8003250 <xQueueSemaphoreTake+0x4e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f935 	bl	80035d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800336c:	f000 fb78 	bl	8003a60 <xTaskResumeAll>
 8003370:	e76e      	b.n	8003250 <xQueueSemaphoreTake+0x4e>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	0018      	movs	r0, r3
 8003376:	f000 f92e 	bl	80035d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800337a:	f000 fb71 	bl	8003a60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	0018      	movs	r0, r3
 8003382:	f000 f986 	bl	8003692 <prvIsQueueEmpty>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d100      	bne.n	800338c <xQueueSemaphoreTake+0x18a>
 800338a:	e761      	b.n	8003250 <xQueueSemaphoreTake+0x4e>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d010      	beq.n	80033b4 <xQueueSemaphoreTake+0x1b2>
					{
						taskENTER_CRITICAL();
 8003392:	f001 f8f5 	bl	8004580 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	0018      	movs	r0, r3
 800339a:	f000 f875 	bl	8003488 <prvGetDisinheritPriorityAfterTimeout>
 800339e:	0003      	movs	r3, r0
 80033a0:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	0011      	movs	r1, r2
 80033aa:	0018      	movs	r0, r3
 80033ac:	f000 ff74 	bl	8004298 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80033b0:	f001 f8f8 	bl	80045a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b00a      	add	sp, #40	@ 0x28
 80033bc:	bd80      	pop	{r7, pc}

080033be <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80033be:	b590      	push	{r4, r7, lr}
 80033c0:	b08b      	sub	sp, #44	@ 0x2c
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <xQueueReceiveFromISR+0x1c>
 80033d4:	b672      	cpsid	i
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	e7fd      	b.n	80033d6 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d103      	bne.n	80033e8 <xQueueReceiveFromISR+0x2a>
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <xQueueReceiveFromISR+0x2e>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <xQueueReceiveFromISR+0x30>
 80033ec:	2300      	movs	r3, #0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <xQueueReceiveFromISR+0x3a>
 80033f2:	b672      	cpsid	i
 80033f4:	46c0      	nop			@ (mov r8, r8)
 80033f6:	e7fd      	b.n	80033f4 <xQueueReceiveFromISR+0x36>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033f8:	f001 f8ec 	bl	80045d4 <ulSetInterruptMaskFromISR>
 80033fc:	0003      	movs	r3, r0
 80033fe:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d032      	beq.n	8003472 <xQueueReceiveFromISR+0xb4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800340c:	2417      	movs	r4, #23
 800340e:	193b      	adds	r3, r7, r4
 8003410:	6a3a      	ldr	r2, [r7, #32]
 8003412:	2144      	movs	r1, #68	@ 0x44
 8003414:	5c52      	ldrb	r2, [r2, r1]
 8003416:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	0011      	movs	r1, r2
 800341e:	0018      	movs	r0, r3
 8003420:	f000 f8b3 	bl	800358a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	1e5a      	subs	r2, r3, #1
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800342c:	193b      	adds	r3, r7, r4
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b25b      	sxtb	r3, r3
 8003432:	3301      	adds	r3, #1
 8003434:	d111      	bne.n	800345a <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <xQueueReceiveFromISR+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	3310      	adds	r3, #16
 8003442:	0018      	movs	r0, r3
 8003444:	f000 fcc2 	bl	8003dcc <xTaskRemoveFromEventList>
 8003448:	1e03      	subs	r3, r0, #0
 800344a:	d00f      	beq.n	800346c <xQueueReceiveFromISR+0xae>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00c      	beq.n	800346c <xQueueReceiveFromISR+0xae>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e008      	b.n	800346c <xQueueReceiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800345a:	2317      	movs	r3, #23
 800345c:	18fb      	adds	r3, r7, r3
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	b259      	sxtb	r1, r3
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	2244      	movs	r2, #68	@ 0x44
 800346a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800346c:	2301      	movs	r3, #1
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003470:	e001      	b.n	8003476 <xQueueReceiveFromISR+0xb8>
		}
		else
		{
			xReturn = pdFAIL;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	0018      	movs	r0, r3
 800347a:	f001 f8b1 	bl	80045e0 <vClearInterruptMaskFromISR>

	return xReturn;
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b00b      	add	sp, #44	@ 0x2c
 8003486:	bd90      	pop	{r4, r7, pc}

08003488 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2207      	movs	r2, #7
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e001      	b.n	80034aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80034aa:	68fb      	ldr	r3, [r7, #12]
	}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b004      	add	sp, #16
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10e      	bne.n	80034f0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d14e      	bne.n	8003578 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 fe7c 	bl	80041dc <xTaskPriorityDisinherit>
 80034e4:	0003      	movs	r3, r0
 80034e6:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
 80034ee:	e043      	b.n	8003578 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d119      	bne.n	800352a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6858      	ldr	r0, [r3, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	0019      	movs	r1, r3
 8003502:	f001 fb1b 	bl	8004b3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	18d2      	adds	r2, r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	d32b      	bcc.n	8003578 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	605a      	str	r2, [r3, #4]
 8003528:	e026      	b.n	8003578 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	68d8      	ldr	r0, [r3, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	0019      	movs	r1, r3
 8003536:	f001 fb01 	bl	8004b3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	425b      	negs	r3, r3
 8003544:	18d2      	adds	r2, r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d207      	bcs.n	8003566 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	425b      	negs	r3, r3
 8003560:	18d2      	adds	r2, r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d105      	bne.n	8003578 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	3b01      	subs	r3, #1
 8003576:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003580:	697b      	ldr	r3, [r7, #20]
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b006      	add	sp, #24
 8003588:	bd80      	pop	{r7, pc}

0800358a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d018      	beq.n	80035ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	18d2      	adds	r2, r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d303      	bcc.n	80035be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68d9      	ldr	r1, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f001 fab7 	bl	8004b3c <memcpy>
	}
}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b002      	add	sp, #8
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035de:	f000 ffcf 	bl	8004580 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035e2:	230f      	movs	r3, #15
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	2145      	movs	r1, #69	@ 0x45
 80035ea:	5c52      	ldrb	r2, [r2, r1]
 80035ec:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035ee:	e013      	b.n	8003618 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d016      	beq.n	8003626 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3324      	adds	r3, #36	@ 0x24
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 fbe5 	bl	8003dcc <xTaskRemoveFromEventList>
 8003602:	1e03      	subs	r3, r0, #0
 8003604:	d001      	beq.n	800360a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003606:	f000 fca5 	bl	8003f54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800360a:	210f      	movs	r1, #15
 800360c:	187b      	adds	r3, r7, r1
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	3b01      	subs	r3, #1
 8003612:	b2da      	uxtb	r2, r3
 8003614:	187b      	adds	r3, r7, r1
 8003616:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003618:	230f      	movs	r3, #15
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	b25b      	sxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	dce5      	bgt.n	80035f0 <prvUnlockQueue+0x1a>
 8003624:	e000      	b.n	8003628 <prvUnlockQueue+0x52>
					break;
 8003626:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2245      	movs	r2, #69	@ 0x45
 800362c:	21ff      	movs	r1, #255	@ 0xff
 800362e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003630:	f000 ffb8 	bl	80045a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003634:	f000 ffa4 	bl	8004580 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003638:	230e      	movs	r3, #14
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	2144      	movs	r1, #68	@ 0x44
 8003640:	5c52      	ldrb	r2, [r2, r1]
 8003642:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003644:	e013      	b.n	800366e <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3310      	adds	r3, #16
 8003652:	0018      	movs	r0, r3
 8003654:	f000 fbba 	bl	8003dcc <xTaskRemoveFromEventList>
 8003658:	1e03      	subs	r3, r0, #0
 800365a:	d001      	beq.n	8003660 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800365c:	f000 fc7a 	bl	8003f54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003660:	210e      	movs	r1, #14
 8003662:	187b      	adds	r3, r7, r1
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	3b01      	subs	r3, #1
 8003668:	b2da      	uxtb	r2, r3
 800366a:	187b      	adds	r3, r7, r1
 800366c:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800366e:	230e      	movs	r3, #14
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b25b      	sxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	dce5      	bgt.n	8003646 <prvUnlockQueue+0x70>
 800367a:	e000      	b.n	800367e <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800367c:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2244      	movs	r2, #68	@ 0x44
 8003682:	21ff      	movs	r1, #255	@ 0xff
 8003684:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003686:	f000 ff8d 	bl	80045a4 <vPortExitCritical>
}
 800368a:	46c0      	nop			@ (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	b004      	add	sp, #16
 8003690:	bd80      	pop	{r7, pc}

08003692 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800369a:	f000 ff71 	bl	8004580 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036a6:	2301      	movs	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	e001      	b.n	80036b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036b0:	f000 ff78 	bl	80045a4 <vPortExitCritical>

	return xReturn;
 80036b4:	68fb      	ldr	r3, [r7, #12]
}
 80036b6:	0018      	movs	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b004      	add	sp, #16
 80036bc:	bd80      	pop	{r7, pc}

080036be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036c6:	f000 ff5b 	bl	8004580 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d102      	bne.n	80036dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e001      	b.n	80036e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036e0:	f000 ff60 	bl	80045a4 <vPortExitCritical>

	return xReturn;
 80036e4:	68fb      	ldr	r3, [r7, #12]
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b004      	add	sp, #16
 80036ec:	bd80      	pop	{r7, pc}

080036ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036ee:	b590      	push	{r4, r7, lr}
 80036f0:	b08d      	sub	sp, #52	@ 0x34
 80036f2:	af04      	add	r7, sp, #16
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	1dbb      	adds	r3, r7, #6
 80036fc:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036fe:	1dbb      	adds	r3, r7, #6
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	0018      	movs	r0, r3
 8003706:	f000 ffd3 	bl	80046b0 <pvPortMalloc>
 800370a:	0003      	movs	r3, r0
 800370c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d010      	beq.n	8003736 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003714:	20a0      	movs	r0, #160	@ 0xa0
 8003716:	f000 ffcb 	bl	80046b0 <pvPortMalloc>
 800371a:	0003      	movs	r3, r0
 800371c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	631a      	str	r2, [r3, #48]	@ 0x30
 800372a:	e006      	b.n	800373a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	0018      	movs	r0, r3
 8003730:	f001 f86e 	bl	8004810 <vPortFree>
 8003734:	e001      	b.n	800373a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d016      	beq.n	800376e <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003740:	1dbb      	adds	r3, r7, #6
 8003742:	881a      	ldrh	r2, [r3, #0]
 8003744:	683c      	ldr	r4, [r7, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	2300      	movs	r3, #0
 800374c:	9303      	str	r3, [sp, #12]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	0023      	movs	r3, r4
 800375c:	f000 f810 	bl	8003780 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	0018      	movs	r0, r3
 8003764:	f000 f8a6 	bl	80038b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003768:	2301      	movs	r3, #1
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e002      	b.n	8003774 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800376e:	2301      	movs	r3, #1
 8003770:	425b      	negs	r3, r3
 8003772:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003774:	69bb      	ldr	r3, [r7, #24]
	}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b009      	add	sp, #36	@ 0x24
 800377c:	bd90      	pop	{r4, r7, pc}
	...

08003780 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800378e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4943      	ldr	r1, [pc, #268]	@ (80038a4 <prvInitialiseNewTask+0x124>)
 8003796:	468c      	mov	ip, r1
 8003798:	4463      	add	r3, ip
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	18d3      	adds	r3, r2, r3
 800379e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2207      	movs	r2, #7
 80037a4:	4393      	bics	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2207      	movs	r2, #7
 80037ac:	4013      	ands	r3, r2
 80037ae:	d002      	beq.n	80037b6 <prvInitialiseNewTask+0x36>
 80037b0:	b672      	cpsid	i
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	e7fd      	b.n	80037b2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e013      	b.n	80037ea <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	18d3      	adds	r3, r2, r3
 80037c8:	7818      	ldrb	r0, [r3, #0]
 80037ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037cc:	2134      	movs	r1, #52	@ 0x34
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	18d3      	adds	r3, r2, r3
 80037d2:	185b      	adds	r3, r3, r1
 80037d4:	1c02      	adds	r2, r0, #0
 80037d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	18d3      	adds	r3, r2, r3
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d006      	beq.n	80037f2 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	3301      	adds	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d9e8      	bls.n	80037c2 <prvInitialiseNewTask+0x42>
 80037f0:	e000      	b.n	80037f4 <prvInitialiseNewTask+0x74>
			{
				break;
 80037f2:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f6:	2243      	movs	r2, #67	@ 0x43
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]
 80037fc:	e003      	b.n	8003806 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	2234      	movs	r2, #52	@ 0x34
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	2b06      	cmp	r3, #6
 800380a:	d901      	bls.n	8003810 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800380c:	2306      	movs	r3, #6
 800380e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003812:	6a3a      	ldr	r2, [r7, #32]
 8003814:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	2200      	movs	r2, #0
 8003820:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003824:	3304      	adds	r3, #4
 8003826:	0018      	movs	r0, r3
 8003828:	f7ff fa8a 	bl	8002d40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382e:	3318      	adds	r3, #24
 8003830:	0018      	movs	r0, r3
 8003832:	f7ff fa85 	bl	8002d40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800383a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	2207      	movs	r2, #7
 8003840:	1ad2      	subs	r2, r2, r3
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800384a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800384c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384e:	2298      	movs	r2, #152	@ 0x98
 8003850:	2100      	movs	r1, #0
 8003852:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003856:	229c      	movs	r2, #156	@ 0x9c
 8003858:	2100      	movs	r1, #0
 800385a:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800385c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385e:	334c      	adds	r3, #76	@ 0x4c
 8003860:	224c      	movs	r2, #76	@ 0x4c
 8003862:	2100      	movs	r1, #0
 8003864:	0018      	movs	r0, r3
 8003866:	f001 f8db 	bl	8004a20 <memset>
 800386a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386c:	4a0e      	ldr	r2, [pc, #56]	@ (80038a8 <prvInitialiseNewTask+0x128>)
 800386e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003872:	4a0e      	ldr	r2, [pc, #56]	@ (80038ac <prvInitialiseNewTask+0x12c>)
 8003874:	655a      	str	r2, [r3, #84]	@ 0x54
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	4a0d      	ldr	r2, [pc, #52]	@ (80038b0 <prvInitialiseNewTask+0x130>)
 800387a:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	68f9      	ldr	r1, [r7, #12]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	0018      	movs	r0, r3
 8003884:	f000 fde0 	bl	8004448 <pxPortInitialiseStack>
 8003888:	0002      	movs	r2, r0
 800388a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b006      	add	sp, #24
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	3fffffff 	.word	0x3fffffff
 80038a8:	20000ebc 	.word	0x20000ebc
 80038ac:	20000f24 	.word	0x20000f24
 80038b0:	20000f8c 	.word	0x20000f8c

080038b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038bc:	f000 fe60 	bl	8004580 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038c0:	4b28      	ldr	r3, [pc, #160]	@ (8003964 <prvAddNewTaskToReadyList+0xb0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	4b27      	ldr	r3, [pc, #156]	@ (8003964 <prvAddNewTaskToReadyList+0xb0>)
 80038c8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80038ca:	4b27      	ldr	r3, [pc, #156]	@ (8003968 <prvAddNewTaskToReadyList+0xb4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038d2:	4b25      	ldr	r3, [pc, #148]	@ (8003968 <prvAddNewTaskToReadyList+0xb4>)
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038d8:	4b22      	ldr	r3, [pc, #136]	@ (8003964 <prvAddNewTaskToReadyList+0xb0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d110      	bne.n	8003902 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038e0:	f000 fb52 	bl	8003f88 <prvInitialiseTaskLists>
 80038e4:	e00d      	b.n	8003902 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038e6:	4b21      	ldr	r3, [pc, #132]	@ (800396c <prvAddNewTaskToReadyList+0xb8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003968 <prvAddNewTaskToReadyList+0xb4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d802      	bhi.n	8003902 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003968 <prvAddNewTaskToReadyList+0xb4>)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003902:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <prvAddNewTaskToReadyList+0xbc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	4b19      	ldr	r3, [pc, #100]	@ (8003970 <prvAddNewTaskToReadyList+0xbc>)
 800390a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003910:	4b18      	ldr	r3, [pc, #96]	@ (8003974 <prvAddNewTaskToReadyList+0xc0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d903      	bls.n	8003920 <prvAddNewTaskToReadyList+0x6c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800391c:	4b15      	ldr	r3, [pc, #84]	@ (8003974 <prvAddNewTaskToReadyList+0xc0>)
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003924:	0013      	movs	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	189b      	adds	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4a12      	ldr	r2, [pc, #72]	@ (8003978 <prvAddNewTaskToReadyList+0xc4>)
 800392e:	189a      	adds	r2, r3, r2
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	0019      	movs	r1, r3
 8003936:	0010      	movs	r0, r2
 8003938:	f7ff fa0d 	bl	8002d56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800393c:	f000 fe32 	bl	80045a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003940:	4b0a      	ldr	r3, [pc, #40]	@ (800396c <prvAddNewTaskToReadyList+0xb8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003948:	4b07      	ldr	r3, [pc, #28]	@ (8003968 <prvAddNewTaskToReadyList+0xb4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003952:	429a      	cmp	r2, r3
 8003954:	d201      	bcs.n	800395a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003956:	f000 fe03 	bl	8004560 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b002      	add	sp, #8
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			@ (mov r8, r8)
 8003964:	20000270 	.word	0x20000270
 8003968:	20000170 	.word	0x20000170
 800396c:	2000027c 	.word	0x2000027c
 8003970:	2000028c 	.word	0x2000028c
 8003974:	20000278 	.word	0x20000278
 8003978:	20000174 	.word	0x20000174

0800397c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d011      	beq.n	80039b2 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800398e:	4b0d      	ldr	r3, [pc, #52]	@ (80039c4 <vTaskDelay+0x48>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <vTaskDelay+0x20>
 8003996:	b672      	cpsid	i
 8003998:	46c0      	nop			@ (mov r8, r8)
 800399a:	e7fd      	b.n	8003998 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800399c:	f000 f854 	bl	8003a48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2100      	movs	r1, #0
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 fcfb 	bl	80043a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039aa:	f000 f859 	bl	8003a60 <xTaskResumeAll>
 80039ae:	0003      	movs	r3, r0
 80039b0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80039b8:	f000 fdd2 	bl	8004560 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039bc:	46c0      	nop			@ (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b004      	add	sp, #16
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000298 	.word	0x20000298

080039c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80039ce:	4916      	ldr	r1, [pc, #88]	@ (8003a28 <vTaskStartScheduler+0x60>)
 80039d0:	4816      	ldr	r0, [pc, #88]	@ (8003a2c <vTaskStartScheduler+0x64>)
 80039d2:	4b17      	ldr	r3, [pc, #92]	@ (8003a30 <vTaskStartScheduler+0x68>)
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	2300      	movs	r3, #0
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2300      	movs	r3, #0
 80039dc:	2280      	movs	r2, #128	@ 0x80
 80039de:	f7ff fe86 	bl	80036ee <xTaskCreate>
 80039e2:	0003      	movs	r3, r0
 80039e4:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d113      	bne.n	8003a14 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80039ec:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039ee:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <vTaskStartScheduler+0x6c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	334c      	adds	r3, #76	@ 0x4c
 80039f4:	001a      	movs	r2, r3
 80039f6:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <vTaskStartScheduler+0x70>)
 80039f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039fa:	4b10      	ldr	r3, [pc, #64]	@ (8003a3c <vTaskStartScheduler+0x74>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	4252      	negs	r2, r2
 8003a00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a02:	4b0f      	ldr	r3, [pc, #60]	@ (8003a40 <vTaskStartScheduler+0x78>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a08:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <vTaskStartScheduler+0x7c>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a0e:	f000 fd83 	bl	8004518 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a12:	e005      	b.n	8003a20 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3301      	adds	r3, #1
 8003a18:	d102      	bne.n	8003a20 <vTaskStartScheduler+0x58>
 8003a1a:	b672      	cpsid	i
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	e7fd      	b.n	8003a1c <vTaskStartScheduler+0x54>
}
 8003a20:	46c0      	nop			@ (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b002      	add	sp, #8
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	08004da0 	.word	0x08004da0
 8003a2c:	08003f69 	.word	0x08003f69
 8003a30:	20000294 	.word	0x20000294
 8003a34:	20000170 	.word	0x20000170
 8003a38:	20000010 	.word	0x20000010
 8003a3c:	20000290 	.word	0x20000290
 8003a40:	2000027c 	.word	0x2000027c
 8003a44:	20000274 	.word	0x20000274

08003a48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	@ (8003a5c <vTaskSuspendAll+0x14>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	4b02      	ldr	r3, [pc, #8]	@ (8003a5c <vTaskSuspendAll+0x14>)
 8003a54:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000298 	.word	0x20000298

08003a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b58 <xTaskResumeAll+0xf8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <xTaskResumeAll+0x1c>
 8003a76:	b672      	cpsid	i
 8003a78:	46c0      	nop			@ (mov r8, r8)
 8003a7a:	e7fd      	b.n	8003a78 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a7c:	f000 fd80 	bl	8004580 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a80:	4b35      	ldr	r3, [pc, #212]	@ (8003b58 <xTaskResumeAll+0xf8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1e5a      	subs	r2, r3, #1
 8003a86:	4b34      	ldr	r3, [pc, #208]	@ (8003b58 <xTaskResumeAll+0xf8>)
 8003a88:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a8a:	4b33      	ldr	r3, [pc, #204]	@ (8003b58 <xTaskResumeAll+0xf8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d15b      	bne.n	8003b4a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a92:	4b32      	ldr	r3, [pc, #200]	@ (8003b5c <xTaskResumeAll+0xfc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d057      	beq.n	8003b4a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a9a:	e02f      	b.n	8003afc <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a9c:	4b30      	ldr	r3, [pc, #192]	@ (8003b60 <xTaskResumeAll+0x100>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff f9ac 	bl	8002e06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f7ff f9a7 	bl	8002e06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003abc:	4b29      	ldr	r3, [pc, #164]	@ (8003b64 <xTaskResumeAll+0x104>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d903      	bls.n	8003acc <xTaskResumeAll+0x6c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac8:	4b26      	ldr	r3, [pc, #152]	@ (8003b64 <xTaskResumeAll+0x104>)
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad0:	0013      	movs	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	189b      	adds	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4a23      	ldr	r2, [pc, #140]	@ (8003b68 <xTaskResumeAll+0x108>)
 8003ada:	189a      	adds	r2, r3, r2
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	0010      	movs	r0, r2
 8003ae4:	f7ff f937 	bl	8002d56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aec:	4b1f      	ldr	r3, [pc, #124]	@ (8003b6c <xTaskResumeAll+0x10c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d302      	bcc.n	8003afc <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8003af6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b70 <xTaskResumeAll+0x110>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003afc:	4b18      	ldr	r3, [pc, #96]	@ (8003b60 <xTaskResumeAll+0x100>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1cb      	bne.n	8003a9c <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b0a:	f000 fac5 	bl	8004098 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b0e:	4b19      	ldr	r3, [pc, #100]	@ (8003b74 <xTaskResumeAll+0x114>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00f      	beq.n	8003b3a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b1a:	f000 f82d 	bl	8003b78 <xTaskIncrementTick>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d002      	beq.n	8003b28 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8003b22:	4b13      	ldr	r3, [pc, #76]	@ (8003b70 <xTaskResumeAll+0x110>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1f2      	bne.n	8003b1a <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8003b34:	4b0f      	ldr	r3, [pc, #60]	@ (8003b74 <xTaskResumeAll+0x114>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <xTaskResumeAll+0x110>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b42:	2301      	movs	r3, #1
 8003b44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b46:	f000 fd0b 	bl	8004560 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b4a:	f000 fd2b 	bl	80045a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
}
 8003b50:	0018      	movs	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b004      	add	sp, #16
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000298 	.word	0x20000298
 8003b5c:	20000270 	.word	0x20000270
 8003b60:	20000230 	.word	0x20000230
 8003b64:	20000278 	.word	0x20000278
 8003b68:	20000174 	.word	0x20000174
 8003b6c:	20000170 	.word	0x20000170
 8003b70:	20000284 	.word	0x20000284
 8003b74:	20000280 	.word	0x20000280

08003b78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b82:	4b4a      	ldr	r3, [pc, #296]	@ (8003cac <xTaskIncrementTick+0x134>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d000      	beq.n	8003b8c <xTaskIncrementTick+0x14>
 8003b8a:	e085      	b.n	8003c98 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b8c:	4b48      	ldr	r3, [pc, #288]	@ (8003cb0 <xTaskIncrementTick+0x138>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b94:	4b46      	ldr	r3, [pc, #280]	@ (8003cb0 <xTaskIncrementTick+0x138>)
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d118      	bne.n	8003bd2 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ba0:	4b44      	ldr	r3, [pc, #272]	@ (8003cb4 <xTaskIncrementTick+0x13c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <xTaskIncrementTick+0x38>
 8003baa:	b672      	cpsid	i
 8003bac:	46c0      	nop			@ (mov r8, r8)
 8003bae:	e7fd      	b.n	8003bac <xTaskIncrementTick+0x34>
 8003bb0:	4b40      	ldr	r3, [pc, #256]	@ (8003cb4 <xTaskIncrementTick+0x13c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b40      	ldr	r3, [pc, #256]	@ (8003cb8 <xTaskIncrementTick+0x140>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb4 <xTaskIncrementTick+0x13c>)
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb8 <xTaskIncrementTick+0x140>)
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8003cbc <xTaskIncrementTick+0x144>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	4b3c      	ldr	r3, [pc, #240]	@ (8003cbc <xTaskIncrementTick+0x144>)
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	f000 fa63 	bl	8004098 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc0 <xTaskIncrementTick+0x148>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d349      	bcc.n	8003c70 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bdc:	4b35      	ldr	r3, [pc, #212]	@ (8003cb4 <xTaskIncrementTick+0x13c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be6:	4b36      	ldr	r3, [pc, #216]	@ (8003cc0 <xTaskIncrementTick+0x148>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	4252      	negs	r2, r2
 8003bec:	601a      	str	r2, [r3, #0]
					break;
 8003bee:	e03f      	b.n	8003c70 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf0:	4b30      	ldr	r3, [pc, #192]	@ (8003cb4 <xTaskIncrementTick+0x13c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d203      	bcs.n	8003c10 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c08:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc0 <xTaskIncrementTick+0x148>)
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c0e:	e02f      	b.n	8003c70 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	3304      	adds	r3, #4
 8003c14:	0018      	movs	r0, r3
 8003c16:	f7ff f8f6 	bl	8002e06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	3318      	adds	r3, #24
 8003c26:	0018      	movs	r0, r3
 8003c28:	f7ff f8ed 	bl	8002e06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c30:	4b24      	ldr	r3, [pc, #144]	@ (8003cc4 <xTaskIncrementTick+0x14c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d903      	bls.n	8003c40 <xTaskIncrementTick+0xc8>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c3c:	4b21      	ldr	r3, [pc, #132]	@ (8003cc4 <xTaskIncrementTick+0x14c>)
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c44:	0013      	movs	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	189b      	adds	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc8 <xTaskIncrementTick+0x150>)
 8003c4e:	189a      	adds	r2, r3, r2
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	3304      	adds	r3, #4
 8003c54:	0019      	movs	r1, r3
 8003c56:	0010      	movs	r0, r2
 8003c58:	f7ff f87d 	bl	8002d56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c60:	4b1a      	ldr	r3, [pc, #104]	@ (8003ccc <xTaskIncrementTick+0x154>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d3b8      	bcc.n	8003bdc <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c6e:	e7b5      	b.n	8003bdc <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c70:	4b16      	ldr	r3, [pc, #88]	@ (8003ccc <xTaskIncrementTick+0x154>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c76:	4914      	ldr	r1, [pc, #80]	@ (8003cc8 <xTaskIncrementTick+0x150>)
 8003c78:	0013      	movs	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	585b      	ldr	r3, [r3, r1]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d901      	bls.n	8003c8a <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 8003c86:	2301      	movs	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c8a:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <xTaskIncrementTick+0x158>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8003c92:	2301      	movs	r3, #1
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	e004      	b.n	8003ca2 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c98:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd4 <xTaskIncrementTick+0x15c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <xTaskIncrementTick+0x15c>)
 8003ca0:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ca2:	697b      	ldr	r3, [r7, #20]
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b006      	add	sp, #24
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20000298 	.word	0x20000298
 8003cb0:	20000274 	.word	0x20000274
 8003cb4:	20000228 	.word	0x20000228
 8003cb8:	2000022c 	.word	0x2000022c
 8003cbc:	20000288 	.word	0x20000288
 8003cc0:	20000290 	.word	0x20000290
 8003cc4:	20000278 	.word	0x20000278
 8003cc8:	20000174 	.word	0x20000174
 8003ccc:	20000170 	.word	0x20000170
 8003cd0:	20000284 	.word	0x20000284
 8003cd4:	20000280 	.word	0x20000280

08003cd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cde:	4b25      	ldr	r3, [pc, #148]	@ (8003d74 <vTaskSwitchContext+0x9c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ce6:	4b24      	ldr	r3, [pc, #144]	@ (8003d78 <vTaskSwitchContext+0xa0>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cec:	e03e      	b.n	8003d6c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003cee:	4b22      	ldr	r3, [pc, #136]	@ (8003d78 <vTaskSwitchContext+0xa0>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf4:	4b21      	ldr	r3, [pc, #132]	@ (8003d7c <vTaskSwitchContext+0xa4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	e008      	b.n	8003d0e <vTaskSwitchContext+0x36>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <vTaskSwitchContext+0x30>
 8003d02:	b672      	cpsid	i
 8003d04:	46c0      	nop			@ (mov r8, r8)
 8003d06:	e7fd      	b.n	8003d04 <vTaskSwitchContext+0x2c>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	491c      	ldr	r1, [pc, #112]	@ (8003d80 <vTaskSwitchContext+0xa8>)
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	0013      	movs	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	585b      	ldr	r3, [r3, r1]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0ed      	beq.n	8003cfc <vTaskSwitchContext+0x24>
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	0013      	movs	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4a15      	ldr	r2, [pc, #84]	@ (8003d80 <vTaskSwitchContext+0xa8>)
 8003d2c:	189b      	adds	r3, r3, r2
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	3308      	adds	r3, #8
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d104      	bne.n	8003d50 <vTaskSwitchContext+0x78>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <vTaskSwitchContext+0xac>)
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	4b08      	ldr	r3, [pc, #32]	@ (8003d7c <vTaskSwitchContext+0xa4>)
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d60:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <vTaskSwitchContext+0xac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	334c      	adds	r3, #76	@ 0x4c
 8003d66:	001a      	movs	r2, r3
 8003d68:	4b07      	ldr	r3, [pc, #28]	@ (8003d88 <vTaskSwitchContext+0xb0>)
 8003d6a:	601a      	str	r2, [r3, #0]
}
 8003d6c:	46c0      	nop			@ (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b002      	add	sp, #8
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000298 	.word	0x20000298
 8003d78:	20000284 	.word	0x20000284
 8003d7c:	20000278 	.word	0x20000278
 8003d80:	20000174 	.word	0x20000174
 8003d84:	20000170 	.word	0x20000170
 8003d88:	20000010 	.word	0x20000010

08003d8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <vTaskPlaceOnEventList+0x16>
 8003d9c:	b672      	cpsid	i
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	e7fd      	b.n	8003d9e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003da2:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <vTaskPlaceOnEventList+0x3c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3318      	adds	r3, #24
 8003da8:	001a      	movs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0011      	movs	r1, r2
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7fe fff3 	bl	8002d9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2101      	movs	r1, #1
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 faf1 	bl	80043a0 <prvAddCurrentTaskToDelayedList>
}
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b002      	add	sp, #8
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	20000170 	.word	0x20000170

08003dcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <xTaskRemoveFromEventList+0x1c>
 8003de2:	b672      	cpsid	i
 8003de4:	46c0      	nop			@ (mov r8, r8)
 8003de6:	e7fd      	b.n	8003de4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	3318      	adds	r3, #24
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7ff f80a 	bl	8002e06 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003df2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e70 <xTaskRemoveFromEventList+0xa4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d11d      	bne.n	8003e36 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7ff f801 	bl	8002e06 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e08:	4b1a      	ldr	r3, [pc, #104]	@ (8003e74 <xTaskRemoveFromEventList+0xa8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d903      	bls.n	8003e18 <xTaskRemoveFromEventList+0x4c>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e14:	4b17      	ldr	r3, [pc, #92]	@ (8003e74 <xTaskRemoveFromEventList+0xa8>)
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	189b      	adds	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4a14      	ldr	r2, [pc, #80]	@ (8003e78 <xTaskRemoveFromEventList+0xac>)
 8003e26:	189a      	adds	r2, r3, r2
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	0010      	movs	r0, r2
 8003e30:	f7fe ff91 	bl	8002d56 <vListInsertEnd>
 8003e34:	e007      	b.n	8003e46 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	3318      	adds	r3, #24
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e7c <xTaskRemoveFromEventList+0xb0>)
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7fe ff88 	bl	8002d56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e80 <xTaskRemoveFromEventList+0xb4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d905      	bls.n	8003e60 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e54:	2301      	movs	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <xTaskRemoveFromEventList+0xb8>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	e001      	b.n	8003e64 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003e64:	68fb      	ldr	r3, [r7, #12]
}
 8003e66:	0018      	movs	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b004      	add	sp, #16
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	20000298 	.word	0x20000298
 8003e74:	20000278 	.word	0x20000278
 8003e78:	20000174 	.word	0x20000174
 8003e7c:	20000230 	.word	0x20000230
 8003e80:	20000170 	.word	0x20000170
 8003e84:	20000284 	.word	0x20000284

08003e88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e90:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <vTaskInternalSetTimeOutState+0x20>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e98:	4b04      	ldr	r3, [pc, #16]	@ (8003eac <vTaskInternalSetTimeOutState+0x24>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	605a      	str	r2, [r3, #4]
}
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000288 	.word	0x20000288
 8003eac:	20000274 	.word	0x20000274

08003eb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <xTaskCheckForTimeOut+0x16>
 8003ec0:	b672      	cpsid	i
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	e7fd      	b.n	8003ec2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <xTaskCheckForTimeOut+0x22>
 8003ecc:	b672      	cpsid	i
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	e7fd      	b.n	8003ece <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8003ed2:	f000 fb55 	bl	8004580 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <xTaskCheckForTimeOut+0x9c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	d102      	bne.n	8003ef4 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e024      	b.n	8003f3e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b15      	ldr	r3, [pc, #84]	@ (8003f50 <xTaskCheckForTimeOut+0xa0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d007      	beq.n	8003f10 <xTaskCheckForTimeOut+0x60>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	e016      	b.n	8003f3e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d20c      	bcs.n	8003f34 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad2      	subs	r2, r2, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7ff ffad 	bl	8003e88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	e004      	b.n	8003f3e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003f3e:	f000 fb31 	bl	80045a4 <vPortExitCritical>

	return xReturn;
 8003f42:	697b      	ldr	r3, [r7, #20]
}
 8003f44:	0018      	movs	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b006      	add	sp, #24
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000274 	.word	0x20000274
 8003f50:	20000288 	.word	0x20000288

08003f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f58:	4b02      	ldr	r3, [pc, #8]	@ (8003f64 <vTaskMissedYield+0x10>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000284 	.word	0x20000284

08003f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f70:	f000 f84e 	bl	8004010 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f74:	4b03      	ldr	r3, [pc, #12]	@ (8003f84 <prvIdleTask+0x1c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d9f9      	bls.n	8003f70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f7c:	f000 faf0 	bl	8004560 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003f80:	e7f6      	b.n	8003f70 <prvIdleTask+0x8>
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	20000174 	.word	0x20000174

08003f88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f8e:	2300      	movs	r3, #0
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	e00c      	b.n	8003fae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	0013      	movs	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	189b      	adds	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4a14      	ldr	r2, [pc, #80]	@ (8003ff0 <prvInitialiseTaskLists+0x68>)
 8003fa0:	189b      	adds	r3, r3, r2
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f7fe feae 	bl	8002d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3301      	adds	r3, #1
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b06      	cmp	r3, #6
 8003fb2:	d9ef      	bls.n	8003f94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff4 <prvInitialiseTaskLists+0x6c>)
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f7fe fea4 	bl	8002d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <prvInitialiseTaskLists+0x70>)
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f7fe fea0 	bl	8002d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <prvInitialiseTaskLists+0x74>)
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7fe fe9c 	bl	8002d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004000 <prvInitialiseTaskLists+0x78>)
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7fe fe98 	bl	8002d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <prvInitialiseTaskLists+0x7c>)
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f7fe fe94 	bl	8002d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <prvInitialiseTaskLists+0x80>)
 8003fde:	4a05      	ldr	r2, [pc, #20]	@ (8003ff4 <prvInitialiseTaskLists+0x6c>)
 8003fe0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <prvInitialiseTaskLists+0x84>)
 8003fe4:	4a04      	ldr	r2, [pc, #16]	@ (8003ff8 <prvInitialiseTaskLists+0x70>)
 8003fe6:	601a      	str	r2, [r3, #0]
}
 8003fe8:	46c0      	nop			@ (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000174 	.word	0x20000174
 8003ff4:	20000200 	.word	0x20000200
 8003ff8:	20000214 	.word	0x20000214
 8003ffc:	20000230 	.word	0x20000230
 8004000:	20000244 	.word	0x20000244
 8004004:	2000025c 	.word	0x2000025c
 8004008:	20000228 	.word	0x20000228
 800400c:	2000022c 	.word	0x2000022c

08004010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004016:	e01a      	b.n	800404e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004018:	f000 fab2 	bl	8004580 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800401c:	4b10      	ldr	r3, [pc, #64]	@ (8004060 <prvCheckTasksWaitingTermination+0x50>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	0018      	movs	r0, r3
 800402a:	f7fe feec 	bl	8002e06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800402e:	4b0d      	ldr	r3, [pc, #52]	@ (8004064 <prvCheckTasksWaitingTermination+0x54>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	1e5a      	subs	r2, r3, #1
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <prvCheckTasksWaitingTermination+0x54>)
 8004036:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004038:	4b0b      	ldr	r3, [pc, #44]	@ (8004068 <prvCheckTasksWaitingTermination+0x58>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	1e5a      	subs	r2, r3, #1
 800403e:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <prvCheckTasksWaitingTermination+0x58>)
 8004040:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004042:	f000 faaf 	bl	80045a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	0018      	movs	r0, r3
 800404a:	f000 f80f 	bl	800406c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800404e:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <prvCheckTasksWaitingTermination+0x58>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e0      	bne.n	8004018 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004056:	46c0      	nop			@ (mov r8, r8)
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b002      	add	sp, #8
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000244 	.word	0x20000244
 8004064:	20000270 	.word	0x20000270
 8004068:	20000258 	.word	0x20000258

0800406c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	334c      	adds	r3, #76	@ 0x4c
 8004078:	0018      	movs	r0, r3
 800407a:	f000 fcd9 	bl	8004a30 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	0018      	movs	r0, r3
 8004084:	f000 fbc4 	bl	8004810 <vPortFree>
			vPortFree( pxTCB );
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	0018      	movs	r0, r3
 800408c:	f000 fbc0 	bl	8004810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004090:	46c0      	nop			@ (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}

08004098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409e:	4b0b      	ldr	r3, [pc, #44]	@ (80040cc <prvResetNextTaskUnblockTime+0x34>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d104      	bne.n	80040b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040a8:	4b09      	ldr	r3, [pc, #36]	@ (80040d0 <prvResetNextTaskUnblockTime+0x38>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	4252      	negs	r2, r2
 80040ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040b0:	e008      	b.n	80040c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b2:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <prvResetNextTaskUnblockTime+0x34>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4b03      	ldr	r3, [pc, #12]	@ (80040d0 <prvResetNextTaskUnblockTime+0x38>)
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	46c0      	nop			@ (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b002      	add	sp, #8
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000228 	.word	0x20000228
 80040d0:	20000290 	.word	0x20000290

080040d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040da:	4b0a      	ldr	r3, [pc, #40]	@ (8004104 <xTaskGetSchedulerState+0x30>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040e2:	2301      	movs	r3, #1
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	e008      	b.n	80040fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e8:	4b07      	ldr	r3, [pc, #28]	@ (8004108 <xTaskGetSchedulerState+0x34>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040f0:	2302      	movs	r3, #2
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	e001      	b.n	80040fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040f6:	2300      	movs	r3, #0
 80040f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040fa:	687b      	ldr	r3, [r7, #4]
	}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	b002      	add	sp, #8
 8004102:	bd80      	pop	{r7, pc}
 8004104:	2000027c 	.word	0x2000027c
 8004108:	20000298 	.word	0x20000298

0800410c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d051      	beq.n	80041c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004126:	4b2a      	ldr	r3, [pc, #168]	@ (80041d0 <xTaskPriorityInherit+0xc4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412c:	429a      	cmp	r2, r3
 800412e:	d241      	bcs.n	80041b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	db06      	blt.n	8004146 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004138:	4b25      	ldr	r3, [pc, #148]	@ (80041d0 <xTaskPriorityInherit+0xc4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	2207      	movs	r2, #7
 8004140:	1ad2      	subs	r2, r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	6959      	ldr	r1, [r3, #20]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414e:	0013      	movs	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	189b      	adds	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4a1f      	ldr	r2, [pc, #124]	@ (80041d4 <xTaskPriorityInherit+0xc8>)
 8004158:	189b      	adds	r3, r3, r2
 800415a:	4299      	cmp	r1, r3
 800415c:	d122      	bne.n	80041a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	3304      	adds	r3, #4
 8004162:	0018      	movs	r0, r3
 8004164:	f7fe fe4f 	bl	8002e06 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004168:	4b19      	ldr	r3, [pc, #100]	@ (80041d0 <xTaskPriorityInherit+0xc4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004176:	4b18      	ldr	r3, [pc, #96]	@ (80041d8 <xTaskPriorityInherit+0xcc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d903      	bls.n	8004186 <xTaskPriorityInherit+0x7a>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004182:	4b15      	ldr	r3, [pc, #84]	@ (80041d8 <xTaskPriorityInherit+0xcc>)
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418a:	0013      	movs	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	189b      	adds	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4a10      	ldr	r2, [pc, #64]	@ (80041d4 <xTaskPriorityInherit+0xc8>)
 8004194:	189a      	adds	r2, r3, r2
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	3304      	adds	r3, #4
 800419a:	0019      	movs	r1, r3
 800419c:	0010      	movs	r0, r2
 800419e:	f7fe fdda 	bl	8002d56 <vListInsertEnd>
 80041a2:	e004      	b.n	80041ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041a4:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <xTaskPriorityInherit+0xc4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80041ae:	2301      	movs	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	e008      	b.n	80041c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041b8:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <xTaskPriorityInherit+0xc4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	429a      	cmp	r2, r3
 80041c0:	d201      	bcs.n	80041c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80041c2:	2301      	movs	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041c6:	68fb      	ldr	r3, [r7, #12]
	}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b004      	add	sp, #16
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000170 	.word	0x20000170
 80041d4:	20000174 	.word	0x20000174
 80041d8:	20000278 	.word	0x20000278

080041dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d046      	beq.n	8004280 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041f2:	4b26      	ldr	r3, [pc, #152]	@ (800428c <xTaskPriorityDisinherit+0xb0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d002      	beq.n	8004202 <xTaskPriorityDisinherit+0x26>
 80041fc:	b672      	cpsid	i
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	e7fd      	b.n	80041fe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <xTaskPriorityDisinherit+0x34>
 800420a:	b672      	cpsid	i
 800420c:	46c0      	nop			@ (mov r8, r8)
 800420e:	e7fd      	b.n	800420c <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004214:	1e5a      	subs	r2, r3, #1
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	429a      	cmp	r2, r3
 8004224:	d02c      	beq.n	8004280 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422a:	2b00      	cmp	r3, #0
 800422c:	d128      	bne.n	8004280 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	3304      	adds	r3, #4
 8004232:	0018      	movs	r0, r3
 8004234:	f7fe fde7 	bl	8002e06 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	2207      	movs	r2, #7
 8004246:	1ad2      	subs	r2, r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004250:	4b0f      	ldr	r3, [pc, #60]	@ (8004290 <xTaskPriorityDisinherit+0xb4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d903      	bls.n	8004260 <xTaskPriorityDisinherit+0x84>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425c:	4b0c      	ldr	r3, [pc, #48]	@ (8004290 <xTaskPriorityDisinherit+0xb4>)
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004264:	0013      	movs	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	189b      	adds	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4a09      	ldr	r2, [pc, #36]	@ (8004294 <xTaskPriorityDisinherit+0xb8>)
 800426e:	189a      	adds	r2, r3, r2
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	3304      	adds	r3, #4
 8004274:	0019      	movs	r1, r3
 8004276:	0010      	movs	r0, r2
 8004278:	f7fe fd6d 	bl	8002d56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800427c:	2301      	movs	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004280:	68fb      	ldr	r3, [r7, #12]
	}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	b004      	add	sp, #16
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	20000170 	.word	0x20000170
 8004290:	20000278 	.word	0x20000278
 8004294:	20000174 	.word	0x20000174

08004298 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80042a6:	2301      	movs	r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d05a      	beq.n	8004366 <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <vTaskPriorityDisinheritAfterTimeout+0x26>
 80042b8:	b672      	cpsid	i
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	e7fd      	b.n	80042ba <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d902      	bls.n	80042ce <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e002      	b.n	80042d4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d043      	beq.n	8004366 <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d13e      	bne.n	8004366 <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80042e8:	4b21      	ldr	r3, [pc, #132]	@ (8004370 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d102      	bne.n	80042f8 <vTaskPriorityDisinheritAfterTimeout+0x60>
 80042f2:	b672      	cpsid	i
 80042f4:	46c0      	nop			@ (mov r8, r8)
 80042f6:	e7fd      	b.n	80042f4 <vTaskPriorityDisinheritAfterTimeout+0x5c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	db04      	blt.n	8004316 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2207      	movs	r2, #7
 8004310:	1ad2      	subs	r2, r2, r3
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	6959      	ldr	r1, [r3, #20]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	0013      	movs	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	189b      	adds	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4a13      	ldr	r2, [pc, #76]	@ (8004374 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8004326:	189b      	adds	r3, r3, r2
 8004328:	4299      	cmp	r1, r3
 800432a:	d11c      	bne.n	8004366 <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	3304      	adds	r3, #4
 8004330:	0018      	movs	r0, r3
 8004332:	f7fe fd68 	bl	8002e06 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433a:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d903      	bls.n	800434a <vTaskPriorityDisinheritAfterTimeout+0xb2>
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004346:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800434e:	0013      	movs	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	189b      	adds	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4a07      	ldr	r2, [pc, #28]	@ (8004374 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8004358:	189a      	adds	r2, r3, r2
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3304      	adds	r3, #4
 800435e:	0019      	movs	r1, r3
 8004360:	0010      	movs	r0, r2
 8004362:	f7fe fcf8 	bl	8002d56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004366:	46c0      	nop			@ (mov r8, r8)
 8004368:	46bd      	mov	sp, r7
 800436a:	b006      	add	sp, #24
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	20000170 	.word	0x20000170
 8004374:	20000174 	.word	0x20000174
 8004378:	20000278 	.word	0x20000278

0800437c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <pvTaskIncrementMutexHeldCount+0x20>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004388:	4b04      	ldr	r3, [pc, #16]	@ (800439c <pvTaskIncrementMutexHeldCount+0x20>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800438e:	3201      	adds	r2, #1
 8004390:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004392:	4b02      	ldr	r3, [pc, #8]	@ (800439c <pvTaskIncrementMutexHeldCount+0x20>)
 8004394:	681b      	ldr	r3, [r3, #0]
	}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000170 	.word	0x20000170

080043a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043aa:	4b21      	ldr	r3, [pc, #132]	@ (8004430 <prvAddCurrentTaskToDelayedList+0x90>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043b0:	4b20      	ldr	r3, [pc, #128]	@ (8004434 <prvAddCurrentTaskToDelayedList+0x94>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3304      	adds	r3, #4
 80043b6:	0018      	movs	r0, r3
 80043b8:	f7fe fd25 	bl	8002e06 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3301      	adds	r3, #1
 80043c0:	d10b      	bne.n	80043da <prvAddCurrentTaskToDelayedList+0x3a>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004434 <prvAddCurrentTaskToDelayedList+0x94>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	1d1a      	adds	r2, r3, #4
 80043ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <prvAddCurrentTaskToDelayedList+0x98>)
 80043d0:	0011      	movs	r1, r2
 80043d2:	0018      	movs	r0, r3
 80043d4:	f7fe fcbf 	bl	8002d56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043d8:	e026      	b.n	8004428 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	18d3      	adds	r3, r2, r3
 80043e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043e2:	4b14      	ldr	r3, [pc, #80]	@ (8004434 <prvAddCurrentTaskToDelayedList+0x94>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d209      	bcs.n	8004406 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043f2:	4b12      	ldr	r3, [pc, #72]	@ (800443c <prvAddCurrentTaskToDelayedList+0x9c>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004434 <prvAddCurrentTaskToDelayedList+0x94>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3304      	adds	r3, #4
 80043fc:	0019      	movs	r1, r3
 80043fe:	0010      	movs	r0, r2
 8004400:	f7fe fccb 	bl	8002d9a <vListInsert>
}
 8004404:	e010      	b.n	8004428 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004406:	4b0e      	ldr	r3, [pc, #56]	@ (8004440 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4b0a      	ldr	r3, [pc, #40]	@ (8004434 <prvAddCurrentTaskToDelayedList+0x94>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3304      	adds	r3, #4
 8004410:	0019      	movs	r1, r3
 8004412:	0010      	movs	r0, r2
 8004414:	f7fe fcc1 	bl	8002d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004418:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <prvAddCurrentTaskToDelayedList+0xa4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	429a      	cmp	r2, r3
 8004420:	d202      	bcs.n	8004428 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004422:	4b08      	ldr	r3, [pc, #32]	@ (8004444 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	601a      	str	r2, [r3, #0]
}
 8004428:	46c0      	nop			@ (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	b004      	add	sp, #16
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000274 	.word	0x20000274
 8004434:	20000170 	.word	0x20000170
 8004438:	2000025c 	.word	0x2000025c
 800443c:	2000022c 	.word	0x2000022c
 8004440:	20000228 	.word	0x20000228
 8004444:	20000290 	.word	0x20000290

08004448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b04      	subs	r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2280      	movs	r2, #128	@ 0x80
 800445e:	0452      	lsls	r2, r2, #17
 8004460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3b04      	subs	r3, #4
 8004466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3b04      	subs	r3, #4
 8004472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004474:	4a08      	ldr	r2, [pc, #32]	@ (8004498 <pxPortInitialiseStack+0x50>)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3b14      	subs	r3, #20
 800447e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3b20      	subs	r3, #32
 800448a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800448c:	68fb      	ldr	r3, [r7, #12]
}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b004      	add	sp, #16
 8004494:	bd80      	pop	{r7, pc}
 8004496:	46c0      	nop			@ (mov r8, r8)
 8004498:	0800449d 	.word	0x0800449d

0800449c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044a6:	4b08      	ldr	r3, [pc, #32]	@ (80044c8 <prvTaskExitError+0x2c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	d002      	beq.n	80044b4 <prvTaskExitError+0x18>
 80044ae:	b672      	cpsid	i
 80044b0:	46c0      	nop			@ (mov r8, r8)
 80044b2:	e7fd      	b.n	80044b0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80044b4:	b672      	cpsid	i
	while( ulDummy == 0 )
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0fc      	beq.n	80044b8 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	46c0      	nop			@ (mov r8, r8)
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	2000000c 	.word	0x2000000c

080044cc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80044d0:	46c0      	nop			@ (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80044e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004510 <pxCurrentTCBConst2>)
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	3020      	adds	r0, #32
 80044e8:	f380 8809 	msr	PSP, r0
 80044ec:	2002      	movs	r0, #2
 80044ee:	f380 8814 	msr	CONTROL, r0
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80044f8:	46ae      	mov	lr, r5
 80044fa:	bc08      	pop	{r3}
 80044fc:	bc04      	pop	{r2}
 80044fe:	b662      	cpsie	i
 8004500:	4718      	bx	r3
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	46c0      	nop			@ (mov r8, r8)
 8004506:	46c0      	nop			@ (mov r8, r8)
 8004508:	46c0      	nop			@ (mov r8, r8)
 800450a:	46c0      	nop			@ (mov r8, r8)
 800450c:	46c0      	nop			@ (mov r8, r8)
 800450e:	46c0      	nop			@ (mov r8, r8)

08004510 <pxCurrentTCBConst2>:
 8004510:	20000170 	.word	0x20000170
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004514:	46c0      	nop			@ (mov r8, r8)
 8004516:	46c0      	nop			@ (mov r8, r8)

08004518 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800451c:	4b0e      	ldr	r3, [pc, #56]	@ (8004558 <xPortStartScheduler+0x40>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <xPortStartScheduler+0x40>)
 8004522:	21ff      	movs	r1, #255	@ 0xff
 8004524:	0409      	lsls	r1, r1, #16
 8004526:	430a      	orrs	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800452a:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <xPortStartScheduler+0x40>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <xPortStartScheduler+0x40>)
 8004530:	21ff      	movs	r1, #255	@ 0xff
 8004532:	0609      	lsls	r1, r1, #24
 8004534:	430a      	orrs	r2, r1
 8004536:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004538:	f000 f898 	bl	800466c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800453c:	4b07      	ldr	r3, [pc, #28]	@ (800455c <xPortStartScheduler+0x44>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004542:	f7ff ffcd 	bl	80044e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004546:	f7ff fbc7 	bl	8003cd8 <vTaskSwitchContext>
	prvTaskExitError();
 800454a:	f7ff ffa7 	bl	800449c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800454e:	2300      	movs	r3, #0
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	e000ed20 	.word	0xe000ed20
 800455c:	2000000c 	.word	0x2000000c

08004560 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004564:	4b05      	ldr	r3, [pc, #20]	@ (800457c <vPortYield+0x1c>)
 8004566:	2280      	movs	r2, #128	@ 0x80
 8004568:	0552      	lsls	r2, r2, #21
 800456a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800456c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004570:	f3bf 8f6f 	isb	sy
}
 8004574:	46c0      	nop			@ (mov r8, r8)
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	e000ed04 	.word	0xe000ed04

08004580 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8004584:	b672      	cpsid	i
	uxCriticalNesting++;
 8004586:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <vPortEnterCritical+0x20>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	4b04      	ldr	r3, [pc, #16]	@ (80045a0 <vPortEnterCritical+0x20>)
 800458e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004590:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004594:	f3bf 8f6f 	isb	sy
}
 8004598:	46c0      	nop			@ (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	2000000c 	.word	0x2000000c

080045a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045a8:	4b09      	ldr	r3, [pc, #36]	@ (80045d0 <vPortExitCritical+0x2c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <vPortExitCritical+0x12>
 80045b0:	b672      	cpsid	i
 80045b2:	46c0      	nop			@ (mov r8, r8)
 80045b4:	e7fd      	b.n	80045b2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80045b6:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <vPortExitCritical+0x2c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	1e5a      	subs	r2, r3, #1
 80045bc:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <vPortExitCritical+0x2c>)
 80045be:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80045c0:	4b03      	ldr	r3, [pc, #12]	@ (80045d0 <vPortExitCritical+0x2c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d100      	bne.n	80045ca <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 80045c8:	b662      	cpsie	i
	}
}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	2000000c 	.word	0x2000000c

080045d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80045d4:	f3ef 8010 	mrs	r0, PRIMASK
 80045d8:	b672      	cpsid	i
 80045da:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80045dc:	46c0      	nop			@ (mov r8, r8)
 80045de:	0018      	movs	r0, r3

080045e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80045e0:	f380 8810 	msr	PRIMASK, r0
 80045e4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80045e6:	46c0      	nop			@ (mov r8, r8)
	...

080045f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045f0:	f3ef 8009 	mrs	r0, PSP
 80045f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004630 <pxCurrentTCBConst>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	3820      	subs	r0, #32
 80045fa:	6010      	str	r0, [r2, #0]
 80045fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80045fe:	4644      	mov	r4, r8
 8004600:	464d      	mov	r5, r9
 8004602:	4656      	mov	r6, sl
 8004604:	465f      	mov	r7, fp
 8004606:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004608:	b508      	push	{r3, lr}
 800460a:	b672      	cpsid	i
 800460c:	f7ff fb64 	bl	8003cd8 <vTaskSwitchContext>
 8004610:	b662      	cpsie	i
 8004612:	bc0c      	pop	{r2, r3}
 8004614:	6811      	ldr	r1, [r2, #0]
 8004616:	6808      	ldr	r0, [r1, #0]
 8004618:	3010      	adds	r0, #16
 800461a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800461c:	46a0      	mov	r8, r4
 800461e:	46a9      	mov	r9, r5
 8004620:	46b2      	mov	sl, r6
 8004622:	46bb      	mov	fp, r7
 8004624:	f380 8809 	msr	PSP, r0
 8004628:	3820      	subs	r0, #32
 800462a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800462c:	4718      	bx	r3
 800462e:	46c0      	nop			@ (mov r8, r8)

08004630 <pxCurrentTCBConst>:
 8004630:	20000170 	.word	0x20000170
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004634:	46c0      	nop			@ (mov r8, r8)
 8004636:	46c0      	nop			@ (mov r8, r8)

08004638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800463e:	f7ff ffc9 	bl	80045d4 <ulSetInterruptMaskFromISR>
 8004642:	0003      	movs	r3, r0
 8004644:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004646:	f7ff fa97 	bl	8003b78 <xTaskIncrementTick>
 800464a:	1e03      	subs	r3, r0, #0
 800464c:	d003      	beq.n	8004656 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800464e:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <SysTick_Handler+0x30>)
 8004650:	2280      	movs	r2, #128	@ 0x80
 8004652:	0552      	lsls	r2, r2, #21
 8004654:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	0018      	movs	r0, r3
 800465a:	f7ff ffc1 	bl	80045e0 <vClearInterruptMaskFromISR>
}
 800465e:	46c0      	nop			@ (mov r8, r8)
 8004660:	46bd      	mov	sp, r7
 8004662:	b002      	add	sp, #8
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004670:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <vPortSetupTimerInterrupt+0x34>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004676:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <vPortSetupTimerInterrupt+0x38>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800467c:	4b0a      	ldr	r3, [pc, #40]	@ (80046a8 <vPortSetupTimerInterrupt+0x3c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	22fa      	movs	r2, #250	@ 0xfa
 8004682:	0091      	lsls	r1, r2, #2
 8004684:	0018      	movs	r0, r3
 8004686:	f7fb fd47 	bl	8000118 <__udivsi3>
 800468a:	0003      	movs	r3, r0
 800468c:	001a      	movs	r2, r3
 800468e:	4b07      	ldr	r3, [pc, #28]	@ (80046ac <vPortSetupTimerInterrupt+0x40>)
 8004690:	3a01      	subs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004694:	4b02      	ldr	r3, [pc, #8]	@ (80046a0 <vPortSetupTimerInterrupt+0x34>)
 8004696:	2207      	movs	r2, #7
 8004698:	601a      	str	r2, [r3, #0]
}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	e000e010 	.word	0xe000e010
 80046a4:	e000e018 	.word	0xe000e018
 80046a8:	20000000 	.word	0x20000000
 80046ac:	e000e014 	.word	0xe000e014

080046b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80046bc:	f7ff f9c4 	bl	8003a48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046c0:	4b4d      	ldr	r3, [pc, #308]	@ (80047f8 <pvPortMalloc+0x148>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046c8:	f000 f8f2 	bl	80048b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046cc:	4b4b      	ldr	r3, [pc, #300]	@ (80047fc <pvPortMalloc+0x14c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4013      	ands	r3, r2
 80046d4:	d000      	beq.n	80046d8 <pvPortMalloc+0x28>
 80046d6:	e080      	b.n	80047da <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d013      	beq.n	8004706 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 80046de:	2208      	movs	r2, #8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	189b      	adds	r3, r3, r2
 80046e4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2207      	movs	r2, #7
 80046ea:	4013      	ands	r3, r2
 80046ec:	d00b      	beq.n	8004706 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2207      	movs	r2, #7
 80046f2:	4393      	bics	r3, r2
 80046f4:	3308      	adds	r3, #8
 80046f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2207      	movs	r2, #7
 80046fc:	4013      	ands	r3, r2
 80046fe:	d002      	beq.n	8004706 <pvPortMalloc+0x56>
 8004700:	b672      	cpsid	i
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	e7fd      	b.n	8004702 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d066      	beq.n	80047da <pvPortMalloc+0x12a>
 800470c:	4b3c      	ldr	r3, [pc, #240]	@ (8004800 <pvPortMalloc+0x150>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d861      	bhi.n	80047da <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004716:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <pvPortMalloc+0x154>)
 8004718:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800471a:	4b3a      	ldr	r3, [pc, #232]	@ (8004804 <pvPortMalloc+0x154>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004720:	e004      	b.n	800472c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	429a      	cmp	r2, r3
 8004734:	d903      	bls.n	800473e <pvPortMalloc+0x8e>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f1      	bne.n	8004722 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800473e:	4b2e      	ldr	r3, [pc, #184]	@ (80047f8 <pvPortMalloc+0x148>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	429a      	cmp	r2, r3
 8004746:	d048      	beq.n	80047da <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2208      	movs	r2, #8
 800474e:	189b      	adds	r3, r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	1ad2      	subs	r2, r2, r3
 8004762:	2308      	movs	r3, #8
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	429a      	cmp	r2, r3
 8004768:	d917      	bls.n	800479a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	18d3      	adds	r3, r2, r3
 8004770:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2207      	movs	r2, #7
 8004776:	4013      	ands	r3, r2
 8004778:	d002      	beq.n	8004780 <pvPortMalloc+0xd0>
 800477a:	b672      	cpsid	i
 800477c:	46c0      	nop			@ (mov r8, r8)
 800477e:	e7fd      	b.n	800477c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	1ad2      	subs	r2, r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	0018      	movs	r0, r3
 8004796:	f000 f8eb 	bl	8004970 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800479a:	4b19      	ldr	r3, [pc, #100]	@ (8004800 <pvPortMalloc+0x150>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	1ad2      	subs	r2, r2, r3
 80047a4:	4b16      	ldr	r3, [pc, #88]	@ (8004800 <pvPortMalloc+0x150>)
 80047a6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047a8:	4b15      	ldr	r3, [pc, #84]	@ (8004800 <pvPortMalloc+0x150>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b16      	ldr	r3, [pc, #88]	@ (8004808 <pvPortMalloc+0x158>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d203      	bcs.n	80047bc <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047b4:	4b12      	ldr	r3, [pc, #72]	@ (8004800 <pvPortMalloc+0x150>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <pvPortMalloc+0x158>)
 80047ba:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	4b0e      	ldr	r3, [pc, #56]	@ (80047fc <pvPortMalloc+0x14c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80047d0:	4b0e      	ldr	r3, [pc, #56]	@ (800480c <pvPortMalloc+0x15c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <pvPortMalloc+0x15c>)
 80047d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047da:	f7ff f941 	bl	8003a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2207      	movs	r2, #7
 80047e2:	4013      	ands	r3, r2
 80047e4:	d002      	beq.n	80047ec <pvPortMalloc+0x13c>
 80047e6:	b672      	cpsid	i
 80047e8:	46c0      	nop			@ (mov r8, r8)
 80047ea:	e7fd      	b.n	80047e8 <pvPortMalloc+0x138>
	return pvReturn;
 80047ec:	68fb      	ldr	r3, [r7, #12]
}
 80047ee:	0018      	movs	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b006      	add	sp, #24
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	20000ea4 	.word	0x20000ea4
 80047fc:	20000eb8 	.word	0x20000eb8
 8004800:	20000ea8 	.word	0x20000ea8
 8004804:	20000e9c 	.word	0x20000e9c
 8004808:	20000eac 	.word	0x20000eac
 800480c:	20000eb0 	.word	0x20000eb0

08004810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d03c      	beq.n	800489c <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004822:	2308      	movs	r3, #8
 8004824:	425b      	negs	r3, r3
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	18d3      	adds	r3, r2, r3
 800482a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <vPortFree+0x94>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4013      	ands	r3, r2
 800483a:	d102      	bne.n	8004842 <vPortFree+0x32>
 800483c:	b672      	cpsid	i
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	e7fd      	b.n	800483e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <vPortFree+0x40>
 800484a:	b672      	cpsid	i
 800484c:	46c0      	nop			@ (mov r8, r8)
 800484e:	e7fd      	b.n	800484c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	4b13      	ldr	r3, [pc, #76]	@ (80048a4 <vPortFree+0x94>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4013      	ands	r3, r2
 800485a:	d01f      	beq.n	800489c <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d11b      	bne.n	800489c <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4b0e      	ldr	r3, [pc, #56]	@ (80048a4 <vPortFree+0x94>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	43db      	mvns	r3, r3
 800486e:	401a      	ands	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004874:	f7ff f8e8 	bl	8003a48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <vPortFree+0x98>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	18d2      	adds	r2, r2, r3
 8004882:	4b09      	ldr	r3, [pc, #36]	@ (80048a8 <vPortFree+0x98>)
 8004884:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	0018      	movs	r0, r3
 800488a:	f000 f871 	bl	8004970 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800488e:	4b07      	ldr	r3, [pc, #28]	@ (80048ac <vPortFree+0x9c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <vPortFree+0x9c>)
 8004896:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8004898:	f7ff f8e2 	bl	8003a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800489c:	46c0      	nop			@ (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b004      	add	sp, #16
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000eb8 	.word	0x20000eb8
 80048a8:	20000ea8 	.word	0x20000ea8
 80048ac:	20000eb4 	.word	0x20000eb4

080048b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048b6:	23c0      	movs	r3, #192	@ 0xc0
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048bc:	4b26      	ldr	r3, [pc, #152]	@ (8004958 <prvHeapInit+0xa8>)
 80048be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2207      	movs	r2, #7
 80048c4:	4013      	ands	r3, r2
 80048c6:	d00c      	beq.n	80048e2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3307      	adds	r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2207      	movs	r2, #7
 80048d2:	4393      	bics	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004958 <prvHeapInit+0xa8>)
 80048de:	18d3      	adds	r3, r2, r3
 80048e0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048e6:	4b1d      	ldr	r3, [pc, #116]	@ (800495c <prvHeapInit+0xac>)
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048ec:	4b1b      	ldr	r3, [pc, #108]	@ (800495c <prvHeapInit+0xac>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	18d3      	adds	r3, r2, r3
 80048f8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048fa:	2208      	movs	r2, #8
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2207      	movs	r2, #7
 8004906:	4393      	bics	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4b14      	ldr	r3, [pc, #80]	@ (8004960 <prvHeapInit+0xb0>)
 800490e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004910:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <prvHeapInit+0xb0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2200      	movs	r2, #0
 8004916:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004918:	4b11      	ldr	r3, [pc, #68]	@ (8004960 <prvHeapInit+0xb0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	1ad2      	subs	r2, r2, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800492e:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <prvHeapInit+0xb0>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	4b0a      	ldr	r3, [pc, #40]	@ (8004964 <prvHeapInit+0xb4>)
 800493c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <prvHeapInit+0xb8>)
 8004944:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <prvHeapInit+0xbc>)
 8004948:	2280      	movs	r2, #128	@ 0x80
 800494a:	0612      	lsls	r2, r2, #24
 800494c:	601a      	str	r2, [r3, #0]
}
 800494e:	46c0      	nop			@ (mov r8, r8)
 8004950:	46bd      	mov	sp, r7
 8004952:	b004      	add	sp, #16
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	2000029c 	.word	0x2000029c
 800495c:	20000e9c 	.word	0x20000e9c
 8004960:	20000ea4 	.word	0x20000ea4
 8004964:	20000eac 	.word	0x20000eac
 8004968:	20000ea8 	.word	0x20000ea8
 800496c:	20000eb8 	.word	0x20000eb8

08004970 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004978:	4b27      	ldr	r3, [pc, #156]	@ (8004a18 <prvInsertBlockIntoFreeList+0xa8>)
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e002      	b.n	8004984 <prvInsertBlockIntoFreeList+0x14>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d8f7      	bhi.n	800497e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	18d3      	adds	r3, r2, r3
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d108      	bne.n	80049b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	18d2      	adds	r2, r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	18d2      	adds	r2, r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d118      	bne.n	80049f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <prvInsertBlockIntoFreeList+0xac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d00d      	beq.n	80049ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	18d2      	adds	r2, r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e008      	b.n	8004a00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049ee:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <prvInsertBlockIntoFreeList+0xac>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e003      	b.n	8004a00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d002      	beq.n	8004a0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b004      	add	sp, #16
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	20000e9c 	.word	0x20000e9c
 8004a1c:	20000ea4 	.word	0x20000ea4

08004a20 <memset>:
 8004a20:	0003      	movs	r3, r0
 8004a22:	1882      	adds	r2, r0, r2
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d100      	bne.n	8004a2a <memset+0xa>
 8004a28:	4770      	bx	lr
 8004a2a:	7019      	strb	r1, [r3, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	e7f9      	b.n	8004a24 <memset+0x4>

08004a30 <_reclaim_reent>:
 8004a30:	4b2e      	ldr	r3, [pc, #184]	@ (8004aec <_reclaim_reent+0xbc>)
 8004a32:	b570      	push	{r4, r5, r6, lr}
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	0004      	movs	r4, r0
 8004a38:	4283      	cmp	r3, r0
 8004a3a:	d04f      	beq.n	8004adc <_reclaim_reent+0xac>
 8004a3c:	69c3      	ldr	r3, [r0, #28]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d017      	beq.n	8004a72 <_reclaim_reent+0x42>
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00d      	beq.n	8004a64 <_reclaim_reent+0x34>
 8004a48:	2500      	movs	r5, #0
 8004a4a:	69e3      	ldr	r3, [r4, #28]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	5959      	ldr	r1, [r3, r5]
 8004a50:	2900      	cmp	r1, #0
 8004a52:	d144      	bne.n	8004ade <_reclaim_reent+0xae>
 8004a54:	3504      	adds	r5, #4
 8004a56:	2d80      	cmp	r5, #128	@ 0x80
 8004a58:	d1f7      	bne.n	8004a4a <_reclaim_reent+0x1a>
 8004a5a:	69e3      	ldr	r3, [r4, #28]
 8004a5c:	0020      	movs	r0, r4
 8004a5e:	68d9      	ldr	r1, [r3, #12]
 8004a60:	f000 f876 	bl	8004b50 <_free_r>
 8004a64:	69e3      	ldr	r3, [r4, #28]
 8004a66:	6819      	ldr	r1, [r3, #0]
 8004a68:	2900      	cmp	r1, #0
 8004a6a:	d002      	beq.n	8004a72 <_reclaim_reent+0x42>
 8004a6c:	0020      	movs	r0, r4
 8004a6e:	f000 f86f 	bl	8004b50 <_free_r>
 8004a72:	6961      	ldr	r1, [r4, #20]
 8004a74:	2900      	cmp	r1, #0
 8004a76:	d002      	beq.n	8004a7e <_reclaim_reent+0x4e>
 8004a78:	0020      	movs	r0, r4
 8004a7a:	f000 f869 	bl	8004b50 <_free_r>
 8004a7e:	69e1      	ldr	r1, [r4, #28]
 8004a80:	2900      	cmp	r1, #0
 8004a82:	d002      	beq.n	8004a8a <_reclaim_reent+0x5a>
 8004a84:	0020      	movs	r0, r4
 8004a86:	f000 f863 	bl	8004b50 <_free_r>
 8004a8a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a8c:	2900      	cmp	r1, #0
 8004a8e:	d002      	beq.n	8004a96 <_reclaim_reent+0x66>
 8004a90:	0020      	movs	r0, r4
 8004a92:	f000 f85d 	bl	8004b50 <_free_r>
 8004a96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	d002      	beq.n	8004aa2 <_reclaim_reent+0x72>
 8004a9c:	0020      	movs	r0, r4
 8004a9e:	f000 f857 	bl	8004b50 <_free_r>
 8004aa2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	d002      	beq.n	8004aae <_reclaim_reent+0x7e>
 8004aa8:	0020      	movs	r0, r4
 8004aaa:	f000 f851 	bl	8004b50 <_free_r>
 8004aae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004ab0:	2900      	cmp	r1, #0
 8004ab2:	d002      	beq.n	8004aba <_reclaim_reent+0x8a>
 8004ab4:	0020      	movs	r0, r4
 8004ab6:	f000 f84b 	bl	8004b50 <_free_r>
 8004aba:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004abc:	2900      	cmp	r1, #0
 8004abe:	d002      	beq.n	8004ac6 <_reclaim_reent+0x96>
 8004ac0:	0020      	movs	r0, r4
 8004ac2:	f000 f845 	bl	8004b50 <_free_r>
 8004ac6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	d002      	beq.n	8004ad2 <_reclaim_reent+0xa2>
 8004acc:	0020      	movs	r0, r4
 8004ace:	f000 f83f 	bl	8004b50 <_free_r>
 8004ad2:	6a23      	ldr	r3, [r4, #32]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <_reclaim_reent+0xac>
 8004ad8:	0020      	movs	r0, r4
 8004ada:	4798      	blx	r3
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
 8004ade:	680e      	ldr	r6, [r1, #0]
 8004ae0:	0020      	movs	r0, r4
 8004ae2:	f000 f835 	bl	8004b50 <_free_r>
 8004ae6:	0031      	movs	r1, r6
 8004ae8:	e7b2      	b.n	8004a50 <_reclaim_reent+0x20>
 8004aea:	46c0      	nop			@ (mov r8, r8)
 8004aec:	20000010 	.word	0x20000010

08004af0 <__libc_init_array>:
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	2600      	movs	r6, #0
 8004af4:	4c0c      	ldr	r4, [pc, #48]	@ (8004b28 <__libc_init_array+0x38>)
 8004af6:	4d0d      	ldr	r5, [pc, #52]	@ (8004b2c <__libc_init_array+0x3c>)
 8004af8:	1b64      	subs	r4, r4, r5
 8004afa:	10a4      	asrs	r4, r4, #2
 8004afc:	42a6      	cmp	r6, r4
 8004afe:	d109      	bne.n	8004b14 <__libc_init_array+0x24>
 8004b00:	2600      	movs	r6, #0
 8004b02:	f000 f87f 	bl	8004c04 <_init>
 8004b06:	4c0a      	ldr	r4, [pc, #40]	@ (8004b30 <__libc_init_array+0x40>)
 8004b08:	4d0a      	ldr	r5, [pc, #40]	@ (8004b34 <__libc_init_array+0x44>)
 8004b0a:	1b64      	subs	r4, r4, r5
 8004b0c:	10a4      	asrs	r4, r4, #2
 8004b0e:	42a6      	cmp	r6, r4
 8004b10:	d105      	bne.n	8004b1e <__libc_init_array+0x2e>
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	00b3      	lsls	r3, r6, #2
 8004b16:	58eb      	ldr	r3, [r5, r3]
 8004b18:	4798      	blx	r3
 8004b1a:	3601      	adds	r6, #1
 8004b1c:	e7ee      	b.n	8004afc <__libc_init_array+0xc>
 8004b1e:	00b3      	lsls	r3, r6, #2
 8004b20:	58eb      	ldr	r3, [r5, r3]
 8004b22:	4798      	blx	r3
 8004b24:	3601      	adds	r6, #1
 8004b26:	e7f2      	b.n	8004b0e <__libc_init_array+0x1e>
 8004b28:	08004e28 	.word	0x08004e28
 8004b2c:	08004e28 	.word	0x08004e28
 8004b30:	08004e2c 	.word	0x08004e2c
 8004b34:	08004e28 	.word	0x08004e28

08004b38 <__retarget_lock_acquire_recursive>:
 8004b38:	4770      	bx	lr

08004b3a <__retarget_lock_release_recursive>:
 8004b3a:	4770      	bx	lr

08004b3c <memcpy>:
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	b510      	push	{r4, lr}
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d100      	bne.n	8004b46 <memcpy+0xa>
 8004b44:	bd10      	pop	{r4, pc}
 8004b46:	5ccc      	ldrb	r4, [r1, r3]
 8004b48:	54c4      	strb	r4, [r0, r3]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	e7f8      	b.n	8004b40 <memcpy+0x4>
	...

08004b50 <_free_r>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	0005      	movs	r5, r0
 8004b54:	1e0c      	subs	r4, r1, #0
 8004b56:	d010      	beq.n	8004b7a <_free_r+0x2a>
 8004b58:	3c04      	subs	r4, #4
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	da00      	bge.n	8004b62 <_free_r+0x12>
 8004b60:	18e4      	adds	r4, r4, r3
 8004b62:	0028      	movs	r0, r5
 8004b64:	f000 f83e 	bl	8004be4 <__malloc_lock>
 8004b68:	4a1d      	ldr	r2, [pc, #116]	@ (8004be0 <_free_r+0x90>)
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <_free_r+0x2c>
 8004b70:	6063      	str	r3, [r4, #4]
 8004b72:	6014      	str	r4, [r2, #0]
 8004b74:	0028      	movs	r0, r5
 8004b76:	f000 f83d 	bl	8004bf4 <__malloc_unlock>
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	d908      	bls.n	8004b92 <_free_r+0x42>
 8004b80:	6820      	ldr	r0, [r4, #0]
 8004b82:	1821      	adds	r1, r4, r0
 8004b84:	428b      	cmp	r3, r1
 8004b86:	d1f3      	bne.n	8004b70 <_free_r+0x20>
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	1809      	adds	r1, r1, r0
 8004b8e:	6021      	str	r1, [r4, #0]
 8004b90:	e7ee      	b.n	8004b70 <_free_r+0x20>
 8004b92:	001a      	movs	r2, r3
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <_free_r+0x4e>
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	d9f9      	bls.n	8004b92 <_free_r+0x42>
 8004b9e:	6811      	ldr	r1, [r2, #0]
 8004ba0:	1850      	adds	r0, r2, r1
 8004ba2:	42a0      	cmp	r0, r4
 8004ba4:	d10b      	bne.n	8004bbe <_free_r+0x6e>
 8004ba6:	6820      	ldr	r0, [r4, #0]
 8004ba8:	1809      	adds	r1, r1, r0
 8004baa:	1850      	adds	r0, r2, r1
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	4283      	cmp	r3, r0
 8004bb0:	d1e0      	bne.n	8004b74 <_free_r+0x24>
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	1841      	adds	r1, r0, r1
 8004bb8:	6011      	str	r1, [r2, #0]
 8004bba:	6053      	str	r3, [r2, #4]
 8004bbc:	e7da      	b.n	8004b74 <_free_r+0x24>
 8004bbe:	42a0      	cmp	r0, r4
 8004bc0:	d902      	bls.n	8004bc8 <_free_r+0x78>
 8004bc2:	230c      	movs	r3, #12
 8004bc4:	602b      	str	r3, [r5, #0]
 8004bc6:	e7d5      	b.n	8004b74 <_free_r+0x24>
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	1821      	adds	r1, r4, r0
 8004bcc:	428b      	cmp	r3, r1
 8004bce:	d103      	bne.n	8004bd8 <_free_r+0x88>
 8004bd0:	6819      	ldr	r1, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	1809      	adds	r1, r1, r0
 8004bd6:	6021      	str	r1, [r4, #0]
 8004bd8:	6063      	str	r3, [r4, #4]
 8004bda:	6054      	str	r4, [r2, #4]
 8004bdc:	e7ca      	b.n	8004b74 <_free_r+0x24>
 8004bde:	46c0      	nop			@ (mov r8, r8)
 8004be0:	20000ff8 	.word	0x20000ff8

08004be4 <__malloc_lock>:
 8004be4:	b510      	push	{r4, lr}
 8004be6:	4802      	ldr	r0, [pc, #8]	@ (8004bf0 <__malloc_lock+0xc>)
 8004be8:	f7ff ffa6 	bl	8004b38 <__retarget_lock_acquire_recursive>
 8004bec:	bd10      	pop	{r4, pc}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	20000ff4 	.word	0x20000ff4

08004bf4 <__malloc_unlock>:
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	4802      	ldr	r0, [pc, #8]	@ (8004c00 <__malloc_unlock+0xc>)
 8004bf8:	f7ff ff9f 	bl	8004b3a <__retarget_lock_release_recursive>
 8004bfc:	bd10      	pop	{r4, pc}
 8004bfe:	46c0      	nop			@ (mov r8, r8)
 8004c00:	20000ff4 	.word	0x20000ff4

08004c04 <_init>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr

08004c10 <_fini>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr
