
Tilt_Simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08004730  08004730  00005730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d4  080048d4  00006028  2**0
                  CONTENTS
  4 .ARM          00000008  080048d4  080048d4  000058d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048dc  080048dc  00006028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048dc  080048dc  000058dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080048e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006028  2**0
                  CONTENTS
 10 .bss          00000194  20000028  20000028  00006028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00006028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b699  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f56  00000000  00000000  000116f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  00013648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000759  00000000  00000000  00013fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a53  00000000  00000000  00014739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c735  00000000  00000000  0003518c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4780  00000000  00000000  000418c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106041  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026d0  00000000  00000000  00106084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00108754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004718 	.word	0x08004718

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08004718 	.word	0x08004718

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	4613      	mov	r3, r2
 80004c6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENABLE;
 80004cc:	2200      	movs	r2, #0
 80004ce:	2108      	movs	r1, #8
 80004d0:	480c      	ldr	r0, [pc, #48]	@ (8000504 <LIS3DSH_WriteIO+0x4c>)
 80004d2:	f002 f97f 	bl	80027d4 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80004d6:	f107 010f 	add.w	r1, r7, #15
 80004da:	230a      	movs	r3, #10
 80004dc:	2201      	movs	r2, #1
 80004de:	480a      	ldr	r0, [pc, #40]	@ (8000508 <LIS3DSH_WriteIO+0x50>)
 80004e0:	f002 fef1 	bl	80032c6 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	230a      	movs	r3, #10
 80004ea:	6839      	ldr	r1, [r7, #0]
 80004ec:	4806      	ldr	r0, [pc, #24]	@ (8000508 <LIS3DSH_WriteIO+0x50>)
 80004ee:	f002 feea 	bl	80032c6 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80004f2:	2201      	movs	r2, #1
 80004f4:	2108      	movs	r1, #8
 80004f6:	4803      	ldr	r0, [pc, #12]	@ (8000504 <LIS3DSH_WriteIO+0x4c>)
 80004f8:	f002 f96c 	bl	80027d4 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	20000044 	.word	0x20000044

0800050c <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	6039      	str	r1, [r7, #0]
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	4613      	mov	r3, r2
 800051a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000522:	b2db      	uxtb	r3, r3
 8000524:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENABLE;
 8000526:	2200      	movs	r2, #0
 8000528:	2108      	movs	r1, #8
 800052a:	4818      	ldr	r0, [pc, #96]	@ (800058c <LIS3DSH_ReadIO+0x80>)
 800052c:	f002 f952 	bl	80027d4 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000530:	f107 0108 	add.w	r1, r7, #8
 8000534:	230a      	movs	r3, #10
 8000536:	2201      	movs	r2, #1
 8000538:	4815      	ldr	r0, [pc, #84]	@ (8000590 <LIS3DSH_ReadIO+0x84>)
 800053a:	f002 fec4 	bl	80032c6 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	b29a      	uxth	r2, r3
 8000542:	f107 0108 	add.w	r1, r7, #8
 8000546:	230a      	movs	r3, #10
 8000548:	4811      	ldr	r0, [pc, #68]	@ (8000590 <LIS3DSH_ReadIO+0x84>)
 800054a:	f002 ffff 	bl	800354c <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 800054e:	2201      	movs	r2, #1
 8000550:	2108      	movs	r1, #8
 8000552:	480e      	ldr	r0, [pc, #56]	@ (800058c <LIS3DSH_ReadIO+0x80>)
 8000554:	f002 f93e 	bl	80027d4 <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]
 800055c:	e00b      	b.n	8000576 <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 800055e:	7bfa      	ldrb	r2, [r7, #15]
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	6839      	ldr	r1, [r7, #0]
 8000564:	440b      	add	r3, r1
 8000566:	3210      	adds	r2, #16
 8000568:	443a      	add	r2, r7
 800056a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800056e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	3301      	adds	r3, #1
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	7bfa      	ldrb	r2, [r7, #15]
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	f003 0303 	and.w	r3, r3, #3
 800057e:	429a      	cmp	r2, r3
 8000580:	dbed      	blt.n	800055e <LIS3DSH_ReadIO+0x52>
	}
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	20000044 	.word	0x20000044

08000594 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 80005a2:	2258      	movs	r2, #88	@ 0x58
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	485b      	ldr	r0, [pc, #364]	@ (8000714 <LIS3DSH_Init+0x180>)
 80005a8:	f004 f8a8 	bl	80046fc <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	b25a      	sxtb	r2, r3
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	f023 030f 	bic.w	r3, r3, #15
 80005ce:	b25a      	sxtb	r2, r3
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80005dc:	f107 030f 	add.w	r3, r7, #15
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	2020      	movs	r0, #32
 80005e6:	f7ff ff67 	bl	80004b8 <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	789b      	ldrb	r3, [r3, #2]
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80005f8:	b25a      	sxtb	r2, r3
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	4313      	orrs	r3, r2
 8000600:	b25b      	sxtb	r3, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	b25b      	sxtb	r3, r3
 800060c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000610:	b25a      	sxtb	r2, r3
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	b25b      	sxtb	r3, r3
 8000616:	4313      	orrs	r3, r2
 8000618:	b25b      	sxtb	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 800061e:	f107 030f 	add.w	r3, r7, #15
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	2024      	movs	r0, #36	@ 0x24
 8000628:	f7ff ff46 	bl	80004b8 <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d008      	beq.n	8000646 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8000634:	2388      	movs	r3, #136	@ 0x88
 8000636:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8000638:	f107 030f 	add.w	r3, r7, #15
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	2023      	movs	r0, #35	@ 0x23
 8000642:	f7ff ff39 	bl	80004b8 <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	2b20      	cmp	r3, #32
 800064c:	d858      	bhi.n	8000700 <LIS3DSH_Init+0x16c>
 800064e:	a201      	add	r2, pc, #4	@ (adr r2, 8000654 <LIS3DSH_Init+0xc0>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	080006d9 	.word	0x080006d9
 8000658:	08000701 	.word	0x08000701
 800065c:	08000701 	.word	0x08000701
 8000660:	08000701 	.word	0x08000701
 8000664:	08000701 	.word	0x08000701
 8000668:	08000701 	.word	0x08000701
 800066c:	08000701 	.word	0x08000701
 8000670:	08000701 	.word	0x08000701
 8000674:	080006e1 	.word	0x080006e1
 8000678:	08000701 	.word	0x08000701
 800067c:	08000701 	.word	0x08000701
 8000680:	08000701 	.word	0x08000701
 8000684:	08000701 	.word	0x08000701
 8000688:	08000701 	.word	0x08000701
 800068c:	08000701 	.word	0x08000701
 8000690:	08000701 	.word	0x08000701
 8000694:	080006e9 	.word	0x080006e9
 8000698:	08000701 	.word	0x08000701
 800069c:	08000701 	.word	0x08000701
 80006a0:	08000701 	.word	0x08000701
 80006a4:	08000701 	.word	0x08000701
 80006a8:	08000701 	.word	0x08000701
 80006ac:	08000701 	.word	0x08000701
 80006b0:	08000701 	.word	0x08000701
 80006b4:	080006f1 	.word	0x080006f1
 80006b8:	08000701 	.word	0x08000701
 80006bc:	08000701 	.word	0x08000701
 80006c0:	08000701 	.word	0x08000701
 80006c4:	08000701 	.word	0x08000701
 80006c8:	08000701 	.word	0x08000701
 80006cc:	08000701 	.word	0x08000701
 80006d0:	08000701 	.word	0x08000701
 80006d4:	080006f9 	.word	0x080006f9
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <LIS3DSH_Init+0x184>)
 80006da:	4a10      	ldr	r2, [pc, #64]	@ (800071c <LIS3DSH_Init+0x188>)
 80006dc:	601a      	str	r2, [r3, #0]
			break;
 80006de:	e00f      	b.n	8000700 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <LIS3DSH_Init+0x184>)
 80006e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000720 <LIS3DSH_Init+0x18c>)
 80006e4:	601a      	str	r2, [r3, #0]
			break;
 80006e6:	e00b      	b.n	8000700 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80006e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <LIS3DSH_Init+0x184>)
 80006ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000724 <LIS3DSH_Init+0x190>)
 80006ec:	601a      	str	r2, [r3, #0]
			break;
 80006ee:	e007      	b.n	8000700 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <LIS3DSH_Init+0x184>)
 80006f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <LIS3DSH_Init+0x194>)
 80006f4:	601a      	str	r2, [r3, #0]
			break;
 80006f6:	e003      	b.n	8000700 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <LIS3DSH_Init+0x184>)
 80006fa:	4a0c      	ldr	r2, [pc, #48]	@ (800072c <LIS3DSH_Init+0x198>)
 80006fc:	601a      	str	r2, [r3, #0]
			break;
 80006fe:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8000700:	2201      	movs	r2, #1
 8000702:	2108      	movs	r1, #8
 8000704:	480a      	ldr	r0, [pc, #40]	@ (8000730 <LIS3DSH_Init+0x19c>)
 8000706:	f002 f865 	bl	80027d4 <HAL_GPIO_WritePin>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000044 	.word	0x20000044
 8000718:	20000000 	.word	0x20000000
 800071c:	3d75c28f 	.word	0x3d75c28f
 8000720:	3df5c28f 	.word	0x3df5c28f
 8000724:	3e3851ec 	.word	0x3e3851ec
 8000728:	3e75c28f 	.word	0x3e75c28f
 800072c:	3f3ae148 	.word	0x3f3ae148
 8000730:	40021000 	.word	0x40021000

08000734 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2202      	movs	r2, #2
 8000742:	4619      	mov	r1, r3
 8000744:	2028      	movs	r0, #40	@ 0x28
 8000746:	f7ff fee1 	bl	800050c <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 800074a:	7d7b      	ldrb	r3, [r7, #21]
 800074c:	021b      	lsls	r3, r3, #8
 800074e:	b29b      	uxth	r3, r3
 8000750:	7d3a      	ldrb	r2, [r7, #20]
 8000752:	4413      	add	r3, r2
 8000754:	b29b      	uxth	r3, r3
 8000756:	b21b      	sxth	r3, r3
 8000758:	81bb      	strh	r3, [r7, #12]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2202      	movs	r2, #2
 8000760:	4619      	mov	r1, r3
 8000762:	202a      	movs	r0, #42	@ 0x2a
 8000764:	f7ff fed2 	bl	800050c <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8000768:	7d7b      	ldrb	r3, [r7, #21]
 800076a:	021b      	lsls	r3, r3, #8
 800076c:	b29b      	uxth	r3, r3
 800076e:	7d3a      	ldrb	r2, [r7, #20]
 8000770:	4413      	add	r3, r2
 8000772:	b29b      	uxth	r3, r3
 8000774:	b21b      	sxth	r3, r3
 8000776:	81fb      	strh	r3, [r7, #14]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2202      	movs	r2, #2
 800077e:	4619      	mov	r1, r3
 8000780:	202c      	movs	r0, #44	@ 0x2c
 8000782:	f7ff fec3 	bl	800050c <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 8000786:	7d7b      	ldrb	r3, [r7, #21]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	b29b      	uxth	r3, r3
 800078c:	7d3a      	ldrb	r2, [r7, #20]
 800078e:	4413      	add	r3, r2
 8000790:	b29b      	uxth	r3, r3
 8000792:	b21b      	sxth	r3, r3
 8000794:	823b      	strh	r3, [r7, #16]
	
	return tempDataRaw;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	461a      	mov	r2, r3
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	6010      	str	r0, [r2, #0]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	8093      	strh	r3, [r2, #4]
	
}
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	@ 0x30
 80007b4:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ffba 	bl	8000734 <LIS3DSH_GetDataRaw>
	//Scale data and return 
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80007c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80007c4:	ee07 3a90 	vmov	s15, r3
 80007c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007cc:	4b31      	ldr	r3, [pc, #196]	@ (8000894 <LIS3DSH_GetDataScaled+0xe4>)
 80007ce:	edd3 7a00 	vldr	s15, [r3]
 80007d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007d6:	4b30      	ldr	r3, [pc, #192]	@ (8000898 <LIS3DSH_GetDataScaled+0xe8>)
 80007d8:	edd3 7a00 	vldr	s15, [r3]
 80007dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007e0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800089c <LIS3DSH_GetDataScaled+0xec>
 80007e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80007e8:	4b2d      	ldr	r3, [pc, #180]	@ (80008a0 <LIS3DSH_GetDataScaled+0xf0>)
 80007ea:	edd3 7a00 	vldr	s15, [r3]
 80007ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007f2:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80007f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007fa:	ee07 3a90 	vmov	s15, r3
 80007fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <LIS3DSH_GetDataScaled+0xe4>)
 8000804:	edd3 7a00 	vldr	s15, [r3]
 8000808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800080c:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <LIS3DSH_GetDataScaled+0xf4>)
 800080e:	edd3 7a00 	vldr	s15, [r3]
 8000812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000816:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800089c <LIS3DSH_GetDataScaled+0xec>
 800081a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800081e:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <LIS3DSH_GetDataScaled+0xf8>)
 8000820:	edd3 7a00 	vldr	s15, [r3]
 8000824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000828:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800082c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000830:	ee07 3a90 	vmov	s15, r3
 8000834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000838:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <LIS3DSH_GetDataScaled+0xe4>)
 800083a:	edd3 7a00 	vldr	s15, [r3]
 800083e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <LIS3DSH_GetDataScaled+0xfc>)
 8000844:	edd3 7a00 	vldr	s15, [r3]
 8000848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800084c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800089c <LIS3DSH_GetDataScaled+0xec>
 8000850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <LIS3DSH_GetDataScaled+0x100>)
 8000856:	edd3 7a00 	vldr	s15, [r3]
 800085a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800085e:	edc7 7a06 	vstr	s15, [r7, #24]
	
	return tempScaledData;
 8000862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000866:	f107 0210 	add.w	r2, r7, #16
 800086a:	ca07      	ldmia	r2, {r0, r1, r2}
 800086c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000870:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000876:	ee06 1a90 	vmov	s13, r1
 800087a:	ee07 2a10 	vmov	s14, r2
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a66 	vmov.f32	s0, s13
 8000886:	eef0 0a47 	vmov.f32	s1, s14
 800088a:	eeb0 1a67 	vmov.f32	s2, s15
 800088e:	3730      	adds	r7, #48	@ 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000000 	.word	0x20000000
 8000898:	20000004 	.word	0x20000004
 800089c:	00000000 	.word	0x00000000
 80008a0:	2000009c 	.word	0x2000009c
 80008a4:	20000008 	.word	0x20000008
 80008a8:	200000a0 	.word	0x200000a0
 80008ac:	2000000c 	.word	0x2000000c
 80008b0:	200000a4 	.word	0x200000a4

080008b4 <LIS3DSH_PollDRDY>:
//4. Poll for Data Ready
bool LIS3DSH_PollDRDY(uint32_t msTimeout)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	uint8_t Acc_status;
	uint32_t startTick = HAL_GetTick();
 80008bc:	f001 f9c2 	bl	8001c44 <HAL_GetTick>
 80008c0:	60f8      	str	r0, [r7, #12]
	do
	{
		//Read status register with a timeout
		LIS3DSH_ReadIO(0x27, &Acc_status, 1);
 80008c2:	f107 030b 	add.w	r3, r7, #11
 80008c6:	2201      	movs	r2, #1
 80008c8:	4619      	mov	r1, r3
 80008ca:	2027      	movs	r0, #39	@ 0x27
 80008cc:	f7ff fe1e 	bl	800050c <LIS3DSH_ReadIO>
		if(Acc_status & 0x07)break;
 80008d0:	7afb      	ldrb	r3, [r7, #11]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10d      	bne.n	80008f6 <LIS3DSH_PollDRDY+0x42>
		
	}while((Acc_status & 0x07)==0 && (HAL_GetTick() - startTick) < msTimeout);
 80008da:	7afb      	ldrb	r3, [r7, #11]
 80008dc:	f003 0307 	and.w	r3, r3, #7
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d109      	bne.n	80008f8 <LIS3DSH_PollDRDY+0x44>
 80008e4:	f001 f9ae 	bl	8001c44 <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8e6      	bhi.n	80008c2 <LIS3DSH_PollDRDY+0xe>
 80008f4:	e000      	b.n	80008f8 <LIS3DSH_PollDRDY+0x44>
		if(Acc_status & 0x07)break;
 80008f6:	bf00      	nop
	if(Acc_status & 0x07)
 80008f8:	7afb      	ldrb	r3, [r7, #11]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <LIS3DSH_PollDRDY+0x52>
	{
		return true;
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <LIS3DSH_PollDRDY+0x54>
	}
	return false;
 8000906:	2300      	movs	r3, #0
	
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <LIS3DSH_X_calibrate>:

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	ed87 0a01 	vstr	s0, [r7, #4]
 800091a:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 800091e:	ed97 7a00 	vldr	s14, [r7]
 8000922:	edd7 7a01 	vldr	s15, [r7, #4]
 8000926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800092a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800092e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <LIS3DSH_X_calibrate+0x50>)
 8000934:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*62.5)/(x_max - x_min);
 8000938:	ed97 7a00 	vldr	s14, [r7]
 800093c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000944:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000964 <LIS3DSH_X_calibrate+0x54>
 8000948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <LIS3DSH_X_calibrate+0x58>)
 800094e:	edc3 7a00 	vstr	s15, [r3]
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	2000009c 	.word	0x2000009c
 8000964:	42fa0000 	.word	0x42fa0000
 8000968:	20000004 	.word	0x20000004

0800096c <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	ed87 0a01 	vstr	s0, [r7, #4]
 8000976:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 800097a:	ed97 7a00 	vldr	s14, [r7]
 800097e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000982:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000986:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800098a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <LIS3DSH_Y_calibrate+0x50>)
 8000990:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*62.5)/(y_max - y_min);
 8000994:	ed97 7a00 	vldr	s14, [r7]
 8000998:	edd7 7a01 	vldr	s15, [r7, #4]
 800099c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009a0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80009c0 <LIS3DSH_Y_calibrate+0x54>
 80009a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <LIS3DSH_Y_calibrate+0x58>)
 80009aa:	edc3 7a00 	vstr	s15, [r3]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	200000a0 	.word	0x200000a0
 80009c0:	42fa0000 	.word	0x42fa0000
 80009c4:	20000008 	.word	0x20000008

080009c8 <LIS3DSH_Z_calibrate>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80009d2:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 80009d6:	ed97 7a00 	vldr	s14, [r7]
 80009da:	edd7 7a01 	vldr	s15, [r7, #4]
 80009de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009e2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80009e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <LIS3DSH_Z_calibrate+0x50>)
 80009ec:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*62.5)/(z_max - z_min);
 80009f0:	ed97 7a00 	vldr	s14, [r7]
 80009f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80009f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009fc:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000a1c <LIS3DSH_Z_calibrate+0x54>
 8000a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <LIS3DSH_Z_calibrate+0x58>)
 8000a06:	edc3 7a00 	vstr	s15, [r3]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	200000a4 	.word	0x200000a4
 8000a1c:	42fa0000 	.word	0x42fa0000
 8000a20:	2000000c 	.word	0x2000000c

08000a24 <AbsFloat>:

SimStateType state = STATE_OFF;
LIS3DSH_DataScaled temp_data = {12.5,12.5,250.0};

float AbsFloat(float num)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(num < 0)
 8000a2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3a:	d504      	bpl.n	8000a46 <AbsFloat+0x22>
	{
		return (num * -1);
 8000a3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a40:	eef1 7a67 	vneg.f32	s15, s15
 8000a44:	e001      	b.n	8000a4a <AbsFloat+0x26>
	}
	else
	{
		return num;
 8000a46:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 8000a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <WriteData>:

void WriteData(UART_HandleTypeDef *huart, float data)
{
 8000a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a5c:	b088      	sub	sp, #32
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a66:	466b      	mov	r3, sp
 8000a68:	469a      	mov	sl, r3
	SimStateType data_state = STATE_OFF;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	77fb      	strb	r3, [r7, #31]
	uint8_t temp_data;
	if( data < 0)
 8000a6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7a:	d50e      	bpl.n	8000a9a <WriteData+0x42>
	{
		temp_data = (uint8_t)AbsFloat(data);
 8000a7c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000a80:	f7ff ffd0 	bl	8000a24 <AbsFloat>
 8000a84:	eef0 7a40 	vmov.f32	s15, s0
 8000a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a90:	793b      	ldrb	r3, [r7, #4]
 8000a92:	77bb      	strb	r3, [r7, #30]
		data_state = STATE_ON;
 8000a94:	2301      	movs	r3, #1
 8000a96:	77fb      	strb	r3, [r7, #31]
 8000a98:	e01c      	b.n	8000ad4 <WriteData+0x7c>
	}
	else if( data < 1 && data > 1)
 8000a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aaa:	d50b      	bpl.n	8000ac4 <WriteData+0x6c>
 8000aac:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ab0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000abc:	dd02      	ble.n	8000ac4 <WriteData+0x6c>
	{
		temp_data = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	77bb      	strb	r3, [r7, #30]
 8000ac2:	e007      	b.n	8000ad4 <WriteData+0x7c>
	}
	else
	{
		temp_data = data;
 8000ac4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000acc:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ad0:	793b      	ldrb	r3, [r7, #4]
 8000ad2:	77bb      	strb	r3, [r7, #30]
	}
	uint8_t digit = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	777b      	strb	r3, [r7, #29]
	uint8_t temp = temp_data;
 8000ad8:	7fbb      	ldrb	r3, [r7, #30]
 8000ada:	773b      	strb	r3, [r7, #28]

	while (temp)
 8000adc:	e008      	b.n	8000af0 <WriteData+0x98>
	{
		// Increment number of digits
		digit++;
 8000ade:	7f7b      	ldrb	r3, [r7, #29]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	777b      	strb	r3, [r7, #29]

	   // Truncate the last
	   // digit from the number
	    temp /= 10;
 8000ae4:	7f3b      	ldrb	r3, [r7, #28]
 8000ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8000be4 <WriteData+0x18c>)
 8000ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aec:	08db      	lsrs	r3, r3, #3
 8000aee:	773b      	strb	r3, [r7, #28]
	while (temp)
 8000af0:	7f3b      	ldrb	r3, [r7, #28]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1f3      	bne.n	8000ade <WriteData+0x86>
	}
	if(digit == 0)
 8000af6:	7f7b      	ldrb	r3, [r7, #29]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d10a      	bne.n	8000b12 <WriteData+0xba>
	{
		digit = 1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	777b      	strb	r3, [r7, #29]
		HAL_UART_Transmit(huart, (uint8_t *)"0", 1, 500);
 8000b00:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b04:	2201      	movs	r2, #1
 8000b06:	4938      	ldr	r1, [pc, #224]	@ (8000be8 <WriteData+0x190>)
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f003 f979 	bl	8003e00 <HAL_UART_Transmit>
		return;
 8000b0e:	46d5      	mov	sp, sl
 8000b10:	e063      	b.n	8000bda <WriteData+0x182>
	}

	uint8_t dataArray[digit];
 8000b12:	7f7e      	ldrb	r6, [r7, #29]
 8000b14:	4633      	mov	r3, r6
 8000b16:	3b01      	subs	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	b2f3      	uxtb	r3, r6
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	4698      	mov	r8, r3
 8000b20:	4691      	mov	r9, r2
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f04f 0300 	mov.w	r3, #0
 8000b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b36:	b2f3      	uxtb	r3, r6
 8000b38:	2200      	movs	r2, #0
 8000b3a:	461c      	mov	r4, r3
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	f04f 0300 	mov.w	r3, #0
 8000b46:	00eb      	lsls	r3, r5, #3
 8000b48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b4c:	00e2      	lsls	r2, r4, #3
 8000b4e:	4633      	mov	r3, r6
 8000b50:	3307      	adds	r3, #7
 8000b52:	08db      	lsrs	r3, r3, #3
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	ebad 0d03 	sub.w	sp, sp, r3
 8000b5a:	466b      	mov	r3, sp
 8000b5c:	3300      	adds	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
    uint8_t count = digit - 1;
 8000b60:	7f7b      	ldrb	r3, [r7, #29]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	76fb      	strb	r3, [r7, #27]
    while (temp_data)
 8000b66:	e018      	b.n	8000b9a <WriteData+0x142>
    {
        // Separate last digit from
        // the number and add ASCII
        // value of character '0' is 48
        dataArray[count] = temp_data % 10 + 48;
 8000b68:	7fba      	ldrb	r2, [r7, #30]
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <WriteData+0x18c>)
 8000b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b70:	08d9      	lsrs	r1, r3, #3
 8000b72:	460b      	mov	r3, r1
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	440b      	add	r3, r1
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	7efb      	ldrb	r3, [r7, #27]
 8000b80:	3230      	adds	r2, #48	@ 0x30
 8000b82:	b2d1      	uxtb	r1, r2
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	54d1      	strb	r1, [r2, r3]

        count--;
 8000b88:	7efb      	ldrb	r3, [r7, #27]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	76fb      	strb	r3, [r7, #27]
        // Truncate the last
        // digit from the number
        temp_data /= 10;
 8000b8e:	7fbb      	ldrb	r3, [r7, #30]
 8000b90:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <WriteData+0x18c>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	77bb      	strb	r3, [r7, #30]
    while (temp_data)
 8000b9a:	7fbb      	ldrb	r3, [r7, #30]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1e3      	bne.n	8000b68 <WriteData+0x110>
    }

    if(data_state)
 8000ba0:	7ffb      	ldrb	r3, [r7, #31]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <WriteData+0x15c>
    {
    	HAL_UART_Transmit(huart, (uint8_t *)"-", 1, 500);
 8000ba6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000baa:	2201      	movs	r2, #1
 8000bac:	490f      	ldr	r1, [pc, #60]	@ (8000bec <WriteData+0x194>)
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f003 f926 	bl	8003e00 <HAL_UART_Transmit>
    }
    for( uint8_t i = 0; i < sizeof(dataArray); i++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	76bb      	strb	r3, [r7, #26]
 8000bb8:	e00b      	b.n	8000bd2 <WriteData+0x17a>
    {
   		HAL_UART_Transmit(huart, &dataArray[i], 1, 500);
 8000bba:	7ebb      	ldrb	r3, [r7, #26]
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	18d1      	adds	r1, r2, r3
 8000bc0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f003 f91a 	bl	8003e00 <HAL_UART_Transmit>
    for( uint8_t i = 0; i < sizeof(dataArray); i++)
 8000bcc:	7ebb      	ldrb	r3, [r7, #26]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	76bb      	strb	r3, [r7, #26]
 8000bd2:	7ebb      	ldrb	r3, [r7, #26]
 8000bd4:	42b3      	cmp	r3, r6
 8000bd6:	d3f0      	bcc.n	8000bba <WriteData+0x162>
 8000bd8:	46d5      	mov	sp, sl
    }
}
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	bf00      	nop
 8000be4:	cccccccd 	.word	0xcccccccd
 8000be8:	08004730 	.word	0x08004730
 8000bec:	08004734 	.word	0x08004734

08000bf0 <MeterInit>:

void MeterInit(SPI_HandleTypeDef hspi)
{
 8000bf0:	b084      	sub	sp, #16
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	f107 0c10 	add.w	ip, r7, #16
 8000bfc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LIS3DSH_InitTypeDef accmeter;

	accmeter.dataRate = LIS3DSH_DATARATE_25;
 8000c00:	2340      	movs	r3, #64	@ 0x40
 8000c02:	703b      	strb	r3, [r7, #0]
	accmeter.fullScale = LIS3DSH_FULLSCALE_4;
 8000c04:	2308      	movs	r3, #8
 8000c06:	707b      	strb	r3, [r7, #1]
	accmeter.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8000c08:	23c0      	movs	r3, #192	@ 0xc0
 8000c0a:	70bb      	strb	r3, [r7, #2]
	accmeter.enableAxes = LIS3DSH_XYZ_ENABLE;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	70fb      	strb	r3, [r7, #3]
	accmeter.interruptEnable = true;
 8000c10:	2301      	movs	r3, #1
 8000c12:	713b      	strb	r3, [r7, #4]

	LIS3DSH_Init(&hspi, &accmeter);
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	f107 0010 	add.w	r0, r7, #16
 8000c1c:	f7ff fcba 	bl	8000594 <LIS3DSH_Init>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4770      	bx	lr

08000c2e <GetScaledData>:

LIS3DSH_DataScaled GetScaledData()
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b08a      	sub	sp, #40	@ 0x28
 8000c32:	af00      	add	r7, sp, #0
	LIS3DSH_DataScaled ret;
	if( LIS3DSH_PollDRDY(1000) == true )
 8000c34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c38:	f7ff fe3c 	bl	80008b4 <LIS3DSH_PollDRDY>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00d      	beq.n	8000c5e <GetScaledData+0x30>
	{
		ret = LIS3DSH_GetDataScaled();
 8000c42:	f7ff fdb5 	bl	80007b0 <LIS3DSH_GetDataScaled>
 8000c46:	eef0 6a40 	vmov.f32	s13, s0
 8000c4a:	eeb0 7a60 	vmov.f32	s14, s1
 8000c4e:	eef0 7a41 	vmov.f32	s15, s2
 8000c52:	edc7 6a04 	vstr	s13, [r7, #16]
 8000c56:	ed87 7a05 	vstr	s14, [r7, #20]
 8000c5a:	edc7 7a06 	vstr	s15, [r7, #24]
	}
	return ret;
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	f107 0210 	add.w	r2, r7, #16
 8000c66:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000c6c:	69f9      	ldr	r1, [r7, #28]
 8000c6e:	6a3a      	ldr	r2, [r7, #32]
 8000c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c72:	ee06 1a90 	vmov	s13, r1
 8000c76:	ee07 2a10 	vmov	s14, r2
 8000c7a:	ee07 3a90 	vmov	s15, r3
}
 8000c7e:	eeb0 0a66 	vmov.f32	s0, s13
 8000c82:	eef0 0a47 	vmov.f32	s1, s14
 8000c86:	eeb0 1a67 	vmov.f32	s2, s15
 8000c8a:	3728      	adds	r7, #40	@ 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <MeterCalibrate>:

void MeterCalibrate()
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
		LIS3DSH_X_calibrate(-242.5, 237.5);
 8000c94:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8000cbc <MeterCalibrate+0x2c>
 8000c98:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000cc0 <MeterCalibrate+0x30>
 8000c9c:	f7ff fe38 	bl	8000910 <LIS3DSH_X_calibrate>
		LIS3DSH_Y_calibrate(-251.25, 247.5);
 8000ca0:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8000cc4 <MeterCalibrate+0x34>
 8000ca4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8000cc8 <MeterCalibrate+0x38>
 8000ca8:	f7ff fe60 	bl	800096c <LIS3DSH_Y_calibrate>
		LIS3DSH_Z_calibrate(-247.5, 241.25);
 8000cac:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8000ccc <MeterCalibrate+0x3c>
 8000cb0:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8000cd0 <MeterCalibrate+0x40>
 8000cb4:	f7ff fe88 	bl	80009c8 <LIS3DSH_Z_calibrate>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	436d8000 	.word	0x436d8000
 8000cc0:	c3728000 	.word	0xc3728000
 8000cc4:	43778000 	.word	0x43778000
 8000cc8:	c37b4000 	.word	0xc37b4000
 8000ccc:	43714000 	.word	0x43714000
 8000cd0:	c3778000 	.word	0xc3778000

08000cd4 <SimulatorLedControl>:

void SimulatorLedControl(LIS3DSH_DataScaled meter_data)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	eef0 6a40 	vmov.f32	s13, s0
 8000cde:	eeb0 7a60 	vmov.f32	s14, s1
 8000ce2:	eef0 7a41 	vmov.f32	s15, s2
 8000ce6:	edc7 6a01 	vstr	s13, [r7, #4]
 8000cea:	ed87 7a02 	vstr	s14, [r7, #8]
 8000cee:	edc7 7a03 	vstr	s15, [r7, #12]
	if(state == STATE_ON)
 8000cf2:	4ba2      	ldr	r3, [pc, #648]	@ (8000f7c <SimulatorLedControl+0x2a8>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d17b      	bne.n	8000df2 <SimulatorLedControl+0x11e>
	{
		if( meter_data.x > -150 && meter_data.x <= -50 )
 8000cfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cfe:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8000f80 <SimulatorLedControl+0x2ac>
 8000d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0a:	dd0f      	ble.n	8000d2c <SimulatorLedControl+0x58>
 8000d0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d10:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8000f84 <SimulatorLedControl+0x2b0>
 8000d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1c:	d806      	bhi.n	8000d2c <SimulatorLedControl+0x58>
		{
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d24:	4898      	ldr	r0, [pc, #608]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000d26:	f001 fd55 	bl	80027d4 <HAL_GPIO_WritePin>
 8000d2a:	e062      	b.n	8000df2 <SimulatorLedControl+0x11e>
		}
		else if( meter_data.x < 150 && meter_data.x >= 50 )
 8000d2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d30:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8000f8c <SimulatorLedControl+0x2b8>
 8000d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3c:	d50f      	bpl.n	8000d5e <SimulatorLedControl+0x8a>
 8000d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d42:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8000f90 <SimulatorLedControl+0x2bc>
 8000d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4e:	db06      	blt.n	8000d5e <SimulatorLedControl+0x8a>
		{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d56:	488c      	ldr	r0, [pc, #560]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000d58:	f001 fd3c 	bl	80027d4 <HAL_GPIO_WritePin>
 8000d5c:	e049      	b.n	8000df2 <SimulatorLedControl+0x11e>
		}
		else if( meter_data.y > -150 && meter_data.y <= -50 )
 8000d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d62:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8000f80 <SimulatorLedControl+0x2ac>
 8000d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	dd0f      	ble.n	8000d90 <SimulatorLedControl+0xbc>
 8000d70:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d74:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8000f84 <SimulatorLedControl+0x2b0>
 8000d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d80:	d806      	bhi.n	8000d90 <SimulatorLedControl+0xbc>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d88:	487f      	ldr	r0, [pc, #508]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000d8a:	f001 fd23 	bl	80027d4 <HAL_GPIO_WritePin>
 8000d8e:	e030      	b.n	8000df2 <SimulatorLedControl+0x11e>
		}
		else if( meter_data.y < 150 && meter_data.y >= 50 )
 8000d90:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d94:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8000f8c <SimulatorLedControl+0x2b8>
 8000d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da0:	d50f      	bpl.n	8000dc2 <SimulatorLedControl+0xee>
 8000da2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000da6:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8000f90 <SimulatorLedControl+0x2bc>
 8000daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db2:	db06      	blt.n	8000dc2 <SimulatorLedControl+0xee>
		{
			HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dba:	4873      	ldr	r0, [pc, #460]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000dbc:	f001 fd0a 	bl	80027d4 <HAL_GPIO_WritePin>
 8000dc0:	e017      	b.n	8000df2 <SimulatorLedControl+0x11e>
		}
		else
		{
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dc8:	486f      	ldr	r0, [pc, #444]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000dca:	f001 fd03 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd4:	486c      	ldr	r0, [pc, #432]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000dd6:	f001 fcfd 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000de0:	4869      	ldr	r0, [pc, #420]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000de2:	f001 fcf7 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dec:	4866      	ldr	r0, [pc, #408]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000dee:	f001 fcf1 	bl	80027d4 <HAL_GPIO_WritePin>
		}
	}

	if(state == STATE_WARNING)
 8000df2:	4b62      	ldr	r3, [pc, #392]	@ (8000f7c <SimulatorLedControl+0x2a8>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d15e      	bne.n	8000eb8 <SimulatorLedControl+0x1e4>
	{
		if( meter_data.x <= -150 )
 8000dfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dfe:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8000f80 <SimulatorLedControl+0x2ac>
 8000e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0a:	d808      	bhi.n	8000e1e <SimulatorLedControl+0x14a>
		{
			LedBlinkFast(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000e0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e10:	485d      	ldr	r0, [pc, #372]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000e12:	f000 fb36 	bl	8001482 <LedBlinkFast>
			HAL_Delay(50);
 8000e16:	2032      	movs	r0, #50	@ 0x32
 8000e18:	f000 ff20 	bl	8001c5c <HAL_Delay>
 8000e1c:	e04c      	b.n	8000eb8 <SimulatorLedControl+0x1e4>
		}
		else if( meter_data.x >= 150 )
 8000e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e22:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8000f8c <SimulatorLedControl+0x2b8>
 8000e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2e:	db08      	blt.n	8000e42 <SimulatorLedControl+0x16e>
		{
			LedBlinkFast(LED_RED_GPIO_Port, LED_RED_Pin);
 8000e30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e34:	4854      	ldr	r0, [pc, #336]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000e36:	f000 fb24 	bl	8001482 <LedBlinkFast>
			HAL_Delay(50);
 8000e3a:	2032      	movs	r0, #50	@ 0x32
 8000e3c:	f000 ff0e 	bl	8001c5c <HAL_Delay>
 8000e40:	e03a      	b.n	8000eb8 <SimulatorLedControl+0x1e4>
		}
		else if( meter_data.y <= -150 )
 8000e42:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e46:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8000f80 <SimulatorLedControl+0x2ac>
 8000e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e52:	d808      	bhi.n	8000e66 <SimulatorLedControl+0x192>
		{
			LedBlinkFast(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000e54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e58:	484b      	ldr	r0, [pc, #300]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000e5a:	f000 fb12 	bl	8001482 <LedBlinkFast>
			HAL_Delay(50);
 8000e5e:	2032      	movs	r0, #50	@ 0x32
 8000e60:	f000 fefc 	bl	8001c5c <HAL_Delay>
 8000e64:	e028      	b.n	8000eb8 <SimulatorLedControl+0x1e4>
		}
		else if( meter_data.y >= 150 )
 8000e66:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e6a:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8000f8c <SimulatorLedControl+0x2b8>
 8000e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e76:	db08      	blt.n	8000e8a <SimulatorLedControl+0x1b6>
		{
			LedBlinkFast(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8000e78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e7c:	4842      	ldr	r0, [pc, #264]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000e7e:	f000 fb00 	bl	8001482 <LedBlinkFast>
			HAL_Delay(50);
 8000e82:	2032      	movs	r0, #50	@ 0x32
 8000e84:	f000 feea 	bl	8001c5c <HAL_Delay>
 8000e88:	e016      	b.n	8000eb8 <SimulatorLedControl+0x1e4>
		}
		else
		{
			LedBlinkFast(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000e8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e8e:	483e      	ldr	r0, [pc, #248]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000e90:	f000 faf7 	bl	8001482 <LedBlinkFast>
			LedBlinkFast(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8000e94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e98:	483b      	ldr	r0, [pc, #236]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000e9a:	f000 faf2 	bl	8001482 <LedBlinkFast>
			LedBlinkFast(LED_RED_GPIO_Port, LED_RED_Pin);
 8000e9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ea2:	4839      	ldr	r0, [pc, #228]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000ea4:	f000 faed 	bl	8001482 <LedBlinkFast>
			LedBlinkFast(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000ea8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eac:	4836      	ldr	r0, [pc, #216]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000eae:	f000 fae8 	bl	8001482 <LedBlinkFast>
			HAL_Delay(50);
 8000eb2:	2032      	movs	r0, #50	@ 0x32
 8000eb4:	f000 fed2 	bl	8001c5c <HAL_Delay>
		}

	}


	if(state == STATE_ERROR)
 8000eb8:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <SimulatorLedControl+0x2a8>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d13d      	bne.n	8000f3c <SimulatorLedControl+0x268>
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ec6:	4830      	ldr	r0, [pc, #192]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000ec8:	f001 fc84 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ed2:	482d      	ldr	r0, [pc, #180]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000ed4:	f001 fc7e 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ede:	482a      	ldr	r0, [pc, #168]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000ee0:	f001 fc78 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eea:	4827      	ldr	r0, [pc, #156]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000eec:	f001 fc72 	bl	80027d4 <HAL_GPIO_WritePin>

		HAL_Delay(250);
 8000ef0:	20fa      	movs	r0, #250	@ 0xfa
 8000ef2:	f000 feb3 	bl	8001c5c <HAL_Delay>

		for(uint8_t i = 0; i<5; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	75fb      	strb	r3, [r7, #23]
 8000efa:	e019      	b.n	8000f30 <SimulatorLedControl+0x25c>
		{
			LedBlinkFast(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000efc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f00:	4821      	ldr	r0, [pc, #132]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000f02:	f000 fabe 	bl	8001482 <LedBlinkFast>
			LedBlinkFast(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8000f06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f0a:	481f      	ldr	r0, [pc, #124]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000f0c:	f000 fab9 	bl	8001482 <LedBlinkFast>
			LedBlinkFast(LED_RED_GPIO_Port, LED_RED_Pin);
 8000f10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f14:	481c      	ldr	r0, [pc, #112]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000f16:	f000 fab4 	bl	8001482 <LedBlinkFast>
			LedBlinkFast(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000f1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f1e:	481a      	ldr	r0, [pc, #104]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000f20:	f000 faaf 	bl	8001482 <LedBlinkFast>
			HAL_Delay(50);
 8000f24:	2032      	movs	r0, #50	@ 0x32
 8000f26:	f000 fe99 	bl	8001c5c <HAL_Delay>
		for(uint8_t i = 0; i<5; i++)
 8000f2a:	7dfb      	ldrb	r3, [r7, #23]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	75fb      	strb	r3, [r7, #23]
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d9e2      	bls.n	8000efc <SimulatorLedControl+0x228>
		}

		state = STATE_OFF;
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <SimulatorLedControl+0x2a8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
	}

	if(state == STATE_OFF)
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <SimulatorLedControl+0x2a8>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d117      	bne.n	8000f74 <SimulatorLedControl+0x2a0>
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f4a:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000f4c:	f001 fc42 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f56:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000f58:	f001 fc3c 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f62:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000f64:	f001 fc36 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f6e:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <SimulatorLedControl+0x2b4>)
 8000f70:	f001 fc30 	bl	80027d4 <HAL_GPIO_WritePin>
	}


}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200000a8 	.word	0x200000a8
 8000f80:	c3160000 	.word	0xc3160000
 8000f84:	c2480000 	.word	0xc2480000
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	43160000 	.word	0x43160000
 8000f90:	42480000 	.word	0x42480000

08000f94 <Simulator>:

SimStateType Simulator(UART_HandleTypeDef huart, LIS3DSH_DataScaled meter_data)
{
 8000f94:	b084      	sub	sp, #16
 8000f96:	b5b0      	push	{r4, r5, r7, lr}
 8000f98:	b09e      	sub	sp, #120	@ 0x78
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8000fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fa4:	eef0 6a40 	vmov.f32	s13, s0
 8000fa8:	eeb0 7a60 	vmov.f32	s14, s1
 8000fac:	eef0 7a41 	vmov.f32	s15, s2
 8000fb0:	edc7 6a01 	vstr	s13, [r7, #4]
 8000fb4:	ed87 7a02 	vstr	s14, [r7, #8]
 8000fb8:	edc7 7a03 	vstr	s15, [r7, #12]
	LIS3DSH_DataScaled diff_data;

	if(state)
 8000fbc:	4bc3      	ldr	r3, [pc, #780]	@ (80012cc <Simulator+0x338>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 817a 	beq.w	80012ba <Simulator+0x326>
	{
		if( (meter_data.x >= 205 || meter_data.x <= -205) || (meter_data.y >= 205 || meter_data.y <= -205) || meter_data.z <= 25 )
 8000fc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fca:	ed9f 7ac1 	vldr	s14, [pc, #772]	@ 80012d0 <Simulator+0x33c>
 8000fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd6:	da23      	bge.n	8001020 <Simulator+0x8c>
 8000fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fdc:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 80012d4 <Simulator+0x340>
 8000fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	d91a      	bls.n	8001020 <Simulator+0x8c>
 8000fea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fee:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 80012d0 <Simulator+0x33c>
 8000ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	da11      	bge.n	8001020 <Simulator+0x8c>
 8000ffc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001000:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80012d4 <Simulator+0x340>
 8001004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100c:	d908      	bls.n	8001020 <Simulator+0x8c>
 800100e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001012:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	d82d      	bhi.n	800107c <Simulator+0xe8>
		{
			uint8_t crash[] = "\n\n\r ERROR: The angle is too steep. Simulation is over.";
 8001020:	4bad      	ldr	r3, [pc, #692]	@ (80012d8 <Simulator+0x344>)
 8001022:	f107 0410 	add.w	r4, r7, #16
 8001026:	461d      	mov	r5, r3
 8001028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001038:	6020      	str	r0, [r4, #0]
 800103a:	3404      	adds	r4, #4
 800103c:	8021      	strh	r1, [r4, #0]
 800103e:	3402      	adds	r4, #2
 8001040:	0c0b      	lsrs	r3, r1, #16
 8001042:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart, crash, sizeof(crash), 500);
 8001044:	f107 0110 	add.w	r1, r7, #16
 8001048:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800104c:	2237      	movs	r2, #55	@ 0x37
 800104e:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001052:	f002 fed5 	bl	8003e00 <HAL_UART_Transmit>

			 state = STATE_ERROR;
 8001056:	4b9d      	ldr	r3, [pc, #628]	@ (80012cc <Simulator+0x338>)
 8001058:	2204      	movs	r2, #4
 800105a:	701a      	strb	r2, [r3, #0]
			 SimulatorLedControl(meter_data);
 800105c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001060:	ed97 7a02 	vldr	s14, [r7, #8]
 8001064:	edd7 7a03 	vldr	s15, [r7, #12]
 8001068:	eeb0 0a66 	vmov.f32	s0, s13
 800106c:	eef0 0a47 	vmov.f32	s1, s14
 8001070:	eeb0 1a67 	vmov.f32	s2, s15
 8001074:	f7ff fe2e 	bl	8000cd4 <SimulatorLedControl>

			 return STATE_OFF;
 8001078:	2300      	movs	r3, #0
 800107a:	e11f      	b.n	80012bc <Simulator+0x328>
		}

		diff_data.x = (meter_data.x - temp_data.x);
 800107c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001080:	4b96      	ldr	r3, [pc, #600]	@ (80012dc <Simulator+0x348>)
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		diff_data.y = (meter_data.y - temp_data.y);
 800108e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001092:	4b92      	ldr	r3, [pc, #584]	@ (80012dc <Simulator+0x348>)
 8001094:	edd3 7a01 	vldr	s15, [r3, #4]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		diff_data.z = (meter_data.z - temp_data.z);
 80010a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80010a4:	4b8d      	ldr	r3, [pc, #564]	@ (80012dc <Simulator+0x348>)
 80010a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80010aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ae:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

		if( AbsFloat(diff_data.x) > 50 || AbsFloat(diff_data.y) > 50 || AbsFloat(diff_data.z) > 50 )
 80010b2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	f7ff fcb3 	bl	8000a24 <AbsFloat>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80012e0 <Simulator+0x34c>
 80010c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	dc1d      	bgt.n	800110c <Simulator+0x178>
 80010d0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	f7ff fca4 	bl	8000a24 <AbsFloat>
 80010dc:	eef0 7a40 	vmov.f32	s15, s0
 80010e0:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80012e0 <Simulator+0x34c>
 80010e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ec:	dc0e      	bgt.n	800110c <Simulator+0x178>
 80010ee:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80010f2:	eeb0 0a67 	vmov.f32	s0, s15
 80010f6:	f7ff fc95 	bl	8000a24 <AbsFloat>
 80010fa:	eef0 7a40 	vmov.f32	s15, s0
 80010fe:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80012e0 <Simulator+0x34c>
 8001102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	dd26      	ble.n	800115a <Simulator+0x1c6>
		{
			uint8_t warning_change[] = "\n\n\r WARNING: Sudden change in the tilt angle.\n\r Do not change the tilt angle too suddenly.";
 800110c:	4a75      	ldr	r2, [pc, #468]	@ (80012e4 <Simulator+0x350>)
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4611      	mov	r1, r2
 8001114:	225b      	movs	r2, #91	@ 0x5b
 8001116:	4618      	mov	r0, r3
 8001118:	f003 faf0 	bl	80046fc <memcpy>
			HAL_UART_Transmit(&huart, warning_change, sizeof(warning_change), 500);
 800111c:	f107 0110 	add.w	r1, r7, #16
 8001120:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001124:	225b      	movs	r2, #91	@ 0x5b
 8001126:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800112a:	f002 fe69 	bl	8003e00 <HAL_UART_Transmit>

			state = STATE_WARNING;
 800112e:	4b67      	ldr	r3, [pc, #412]	@ (80012cc <Simulator+0x338>)
 8001130:	2203      	movs	r2, #3
 8001132:	701a      	strb	r2, [r3, #0]
			  SimulatorLedControl(meter_data);
 8001134:	edd7 6a01 	vldr	s13, [r7, #4]
 8001138:	ed97 7a02 	vldr	s14, [r7, #8]
 800113c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001140:	eeb0 0a66 	vmov.f32	s0, s13
 8001144:	eef0 0a47 	vmov.f32	s1, s14
 8001148:	eeb0 1a67 	vmov.f32	s2, s15
 800114c:	f7ff fdc2 	bl	8000cd4 <SimulatorLedControl>
			HAL_Delay(700);
 8001150:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001154:	f000 fd82 	bl	8001c5c <HAL_Delay>
		{
 8001158:	e064      	b.n	8001224 <Simulator+0x290>

		}
		else if( (meter_data.x >= 150 || meter_data.x <= -150) || (meter_data.y >= 150 || meter_data.y <= -150) || meter_data.z <= 100 )
 800115a:	edd7 7a01 	vldr	s15, [r7, #4]
 800115e:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80012e8 <Simulator+0x354>
 8001162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	da23      	bge.n	80011b4 <Simulator+0x220>
 800116c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001170:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80012ec <Simulator+0x358>
 8001174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	d91a      	bls.n	80011b4 <Simulator+0x220>
 800117e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001182:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80012e8 <Simulator+0x354>
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	da11      	bge.n	80011b4 <Simulator+0x220>
 8001190:	edd7 7a02 	vldr	s15, [r7, #8]
 8001194:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80012ec <Simulator+0x358>
 8001198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	d908      	bls.n	80011b4 <Simulator+0x220>
 80011a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a6:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80012f0 <Simulator+0x35c>
 80011aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d826      	bhi.n	8001202 <Simulator+0x26e>
		{
			uint8_t warning_zone[] = "\n\n\r WARNING: The tilt angle is dangerously steep. Lower the tilt angle.";
 80011b4:	4a4f      	ldr	r2, [pc, #316]	@ (80012f4 <Simulator+0x360>)
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4611      	mov	r1, r2
 80011bc:	2248      	movs	r2, #72	@ 0x48
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fa9c 	bl	80046fc <memcpy>
			HAL_UART_Transmit(&huart, warning_zone, sizeof(warning_zone), 500);
 80011c4:	f107 0110 	add.w	r1, r7, #16
 80011c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80011cc:	2248      	movs	r2, #72	@ 0x48
 80011ce:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80011d2:	f002 fe15 	bl	8003e00 <HAL_UART_Transmit>

			state = STATE_WARNING;
 80011d6:	4b3d      	ldr	r3, [pc, #244]	@ (80012cc <Simulator+0x338>)
 80011d8:	2203      	movs	r2, #3
 80011da:	701a      	strb	r2, [r3, #0]
			  SimulatorLedControl(meter_data);
 80011dc:	edd7 6a01 	vldr	s13, [r7, #4]
 80011e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80011e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e8:	eeb0 0a66 	vmov.f32	s0, s13
 80011ec:	eef0 0a47 	vmov.f32	s1, s14
 80011f0:	eeb0 1a67 	vmov.f32	s2, s15
 80011f4:	f7ff fd6e 	bl	8000cd4 <SimulatorLedControl>
			HAL_Delay(500);
 80011f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011fc:	f000 fd2e 	bl	8001c5c <HAL_Delay>
		{
 8001200:	e010      	b.n	8001224 <Simulator+0x290>


		}
		else
		{
			state = STATE_ON;
 8001202:	4b32      	ldr	r3, [pc, #200]	@ (80012cc <Simulator+0x338>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
			  SimulatorLedControl(meter_data);
 8001208:	edd7 6a01 	vldr	s13, [r7, #4]
 800120c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001210:	edd7 7a03 	vldr	s15, [r7, #12]
 8001214:	eeb0 0a66 	vmov.f32	s0, s13
 8001218:	eef0 0a47 	vmov.f32	s1, s14
 800121c:	eeb0 1a67 	vmov.f32	s2, s15
 8001220:	f7ff fd58 	bl	8000cd4 <SimulatorLedControl>
		}

		HAL_UART_Transmit(&huart, (uint8_t *)"\n\r   X = ", 11, 500);
 8001224:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001228:	220b      	movs	r2, #11
 800122a:	4933      	ldr	r1, [pc, #204]	@ (80012f8 <Simulator+0x364>)
 800122c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001230:	f002 fde6 	bl	8003e00 <HAL_UART_Transmit>
		WriteData(&huart, meter_data.x);
 8001234:	edd7 7a01 	vldr	s15, [r7, #4]
 8001238:	eeb0 0a67 	vmov.f32	s0, s15
 800123c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001240:	f7ff fc0a 	bl	8000a58 <WriteData>
		HAL_UART_Transmit(&huart, (uint8_t *)"   Y = ", 7, 500);
 8001244:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001248:	2207      	movs	r2, #7
 800124a:	492c      	ldr	r1, [pc, #176]	@ (80012fc <Simulator+0x368>)
 800124c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001250:	f002 fdd6 	bl	8003e00 <HAL_UART_Transmit>
		WriteData(&huart, meter_data.y);
 8001254:	edd7 7a02 	vldr	s15, [r7, #8]
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001260:	f7ff fbfa 	bl	8000a58 <WriteData>
		HAL_UART_Transmit(&huart, (uint8_t *)"   Z = ", 7, 500);
 8001264:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001268:	2207      	movs	r2, #7
 800126a:	4925      	ldr	r1, [pc, #148]	@ (8001300 <Simulator+0x36c>)
 800126c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001270:	f002 fdc6 	bl	8003e00 <HAL_UART_Transmit>
		WriteData(&huart, meter_data.z);
 8001274:	edd7 7a03 	vldr	s15, [r7, #12]
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001280:	f7ff fbea 	bl	8000a58 <WriteData>
		HAL_Delay(500);
 8001284:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001288:	f000 fce8 	bl	8001c5c <HAL_Delay>

		temp_data = meter_data;
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <Simulator+0x348>)
 800128e:	461c      	mov	r4, r3
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  SimulatorLedControl(meter_data);
 800129a:	edd7 6a01 	vldr	s13, [r7, #4]
 800129e:	ed97 7a02 	vldr	s14, [r7, #8]
 80012a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a6:	eeb0 0a66 	vmov.f32	s0, s13
 80012aa:	eef0 0a47 	vmov.f32	s1, s14
 80012ae:	eeb0 1a67 	vmov.f32	s2, s15
 80012b2:	f7ff fd0f 	bl	8000cd4 <SimulatorLedControl>
		return STATE_ON;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <Simulator+0x328>
	}
	return STATE_OFF;
 80012ba:	2300      	movs	r3, #0

}
 80012bc:	4618      	mov	r0, r3
 80012be:	3778      	adds	r7, #120	@ 0x78
 80012c0:	46bd      	mov	sp, r7
 80012c2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012c6:	b004      	add	sp, #16
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	200000a8 	.word	0x200000a8
 80012d0:	434d0000 	.word	0x434d0000
 80012d4:	c34d0000 	.word	0xc34d0000
 80012d8:	08004754 	.word	0x08004754
 80012dc:	20000010 	.word	0x20000010
 80012e0:	42480000 	.word	0x42480000
 80012e4:	0800478c 	.word	0x0800478c
 80012e8:	43160000 	.word	0x43160000
 80012ec:	c3160000 	.word	0xc3160000
 80012f0:	42c80000 	.word	0x42c80000
 80012f4:	080047e8 	.word	0x080047e8
 80012f8:	08004738 	.word	0x08004738
 80012fc:	08004744 	.word	0x08004744
 8001300:	0800474c 	.word	0x0800474c

08001304 <StartSimulator>:

void StartSimulator(UART_HandleTypeDef huart)
{
 8001304:	b084      	sub	sp, #16
 8001306:	b580      	push	{r7, lr}
 8001308:	b096      	sub	sp, #88	@ 0x58
 800130a:	af00      	add	r7, sp, #0
 800130c:	f107 0c60 	add.w	ip, r7, #96	@ 0x60
 8001310:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	state = STATE_ON;
 8001314:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <StartSimulator+0x94>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]

		LedBlink(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800131a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800131e:	481f      	ldr	r0, [pc, #124]	@ (800139c <StartSimulator+0x98>)
 8001320:	f000 f88a 	bl	8001438 <LedBlink>
		LedBlink(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8001324:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001328:	481c      	ldr	r0, [pc, #112]	@ (800139c <StartSimulator+0x98>)
 800132a:	f000 f885 	bl	8001438 <LedBlink>
		LedBlink(LED_RED_GPIO_Port, LED_RED_Pin);
 800132e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001332:	481a      	ldr	r0, [pc, #104]	@ (800139c <StartSimulator+0x98>)
 8001334:	f000 f880 	bl	8001438 <LedBlink>
		LedBlink(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001338:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800133c:	4817      	ldr	r0, [pc, #92]	@ (800139c <StartSimulator+0x98>)
 800133e:	f000 f87b 	bl	8001438 <LedBlink>

		LedBlinkMid(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001342:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001346:	4815      	ldr	r0, [pc, #84]	@ (800139c <StartSimulator+0x98>)
 8001348:	f000 f889 	bl	800145e <LedBlinkMid>
		LedBlinkMid(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 800134c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001350:	4812      	ldr	r0, [pc, #72]	@ (800139c <StartSimulator+0x98>)
 8001352:	f000 f884 	bl	800145e <LedBlinkMid>
		LedBlinkMid(LED_RED_GPIO_Port, LED_RED_Pin);
 8001356:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800135a:	4810      	ldr	r0, [pc, #64]	@ (800139c <StartSimulator+0x98>)
 800135c:	f000 f87f 	bl	800145e <LedBlinkMid>
		LedBlinkMid(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001360:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <StartSimulator+0x98>)
 8001366:	f000 f87a 	bl	800145e <LedBlinkMid>

	uint8_t start[] = "\n\n\n\rSimulator Started\n\n\r If the tilt angle is too steep the simulation will be over.\n\n\r";
 800136a:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <StartSimulator+0x9c>)
 800136c:	463b      	mov	r3, r7
 800136e:	4611      	mov	r1, r2
 8001370:	2258      	movs	r2, #88	@ 0x58
 8001372:	4618      	mov	r0, r3
 8001374:	f003 f9c2 	bl	80046fc <memcpy>
	HAL_UART_Transmit(&huart, start, sizeof(start), 500);
 8001378:	4639      	mov	r1, r7
 800137a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800137e:	2258      	movs	r2, #88	@ 0x58
 8001380:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001384:	f002 fd3c 	bl	8003e00 <HAL_UART_Transmit>


}
 8001388:	bf00      	nop
 800138a:	3758      	adds	r7, #88	@ 0x58
 800138c:	46bd      	mov	sp, r7
 800138e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001392:	b004      	add	sp, #16
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	200000a8 	.word	0x200000a8
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	08004830 	.word	0x08004830

080013a4 <ResetSimulator>:

void ResetSimulator(UART_HandleTypeDef huart, SimStateType sim_state)
{
 80013a4:	b084      	sub	sp, #16
 80013a6:	b5b0      	push	{r4, r5, r7, lr}
 80013a8:	b09a      	sub	sp, #104	@ 0x68
 80013aa:	af0e      	add	r7, sp, #56	@ 0x38
 80013ac:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80013b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(sim_state == STATE_OFF)
 80013b4:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d134      	bne.n	8001426 <ResetSimulator+0x82>
	{
		uint8_t ask_reset[] = "\n\n\r To restart the simulator press SPACE";
 80013bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <ResetSimulator+0x90>)
 80013be:	1d3c      	adds	r4, r7, #4
 80013c0:	461d      	mov	r5, r3
 80013c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ce:	c403      	stmia	r4!, {r0, r1}
 80013d0:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart, ask_reset, sizeof(ask_reset), 500);
 80013d2:	1d39      	adds	r1, r7, #4
 80013d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013d8:	2229      	movs	r2, #41	@ 0x29
 80013da:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80013de:	f002 fd0f 	bl	8003e00 <HAL_UART_Transmit>

		uint8_t reset_var = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		HAL_UART_Receive(&huart, &reset_var, 1, HAL_MAX_DELAY);
 80013e8:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	2201      	movs	r2, #1
 80013f2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80013f6:	f002 fd8e 	bl	8003f16 <HAL_UART_Receive>

		if( reset_var == 32)
 80013fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013fe:	2b20      	cmp	r3, #32
 8001400:	d111      	bne.n	8001426 <ResetSimulator+0x82>
		{
			StartSimulator(huart);
 8001402:	466d      	mov	r5, sp
 8001404:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001418:	e885 0003 	stmia.w	r5, {r0, r1}
 800141c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001422:	f7ff ff6f 	bl	8001304 <StartSimulator>
		}
	}
}
 8001426:	bf00      	nop
 8001428:	3730      	adds	r7, #48	@ 0x30
 800142a:	46bd      	mov	sp, r7
 800142c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001430:	b004      	add	sp, #16
 8001432:	4770      	bx	lr
 8001434:	08004888 	.word	0x08004888

08001438 <LedBlink>:
#include "led.h"

void LedBlink(GPIO_TypeDef *port, uint16_t pin)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(port, pin);
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	4619      	mov	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f001 f9dc 	bl	8002806 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800144e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001452:	f000 fc03 	bl	8001c5c <HAL_Delay>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <LedBlinkMid>:

void LedBlinkMid(GPIO_TypeDef *port, uint16_t pin)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(port, pin);
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	4619      	mov	r1, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f001 f9c9 	bl	8002806 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001474:	2064      	movs	r0, #100	@ 0x64
 8001476:	f000 fbf1 	bl	8001c5c <HAL_Delay>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <LedBlinkFast>:

void LedBlinkFast(GPIO_TypeDef *port, uint16_t pin)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(port, pin);
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f001 f9b7 	bl	8002806 <HAL_GPIO_TogglePin>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	b095      	sub	sp, #84	@ 0x54
 80014a4:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a6:	f000 fb67 	bl	8001b78 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014aa:	f000 f87b 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ae:	f000 f963 	bl	8001778 <MX_GPIO_Init>
  MX_DMA_Init();
 80014b2:	f000 f941 	bl	8001738 <MX_DMA_Init>
  MX_SPI1_Init();
 80014b6:	f000 f8df 	bl	8001678 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80014ba:	f000 f913 	bl	80016e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  MeterInit(hspi1);
 80014be:	4c36      	ldr	r4, [pc, #216]	@ (8001598 <main+0xf8>)
 80014c0:	4668      	mov	r0, sp
 80014c2:	f104 0310 	add.w	r3, r4, #16
 80014c6:	2248      	movs	r2, #72	@ 0x48
 80014c8:	4619      	mov	r1, r3
 80014ca:	f003 f917 	bl	80046fc <memcpy>
 80014ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014d2:	f7ff fb8d 	bl	8000bf0 <MeterInit>

  MeterCalibrate();
 80014d6:	f7ff fbdb 	bl	8000c90 <MeterCalibrate>

  StartSimulator(huart2);
 80014da:	4e30      	ldr	r6, [pc, #192]	@ (800159c <main+0xfc>)
 80014dc:	466d      	mov	r5, sp
 80014de:	f106 0410 	add.w	r4, r6, #16
 80014e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014fa:	f7ff ff03 	bl	8001304 <StartSimulator>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(LIS3DSH_PollDRDY(1000) == true)
 80014fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001502:	f7ff f9d7 	bl	80008b4 <LIS3DSH_PollDRDY>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f8      	beq.n	80014fe <main+0x5e>
	  {
			meter_data = GetScaledData();
 800150c:	f7ff fb8f 	bl	8000c2e <GetScaledData>
 8001510:	eef0 6a40 	vmov.f32	s13, s0
 8001514:	eeb0 7a60 	vmov.f32	s14, s1
 8001518:	eef0 7a41 	vmov.f32	s15, s2
 800151c:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <main+0x100>)
 800151e:	edc3 6a00 	vstr	s13, [r3]
 8001522:	ed83 7a01 	vstr	s14, [r3, #4]
 8001526:	edc3 7a02 	vstr	s15, [r3, #8]
			SimStateType sim_state = Simulator(huart2, meter_data);
 800152a:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <main+0x100>)
 800152c:	edd3 6a00 	vldr	s13, [r3]
 8001530:	ed93 7a01 	vldr	s14, [r3, #4]
 8001534:	edd3 7a02 	vldr	s15, [r3, #8]
 8001538:	4e18      	ldr	r6, [pc, #96]	@ (800159c <main+0xfc>)
 800153a:	466d      	mov	r5, sp
 800153c:	f106 0410 	add.w	r4, r6, #16
 8001540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001550:	e885 0003 	stmia.w	r5, {r0, r1}
 8001554:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001558:	eeb0 0a66 	vmov.f32	s0, s13
 800155c:	eef0 0a47 	vmov.f32	s1, s14
 8001560:	eeb0 1a67 	vmov.f32	s2, s15
 8001564:	f7ff fd16 	bl	8000f94 <Simulator>
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
			ResetSimulator(huart2, sim_state);
 800156c:	4e0b      	ldr	r6, [pc, #44]	@ (800159c <main+0xfc>)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	930e      	str	r3, [sp, #56]	@ 0x38
 8001572:	466d      	mov	r5, sp
 8001574:	f106 0410 	add.w	r4, r6, #16
 8001578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001584:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001588:	e885 0003 	stmia.w	r5, {r0, r1}
 800158c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001590:	f7ff ff08 	bl	80013a4 <ResetSimulator>
	  if(LIS3DSH_PollDRDY(1000) == true)
 8001594:	e7b3      	b.n	80014fe <main+0x5e>
 8001596:	bf00      	nop
 8001598:	200000ac 	.word	0x200000ac
 800159c:	20000104 	.word	0x20000104
 80015a0:	200001ac 	.word	0x200001ac

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	@ 0x50
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0320 	add.w	r3, r7, #32
 80015ae:	2230      	movs	r2, #48	@ 0x30
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 f876 	bl	80046a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <SystemClock_Config+0xcc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	4a27      	ldr	r2, [pc, #156]	@ (8001670 <SystemClock_Config+0xcc>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d8:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <SystemClock_Config+0xcc>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <SystemClock_Config+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <SystemClock_Config+0xd0>)
 80015ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <SystemClock_Config+0xd0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	2301      	movs	r3, #1
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001608:	2310      	movs	r3, #16
 800160a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160c:	2302      	movs	r3, #2
 800160e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001610:	2300      	movs	r3, #0
 8001612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001614:	2308      	movs	r3, #8
 8001616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001618:	2332      	movs	r3, #50	@ 0x32
 800161a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800161c:	2302      	movs	r3, #2
 800161e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001620:	2307      	movs	r3, #7
 8001622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001624:	f107 0320 	add.w	r3, r7, #32
 8001628:	4618      	mov	r0, r3
 800162a:	f001 f92b 	bl	8002884 <HAL_RCC_OscConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001634:	f000 f92a 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001638:	230f      	movs	r3, #15
 800163a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163c:	2302      	movs	r3, #2
 800163e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001644:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800164a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800164e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fb8c 	bl	8002d74 <HAL_RCC_ClockConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001662:	f000 f913 	bl	800188c <Error_Handler>
  }
}
 8001666:	bf00      	nop
 8001668:	3750      	adds	r7, #80	@ 0x50
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000

08001678 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <MX_SPI1_Init+0x64>)
 800167e:	4a18      	ldr	r2, [pc, #96]	@ (80016e0 <MX_SPI1_Init+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001682:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <MX_SPI1_Init+0x64>)
 8001684:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <MX_SPI1_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <MX_SPI1_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_SPI1_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <MX_SPI1_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016ac:	2210      	movs	r2, #16
 80016ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016be:	2200      	movs	r2, #0
 80016c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016c4:	220a      	movs	r2, #10
 80016c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016ca:	f001 fd73 	bl	80031b4 <HAL_SPI_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016d4:	f000 f8da 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200000ac 	.word	0x200000ac
 80016e0:	40013000 	.word	0x40013000

080016e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <MX_USART2_UART_Init+0x50>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 800171c:	f002 fb20 	bl	8003d60 <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001726:	f000 f8b1 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000104 	.word	0x20000104
 8001734:	40004400 	.word	0x40004400

08001738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MX_DMA_Init+0x3c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <MX_DMA_Init+0x3c>)
 8001748:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <MX_DMA_Init+0x3c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2011      	movs	r0, #17
 8001760:	f000 fb7b 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001764:	2011      	movs	r0, #17
 8001766:	f000 fb94 	bl	8001e92 <HAL_NVIC_EnableIRQ>

}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b3a      	ldr	r3, [pc, #232]	@ (800187c <MX_GPIO_Init+0x104>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a39      	ldr	r2, [pc, #228]	@ (800187c <MX_GPIO_Init+0x104>)
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b37      	ldr	r3, [pc, #220]	@ (800187c <MX_GPIO_Init+0x104>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b33      	ldr	r3, [pc, #204]	@ (800187c <MX_GPIO_Init+0x104>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a32      	ldr	r2, [pc, #200]	@ (800187c <MX_GPIO_Init+0x104>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b30      	ldr	r3, [pc, #192]	@ (800187c <MX_GPIO_Init+0x104>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b2c      	ldr	r3, [pc, #176]	@ (800187c <MX_GPIO_Init+0x104>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a2b      	ldr	r2, [pc, #172]	@ (800187c <MX_GPIO_Init+0x104>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b29      	ldr	r3, [pc, #164]	@ (800187c <MX_GPIO_Init+0x104>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2108      	movs	r1, #8
 80017e6:	4826      	ldr	r0, [pc, #152]	@ (8001880 <MX_GPIO_Init+0x108>)
 80017e8:	f000 fff4 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80017f2:	4824      	ldr	r0, [pc, #144]	@ (8001884 <MX_GPIO_Init+0x10c>)
 80017f4:	f000 ffee 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MEMS_CS_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 80017f8:	2308      	movs	r3, #8
 80017fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	481c      	ldr	r0, [pc, #112]	@ (8001880 <MX_GPIO_Init+0x108>)
 8001810:	f000 fe44 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001814:	2301      	movs	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	4619      	mov	r1, r3
 8001826:	4818      	ldr	r0, [pc, #96]	@ (8001888 <MX_GPIO_Init+0x110>)
 8001828:	f000 fe38 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800182c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4619      	mov	r1, r3
 8001844:	480f      	ldr	r0, [pc, #60]	@ (8001884 <MX_GPIO_Init+0x10c>)
 8001846:	f000 fe29 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800184a:	2301      	movs	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800184e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	4808      	ldr	r0, [pc, #32]	@ (8001880 <MX_GPIO_Init+0x108>)
 8001860:	f000 fe1c 	bl	800249c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	2006      	movs	r0, #6
 800186a:	f000 faf6 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800186e:	2006      	movs	r0, #6
 8001870:	f000 fb0f 	bl	8001e92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001874:	bf00      	nop
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40021000 	.word	0x40021000
 8001884:	40020c00 	.word	0x40020c00
 8001888:	40020000 	.word	0x40020000

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <Error_Handler+0x8>

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	4a0f      	ldr	r2, [pc, #60]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ae:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a08      	ldr	r2, [pc, #32]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018d6:	2007      	movs	r0, #7
 80018d8:	f000 fab4 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <HAL_SPI_MspInit+0x84>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d12b      	bne.n	8001962 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <HAL_SPI_MspInit+0x88>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	4a17      	ldr	r2, [pc, #92]	@ (8001970 <HAL_SPI_MspInit+0x88>)
 8001914:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001918:	6453      	str	r3, [r2, #68]	@ 0x44
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_SPI_MspInit+0x88>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_SPI_MspInit+0x88>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a10      	ldr	r2, [pc, #64]	@ (8001970 <HAL_SPI_MspInit+0x88>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <HAL_SPI_MspInit+0x88>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001942:	23e0      	movs	r3, #224	@ 0xe0
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001952:	2305      	movs	r3, #5
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	@ (8001974 <HAL_SPI_MspInit+0x8c>)
 800195e:	f000 fd9d 	bl	800249c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	@ 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40013000 	.word	0x40013000
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000

08001978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a35      	ldr	r2, [pc, #212]	@ (8001a6c <HAL_UART_MspInit+0xf4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d163      	bne.n	8001a62 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4b34      	ldr	r3, [pc, #208]	@ (8001a70 <HAL_UART_MspInit+0xf8>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a33      	ldr	r2, [pc, #204]	@ (8001a70 <HAL_UART_MspInit+0xf8>)
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b31      	ldr	r3, [pc, #196]	@ (8001a70 <HAL_UART_MspInit+0xf8>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <HAL_UART_MspInit+0xf8>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a2c      	ldr	r2, [pc, #176]	@ (8001a70 <HAL_UART_MspInit+0xf8>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <HAL_UART_MspInit+0xf8>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019d2:	230c      	movs	r3, #12
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e2:	2307      	movs	r3, #7
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4821      	ldr	r0, [pc, #132]	@ (8001a74 <HAL_UART_MspInit+0xfc>)
 80019ee:	f000 fd55 	bl	800249c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80019f2:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 80019f4:	4a21      	ldr	r2, [pc, #132]	@ (8001a7c <HAL_UART_MspInit+0x104>)
 80019f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 80019fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a02:	2240      	movs	r2, #64	@ 0x40
 8001a04:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a12:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001a20:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a26:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a30:	2204      	movs	r2, #4
 8001a32:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a34:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a36:	2203      	movs	r2, #3
 8001a38:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a40:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a46:	480c      	ldr	r0, [pc, #48]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a48:	f000 fa3e 	bl	8001ec8 <HAL_DMA_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8001a52:	f7ff ff1b 	bl	800188c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a5c:	4a06      	ldr	r2, [pc, #24]	@ (8001a78 <HAL_UART_MspInit+0x100>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	@ 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40004400 	.word	0x40004400
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020000 	.word	0x40020000
 8001a78:	2000014c 	.word	0x2000014c
 8001a7c:	400260a0 	.word	0x400260a0

08001a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <NMI_Handler+0x4>

08001a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <MemManage_Handler+0x4>

08001a98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad6:	f000 f8a1 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}

08001ade <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f000 feaa 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}

08001aec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <DMA1_Stream6_IRQHandler+0x10>)
 8001af2:	f000 fa97 	bl	8002024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000014c 	.word	0x2000014c

08001b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b28:	f7ff ffea 	bl	8001b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	@ (8001b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	@ (8001b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b52:	f002 fdaf 	bl	80046b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7ff fca3 	bl	80014a0 <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001b68:	080048e4 	.word	0x080048e4
  ldr r2, =_sbss
 8001b6c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001b70:	200001bc 	.word	0x200001bc

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	@ (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f94f 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f808 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fe74 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f967 	bl	8001eae <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f000 f92f 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2000001c 	.word	0x2000001c
 8001c14:	20000024 	.word	0x20000024
 8001c18:	20000020 	.word	0x20000020

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000024 	.word	0x20000024
 8001c40:	200001b8 	.word	0x200001b8

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	200001b8 	.word	0x200001b8

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000024 	.word	0x20000024

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	@ (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	@ (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	@ 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	@ 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff29 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff3e 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff31 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff feb6 	bl	8001c44 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e099      	b.n	8002018 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f04:	e00f      	b.n	8001f26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f06:	f7ff fe9d 	bl	8001c44 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d908      	bls.n	8001f26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2220      	movs	r2, #32
 8001f18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e078      	b.n	8002018 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e8      	bne.n	8001f06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <HAL_DMA_Init+0x158>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d107      	bne.n	8001f90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f023 0307 	bic.w	r3, r3, #7
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d117      	bne.n	8001fea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00e      	beq.n	8001fea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f9e9 	bl	80023a4 <DMA_CheckFifoParam>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2240      	movs	r2, #64	@ 0x40
 8001fdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e016      	b.n	8002018 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f9a0 	bl	8002338 <DMA_CalcBaseAndBitshift>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002000:	223f      	movs	r2, #63	@ 0x3f
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	f010803f 	.word	0xf010803f

08002024 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002030:	4b8e      	ldr	r3, [pc, #568]	@ (800226c <HAL_DMA_IRQHandler+0x248>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a8e      	ldr	r2, [pc, #568]	@ (8002270 <HAL_DMA_IRQHandler+0x24c>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0a9b      	lsrs	r3, r3, #10
 800203c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204e:	2208      	movs	r2, #8
 8002050:	409a      	lsls	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d01a      	beq.n	8002090 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0204 	bic.w	r2, r2, #4
 8002076:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207c:	2208      	movs	r2, #8
 800207e:	409a      	lsls	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002094:	2201      	movs	r2, #1
 8002096:	409a      	lsls	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d012      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b2:	2201      	movs	r2, #1
 80020b4:	409a      	lsls	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	f043 0202 	orr.w	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ca:	2204      	movs	r2, #4
 80020cc:	409a      	lsls	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d012      	beq.n	80020fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e8:	2204      	movs	r2, #4
 80020ea:	409a      	lsls	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f4:	f043 0204 	orr.w	r2, r3, #4
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002100:	2210      	movs	r2, #16
 8002102:	409a      	lsls	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d043      	beq.n	8002194 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d03c      	beq.n	8002194 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211e:	2210      	movs	r2, #16
 8002120:	409a      	lsls	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d018      	beq.n	8002166 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d108      	bne.n	8002154 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d024      	beq.n	8002194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
 8002152:	e01f      	b.n	8002194 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01b      	beq.n	8002194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
 8002164:	e016      	b.n	8002194 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0208 	bic.w	r2, r2, #8
 8002182:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002198:	2220      	movs	r2, #32
 800219a:	409a      	lsls	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 808f 	beq.w	80022c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8087 	beq.w	80022c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ba:	2220      	movs	r2, #32
 80021bc:	409a      	lsls	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d136      	bne.n	800223c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0216 	bic.w	r2, r2, #22
 80021dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <HAL_DMA_IRQHandler+0x1da>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0208 	bic.w	r2, r2, #8
 800220c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002212:	223f      	movs	r2, #63	@ 0x3f
 8002214:	409a      	lsls	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222e:	2b00      	cmp	r3, #0
 8002230:	d07e      	beq.n	8002330 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4798      	blx	r3
        }
        return;
 800223a:	e079      	b.n	8002330 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d01d      	beq.n	8002286 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10d      	bne.n	8002274 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	2b00      	cmp	r3, #0
 800225e:	d031      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
 8002268:	e02c      	b.n	80022c4 <HAL_DMA_IRQHandler+0x2a0>
 800226a:	bf00      	nop
 800226c:	2000001c 	.word	0x2000001c
 8002270:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d023      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
 8002284:	e01e      	b.n	80022c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10f      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0210 	bic.w	r2, r2, #16
 80022a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d032      	beq.n	8002332 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d022      	beq.n	800231e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2205      	movs	r2, #5
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	3301      	adds	r3, #1
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d307      	bcc.n	800230c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f2      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x2cc>
 800230a:	e000      	b.n	800230e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800230c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4798      	blx	r3
 800232e:	e000      	b.n	8002332 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002330:	bf00      	nop
    }
  }
}
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	3b10      	subs	r3, #16
 8002348:	4a14      	ldr	r2, [pc, #80]	@ (800239c <DMA_CalcBaseAndBitshift+0x64>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002352:	4a13      	ldr	r2, [pc, #76]	@ (80023a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d909      	bls.n	800237a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	1d1a      	adds	r2, r3, #4
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	659a      	str	r2, [r3, #88]	@ 0x58
 8002378:	e007      	b.n	800238a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	aaaaaaab 	.word	0xaaaaaaab
 80023a0:	080048cc 	.word	0x080048cc

080023a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d11f      	bne.n	80023fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d856      	bhi.n	8002472 <DMA_CheckFifoParam+0xce>
 80023c4:	a201      	add	r2, pc, #4	@ (adr r2, 80023cc <DMA_CheckFifoParam+0x28>)
 80023c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ca:	bf00      	nop
 80023cc:	080023dd 	.word	0x080023dd
 80023d0:	080023ef 	.word	0x080023ef
 80023d4:	080023dd 	.word	0x080023dd
 80023d8:	08002473 	.word	0x08002473
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d046      	beq.n	8002476 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ec:	e043      	b.n	8002476 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023f6:	d140      	bne.n	800247a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023fc:	e03d      	b.n	800247a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002406:	d121      	bne.n	800244c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d837      	bhi.n	800247e <DMA_CheckFifoParam+0xda>
 800240e:	a201      	add	r2, pc, #4	@ (adr r2, 8002414 <DMA_CheckFifoParam+0x70>)
 8002410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002414:	08002425 	.word	0x08002425
 8002418:	0800242b 	.word	0x0800242b
 800241c:	08002425 	.word	0x08002425
 8002420:	0800243d 	.word	0x0800243d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      break;
 8002428:	e030      	b.n	800248c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d025      	beq.n	8002482 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243a:	e022      	b.n	8002482 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002440:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002444:	d11f      	bne.n	8002486 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800244a:	e01c      	b.n	8002486 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d903      	bls.n	800245a <DMA_CheckFifoParam+0xb6>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d003      	beq.n	8002460 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002458:	e018      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
      break;
 800245e:	e015      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00e      	beq.n	800248a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	e00b      	b.n	800248a <DMA_CheckFifoParam+0xe6>
      break;
 8002472:	bf00      	nop
 8002474:	e00a      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
 8002478:	e008      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e006      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
 8002480:	e004      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
 8002484:	e002      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;   
 8002486:	bf00      	nop
 8002488:	e000      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 800248a:	bf00      	nop
    }
  } 
  
  return status; 
 800248c:	7bfb      	ldrb	r3, [r7, #15]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e16b      	b.n	8002790 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 815a 	bne.w	800278a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d005      	beq.n	80024ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d130      	bne.n	8002550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b03      	cmp	r3, #3
 800255a:	d017      	beq.n	800258c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d123      	bne.n	80025e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80b4 	beq.w	800278a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	4b60      	ldr	r3, [pc, #384]	@ (80027a8 <HAL_GPIO_Init+0x30c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	4a5f      	ldr	r2, [pc, #380]	@ (80027a8 <HAL_GPIO_Init+0x30c>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002630:	6453      	str	r3, [r2, #68]	@ 0x44
 8002632:	4b5d      	ldr	r3, [pc, #372]	@ (80027a8 <HAL_GPIO_Init+0x30c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263e:	4a5b      	ldr	r2, [pc, #364]	@ (80027ac <HAL_GPIO_Init+0x310>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a52      	ldr	r2, [pc, #328]	@ (80027b0 <HAL_GPIO_Init+0x314>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d02b      	beq.n	80026c2 <HAL_GPIO_Init+0x226>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a51      	ldr	r2, [pc, #324]	@ (80027b4 <HAL_GPIO_Init+0x318>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d025      	beq.n	80026be <HAL_GPIO_Init+0x222>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a50      	ldr	r2, [pc, #320]	@ (80027b8 <HAL_GPIO_Init+0x31c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01f      	beq.n	80026ba <HAL_GPIO_Init+0x21e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4f      	ldr	r2, [pc, #316]	@ (80027bc <HAL_GPIO_Init+0x320>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_GPIO_Init+0x21a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4e      	ldr	r2, [pc, #312]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0x216>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4d      	ldr	r2, [pc, #308]	@ (80027c4 <HAL_GPIO_Init+0x328>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00d      	beq.n	80026ae <HAL_GPIO_Init+0x212>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4c      	ldr	r2, [pc, #304]	@ (80027c8 <HAL_GPIO_Init+0x32c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x20e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4b      	ldr	r2, [pc, #300]	@ (80027cc <HAL_GPIO_Init+0x330>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_Init+0x20a>
 80026a2:	2307      	movs	r3, #7
 80026a4:	e00e      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026a6:	2308      	movs	r3, #8
 80026a8:	e00c      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026aa:	2306      	movs	r3, #6
 80026ac:	e00a      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026ae:	2305      	movs	r3, #5
 80026b0:	e008      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026b2:	2304      	movs	r3, #4
 80026b4:	e006      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026b6:	2303      	movs	r3, #3
 80026b8:	e004      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e002      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026c2:	2300      	movs	r3, #0
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f002 0203 	and.w	r2, r2, #3
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	4093      	lsls	r3, r2
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d4:	4935      	ldr	r1, [pc, #212]	@ (80027ac <HAL_GPIO_Init+0x310>)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e2:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002706:	4a32      	ldr	r2, [pc, #200]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800270c:	4b30      	ldr	r3, [pc, #192]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002730:	4a27      	ldr	r2, [pc, #156]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002736:	4b26      	ldr	r3, [pc, #152]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800275a:	4a1d      	ldr	r2, [pc, #116]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002760:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002784:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	f67f ae90 	bls.w	80024b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3724      	adds	r7, #36	@ 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40013800 	.word	0x40013800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	40020400 	.word	0x40020400
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40021400 	.word	0x40021400
 80027c8:	40021800 	.word	0x40021800
 80027cc:	40021c00 	.word	0x40021c00
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f0:	e003      	b.n	80027fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002818:	887a      	ldrh	r2, [r7, #2]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	041a      	lsls	r2, r3, #16
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	43d9      	mvns	r1, r3
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	400b      	ands	r3, r1
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002846:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002852:	4a05      	ldr	r2, [pc, #20]	@ (8002868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f806 	bl	800286c <HAL_GPIO_EXTI_Callback>
  }
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40013c00 	.word	0x40013c00

0800286c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e267      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d075      	beq.n	800298e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028a2:	4b88      	ldr	r3, [pc, #544]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d00c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ae:	4b85      	ldr	r3, [pc, #532]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d112      	bne.n	80028e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ba:	4b82      	ldr	r3, [pc, #520]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028c6:	d10b      	bne.n	80028e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d05b      	beq.n	800298c <HAL_RCC_OscConfig+0x108>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d157      	bne.n	800298c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e242      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e8:	d106      	bne.n	80028f8 <HAL_RCC_OscConfig+0x74>
 80028ea:	4b76      	ldr	r3, [pc, #472]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a75      	ldr	r2, [pc, #468]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e01d      	b.n	8002934 <HAL_RCC_OscConfig+0xb0>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x98>
 8002902:	4b70      	ldr	r3, [pc, #448]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6f      	ldr	r2, [pc, #444]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002908:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a6c      	ldr	r2, [pc, #432]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e00b      	b.n	8002934 <HAL_RCC_OscConfig+0xb0>
 800291c:	4b69      	ldr	r3, [pc, #420]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a68      	ldr	r2, [pc, #416]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	4b66      	ldr	r3, [pc, #408]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a65      	ldr	r2, [pc, #404]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 800292e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff f982 	bl	8001c44 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002944:	f7ff f97e 	bl	8001c44 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	@ 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e207      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	4b5b      	ldr	r3, [pc, #364]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0xc0>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7ff f96e 	bl	8001c44 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800296c:	f7ff f96a 	bl	8001c44 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	@ 0x64
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e1f3      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	4b51      	ldr	r3, [pc, #324]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0xe8>
 800298a:	e000      	b.n	800298e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d063      	beq.n	8002a62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800299a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a6:	4b47      	ldr	r3, [pc, #284]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d11c      	bne.n	80029ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b2:	4b44      	ldr	r3, [pc, #272]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d116      	bne.n	80029ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	4b41      	ldr	r3, [pc, #260]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_RCC_OscConfig+0x152>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e1c7      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4937      	ldr	r1, [pc, #220]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ea:	e03a      	b.n	8002a62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d020      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f4:	4b34      	ldr	r3, [pc, #208]	@ (8002ac8 <HAL_RCC_OscConfig+0x244>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7ff f923 	bl	8001c44 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a02:	f7ff f91f 	bl	8001c44 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e1a8      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b28      	ldr	r3, [pc, #160]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4925      	ldr	r1, [pc, #148]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]
 8002a34:	e015      	b.n	8002a62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a36:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <HAL_RCC_OscConfig+0x244>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7ff f902 	bl	8001c44 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a44:	f7ff f8fe 	bl	8001c44 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e187      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d036      	beq.n	8002adc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d016      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a76:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <HAL_RCC_OscConfig+0x248>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7ff f8e2 	bl	8001c44 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a84:	f7ff f8de 	bl	8001c44 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e167      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <HAL_RCC_OscConfig+0x240>)
 8002a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x200>
 8002aa2:	e01b      	b.n	8002adc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <HAL_RCC_OscConfig+0x248>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7ff f8cb 	bl	8001c44 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	e00e      	b.n	8002ad0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab2:	f7ff f8c7 	bl	8001c44 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d907      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e150      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	42470000 	.word	0x42470000
 8002acc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	4b88      	ldr	r3, [pc, #544]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ea      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8097 	beq.w	8002c18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aee:	4b81      	ldr	r3, [pc, #516]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10f      	bne.n	8002b1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	4b7d      	ldr	r3, [pc, #500]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	4a7c      	ldr	r2, [pc, #496]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0a:	4b7a      	ldr	r3, [pc, #488]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	4b77      	ldr	r3, [pc, #476]	@ (8002cf8 <HAL_RCC_OscConfig+0x474>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d118      	bne.n	8002b58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b26:	4b74      	ldr	r3, [pc, #464]	@ (8002cf8 <HAL_RCC_OscConfig+0x474>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a73      	ldr	r2, [pc, #460]	@ (8002cf8 <HAL_RCC_OscConfig+0x474>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b32:	f7ff f887 	bl	8001c44 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7ff f883 	bl	8001c44 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e10c      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf8 <HAL_RCC_OscConfig+0x474>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x2ea>
 8002b60:	4b64      	ldr	r3, [pc, #400]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	4a63      	ldr	r2, [pc, #396]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6c:	e01c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x324>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x30c>
 8002b76:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7a:	4a5e      	ldr	r2, [pc, #376]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b82:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b86:	4a5b      	ldr	r2, [pc, #364]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x324>
 8002b90:	4b58      	ldr	r3, [pc, #352]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b94:	4a57      	ldr	r2, [pc, #348]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b9c:	4b55      	ldr	r3, [pc, #340]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba0:	4a54      	ldr	r2, [pc, #336]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	f023 0304 	bic.w	r3, r3, #4
 8002ba6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d015      	beq.n	8002bdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7ff f848 	bl	8001c44 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb8:	f7ff f844 	bl	8001c44 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e0cb      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bce:	4b49      	ldr	r3, [pc, #292]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0ee      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x334>
 8002bda:	e014      	b.n	8002c06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bdc:	f7ff f832 	bl	8001c44 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7ff f82e 	bl	8001c44 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e0b5      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ee      	bne.n	8002be4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	4b39      	ldr	r3, [pc, #228]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	4a38      	ldr	r2, [pc, #224]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002c12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80a1 	beq.w	8002d64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c22:	4b34      	ldr	r3, [pc, #208]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d05c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d141      	bne.n	8002cba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b31      	ldr	r3, [pc, #196]	@ (8002cfc <HAL_RCC_OscConfig+0x478>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f802 	bl	8001c44 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe fffe 	bl	8001c44 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e087      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b27      	ldr	r3, [pc, #156]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	019b      	lsls	r3, r3, #6
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	491b      	ldr	r1, [pc, #108]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <HAL_RCC_OscConfig+0x478>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fe ffd7 	bl	8001c44 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9a:	f7fe ffd3 	bl	8001c44 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e05c      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cac:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x416>
 8002cb8:	e054      	b.n	8002d64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <HAL_RCC_OscConfig+0x478>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe ffc0 	bl	8001c44 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe ffbc 	bl	8001c44 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e045      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x444>
 8002ce6:	e03d      	b.n	8002d64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e038      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	@ (8002d70 <HAL_RCC_OscConfig+0x4ec>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d028      	beq.n	8002d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d121      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d11a      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d30:	4013      	ands	r3, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d111      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d46:	085b      	lsrs	r3, r3, #1
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800

08002d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0cc      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d88:	4b68      	ldr	r3, [pc, #416]	@ (8002f2c <HAL_RCC_ClockConfig+0x1b8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d90c      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b65      	ldr	r3, [pc, #404]	@ (8002f2c <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9e:	4b63      	ldr	r3, [pc, #396]	@ (8002f2c <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0b8      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d020      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc8:	4b59      	ldr	r3, [pc, #356]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	4a58      	ldr	r2, [pc, #352]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de0:	4b53      	ldr	r3, [pc, #332]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a52      	ldr	r2, [pc, #328]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dec:	4b50      	ldr	r3, [pc, #320]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	494d      	ldr	r1, [pc, #308]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d044      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d107      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	4b47      	ldr	r3, [pc, #284]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d119      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e07f      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d003      	beq.n	8002e32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e32:	4b3f      	ldr	r3, [pc, #252]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e06f      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e42:	4b3b      	ldr	r3, [pc, #236]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e067      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e52:	4b37      	ldr	r3, [pc, #220]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f023 0203 	bic.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4934      	ldr	r1, [pc, #208]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e64:	f7fe feee 	bl	8001c44 <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6c:	f7fe feea 	bl	8001c44 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e04f      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	4b2b      	ldr	r3, [pc, #172]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 020c 	and.w	r2, r3, #12
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d1eb      	bne.n	8002e6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e94:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <HAL_RCC_ClockConfig+0x1b8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d20c      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b20      	ldr	r3, [pc, #128]	@ (8002f2c <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e032      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec8:	4b19      	ldr	r3, [pc, #100]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4916      	ldr	r1, [pc, #88]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee6:	4b12      	ldr	r3, [pc, #72]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	490e      	ldr	r1, [pc, #56]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002efa:	f000 f821 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002efe:	4602      	mov	r2, r0
 8002f00:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	490a      	ldr	r1, [pc, #40]	@ (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	5ccb      	ldrb	r3, [r1, r3]
 8002f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f12:	4a09      	ldr	r2, [pc, #36]	@ (8002f38 <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f16:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <HAL_RCC_ClockConfig+0x1c8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fe4e 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023c00 	.word	0x40023c00
 8002f30:	40023800 	.word	0x40023800
 8002f34:	080048b4 	.word	0x080048b4
 8002f38:	2000001c 	.word	0x2000001c
 8002f3c:	20000020 	.word	0x20000020

08002f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f44:	b094      	sub	sp, #80	@ 0x50
 8002f46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f50:	2300      	movs	r3, #0
 8002f52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f58:	4b79      	ldr	r3, [pc, #484]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d00d      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x40>
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	f200 80e1 	bhi.w	800312c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x34>
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d003      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f72:	e0db      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4b73      	ldr	r3, [pc, #460]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f76:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002f78:	e0db      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f7a:	4b73      	ldr	r3, [pc, #460]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f7e:	e0d8      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f80:	4b6f      	ldr	r3, [pc, #444]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f88:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d063      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f96:	4b6a      	ldr	r3, [pc, #424]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	f04f 0000 	mov.w	r0, #0
 8002fba:	f04f 0100 	mov.w	r1, #0
 8002fbe:	0159      	lsls	r1, r3, #5
 8002fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc4:	0150      	lsls	r0, r2, #5
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4621      	mov	r1, r4
 8002fcc:	1a51      	subs	r1, r2, r1
 8002fce:	6139      	str	r1, [r7, #16]
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fe4:	4659      	mov	r1, fp
 8002fe6:	018b      	lsls	r3, r1, #6
 8002fe8:	4651      	mov	r1, sl
 8002fea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fee:	4651      	mov	r1, sl
 8002ff0:	018a      	lsls	r2, r1, #6
 8002ff2:	4651      	mov	r1, sl
 8002ff4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ff8:	4659      	mov	r1, fp
 8002ffa:	eb63 0901 	sbc.w	r9, r3, r1
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800300a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800300e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003012:	4690      	mov	r8, r2
 8003014:	4699      	mov	r9, r3
 8003016:	4623      	mov	r3, r4
 8003018:	eb18 0303 	adds.w	r3, r8, r3
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	462b      	mov	r3, r5
 8003020:	eb49 0303 	adc.w	r3, r9, r3
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003032:	4629      	mov	r1, r5
 8003034:	024b      	lsls	r3, r1, #9
 8003036:	4621      	mov	r1, r4
 8003038:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800303c:	4621      	mov	r1, r4
 800303e:	024a      	lsls	r2, r1, #9
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003046:	2200      	movs	r2, #0
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800304a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800304c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003050:	f7fd f8ba 	bl	80001c8 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4613      	mov	r3, r2
 800305a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800305c:	e058      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305e:	4b38      	ldr	r3, [pc, #224]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x200>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	2200      	movs	r2, #0
 8003066:	4618      	mov	r0, r3
 8003068:	4611      	mov	r1, r2
 800306a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800306e:	623b      	str	r3, [r7, #32]
 8003070:	2300      	movs	r3, #0
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
 8003074:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003078:	4642      	mov	r2, r8
 800307a:	464b      	mov	r3, r9
 800307c:	f04f 0000 	mov.w	r0, #0
 8003080:	f04f 0100 	mov.w	r1, #0
 8003084:	0159      	lsls	r1, r3, #5
 8003086:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800308a:	0150      	lsls	r0, r2, #5
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4641      	mov	r1, r8
 8003092:	ebb2 0a01 	subs.w	sl, r2, r1
 8003096:	4649      	mov	r1, r9
 8003098:	eb63 0b01 	sbc.w	fp, r3, r1
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030b0:	ebb2 040a 	subs.w	r4, r2, sl
 80030b4:	eb63 050b 	sbc.w	r5, r3, fp
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	00eb      	lsls	r3, r5, #3
 80030c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030c6:	00e2      	lsls	r2, r4, #3
 80030c8:	4614      	mov	r4, r2
 80030ca:	461d      	mov	r5, r3
 80030cc:	4643      	mov	r3, r8
 80030ce:	18e3      	adds	r3, r4, r3
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	464b      	mov	r3, r9
 80030d4:	eb45 0303 	adc.w	r3, r5, r3
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030e6:	4629      	mov	r1, r5
 80030e8:	028b      	lsls	r3, r1, #10
 80030ea:	4621      	mov	r1, r4
 80030ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030f0:	4621      	mov	r1, r4
 80030f2:	028a      	lsls	r2, r1, #10
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030fa:	2200      	movs	r2, #0
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	61fa      	str	r2, [r7, #28]
 8003100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003104:	f7fd f860 	bl	80001c8 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4613      	mov	r3, r2
 800310e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x200>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	0c1b      	lsrs	r3, r3, #16
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	3301      	adds	r3, #1
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003120:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800312a:	e002      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x204>)
 800312e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003134:	4618      	mov	r0, r3
 8003136:	3750      	adds	r7, #80	@ 0x50
 8003138:	46bd      	mov	sp, r7
 800313a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800
 8003144:	00f42400 	.word	0x00f42400
 8003148:	007a1200 	.word	0x007a1200

0800314c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003150:	4b03      	ldr	r3, [pc, #12]	@ (8003160 <HAL_RCC_GetHCLKFreq+0x14>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	2000001c 	.word	0x2000001c

08003164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003168:	f7ff fff0 	bl	800314c <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	0a9b      	lsrs	r3, r3, #10
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4903      	ldr	r1, [pc, #12]	@ (8003188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	080048c4 	.word	0x080048c4

0800318c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003190:	f7ff ffdc 	bl	800314c <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	0b5b      	lsrs	r3, r3, #13
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4903      	ldr	r1, [pc, #12]	@ (80031b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40023800 	.word	0x40023800
 80031b0:	080048c4 	.word	0x080048c4

080031b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e07b      	b.n	80032be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031d6:	d009      	beq.n	80031ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	61da      	str	r2, [r3, #28]
 80031de:	e005      	b.n	80031ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fe fb6e 	bl	80018e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003270:	ea42 0103 	orr.w	r1, r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	f003 0104 	and.w	r1, r3, #4
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	f003 0210 	and.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b088      	sub	sp, #32
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_SPI_Transmit+0x22>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e12d      	b.n	8003544 <HAL_SPI_Transmit+0x27e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f0:	f7fe fca8 	bl	8001c44 <HAL_GetTick>
 80032f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d002      	beq.n	800330c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	77fb      	strb	r3, [r7, #31]
    goto error;
 800330a:	e116      	b.n	800353a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_SPI_Transmit+0x52>
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800331c:	e10d      	b.n	800353a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2203      	movs	r2, #3
 8003322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	88fa      	ldrh	r2, [r7, #6]
 8003336:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	88fa      	ldrh	r2, [r7, #6]
 800333c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003364:	d10f      	bne.n	8003386 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003374:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003384:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003390:	2b40      	cmp	r3, #64	@ 0x40
 8003392:	d007      	beq.n	80033a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ac:	d14f      	bne.n	800344e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_SPI_Transmit+0xf6>
 80033b6:	8afb      	ldrh	r3, [r7, #22]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d142      	bne.n	8003442 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c0:	881a      	ldrh	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	1c9a      	adds	r2, r3, #2
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033e0:	e02f      	b.n	8003442 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d112      	bne.n	8003416 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	881a      	ldrh	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	1c9a      	adds	r2, r3, #2
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003414:	e015      	b.n	8003442 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003416:	f7fe fc15 	bl	8001c44 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d803      	bhi.n	800342e <HAL_SPI_Transmit+0x168>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d102      	bne.n	8003434 <HAL_SPI_Transmit+0x16e>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003440:	e07b      	b.n	800353a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ca      	bne.n	80033e2 <HAL_SPI_Transmit+0x11c>
 800344c:	e050      	b.n	80034f0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_SPI_Transmit+0x196>
 8003456:	8afb      	ldrh	r3, [r7, #22]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d144      	bne.n	80034e6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	7812      	ldrb	r2, [r2, #0]
 8003468:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003482:	e030      	b.n	80034e6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	d113      	bne.n	80034ba <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	7812      	ldrb	r2, [r2, #0]
 800349e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034b8:	e015      	b.n	80034e6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ba:	f7fe fbc3 	bl	8001c44 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d803      	bhi.n	80034d2 <HAL_SPI_Transmit+0x20c>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d102      	bne.n	80034d8 <HAL_SPI_Transmit+0x212>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80034e4:	e029      	b.n	800353a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1c9      	bne.n	8003484 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	6839      	ldr	r1, [r7, #0]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fbdf 	bl	8003cb8 <SPI_EndRxTxTransaction>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e003      	b.n	800353a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003542:	7ffb      	ldrb	r3, [r7, #31]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d002      	beq.n	8003572 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800356c:	2302      	movs	r3, #2
 800356e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003570:	e0fb      	b.n	800376a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800357a:	d112      	bne.n	80035a2 <HAL_SPI_Receive+0x56>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10e      	bne.n	80035a2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2204      	movs	r2, #4
 8003588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f8ef 	bl	800377c <HAL_SPI_TransmitReceive>
 800359e:	4603      	mov	r3, r0
 80035a0:	e0e8      	b.n	8003774 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_SPI_Receive+0x64>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0e1      	b.n	8003774 <HAL_SPI_Receive+0x228>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b8:	f7fe fb44 	bl	8001c44 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_SPI_Receive+0x7e>
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035ce:	e0cc      	b.n	800376a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2204      	movs	r2, #4
 80035d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	88fa      	ldrh	r2, [r7, #6]
 80035ee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003616:	d10f      	bne.n	8003638 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003626:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003642:	2b40      	cmp	r3, #64	@ 0x40
 8003644:	d007      	beq.n	8003656 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003654:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d16a      	bne.n	8003734 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800365e:	e032      	b.n	80036c6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b01      	cmp	r3, #1
 800366c:	d115      	bne.n	800369a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f103 020c 	add.w	r2, r3, #12
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003698:	e015      	b.n	80036c6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800369a:	f7fe fad3 	bl	8001c44 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d803      	bhi.n	80036b2 <HAL_SPI_Receive+0x166>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d102      	bne.n	80036b8 <HAL_SPI_Receive+0x16c>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d106      	bne.n	80036c6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80036c4:	e051      	b.n	800376a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1c7      	bne.n	8003660 <HAL_SPI_Receive+0x114>
 80036d0:	e035      	b.n	800373e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d113      	bne.n	8003708 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ea:	b292      	uxth	r2, r2
 80036ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	1c9a      	adds	r2, r3, #2
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003706:	e015      	b.n	8003734 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003708:	f7fe fa9c 	bl	8001c44 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d803      	bhi.n	8003720 <HAL_SPI_Receive+0x1d4>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371e:	d102      	bne.n	8003726 <HAL_SPI_Receive+0x1da>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003732:	e01a      	b.n	800376a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1c9      	bne.n	80036d2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	6839      	ldr	r1, [r7, #0]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fa52 	bl	8003bec <SPI_EndRxTransaction>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	75fb      	strb	r3, [r7, #23]
 8003760:	e003      	b.n	800376a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003772:	7dfb      	ldrb	r3, [r7, #23]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08c      	sub	sp, #48	@ 0x30
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800378a:	2301      	movs	r3, #1
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x26>
 800379e:	2302      	movs	r3, #2
 80037a0:	e198      	b.n	8003ad4 <HAL_SPI_TransmitReceive+0x358>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037aa:	f7fe fa4b 	bl	8001c44 <HAL_GetTick>
 80037ae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037c0:	887b      	ldrh	r3, [r7, #2]
 80037c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d00f      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x70>
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037d2:	d107      	bne.n	80037e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <HAL_SPI_TransmitReceive+0x68>
 80037dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d003      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
 80037e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80037ea:	e16d      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_SPI_TransmitReceive+0x82>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_SPI_TransmitReceive+0x82>
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003804:	e160      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b04      	cmp	r3, #4
 8003810:	d003      	beq.n	800381a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2205      	movs	r2, #5
 8003816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	887a      	ldrh	r2, [r7, #2]
 800382a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	887a      	ldrh	r2, [r7, #2]
 8003830:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	887a      	ldrh	r2, [r7, #2]
 800383c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	887a      	ldrh	r2, [r7, #2]
 8003842:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b40      	cmp	r3, #64	@ 0x40
 800385c:	d007      	beq.n	800386e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003876:	d17c      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_SPI_TransmitReceive+0x10a>
 8003880:	8b7b      	ldrh	r3, [r7, #26]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d16a      	bne.n	800395c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	881a      	ldrh	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	1c9a      	adds	r2, r3, #2
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038aa:	e057      	b.n	800395c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d11b      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x176>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d016      	beq.n	80038f2 <HAL_SPI_TransmitReceive+0x176>
 80038c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d113      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	881a      	ldrh	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	1c9a      	adds	r2, r3, #2
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d119      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x1b8>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d014      	beq.n	8003934 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003914:	b292      	uxth	r2, r2
 8003916:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003930:	2301      	movs	r3, #1
 8003932:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003934:	f7fe f986 	bl	8001c44 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003940:	429a      	cmp	r2, r3
 8003942:	d80b      	bhi.n	800395c <HAL_SPI_TransmitReceive+0x1e0>
 8003944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d007      	beq.n	800395c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800395a:	e0b5      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1a2      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x130>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d19d      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x130>
 8003970:	e080      	b.n	8003a74 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_SPI_TransmitReceive+0x204>
 800397a:	8b7b      	ldrh	r3, [r7, #26]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d16f      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	7812      	ldrb	r2, [r2, #0]
 800398c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a6:	e05b      	b.n	8003a60 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d11c      	bne.n	80039f0 <HAL_SPI_TransmitReceive+0x274>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d017      	beq.n	80039f0 <HAL_SPI_TransmitReceive+0x274>
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d114      	bne.n	80039f0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	330c      	adds	r3, #12
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d119      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x2b6>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d014      	beq.n	8003a32 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a32:	f7fe f907 	bl	8001c44 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d803      	bhi.n	8003a4a <HAL_SPI_TransmitReceive+0x2ce>
 8003a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d102      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x2d4>
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d107      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003a5e:	e033      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d19e      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x22c>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d199      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f91d 	bl	8003cb8 <SPI_EndRxTxTransaction>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d006      	beq.n	8003a92 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003a90:	e01a      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003abe:	e003      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3730      	adds	r7, #48	@ 0x30
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003aec:	f7fe f8aa 	bl	8001c44 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003afc:	f7fe f8a2 	bl	8001c44 <HAL_GetTick>
 8003b00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b02:	4b39      	ldr	r3, [pc, #228]	@ (8003be8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	015b      	lsls	r3, r3, #5
 8003b08:	0d1b      	lsrs	r3, r3, #20
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b12:	e054      	b.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d050      	beq.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b1c:	f7fe f892 	bl	8001c44 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d902      	bls.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d13d      	bne.n	8003bae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b4a:	d111      	bne.n	8003b70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b54:	d004      	beq.n	8003b60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5e:	d107      	bne.n	8003b70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b78:	d10f      	bne.n	8003b9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e017      	b.n	8003bde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d19b      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	2000001c 	.word	0x2000001c

08003bec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c00:	d111      	bne.n	8003c26 <SPI_EndRxTransaction+0x3a>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c0a:	d004      	beq.n	8003c16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c14:	d107      	bne.n	8003c26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c2e:	d12a      	bne.n	8003c86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c38:	d012      	beq.n	8003c60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2200      	movs	r2, #0
 8003c42:	2180      	movs	r1, #128	@ 0x80
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff ff49 	bl	8003adc <SPI_WaitFlagStateUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d02d      	beq.n	8003cac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e026      	b.n	8003cae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2101      	movs	r1, #1
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ff36 	bl	8003adc <SPI_WaitFlagStateUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01a      	beq.n	8003cac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e013      	b.n	8003cae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2101      	movs	r1, #1
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff ff23 	bl	8003adc <SPI_WaitFlagStateUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e000      	b.n	8003cae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	2102      	movs	r1, #2
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff ff04 	bl	8003adc <SPI_WaitFlagStateUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cde:	f043 0220 	orr.w	r2, r3, #32
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e032      	b.n	8003d50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cea:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <SPI_EndRxTxTransaction+0xa0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1b      	ldr	r2, [pc, #108]	@ (8003d5c <SPI_EndRxTxTransaction+0xa4>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	0d5b      	lsrs	r3, r3, #21
 8003cf6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d08:	d112      	bne.n	8003d30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2200      	movs	r2, #0
 8003d12:	2180      	movs	r1, #128	@ 0x80
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fee1 	bl	8003adc <SPI_WaitFlagStateUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d016      	beq.n	8003d4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e00f      	b.n	8003d50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d46:	2b80      	cmp	r3, #128	@ 0x80
 8003d48:	d0f2      	beq.n	8003d30 <SPI_EndRxTxTransaction+0x78>
 8003d4a:	e000      	b.n	8003d4e <SPI_EndRxTxTransaction+0x96>
        break;
 8003d4c:	bf00      	nop
  }

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	2000001c 	.word	0x2000001c
 8003d5c:	165e9f81 	.word	0x165e9f81

08003d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e042      	b.n	8003df8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd fdf6 	bl	8001978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	@ 0x24
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fa09 	bl	80041bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	@ 0x28
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d175      	bne.n	8003f0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Transmit+0x2c>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e06e      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2221      	movs	r2, #33	@ 0x21
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3e:	f7fd ff01 	bl	8001c44 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e58:	d108      	bne.n	8003e6c <HAL_UART_Transmit+0x6c>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e003      	b.n	8003e74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e74:	e02e      	b.n	8003ed4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2180      	movs	r1, #128	@ 0x80
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f8df 	bl	8004044 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e03a      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	e007      	b.n	8003ec6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1cb      	bne.n	8003e76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2140      	movs	r1, #64	@ 0x40
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f8ab 	bl	8004044 <UART_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e006      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e000      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b08a      	sub	sp, #40	@ 0x28
 8003f1a:	af02      	add	r7, sp, #8
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	f040 8081 	bne.w	800403a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_UART_Receive+0x2e>
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e079      	b.n	800403c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2222      	movs	r2, #34	@ 0x22
 8003f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f5c:	f7fd fe72 	bl	8001c44 <HAL_GetTick>
 8003f60:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	88fa      	ldrh	r2, [r7, #6]
 8003f66:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	88fa      	ldrh	r2, [r7, #6]
 8003f6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f76:	d108      	bne.n	8003f8a <HAL_UART_Receive+0x74>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d104      	bne.n	8003f8a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	e003      	b.n	8003f92 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f92:	e047      	b.n	8004024 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2120      	movs	r1, #32
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f850 	bl	8004044 <UART_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e042      	b.n	800403c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10c      	bne.n	8003fd6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	e01f      	b.n	8004016 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fde:	d007      	beq.n	8003ff0 <HAL_UART_Receive+0xda>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <HAL_UART_Receive+0xe8>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	e008      	b.n	8004010 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800400a:	b2da      	uxtb	r2, r3
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	3301      	adds	r3, #1
 8004014:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1b2      	bne.n	8003f94 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004054:	e03b      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d037      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405e:	f7fd fdf1 	bl	8001c44 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	6a3a      	ldr	r2, [r7, #32]
 800406a:	429a      	cmp	r2, r3
 800406c:	d302      	bcc.n	8004074 <UART_WaitOnFlagUntilTimeout+0x30>
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e03a      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d023      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b80      	cmp	r3, #128	@ 0x80
 800408a:	d020      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b40      	cmp	r3, #64	@ 0x40
 8004090:	d01d      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b08      	cmp	r3, #8
 800409e:	d116      	bne.n	80040ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f81d 	bl	80040f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2208      	movs	r2, #8
 80040c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e00f      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	bf0c      	ite	eq
 80040de:	2301      	moveq	r3, #1
 80040e0:	2300      	movne	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d0b4      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b095      	sub	sp, #84	@ 0x54
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800411e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004120:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004124:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800412c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e5      	bne.n	80040fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	61fb      	str	r3, [r7, #28]
   return(result);
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004152:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004154:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	2b01      	cmp	r3, #1
 800416c:	d119      	bne.n	80041a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	60bb      	str	r3, [r7, #8]
   return(result);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f023 0310 	bic.w	r3, r3, #16
 8004184:	647b      	str	r3, [r7, #68]	@ 0x44
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	330c      	adds	r3, #12
 800418c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800418e:	61ba      	str	r2, [r7, #24]
 8004190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6979      	ldr	r1, [r7, #20]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	613b      	str	r3, [r7, #16]
   return(result);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041b0:	bf00      	nop
 80041b2:	3754      	adds	r7, #84	@ 0x54
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c0:	b0c0      	sub	sp, #256	@ 0x100
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d8:	68d9      	ldr	r1, [r3, #12]
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	ea40 0301 	orr.w	r3, r0, r1
 80041e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004214:	f021 010c 	bic.w	r1, r1, #12
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004222:	430b      	orrs	r3, r1
 8004224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004236:	6999      	ldr	r1, [r3, #24]
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	ea40 0301 	orr.w	r3, r0, r1
 8004242:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b8f      	ldr	r3, [pc, #572]	@ (8004488 <UART_SetConfig+0x2cc>)
 800424c:	429a      	cmp	r2, r3
 800424e:	d005      	beq.n	800425c <UART_SetConfig+0xa0>
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b8d      	ldr	r3, [pc, #564]	@ (800448c <UART_SetConfig+0x2d0>)
 8004258:	429a      	cmp	r2, r3
 800425a:	d104      	bne.n	8004266 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800425c:	f7fe ff96 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 8004260:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004264:	e003      	b.n	800426e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004266:	f7fe ff7d 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 800426a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004278:	f040 810c 	bne.w	8004494 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800427c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004280:	2200      	movs	r2, #0
 8004282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004286:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800428a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800428e:	4622      	mov	r2, r4
 8004290:	462b      	mov	r3, r5
 8004292:	1891      	adds	r1, r2, r2
 8004294:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004296:	415b      	adcs	r3, r3
 8004298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800429a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800429e:	4621      	mov	r1, r4
 80042a0:	eb12 0801 	adds.w	r8, r2, r1
 80042a4:	4629      	mov	r1, r5
 80042a6:	eb43 0901 	adc.w	r9, r3, r1
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042be:	4690      	mov	r8, r2
 80042c0:	4699      	mov	r9, r3
 80042c2:	4623      	mov	r3, r4
 80042c4:	eb18 0303 	adds.w	r3, r8, r3
 80042c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042cc:	462b      	mov	r3, r5
 80042ce:	eb49 0303 	adc.w	r3, r9, r3
 80042d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042ea:	460b      	mov	r3, r1
 80042ec:	18db      	adds	r3, r3, r3
 80042ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80042f0:	4613      	mov	r3, r2
 80042f2:	eb42 0303 	adc.w	r3, r2, r3
 80042f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80042f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004300:	f7fb ff62 	bl	80001c8 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4b61      	ldr	r3, [pc, #388]	@ (8004490 <UART_SetConfig+0x2d4>)
 800430a:	fba3 2302 	umull	r2, r3, r3, r2
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	011c      	lsls	r4, r3, #4
 8004312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800431c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004320:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004324:	4642      	mov	r2, r8
 8004326:	464b      	mov	r3, r9
 8004328:	1891      	adds	r1, r2, r2
 800432a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800432c:	415b      	adcs	r3, r3
 800432e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004330:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004334:	4641      	mov	r1, r8
 8004336:	eb12 0a01 	adds.w	sl, r2, r1
 800433a:	4649      	mov	r1, r9
 800433c:	eb43 0b01 	adc.w	fp, r3, r1
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800434c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004354:	4692      	mov	sl, r2
 8004356:	469b      	mov	fp, r3
 8004358:	4643      	mov	r3, r8
 800435a:	eb1a 0303 	adds.w	r3, sl, r3
 800435e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004362:	464b      	mov	r3, r9
 8004364:	eb4b 0303 	adc.w	r3, fp, r3
 8004368:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004378:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800437c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004380:	460b      	mov	r3, r1
 8004382:	18db      	adds	r3, r3, r3
 8004384:	643b      	str	r3, [r7, #64]	@ 0x40
 8004386:	4613      	mov	r3, r2
 8004388:	eb42 0303 	adc.w	r3, r2, r3
 800438c:	647b      	str	r3, [r7, #68]	@ 0x44
 800438e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004392:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004396:	f7fb ff17 	bl	80001c8 <__aeabi_uldivmod>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004490 <UART_SetConfig+0x2d4>)
 80043a2:	fba3 2301 	umull	r2, r3, r3, r1
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2264      	movs	r2, #100	@ 0x64
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	1acb      	subs	r3, r1, r3
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043b6:	4b36      	ldr	r3, [pc, #216]	@ (8004490 <UART_SetConfig+0x2d4>)
 80043b8:	fba3 2302 	umull	r2, r3, r3, r2
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043c4:	441c      	add	r4, r3
 80043c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043d8:	4642      	mov	r2, r8
 80043da:	464b      	mov	r3, r9
 80043dc:	1891      	adds	r1, r2, r2
 80043de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043e0:	415b      	adcs	r3, r3
 80043e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043e8:	4641      	mov	r1, r8
 80043ea:	1851      	adds	r1, r2, r1
 80043ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80043ee:	4649      	mov	r1, r9
 80043f0:	414b      	adcs	r3, r1
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004400:	4659      	mov	r1, fp
 8004402:	00cb      	lsls	r3, r1, #3
 8004404:	4651      	mov	r1, sl
 8004406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800440a:	4651      	mov	r1, sl
 800440c:	00ca      	lsls	r2, r1, #3
 800440e:	4610      	mov	r0, r2
 8004410:	4619      	mov	r1, r3
 8004412:	4603      	mov	r3, r0
 8004414:	4642      	mov	r2, r8
 8004416:	189b      	adds	r3, r3, r2
 8004418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800441c:	464b      	mov	r3, r9
 800441e:	460a      	mov	r2, r1
 8004420:	eb42 0303 	adc.w	r3, r2, r3
 8004424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004434:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004438:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800443c:	460b      	mov	r3, r1
 800443e:	18db      	adds	r3, r3, r3
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004442:	4613      	mov	r3, r2
 8004444:	eb42 0303 	adc.w	r3, r2, r3
 8004448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800444a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800444e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004452:	f7fb feb9 	bl	80001c8 <__aeabi_uldivmod>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4b0d      	ldr	r3, [pc, #52]	@ (8004490 <UART_SetConfig+0x2d4>)
 800445c:	fba3 1302 	umull	r1, r3, r3, r2
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	2164      	movs	r1, #100	@ 0x64
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	3332      	adds	r3, #50	@ 0x32
 800446e:	4a08      	ldr	r2, [pc, #32]	@ (8004490 <UART_SetConfig+0x2d4>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	f003 0207 	and.w	r2, r3, #7
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4422      	add	r2, r4
 8004482:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004484:	e106      	b.n	8004694 <UART_SetConfig+0x4d8>
 8004486:	bf00      	nop
 8004488:	40011000 	.word	0x40011000
 800448c:	40011400 	.word	0x40011400
 8004490:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800449e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044a6:	4642      	mov	r2, r8
 80044a8:	464b      	mov	r3, r9
 80044aa:	1891      	adds	r1, r2, r2
 80044ac:	6239      	str	r1, [r7, #32]
 80044ae:	415b      	adcs	r3, r3
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044b6:	4641      	mov	r1, r8
 80044b8:	1854      	adds	r4, r2, r1
 80044ba:	4649      	mov	r1, r9
 80044bc:	eb43 0501 	adc.w	r5, r3, r1
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	00eb      	lsls	r3, r5, #3
 80044ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ce:	00e2      	lsls	r2, r4, #3
 80044d0:	4614      	mov	r4, r2
 80044d2:	461d      	mov	r5, r3
 80044d4:	4643      	mov	r3, r8
 80044d6:	18e3      	adds	r3, r4, r3
 80044d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044dc:	464b      	mov	r3, r9
 80044de:	eb45 0303 	adc.w	r3, r5, r3
 80044e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004502:	4629      	mov	r1, r5
 8004504:	008b      	lsls	r3, r1, #2
 8004506:	4621      	mov	r1, r4
 8004508:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800450c:	4621      	mov	r1, r4
 800450e:	008a      	lsls	r2, r1, #2
 8004510:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004514:	f7fb fe58 	bl	80001c8 <__aeabi_uldivmod>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4b60      	ldr	r3, [pc, #384]	@ (80046a0 <UART_SetConfig+0x4e4>)
 800451e:	fba3 2302 	umull	r2, r3, r3, r2
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	011c      	lsls	r4, r3, #4
 8004526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800452a:	2200      	movs	r2, #0
 800452c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004530:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004534:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004538:	4642      	mov	r2, r8
 800453a:	464b      	mov	r3, r9
 800453c:	1891      	adds	r1, r2, r2
 800453e:	61b9      	str	r1, [r7, #24]
 8004540:	415b      	adcs	r3, r3
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004548:	4641      	mov	r1, r8
 800454a:	1851      	adds	r1, r2, r1
 800454c:	6139      	str	r1, [r7, #16]
 800454e:	4649      	mov	r1, r9
 8004550:	414b      	adcs	r3, r1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004560:	4659      	mov	r1, fp
 8004562:	00cb      	lsls	r3, r1, #3
 8004564:	4651      	mov	r1, sl
 8004566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800456a:	4651      	mov	r1, sl
 800456c:	00ca      	lsls	r2, r1, #3
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	4603      	mov	r3, r0
 8004574:	4642      	mov	r2, r8
 8004576:	189b      	adds	r3, r3, r2
 8004578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800457c:	464b      	mov	r3, r9
 800457e:	460a      	mov	r2, r1
 8004580:	eb42 0303 	adc.w	r3, r2, r3
 8004584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004592:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045a0:	4649      	mov	r1, r9
 80045a2:	008b      	lsls	r3, r1, #2
 80045a4:	4641      	mov	r1, r8
 80045a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045aa:	4641      	mov	r1, r8
 80045ac:	008a      	lsls	r2, r1, #2
 80045ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045b2:	f7fb fe09 	bl	80001c8 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	4b38      	ldr	r3, [pc, #224]	@ (80046a0 <UART_SetConfig+0x4e4>)
 80045be:	fba3 2301 	umull	r2, r3, r3, r1
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2264      	movs	r2, #100	@ 0x64
 80045c6:	fb02 f303 	mul.w	r3, r2, r3
 80045ca:	1acb      	subs	r3, r1, r3
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	3332      	adds	r3, #50	@ 0x32
 80045d0:	4a33      	ldr	r2, [pc, #204]	@ (80046a0 <UART_SetConfig+0x4e4>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045dc:	441c      	add	r4, r3
 80045de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e2:	2200      	movs	r2, #0
 80045e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80045e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80045e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045ec:	4642      	mov	r2, r8
 80045ee:	464b      	mov	r3, r9
 80045f0:	1891      	adds	r1, r2, r2
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	415b      	adcs	r3, r3
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045fc:	4641      	mov	r1, r8
 80045fe:	1851      	adds	r1, r2, r1
 8004600:	6039      	str	r1, [r7, #0]
 8004602:	4649      	mov	r1, r9
 8004604:	414b      	adcs	r3, r1
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004614:	4659      	mov	r1, fp
 8004616:	00cb      	lsls	r3, r1, #3
 8004618:	4651      	mov	r1, sl
 800461a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800461e:	4651      	mov	r1, sl
 8004620:	00ca      	lsls	r2, r1, #3
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	4603      	mov	r3, r0
 8004628:	4642      	mov	r2, r8
 800462a:	189b      	adds	r3, r3, r2
 800462c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800462e:	464b      	mov	r3, r9
 8004630:	460a      	mov	r2, r1
 8004632:	eb42 0303 	adc.w	r3, r2, r3
 8004636:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	663b      	str	r3, [r7, #96]	@ 0x60
 8004642:	667a      	str	r2, [r7, #100]	@ 0x64
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004650:	4649      	mov	r1, r9
 8004652:	008b      	lsls	r3, r1, #2
 8004654:	4641      	mov	r1, r8
 8004656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800465a:	4641      	mov	r1, r8
 800465c:	008a      	lsls	r2, r1, #2
 800465e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004662:	f7fb fdb1 	bl	80001c8 <__aeabi_uldivmod>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <UART_SetConfig+0x4e4>)
 800466c:	fba3 1302 	umull	r1, r3, r3, r2
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	2164      	movs	r1, #100	@ 0x64
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	3332      	adds	r3, #50	@ 0x32
 800467e:	4a08      	ldr	r2, [pc, #32]	@ (80046a0 <UART_SetConfig+0x4e4>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	f003 020f 	and.w	r2, r3, #15
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4422      	add	r2, r4
 8004692:	609a      	str	r2, [r3, #8]
}
 8004694:	bf00      	nop
 8004696:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800469a:	46bd      	mov	sp, r7
 800469c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046a0:	51eb851f 	.word	0x51eb851f

080046a4 <memset>:
 80046a4:	4402      	add	r2, r0
 80046a6:	4603      	mov	r3, r0
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d100      	bne.n	80046ae <memset+0xa>
 80046ac:	4770      	bx	lr
 80046ae:	f803 1b01 	strb.w	r1, [r3], #1
 80046b2:	e7f9      	b.n	80046a8 <memset+0x4>

080046b4 <__libc_init_array>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	4d0d      	ldr	r5, [pc, #52]	@ (80046ec <__libc_init_array+0x38>)
 80046b8:	4c0d      	ldr	r4, [pc, #52]	@ (80046f0 <__libc_init_array+0x3c>)
 80046ba:	1b64      	subs	r4, r4, r5
 80046bc:	10a4      	asrs	r4, r4, #2
 80046be:	2600      	movs	r6, #0
 80046c0:	42a6      	cmp	r6, r4
 80046c2:	d109      	bne.n	80046d8 <__libc_init_array+0x24>
 80046c4:	4d0b      	ldr	r5, [pc, #44]	@ (80046f4 <__libc_init_array+0x40>)
 80046c6:	4c0c      	ldr	r4, [pc, #48]	@ (80046f8 <__libc_init_array+0x44>)
 80046c8:	f000 f826 	bl	8004718 <_init>
 80046cc:	1b64      	subs	r4, r4, r5
 80046ce:	10a4      	asrs	r4, r4, #2
 80046d0:	2600      	movs	r6, #0
 80046d2:	42a6      	cmp	r6, r4
 80046d4:	d105      	bne.n	80046e2 <__libc_init_array+0x2e>
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046dc:	4798      	blx	r3
 80046de:	3601      	adds	r6, #1
 80046e0:	e7ee      	b.n	80046c0 <__libc_init_array+0xc>
 80046e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e6:	4798      	blx	r3
 80046e8:	3601      	adds	r6, #1
 80046ea:	e7f2      	b.n	80046d2 <__libc_init_array+0x1e>
 80046ec:	080048dc 	.word	0x080048dc
 80046f0:	080048dc 	.word	0x080048dc
 80046f4:	080048dc 	.word	0x080048dc
 80046f8:	080048e0 	.word	0x080048e0

080046fc <memcpy>:
 80046fc:	440a      	add	r2, r1
 80046fe:	4291      	cmp	r1, r2
 8004700:	f100 33ff 	add.w	r3, r0, #4294967295
 8004704:	d100      	bne.n	8004708 <memcpy+0xc>
 8004706:	4770      	bx	lr
 8004708:	b510      	push	{r4, lr}
 800470a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800470e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004712:	4291      	cmp	r1, r2
 8004714:	d1f9      	bne.n	800470a <memcpy+0xe>
 8004716:	bd10      	pop	{r4, pc}

08004718 <_init>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr

08004724 <_fini>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	bf00      	nop
 8004728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472a:	bc08      	pop	{r3}
 800472c:	469e      	mov	lr, r3
 800472e:	4770      	bx	lr
