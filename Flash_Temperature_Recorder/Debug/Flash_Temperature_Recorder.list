
Flash_Temperature_Recorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000495c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004aec  08004aec  00005aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b58  08004b58  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b58  08004b58  00005b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b60  08004b60  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b60  08004b60  00005b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b64  08004b64  00005b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b68  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          0000038c  20000060  20000060  00006060  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200003ec  200003ec  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e188  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f82  00000000  00000000  00014214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00016198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6a  00000000  00000000  00016ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002252e  00000000  00000000  0001794a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb1b  00000000  00000000  00039e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7c92  00000000  00000000  00049993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121625  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e5c  00000000  00000000  00121668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  001254c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ad4 	.word	0x08004ad4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004ad4 	.word	0x08004ad4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	@ (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <TIM_IRQ_Handler>:
static void MX_USART2_UART_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */

void TIM_IRQ_Handler(TIM_HandleTypeDef *htim)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	if( (count < 20) && (adc_val != 0) )
 8000de0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <TIM_IRQ_Handler+0x78>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b13      	cmp	r3, #19
 8000de6:	d82e      	bhi.n	8000e46 <TIM_IRQ_Handler+0x6e>
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <TIM_IRQ_Handler+0x7c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d02a      	beq.n	8000e46 <TIM_IRQ_Handler+0x6e>
	{
	  rx_buffer[count] = temp;
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <TIM_IRQ_Handler+0x80>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a16      	ldr	r2, [pc, #88]	@ (8000e50 <TIM_IRQ_Handler+0x78>)
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	4614      	mov	r4, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fb9c 	bl	8000538 <__aeabi_f2d>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4815      	ldr	r0, [pc, #84]	@ (8000e5c <TIM_IRQ_Handler+0x84>)
 8000e06:	00e1      	lsls	r1, r4, #3
 8000e08:	4401      	add	r1, r0
 8000e0a:	e9c1 2300 	strd	r2, r3, [r1]
	  count++;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <TIM_IRQ_Handler+0x78>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <TIM_IRQ_Handler+0x78>)
 8000e18:	701a      	strb	r2, [r3, #0]

	  uart_buf_len = sprintf(uart_buf, "Data Written - %d C \r\n", (int)temp);
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <TIM_IRQ_Handler+0x80>)
 8000e1c:	edd3 7a00 	vldr	s15, [r3]
 8000e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e24:	ee17 2a90 	vmov	r2, s15
 8000e28:	490d      	ldr	r1, [pc, #52]	@ (8000e60 <TIM_IRQ_Handler+0x88>)
 8000e2a:	480e      	ldr	r0, [pc, #56]	@ (8000e64 <TIM_IRQ_Handler+0x8c>)
 8000e2c:	f003 f9b2 	bl	8004194 <siprintf>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <TIM_IRQ_Handler+0x90>)
 8000e34:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <TIM_IRQ_Handler+0x90>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	2364      	movs	r3, #100	@ 0x64
 8000e3e:	4909      	ldr	r1, [pc, #36]	@ (8000e64 <TIM_IRQ_Handler+0x8c>)
 8000e40:	480a      	ldr	r0, [pc, #40]	@ (8000e6c <TIM_IRQ_Handler+0x94>)
 8000e42:	f002 fdeb 	bl	8003a1c <HAL_UART_Transmit>
	}
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000290 	.word	0x20000290
 8000e54:	20000298 	.word	0x20000298
 8000e58:	20000294 	.word	0x20000294
 8000e5c:	200001f0 	.word	0x200001f0
 8000e60:	08004aec 	.word	0x08004aec
 8000e64:	200001b4 	.word	0x200001b4
 8000e68:	200001e8 	.word	0x200001e8
 8000e6c:	2000016c 	.word	0x2000016c

08000e70 <HAL_ADC_ConvCpltCallback>:
#define V_25C			0.76			// V
#define V_SENSE			(3.0/4096) 		// for 12 bit resolution


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	temp = (( (adc_val*V_SENSE) - V_25C ) / AVG_SLOPE ) + 25;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fb39 	bl	80004f4 <__aeabi_ui2d>
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <HAL_ADC_ConvCpltCallback+0x84>)
 8000e88:	f7ff fbae 	bl	80005e8 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	a312      	add	r3, pc, #72	@ (adr r3, 8000ee0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	f7ff f9ed 	bl	8000278 <__aeabi_dsub>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	a310      	add	r3, pc, #64	@ (adr r3, 8000ee8 <HAL_ADC_ConvCpltCallback+0x78>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f7ff fcc6 	bl	800083c <__aeabi_ddiv>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_ADC_ConvCpltCallback+0x88>)
 8000ebe:	f7ff f9dd 	bl	800027c <__adddf3>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f7ff fd9f 	bl	8000a0c <__aeabi_d2f>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_ADC_ConvCpltCallback+0x8c>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	f3af 8000 	nop.w
 8000ee0:	851eb852 	.word	0x851eb852
 8000ee4:	3fe851eb 	.word	0x3fe851eb
 8000ee8:	47ae147b 	.word	0x47ae147b
 8000eec:	3f647ae1 	.word	0x3f647ae1
 8000ef0:	20000298 	.word	0x20000298
 8000ef4:	3f480000 	.word	0x3f480000
 8000ef8:	40390000 	.word	0x40390000
 8000efc:	20000294 	.word	0x20000294

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fb56 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f81a 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 f956 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f10:	f000 f934 	bl	800117c <MX_DMA_Init>
  MX_ADC1_Init();
 8000f14:	f000 f87c 	bl	8001010 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f18:	f000 f906 	bl	8001128 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000f1c:	f000 f8ca 	bl	80010b4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADC_Start_DMA(&hadc1, &adc_val, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	4904      	ldr	r1, [pc, #16]	@ (8000f34 <main+0x34>)
 8000f24:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <main+0x38>)
 8000f26:	f000 fbfb 	bl	8001720 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim10);
 8000f2a:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <main+0x3c>)
 8000f2c:	f002 fadc 	bl	80034e8 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <main+0x30>
 8000f34:	20000298 	.word	0x20000298
 8000f38:	2000007c 	.word	0x2000007c
 8000f3c:	20000124 	.word	0x20000124

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	@ 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	@ 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 f940 	bl	80041d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <SystemClock_Config+0xc8>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	4a26      	ldr	r2, [pc, #152]	@ (8001008 <SystemClock_Config+0xc8>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f74:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <SystemClock_Config+0xc8>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	4b21      	ldr	r3, [pc, #132]	@ (800100c <SystemClock_Config+0xcc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a20      	ldr	r2, [pc, #128]	@ (800100c <SystemClock_Config+0xcc>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <SystemClock_Config+0xcc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000faa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000fb4:	2332      	movs	r3, #50	@ 0x32
 8000fb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 fda7 	bl	8002b18 <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fd0:	f000 f946 	bl	8001260 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 f809 	bl	8003008 <HAL_RCC_ClockConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ffc:	f000 f930 	bl	8001260 <Error_Handler>
  }
}
 8001000:	bf00      	nop
 8001002:	3750      	adds	r7, #80	@ 0x50
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001022:	4b21      	ldr	r3, [pc, #132]	@ (80010a8 <MX_ADC1_Init+0x98>)
 8001024:	4a21      	ldr	r2, [pc, #132]	@ (80010ac <MX_ADC1_Init+0x9c>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001028:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <MX_ADC1_Init+0x98>)
 800102a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800102e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <MX_ADC1_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001036:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800103c:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <MX_ADC1_Init+0x98>)
 800103e:	2201      	movs	r2, #1
 8001040:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <MX_ADC1_Init+0x98>)
 8001052:	4a17      	ldr	r2, [pc, #92]	@ (80010b0 <MX_ADC1_Init+0xa0>)
 8001054:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <MX_ADC1_Init+0x98>)
 800105e:	2201      	movs	r2, #1
 8001060:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_ADC1_Init+0x98>)
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <MX_ADC1_Init+0x98>)
 800106c:	2201      	movs	r2, #1
 800106e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001070:	480d      	ldr	r0, [pc, #52]	@ (80010a8 <MX_ADC1_Init+0x98>)
 8001072:	f000 fb11 	bl	8001698 <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800107c:	f000 f8f0 	bl	8001260 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001080:	2310      	movs	r3, #16
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001088:	2305      	movs	r3, #5
 800108a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_ADC1_Init+0x98>)
 8001092:	f000 fc69 	bl	8001968 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800109c:	f000 f8e0 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000007c 	.word	0x2000007c
 80010ac:	40012000 	.word	0x40012000
 80010b0:	0f000001 	.word	0x0f000001

080010b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <MX_TIM10_Init+0x6c>)
 80010ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001124 <MX_TIM10_Init+0x70>)
 80010bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1000;
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <MX_TIM10_Init+0x6c>)
 80010c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010c4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MX_TIM10_Init+0x6c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MX_TIM10_Init+0x6c>)
 80010ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80010d2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <MX_TIM10_Init+0x6c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_TIM10_Init+0x6c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010e0:	480f      	ldr	r0, [pc, #60]	@ (8001120 <MX_TIM10_Init+0x6c>)
 80010e2:	f002 f9b1 	bl	8003448 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80010ec:	f000 f8b8 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  TIM10->CR1 |= TIM_CR1_URS;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_TIM10_Init+0x70>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <MX_TIM10_Init+0x70>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6013      	str	r3, [r2, #0]
  TIM10->DIER |= TIM_DIER_UIE;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_TIM10_Init+0x70>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a08      	ldr	r2, [pc, #32]	@ (8001124 <MX_TIM10_Init+0x70>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	60d3      	str	r3, [r2, #12]
  TIM10->EGR |= TIM_EGR_UG;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_TIM10_Init+0x70>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <MX_TIM10_Init+0x70>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6153      	str	r3, [r2, #20]

  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001114:	2019      	movs	r0, #25
 8001116:	f7ff fe41 	bl	8000d9c <__NVIC_EnableIRQ>
  /* USER CODE END TIM10_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000124 	.word	0x20000124
 8001124:	40014400 	.word	0x40014400

08001128 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 800112e:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <MX_USART2_UART_Init+0x50>)
 8001130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 8001160:	f002 fc0c 	bl	800397c <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800116a:	f000 f879 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000016c 	.word	0x2000016c
 8001178:	40004400 	.word	0x40004400

0800117c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_DMA_Init+0x3c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <MX_DMA_Init+0x3c>)
 800118c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_DMA_Init+0x3c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2038      	movs	r0, #56	@ 0x38
 80011a4:	f000 ff5b 	bl	800205e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011a8:	2038      	movs	r0, #56	@ 0x38
 80011aa:	f000 ff74 	bl	8002096 <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <MX_GPIO_Init+0x9c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a1f      	ldr	r2, [pc, #124]	@ (8001258 <MX_GPIO_Init+0x9c>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <MX_GPIO_Init+0x9c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <MX_GPIO_Init+0x9c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <MX_GPIO_Init+0x9c>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <MX_GPIO_Init+0x9c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <MX_GPIO_Init+0x9c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a11      	ldr	r2, [pc, #68]	@ (8001258 <MX_GPIO_Init+0x9c>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <MX_GPIO_Init+0x9c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800122c:	480b      	ldr	r0, [pc, #44]	@ (800125c <MX_GPIO_Init+0xa0>)
 800122e:	f001 fc59 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4619      	mov	r1, r3
 800124a:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_GPIO_Init+0xa0>)
 800124c:	f001 faae 	bl	80027ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001250:	bf00      	nop
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40020c00 	.word	0x40020c00

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <Error_Handler+0x8>

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a0f      	ldr	r2, [pc, #60]	@ (80012b8 <HAL_MspInit+0x4c>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	@ 0x40
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012aa:	2007      	movs	r0, #7
 80012ac:	f000 fecc 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a22      	ldr	r2, [pc, #136]	@ (8001354 <HAL_ADC_MspInit+0x98>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d13d      	bne.n	800134a <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b21      	ldr	r3, [pc, #132]	@ (8001358 <HAL_ADC_MspInit+0x9c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	4a20      	ldr	r2, [pc, #128]	@ (8001358 <HAL_ADC_MspInit+0x9c>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012de:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <HAL_ADC_MspInit+0x9c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 80012ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001360 <HAL_ADC_MspInit+0xa4>)
 80012ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012fc:	4b17      	ldr	r3, [pc, #92]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001302:	4b16      	ldr	r3, [pc, #88]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 8001304:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001308:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 800130c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001310:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 8001314:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001318:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 800131c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001320:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800132e:	480b      	ldr	r0, [pc, #44]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 8001330:	f000 fecc 	bl	80020cc <HAL_DMA_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800133a:	f7ff ff91 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a06      	ldr	r2, [pc, #24]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 8001342:	639a      	str	r2, [r3, #56]	@ 0x38
 8001344:	4a05      	ldr	r2, [pc, #20]	@ (800135c <HAL_ADC_MspInit+0xa0>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40012000 	.word	0x40012000
 8001358:	40023800 	.word	0x40023800
 800135c:	200000c4 	.word	0x200000c4
 8001360:	40026410 	.word	0x40026410

08001364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0e      	ldr	r2, [pc, #56]	@ (80013ac <HAL_TIM_Base_MspInit+0x48>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d115      	bne.n	80013a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <HAL_TIM_Base_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	4a0c      	ldr	r2, [pc, #48]	@ (80013b0 <HAL_TIM_Base_MspInit+0x4c>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	6453      	str	r3, [r2, #68]	@ 0x44
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_TIM_Base_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2019      	movs	r0, #25
 8001398:	f000 fe61 	bl	800205e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800139c:	2019      	movs	r0, #25
 800139e:	f000 fe7a 	bl	8002096 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40014400 	.word	0x40014400
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	@ (8001438 <HAL_UART_MspInit+0x84>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d12b      	bne.n	800142e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_UART_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800140e:	230c      	movs	r3, #12
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141e:	2307      	movs	r3, #7
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	@ (8001440 <HAL_UART_MspInit+0x8c>)
 800142a:	f001 f9bf 	bl	80027ac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	@ 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40004400 	.word	0x40004400
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <NMI_Handler+0x4>

0800144c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <MemManage_Handler+0x4>

0800145c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <UsageFault_Handler+0x4>

0800146c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149a:	f000 f8dd 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	TIM_IRQ_Handler(&htim10);
 80014a8:	4803      	ldr	r0, [pc, #12]	@ (80014b8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80014aa:	f7ff fc95 	bl	8000dd8 <TIM_IRQ_Handler>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80014ae:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80014b0:	f002 f882 	bl	80035b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000124 	.word	0x20000124

080014bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <DMA2_Stream0_IRQHandler+0x10>)
 80014c2:	f000 ff09 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000c4 	.word	0x200000c4

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	@ (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f002 fe70 	bl	80041e4 <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20020000 	.word	0x20020000
 8001530:	00000400 	.word	0x00000400
 8001534:	2000029c 	.word	0x2000029c
 8001538:	200003f0 	.word	0x200003f0

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001598 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001564:	f7ff ffea 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	@ (80015ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f002 fe2f 	bl	80041f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff fcb5 	bl	8000f00 <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015a4:	08004b68 	.word	0x08004b68
  ldr r2, =_sbss
 80015a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80015ac:	200003ec 	.word	0x200003ec

080015b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <HAL_Init+0x40>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <HAL_Init+0x40>)
 80015ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <HAL_Init+0x40>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 fd33 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f808 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff fe40 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fd4b 	bl	80020b2 <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f000 fd13 	bl	800205e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000000 	.word	0x20000000
 8001650:	20000008 	.word	0x20000008
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008
 800167c:	200002a0 	.word	0x200002a0

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200002a0 	.word	0x200002a0

08001698 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e033      	b.n	8001716 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fe00 	bl	80012bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d118      	bne.n	8001708 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016de:	f023 0302 	bic.w	r3, r3, #2
 80016e2:	f043 0202 	orr.w	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fa5e 	bl	8001bac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f023 0303 	bic.w	r3, r3, #3
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	641a      	str	r2, [r3, #64]	@ 0x40
 8001706:	e001      	b.n	800170c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_ADC_Start_DMA+0x1e>
 800173a:	2302      	movs	r3, #2
 800173c:	e0e9      	b.n	8001912 <HAL_ADC_Start_DMA+0x1f2>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d018      	beq.n	8001786 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001764:	4b6d      	ldr	r3, [pc, #436]	@ (800191c <HAL_ADC_Start_DMA+0x1fc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a6d      	ldr	r2, [pc, #436]	@ (8001920 <HAL_ADC_Start_DMA+0x200>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0c9a      	lsrs	r2, r3, #18
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001778:	e002      	b.n	8001780 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	3b01      	subs	r3, #1
 800177e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f9      	bne.n	800177a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001794:	d107      	bne.n	80017a6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017a4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	f040 80a1 	bne.w	80018f8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017e0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017f4:	d106      	bne.n	8001804 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f023 0206 	bic.w	r2, r3, #6
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	645a      	str	r2, [r3, #68]	@ 0x44
 8001802:	e002      	b.n	800180a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001812:	4b44      	ldr	r3, [pc, #272]	@ (8001924 <HAL_ADC_Start_DMA+0x204>)
 8001814:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181a:	4a43      	ldr	r2, [pc, #268]	@ (8001928 <HAL_ADC_Start_DMA+0x208>)
 800181c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001822:	4a42      	ldr	r2, [pc, #264]	@ (800192c <HAL_ADC_Start_DMA+0x20c>)
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800182a:	4a41      	ldr	r2, [pc, #260]	@ (8001930 <HAL_ADC_Start_DMA+0x210>)
 800182c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001836:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001846:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001856:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	334c      	adds	r3, #76	@ 0x4c
 8001862:	4619      	mov	r1, r3
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f000 fcde 	bl	8002228 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	2b00      	cmp	r3, #0
 8001876:	d12a      	bne.n	80018ce <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a2d      	ldr	r2, [pc, #180]	@ (8001934 <HAL_ADC_Start_DMA+0x214>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d015      	beq.n	80018ae <HAL_ADC_Start_DMA+0x18e>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a2c      	ldr	r2, [pc, #176]	@ (8001938 <HAL_ADC_Start_DMA+0x218>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d105      	bne.n	8001898 <HAL_ADC_Start_DMA+0x178>
 800188c:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <HAL_ADC_Start_DMA+0x204>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00a      	beq.n	80018ae <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a27      	ldr	r2, [pc, #156]	@ (800193c <HAL_ADC_Start_DMA+0x21c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d136      	bne.n	8001910 <HAL_ADC_Start_DMA+0x1f0>
 80018a2:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <HAL_ADC_Start_DMA+0x204>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d130      	bne.n	8001910 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d129      	bne.n	8001910 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	e020      	b.n	8001910 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a18      	ldr	r2, [pc, #96]	@ (8001934 <HAL_ADC_Start_DMA+0x214>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d11b      	bne.n	8001910 <HAL_ADC_Start_DMA+0x1f0>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d114      	bne.n	8001910 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	e00b      	b.n	8001910 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	f043 0210 	orr.w	r2, r3, #16
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000000 	.word	0x20000000
 8001920:	431bde83 	.word	0x431bde83
 8001924:	40012300 	.word	0x40012300
 8001928:	08001da5 	.word	0x08001da5
 800192c:	08001e5f 	.word	0x08001e5f
 8001930:	08001e7b 	.word	0x08001e7b
 8001934:	40012000 	.word	0x40012000
 8001938:	40012100 	.word	0x40012100
 800193c:	40012200 	.word	0x40012200

08001940 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1c>
 8001980:	2302      	movs	r3, #2
 8001982:	e105      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x228>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b09      	cmp	r3, #9
 8001992:	d925      	bls.n	80019e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68d9      	ldr	r1, [r3, #12]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	3b1e      	subs	r3, #30
 80019aa:	2207      	movs	r2, #7
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43da      	mvns	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	400a      	ands	r2, r1
 80019b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68d9      	ldr	r1, [r3, #12]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	4603      	mov	r3, r0
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4403      	add	r3, r0
 80019d2:	3b1e      	subs	r3, #30
 80019d4:	409a      	lsls	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	e022      	b.n	8001a26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6919      	ldr	r1, [r3, #16]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	2207      	movs	r2, #7
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	400a      	ands	r2, r1
 8001a02:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6919      	ldr	r1, [r3, #16]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	4603      	mov	r3, r0
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4403      	add	r3, r0
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d824      	bhi.n	8001a78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b05      	subs	r3, #5
 8001a40:	221f      	movs	r2, #31
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b05      	subs	r3, #5
 8001a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a76:	e04c      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	d824      	bhi.n	8001aca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b23      	subs	r3, #35	@ 0x23
 8001a92:	221f      	movs	r2, #31
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b23      	subs	r3, #35	@ 0x23
 8001abc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ac8:	e023      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	3b41      	subs	r3, #65	@ 0x41
 8001adc:	221f      	movs	r2, #31
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	400a      	ands	r2, r1
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	3b41      	subs	r3, #65	@ 0x41
 8001b06:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b12:	4b22      	ldr	r3, [pc, #136]	@ (8001b9c <HAL_ADC_ConfigChannel+0x234>)
 8001b14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a21      	ldr	r2, [pc, #132]	@ (8001ba0 <HAL_ADC_ConfigChannel+0x238>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d109      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1cc>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b12      	cmp	r3, #18
 8001b26:	d105      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a19      	ldr	r2, [pc, #100]	@ (8001ba0 <HAL_ADC_ConfigChannel+0x238>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d123      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x21e>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d003      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x1e6>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b11      	cmp	r3, #17
 8001b4c:	d11b      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b10      	cmp	r3, #16
 8001b60:	d111      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <HAL_ADC_ConfigChannel+0x23c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a10      	ldr	r2, [pc, #64]	@ (8001ba8 <HAL_ADC_ConfigChannel+0x240>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	0c9a      	lsrs	r2, r3, #18
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b78:	e002      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f9      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40012300 	.word	0x40012300
 8001ba0:	40012000 	.word	0x40012000
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	431bde83 	.word	0x431bde83

08001bac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb4:	4b79      	ldr	r3, [pc, #484]	@ (8001d9c <ADC_Init+0x1f0>)
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001be0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	021a      	lsls	r2, r3, #8
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6899      	ldr	r1, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3e:	4a58      	ldr	r2, [pc, #352]	@ (8001da0 <ADC_Init+0x1f4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d022      	beq.n	8001c8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6899      	ldr	r1, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6899      	ldr	r1, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	e00f      	b.n	8001caa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ca8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0202 	bic.w	r2, r2, #2
 8001cb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6899      	ldr	r1, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7e1b      	ldrb	r3, [r3, #24]
 8001cc4:	005a      	lsls	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01b      	beq.n	8001d10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ce6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001cf6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6859      	ldr	r1, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	3b01      	subs	r3, #1
 8001d04:	035a      	lsls	r2, r3, #13
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	e007      	b.n	8001d20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d1e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	051a      	lsls	r2, r3, #20
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d62:	025a      	lsls	r2, r3, #9
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6899      	ldr	r1, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	029a      	lsls	r2, r3, #10
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	609a      	str	r2, [r3, #8]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40012300 	.word	0x40012300
 8001da0:	0f000001 	.word	0x0f000001

08001da4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d13c      	bne.n	8001e38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d12b      	bne.n	8001e30 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d127      	bne.n	8001e30 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d119      	bne.n	8001e30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0220 	bic.w	r2, r2, #32
 8001e0a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7ff f81d 	bl	8000e70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e36:	e00e      	b.n	8001e56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff fd85 	bl	8001954 <HAL_ADC_ErrorCallback>
}
 8001e4a:	e004      	b.n	8001e56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4798      	blx	r3
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff fd67 	bl	8001940 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e86:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2240      	movs	r2, #64	@ 0x40
 8001e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff fd5a 	bl	8001954 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <__NVIC_SetPriorityGrouping>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	@ (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	@ (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002014:	d301      	bcc.n	800201a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <SysTick_Config+0x40>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002022:	210f      	movs	r1, #15
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f7ff ff8e 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <SysTick_Config+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <SysTick_Config+0x40>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff29 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff3e 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff8e 	bl	8001f9c <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5d 	bl	8001f48 <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff31 	bl	8001f0c <__NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffa2 	bl	8002004 <SysTick_Config>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff fad2 	bl	8001680 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e099      	b.n	800221c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002108:	e00f      	b.n	800212a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800210a:	f7ff fab9 	bl	8001680 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b05      	cmp	r3, #5
 8002116:	d908      	bls.n	800212a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2203      	movs	r2, #3
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e078      	b.n	800221c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e8      	bne.n	800210a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4b38      	ldr	r3, [pc, #224]	@ (8002224 <HAL_DMA_Init+0x158>)
 8002144:	4013      	ands	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002156:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	2b04      	cmp	r3, #4
 8002182:	d107      	bne.n	8002194 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218c:	4313      	orrs	r3, r2
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f023 0307 	bic.w	r3, r3, #7
 80021aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d117      	bne.n	80021ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00e      	beq.n	80021ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fa6f 	bl	80026b4 <DMA_CheckFifoParam>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2240      	movs	r2, #64	@ 0x40
 80021e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021ea:	2301      	movs	r3, #1
 80021ec:	e016      	b.n	800221c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fa26 	bl	8002648 <DMA_CalcBaseAndBitshift>
 80021fc:	4603      	mov	r3, r0
 80021fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002204:	223f      	movs	r2, #63	@ 0x3f
 8002206:	409a      	lsls	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	f010803f 	.word	0xf010803f

08002228 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_DMA_Start_IT+0x26>
 800224a:	2302      	movs	r3, #2
 800224c:	e040      	b.n	80022d0 <HAL_DMA_Start_IT+0xa8>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d12f      	bne.n	80022c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2202      	movs	r2, #2
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f9b8 	bl	80025ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002280:	223f      	movs	r2, #63	@ 0x3f
 8002282:	409a      	lsls	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0216 	orr.w	r2, r2, #22
 8002296:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0208 	orr.w	r2, r2, #8
 80022ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e005      	b.n	80022ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
 80022cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002520 <HAL_DMA_IRQHandler+0x248>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a8e      	ldr	r2, [pc, #568]	@ (8002524 <HAL_DMA_IRQHandler+0x24c>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0a9b      	lsrs	r3, r3, #10
 80022f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002302:	2208      	movs	r2, #8
 8002304:	409a      	lsls	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01a      	beq.n	8002344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0204 	bic.w	r2, r2, #4
 800232a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002330:	2208      	movs	r2, #8
 8002332:	409a      	lsls	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233c:	f043 0201 	orr.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002348:	2201      	movs	r2, #1
 800234a:	409a      	lsls	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d012      	beq.n	800237a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	2201      	movs	r2, #1
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002372:	f043 0202 	orr.w	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237e:	2204      	movs	r2, #4
 8002380:	409a      	lsls	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d012      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239c:	2204      	movs	r2, #4
 800239e:	409a      	lsls	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a8:	f043 0204 	orr.w	r2, r3, #4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	2210      	movs	r2, #16
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d043      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d03c      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d2:	2210      	movs	r2, #16
 80023d4:	409a      	lsls	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d018      	beq.n	800241a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d108      	bne.n	8002408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d024      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4798      	blx	r3
 8002406:	e01f      	b.n	8002448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01b      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e016      	b.n	8002448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0208 	bic.w	r2, r2, #8
 8002436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	2220      	movs	r2, #32
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 808f 	beq.w	8002578 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8087 	beq.w	8002578 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246e:	2220      	movs	r2, #32
 8002470:	409a      	lsls	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b05      	cmp	r3, #5
 8002480:	d136      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0216 	bic.w	r2, r2, #22
 8002490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <HAL_DMA_IRQHandler+0x1da>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0208 	bic.w	r2, r2, #8
 80024c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c6:	223f      	movs	r2, #63	@ 0x3f
 80024c8:	409a      	lsls	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d07e      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	4798      	blx	r3
        }
        return;
 80024ee:	e079      	b.n	80025e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d01d      	beq.n	800253a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10d      	bne.n	8002528 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	2b00      	cmp	r3, #0
 8002512:	d031      	beq.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
 800251c:	e02c      	b.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
 800251e:	bf00      	nop
 8002520:	20000000 	.word	0x20000000
 8002524:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d023      	beq.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
 8002538:	e01e      	b.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10f      	bne.n	8002568 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0210 	bic.w	r2, r2, #16
 8002556:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257c:	2b00      	cmp	r3, #0
 800257e:	d032      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d022      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2205      	movs	r2, #5
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	3301      	adds	r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d307      	bcc.n	80025c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f2      	bne.n	80025a4 <HAL_DMA_IRQHandler+0x2cc>
 80025be:	e000      	b.n	80025c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
 80025e2:	e000      	b.n	80025e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025e4:	bf00      	nop
    }
  }
}
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002608:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b40      	cmp	r3, #64	@ 0x40
 8002618:	d108      	bne.n	800262c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800262a:	e007      	b.n	800263c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	60da      	str	r2, [r3, #12]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	3b10      	subs	r3, #16
 8002658:	4a14      	ldr	r2, [pc, #80]	@ (80026ac <DMA_CalcBaseAndBitshift+0x64>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002662:	4a13      	ldr	r2, [pc, #76]	@ (80026b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d909      	bls.n	800268a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	1d1a      	adds	r2, r3, #4
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	659a      	str	r2, [r3, #88]	@ 0x58
 8002688:	e007      	b.n	800269a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002692:	f023 0303 	bic.w	r3, r3, #3
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	aaaaaaab 	.word	0xaaaaaaab
 80026b0:	08004b1c 	.word	0x08004b1c

080026b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d11f      	bne.n	800270e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d856      	bhi.n	8002782 <DMA_CheckFifoParam+0xce>
 80026d4:	a201      	add	r2, pc, #4	@ (adr r2, 80026dc <DMA_CheckFifoParam+0x28>)
 80026d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026da:	bf00      	nop
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	080026ff 	.word	0x080026ff
 80026e4:	080026ed 	.word	0x080026ed
 80026e8:	08002783 	.word	0x08002783
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d046      	beq.n	8002786 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fc:	e043      	b.n	8002786 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002702:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002706:	d140      	bne.n	800278a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270c:	e03d      	b.n	800278a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002716:	d121      	bne.n	800275c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d837      	bhi.n	800278e <DMA_CheckFifoParam+0xda>
 800271e:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <DMA_CheckFifoParam+0x70>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	08002735 	.word	0x08002735
 8002728:	0800273b 	.word	0x0800273b
 800272c:	08002735 	.word	0x08002735
 8002730:	0800274d 	.word	0x0800274d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      break;
 8002738:	e030      	b.n	800279c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d025      	beq.n	8002792 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274a:	e022      	b.n	8002792 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002754:	d11f      	bne.n	8002796 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800275a:	e01c      	b.n	8002796 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d903      	bls.n	800276a <DMA_CheckFifoParam+0xb6>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d003      	beq.n	8002770 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002768:	e018      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
      break;
 800276e:	e015      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002774:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00e      	beq.n	800279a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      break;
 8002780:	e00b      	b.n	800279a <DMA_CheckFifoParam+0xe6>
      break;
 8002782:	bf00      	nop
 8002784:	e00a      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;
 8002786:	bf00      	nop
 8002788:	e008      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;
 800278a:	bf00      	nop
 800278c:	e006      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;
 800278e:	bf00      	nop
 8002790:	e004      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;
 8002792:	bf00      	nop
 8002794:	e002      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;   
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;
 800279a:	bf00      	nop
    }
  } 
  
  return status; 
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	@ 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	e16b      	b.n	8002aa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	f040 815a 	bne.w	8002a9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d005      	beq.n	80027fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d130      	bne.n	8002860 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 0201 	and.w	r2, r3, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b03      	cmp	r3, #3
 800286a:	d017      	beq.n	800289c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d123      	bne.n	80028f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	08da      	lsrs	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	69b9      	ldr	r1, [r7, #24]
 80028ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80b4 	beq.w	8002a9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b60      	ldr	r3, [pc, #384]	@ (8002ab8 <HAL_GPIO_Init+0x30c>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ab8 <HAL_GPIO_Init+0x30c>)
 800293c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002940:	6453      	str	r3, [r2, #68]	@ 0x44
 8002942:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab8 <HAL_GPIO_Init+0x30c>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800294e:	4a5b      	ldr	r2, [pc, #364]	@ (8002abc <HAL_GPIO_Init+0x310>)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a52      	ldr	r2, [pc, #328]	@ (8002ac0 <HAL_GPIO_Init+0x314>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d02b      	beq.n	80029d2 <HAL_GPIO_Init+0x226>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a51      	ldr	r2, [pc, #324]	@ (8002ac4 <HAL_GPIO_Init+0x318>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d025      	beq.n	80029ce <HAL_GPIO_Init+0x222>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a50      	ldr	r2, [pc, #320]	@ (8002ac8 <HAL_GPIO_Init+0x31c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01f      	beq.n	80029ca <HAL_GPIO_Init+0x21e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4f      	ldr	r2, [pc, #316]	@ (8002acc <HAL_GPIO_Init+0x320>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d019      	beq.n	80029c6 <HAL_GPIO_Init+0x21a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4e      	ldr	r2, [pc, #312]	@ (8002ad0 <HAL_GPIO_Init+0x324>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d013      	beq.n	80029c2 <HAL_GPIO_Init+0x216>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ad4 <HAL_GPIO_Init+0x328>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00d      	beq.n	80029be <HAL_GPIO_Init+0x212>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ad8 <HAL_GPIO_Init+0x32c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <HAL_GPIO_Init+0x20e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4b      	ldr	r2, [pc, #300]	@ (8002adc <HAL_GPIO_Init+0x330>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_GPIO_Init+0x20a>
 80029b2:	2307      	movs	r3, #7
 80029b4:	e00e      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029b6:	2308      	movs	r3, #8
 80029b8:	e00c      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029ba:	2306      	movs	r3, #6
 80029bc:	e00a      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029be:	2305      	movs	r3, #5
 80029c0:	e008      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029c2:	2304      	movs	r3, #4
 80029c4:	e006      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029c6:	2303      	movs	r3, #3
 80029c8:	e004      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e002      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_GPIO_Init+0x228>
 80029d2:	2300      	movs	r3, #0
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	f002 0203 	and.w	r2, r2, #3
 80029da:	0092      	lsls	r2, r2, #2
 80029dc:	4093      	lsls	r3, r2
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e4:	4935      	ldr	r1, [pc, #212]	@ (8002abc <HAL_GPIO_Init+0x310>)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	3302      	adds	r3, #2
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a16:	4a32      	ldr	r2, [pc, #200]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a1c:	4b30      	ldr	r3, [pc, #192]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a40:	4a27      	ldr	r2, [pc, #156]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a46:	4b26      	ldr	r3, [pc, #152]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a94:	4a12      	ldr	r2, [pc, #72]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	f67f ae90 	bls.w	80027c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3724      	adds	r7, #36	@ 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40013800 	.word	0x40013800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	40020400 	.word	0x40020400
 8002ac8:	40020800 	.word	0x40020800
 8002acc:	40020c00 	.word	0x40020c00
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40021400 	.word	0x40021400
 8002ad8:	40021800 	.word	0x40021800
 8002adc:	40021c00 	.word	0x40021c00
 8002ae0:	40013c00 	.word	0x40013c00

08002ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
 8002af0:	4613      	mov	r3, r2
 8002af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af4:	787b      	ldrb	r3, [r7, #1]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b00:	e003      	b.n	8002b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	041a      	lsls	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	619a      	str	r2, [r3, #24]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e267      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d075      	beq.n	8002c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b36:	4b88      	ldr	r3, [pc, #544]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d00c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b42:	4b85      	ldr	r3, [pc, #532]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d112      	bne.n	8002b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4e:	4b82      	ldr	r3, [pc, #520]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b5a:	d10b      	bne.n	8002b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d05b      	beq.n	8002c20 <HAL_RCC_OscConfig+0x108>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d157      	bne.n	8002c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e242      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b7c:	d106      	bne.n	8002b8c <HAL_RCC_OscConfig+0x74>
 8002b7e:	4b76      	ldr	r3, [pc, #472]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a75      	ldr	r2, [pc, #468]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e01d      	b.n	8002bc8 <HAL_RCC_OscConfig+0xb0>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x98>
 8002b96:	4b70      	ldr	r3, [pc, #448]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6f      	ldr	r2, [pc, #444]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6c      	ldr	r2, [pc, #432]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e00b      	b.n	8002bc8 <HAL_RCC_OscConfig+0xb0>
 8002bb0:	4b69      	ldr	r3, [pc, #420]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a68      	ldr	r2, [pc, #416]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	4b66      	ldr	r3, [pc, #408]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a65      	ldr	r2, [pc, #404]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fd56 	bl	8001680 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7fe fd52 	bl	8001680 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	@ 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e207      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b5b      	ldr	r3, [pc, #364]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xc0>
 8002bf6:	e014      	b.n	8002c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fd42 	bl	8001680 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c00:	f7fe fd3e 	bl	8001680 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	@ 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e1f3      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	4b51      	ldr	r3, [pc, #324]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0xe8>
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d063      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3a:	4b47      	ldr	r3, [pc, #284]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d11c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c46:	4b44      	ldr	r3, [pc, #272]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d116      	bne.n	8002c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c52:	4b41      	ldr	r3, [pc, #260]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_RCC_OscConfig+0x152>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d001      	beq.n	8002c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e1c7      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4937      	ldr	r1, [pc, #220]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	e03a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d020      	beq.n	8002cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c88:	4b34      	ldr	r3, [pc, #208]	@ (8002d5c <HAL_RCC_OscConfig+0x244>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fcf7 	bl	8001680 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c96:	f7fe fcf3 	bl	8001680 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e1a8      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4925      	ldr	r1, [pc, #148]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]
 8002cc8:	e015      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cca:	4b24      	ldr	r3, [pc, #144]	@ (8002d5c <HAL_RCC_OscConfig+0x244>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fcd6 	bl	8001680 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fcd2 	bl	8001680 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e187      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	4b1b      	ldr	r3, [pc, #108]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d036      	beq.n	8002d70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0a:	4b15      	ldr	r3, [pc, #84]	@ (8002d60 <HAL_RCC_OscConfig+0x248>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe fcb6 	bl	8001680 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fe fcb2 	bl	8001680 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e167      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x200>
 8002d36:	e01b      	b.n	8002d70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d38:	4b09      	ldr	r3, [pc, #36]	@ (8002d60 <HAL_RCC_OscConfig+0x248>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fc9f 	bl	8001680 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	e00e      	b.n	8002d64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d46:	f7fe fc9b 	bl	8001680 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d907      	bls.n	8002d64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e150      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	42470000 	.word	0x42470000
 8002d60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	4b88      	ldr	r3, [pc, #544]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ea      	bne.n	8002d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8097 	beq.w	8002eac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d82:	4b81      	ldr	r3, [pc, #516]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10f      	bne.n	8002dae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b7d      	ldr	r3, [pc, #500]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	4a7c      	ldr	r2, [pc, #496]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002daa:	2301      	movs	r3, #1
 8002dac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dae:	4b77      	ldr	r3, [pc, #476]	@ (8002f8c <HAL_RCC_OscConfig+0x474>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d118      	bne.n	8002dec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dba:	4b74      	ldr	r3, [pc, #464]	@ (8002f8c <HAL_RCC_OscConfig+0x474>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a73      	ldr	r2, [pc, #460]	@ (8002f8c <HAL_RCC_OscConfig+0x474>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fc5b 	bl	8001680 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dce:	f7fe fc57 	bl	8001680 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e10c      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f8c <HAL_RCC_OscConfig+0x474>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x2ea>
 8002df4:	4b64      	ldr	r3, [pc, #400]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df8:	4a63      	ldr	r2, [pc, #396]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e00:	e01c      	b.n	8002e3c <HAL_RCC_OscConfig+0x324>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x30c>
 8002e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e16:	4b5c      	ldr	r3, [pc, #368]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e22:	e00b      	b.n	8002e3c <HAL_RCC_OscConfig+0x324>
 8002e24:	4b58      	ldr	r3, [pc, #352]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e28:	4a57      	ldr	r2, [pc, #348]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e30:	4b55      	ldr	r3, [pc, #340]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e34:	4a54      	ldr	r2, [pc, #336]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e36:	f023 0304 	bic.w	r3, r3, #4
 8002e3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d015      	beq.n	8002e70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe fc1c 	bl	8001680 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fc18 	bl	8001680 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0cb      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e62:	4b49      	ldr	r3, [pc, #292]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0ee      	beq.n	8002e4c <HAL_RCC_OscConfig+0x334>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e70:	f7fe fc06 	bl	8001680 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e78:	f7fe fc02 	bl	8001680 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0b5      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1ee      	bne.n	8002e78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea0:	4b39      	ldr	r3, [pc, #228]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	4a38      	ldr	r2, [pc, #224]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a1 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eb6:	4b34      	ldr	r3, [pc, #208]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d05c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d141      	bne.n	8002f4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b31      	ldr	r3, [pc, #196]	@ (8002f90 <HAL_RCC_OscConfig+0x478>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fbd6 	bl	8001680 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fbd2 	bl	8001680 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e087      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b27      	ldr	r3, [pc, #156]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	019b      	lsls	r3, r3, #6
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	491b      	ldr	r1, [pc, #108]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f20:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <HAL_RCC_OscConfig+0x478>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fe fbab 	bl	8001680 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fe fba7 	bl	8001680 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e05c      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x416>
 8002f4c:	e054      	b.n	8002ff8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b10      	ldr	r3, [pc, #64]	@ (8002f90 <HAL_RCC_OscConfig+0x478>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe fb94 	bl	8001680 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe fb90 	bl	8001680 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e045      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x444>
 8002f7a:	e03d      	b.n	8002ff8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e038      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f94:	4b1b      	ldr	r3, [pc, #108]	@ (8003004 <HAL_RCC_OscConfig+0x4ec>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d028      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d121      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d11a      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d111      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800

08003008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0cc      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b68      	ldr	r3, [pc, #416]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d90c      	bls.n	8003044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b65      	ldr	r3, [pc, #404]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b63      	ldr	r3, [pc, #396]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b8      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800305c:	4b59      	ldr	r3, [pc, #356]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a58      	ldr	r2, [pc, #352]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003074:	4b53      	ldr	r3, [pc, #332]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a52      	ldr	r2, [pc, #328]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800307e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003080:	4b50      	ldr	r3, [pc, #320]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	494d      	ldr	r1, [pc, #308]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d044      	beq.n	8003128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b47      	ldr	r3, [pc, #284]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d119      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c6:	4b3f      	ldr	r3, [pc, #252]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	4b3b      	ldr	r3, [pc, #236]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e067      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e6:	4b37      	ldr	r3, [pc, #220]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4934      	ldr	r1, [pc, #208]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f8:	f7fe fac2 	bl	8001680 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7fe fabe 	bl	8001680 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e04f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	4b2b      	ldr	r3, [pc, #172]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 020c 	and.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	429a      	cmp	r2, r3
 8003126:	d1eb      	bne.n	8003100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003128:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d20c      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b22      	ldr	r3, [pc, #136]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b20      	ldr	r3, [pc, #128]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e032      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4916      	ldr	r1, [pc, #88]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800317a:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490e      	ldr	r1, [pc, #56]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800318e:	f000 f821 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003192:	4602      	mov	r2, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	490a      	ldr	r1, [pc, #40]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	fa22 f303 	lsr.w	r3, r2, r3
 80031a6:	4a09      	ldr	r2, [pc, #36]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031aa:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fa22 	bl	80015f8 <HAL_InitTick>

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023c00 	.word	0x40023c00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08004b04 	.word	0x08004b04
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000004 	.word	0x20000004

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d8:	b094      	sub	sp, #80	@ 0x50
 80031da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	647b      	str	r3, [r7, #68]	@ 0x44
 80031e0:	2300      	movs	r3, #0
 80031e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031e4:	2300      	movs	r3, #0
 80031e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ec:	4b79      	ldr	r3, [pc, #484]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d00d      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x40>
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	f200 80e1 	bhi.w	80033c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x34>
 8003202:	2b04      	cmp	r3, #4
 8003204:	d003      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0x3a>
 8003206:	e0db      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b73      	ldr	r3, [pc, #460]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800320a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800320c:	e0db      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800320e:	4b73      	ldr	r3, [pc, #460]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x208>)
 8003210:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003212:	e0d8      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003214:	4b6f      	ldr	r3, [pc, #444]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800321c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800321e:	4b6d      	ldr	r3, [pc, #436]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d063      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322a:	4b6a      	ldr	r3, [pc, #424]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	2200      	movs	r2, #0
 8003232:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003234:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323c:	633b      	str	r3, [r7, #48]	@ 0x30
 800323e:	2300      	movs	r3, #0
 8003240:	637b      	str	r3, [r7, #52]	@ 0x34
 8003242:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003246:	4622      	mov	r2, r4
 8003248:	462b      	mov	r3, r5
 800324a:	f04f 0000 	mov.w	r0, #0
 800324e:	f04f 0100 	mov.w	r1, #0
 8003252:	0159      	lsls	r1, r3, #5
 8003254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003258:	0150      	lsls	r0, r2, #5
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4621      	mov	r1, r4
 8003260:	1a51      	subs	r1, r2, r1
 8003262:	6139      	str	r1, [r7, #16]
 8003264:	4629      	mov	r1, r5
 8003266:	eb63 0301 	sbc.w	r3, r3, r1
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003278:	4659      	mov	r1, fp
 800327a:	018b      	lsls	r3, r1, #6
 800327c:	4651      	mov	r1, sl
 800327e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003282:	4651      	mov	r1, sl
 8003284:	018a      	lsls	r2, r1, #6
 8003286:	4651      	mov	r1, sl
 8003288:	ebb2 0801 	subs.w	r8, r2, r1
 800328c:	4659      	mov	r1, fp
 800328e:	eb63 0901 	sbc.w	r9, r3, r1
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800329e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032a6:	4690      	mov	r8, r2
 80032a8:	4699      	mov	r9, r3
 80032aa:	4623      	mov	r3, r4
 80032ac:	eb18 0303 	adds.w	r3, r8, r3
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	462b      	mov	r3, r5
 80032b4:	eb49 0303 	adc.w	r3, r9, r3
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032c6:	4629      	mov	r1, r5
 80032c8:	024b      	lsls	r3, r1, #9
 80032ca:	4621      	mov	r1, r4
 80032cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032d0:	4621      	mov	r1, r4
 80032d2:	024a      	lsls	r2, r1, #9
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032da:	2200      	movs	r2, #0
 80032dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032e4:	f7fd fbe2 	bl	8000aac <__aeabi_uldivmod>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4613      	mov	r3, r2
 80032ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f0:	e058      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f2:	4b38      	ldr	r3, [pc, #224]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	2200      	movs	r2, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	4611      	mov	r1, r2
 80032fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	2300      	movs	r3, #0
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
 8003308:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800330c:	4642      	mov	r2, r8
 800330e:	464b      	mov	r3, r9
 8003310:	f04f 0000 	mov.w	r0, #0
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	0159      	lsls	r1, r3, #5
 800331a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800331e:	0150      	lsls	r0, r2, #5
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4641      	mov	r1, r8
 8003326:	ebb2 0a01 	subs.w	sl, r2, r1
 800332a:	4649      	mov	r1, r9
 800332c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800333c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003340:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003344:	ebb2 040a 	subs.w	r4, r2, sl
 8003348:	eb63 050b 	sbc.w	r5, r3, fp
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	00eb      	lsls	r3, r5, #3
 8003356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800335a:	00e2      	lsls	r2, r4, #3
 800335c:	4614      	mov	r4, r2
 800335e:	461d      	mov	r5, r3
 8003360:	4643      	mov	r3, r8
 8003362:	18e3      	adds	r3, r4, r3
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	464b      	mov	r3, r9
 8003368:	eb45 0303 	adc.w	r3, r5, r3
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800337a:	4629      	mov	r1, r5
 800337c:	028b      	lsls	r3, r1, #10
 800337e:	4621      	mov	r1, r4
 8003380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003384:	4621      	mov	r1, r4
 8003386:	028a      	lsls	r2, r1, #10
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800338e:	2200      	movs	r2, #0
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	61fa      	str	r2, [r7, #28]
 8003394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003398:	f7fd fb88 	bl	8000aac <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4613      	mov	r3, r2
 80033a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033a4:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	3301      	adds	r3, #1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80033b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033be:	e002      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3750      	adds	r7, #80	@ 0x50
 80033cc:	46bd      	mov	sp, r7
 80033ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	00f42400 	.word	0x00f42400
 80033dc:	007a1200 	.word	0x007a1200

080033e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e4:	4b03      	ldr	r3, [pc, #12]	@ (80033f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000000 	.word	0x20000000

080033f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033fc:	f7ff fff0 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	0a9b      	lsrs	r3, r3, #10
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4903      	ldr	r1, [pc, #12]	@ (800341c <HAL_RCC_GetPCLK1Freq+0x24>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	08004b14 	.word	0x08004b14

08003420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003424:	f7ff ffdc 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0b5b      	lsrs	r3, r3, #13
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4903      	ldr	r1, [pc, #12]	@ (8003444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40023800 	.word	0x40023800
 8003444:	08004b14 	.word	0x08004b14

08003448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e041      	b.n	80034de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd ff78 	bl	8001364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f000 f9b8 	bl	80037fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e046      	b.n	800358e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a23      	ldr	r2, [pc, #140]	@ (800359c <HAL_TIM_Base_Start+0xb4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d022      	beq.n	8003558 <HAL_TIM_Base_Start+0x70>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351a:	d01d      	beq.n	8003558 <HAL_TIM_Base_Start+0x70>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1f      	ldr	r2, [pc, #124]	@ (80035a0 <HAL_TIM_Base_Start+0xb8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d018      	beq.n	8003558 <HAL_TIM_Base_Start+0x70>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1e      	ldr	r2, [pc, #120]	@ (80035a4 <HAL_TIM_Base_Start+0xbc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d013      	beq.n	8003558 <HAL_TIM_Base_Start+0x70>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1c      	ldr	r2, [pc, #112]	@ (80035a8 <HAL_TIM_Base_Start+0xc0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00e      	beq.n	8003558 <HAL_TIM_Base_Start+0x70>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1b      	ldr	r2, [pc, #108]	@ (80035ac <HAL_TIM_Base_Start+0xc4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d009      	beq.n	8003558 <HAL_TIM_Base_Start+0x70>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a19      	ldr	r2, [pc, #100]	@ (80035b0 <HAL_TIM_Base_Start+0xc8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_TIM_Base_Start+0x70>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a18      	ldr	r2, [pc, #96]	@ (80035b4 <HAL_TIM_Base_Start+0xcc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d111      	bne.n	800357c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b06      	cmp	r3, #6
 8003568:	d010      	beq.n	800358c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357a:	e007      	b.n	800358c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40010000 	.word	0x40010000
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40000800 	.word	0x40000800
 80035a8:	40000c00 	.word	0x40000c00
 80035ac:	40010400 	.word	0x40010400
 80035b0:	40014000 	.word	0x40014000
 80035b4:	40001800 	.word	0x40001800

080035b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d020      	beq.n	800361c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01b      	beq.n	800361c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0202 	mvn.w	r2, #2
 80035ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8dc 	bl	80037c0 <HAL_TIM_IC_CaptureCallback>
 8003608:	e005      	b.n	8003616 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8ce 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f8df 	bl	80037d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d020      	beq.n	8003668 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01b      	beq.n	8003668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0204 	mvn.w	r2, #4
 8003638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2202      	movs	r2, #2
 800363e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f8b6 	bl	80037c0 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8a8 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f8b9 	bl	80037d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d020      	beq.n	80036b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0208 	mvn.w	r2, #8
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2204      	movs	r2, #4
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f890 	bl	80037c0 <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f882 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f893 	bl	80037d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d020      	beq.n	8003700 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01b      	beq.n	8003700 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0210 	mvn.w	r2, #16
 80036d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2208      	movs	r2, #8
 80036d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f86a 	bl	80037c0 <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f85c 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f86d 	bl	80037d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00c      	beq.n	8003724 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0201 	mvn.w	r2, #1
 800371c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f83a 	bl	8003798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00c      	beq.n	8003748 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f910 	bl	8003968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f83e 	bl	80037e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00c      	beq.n	8003790 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d007      	beq.n	8003790 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0220 	mvn.w	r2, #32
 8003788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f8e2 	bl	8003954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a46      	ldr	r2, [pc, #280]	@ (8003928 <TIM_Base_SetConfig+0x12c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <TIM_Base_SetConfig+0x40>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381a:	d00f      	beq.n	800383c <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a43      	ldr	r2, [pc, #268]	@ (800392c <TIM_Base_SetConfig+0x130>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00b      	beq.n	800383c <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a42      	ldr	r2, [pc, #264]	@ (8003930 <TIM_Base_SetConfig+0x134>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a41      	ldr	r2, [pc, #260]	@ (8003934 <TIM_Base_SetConfig+0x138>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a40      	ldr	r2, [pc, #256]	@ (8003938 <TIM_Base_SetConfig+0x13c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d108      	bne.n	800384e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a35      	ldr	r2, [pc, #212]	@ (8003928 <TIM_Base_SetConfig+0x12c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d02b      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800385c:	d027      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a32      	ldr	r2, [pc, #200]	@ (800392c <TIM_Base_SetConfig+0x130>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d023      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a31      	ldr	r2, [pc, #196]	@ (8003930 <TIM_Base_SetConfig+0x134>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01f      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a30      	ldr	r2, [pc, #192]	@ (8003934 <TIM_Base_SetConfig+0x138>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01b      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2f      	ldr	r2, [pc, #188]	@ (8003938 <TIM_Base_SetConfig+0x13c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d017      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2e      	ldr	r2, [pc, #184]	@ (800393c <TIM_Base_SetConfig+0x140>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2d      	ldr	r2, [pc, #180]	@ (8003940 <TIM_Base_SetConfig+0x144>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00f      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a2c      	ldr	r2, [pc, #176]	@ (8003944 <TIM_Base_SetConfig+0x148>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00b      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2b      	ldr	r2, [pc, #172]	@ (8003948 <TIM_Base_SetConfig+0x14c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2a      	ldr	r2, [pc, #168]	@ (800394c <TIM_Base_SetConfig+0x150>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d003      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a29      	ldr	r2, [pc, #164]	@ (8003950 <TIM_Base_SetConfig+0x154>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d108      	bne.n	80038c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a10      	ldr	r2, [pc, #64]	@ (8003928 <TIM_Base_SetConfig+0x12c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d003      	beq.n	80038f4 <TIM_Base_SetConfig+0xf8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a12      	ldr	r2, [pc, #72]	@ (8003938 <TIM_Base_SetConfig+0x13c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d103      	bne.n	80038fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b01      	cmp	r3, #1
 800390c:	d105      	bne.n	800391a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f023 0201 	bic.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]
  }
}
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40010400 	.word	0x40010400
 800393c:	40014000 	.word	0x40014000
 8003940:	40014400 	.word	0x40014400
 8003944:	40014800 	.word	0x40014800
 8003948:	40001800 	.word	0x40001800
 800394c:	40001c00 	.word	0x40001c00
 8003950:	40002000 	.word	0x40002000

08003954 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e042      	b.n	8003a14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fd06 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	@ 0x24
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f973 	bl	8003cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	@ 0x28
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d175      	bne.n	8003b28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_UART_Transmit+0x2c>
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e06e      	b.n	8003b2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2221      	movs	r2, #33	@ 0x21
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5a:	f7fd fe11 	bl	8001680 <HAL_GetTick>
 8003a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	88fa      	ldrh	r2, [r7, #6]
 8003a6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a74:	d108      	bne.n	8003a88 <HAL_UART_Transmit+0x6c>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d104      	bne.n	8003a88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e003      	b.n	8003a90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a90:	e02e      	b.n	8003af0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2180      	movs	r1, #128	@ 0x80
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f848 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e03a      	b.n	8003b2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	3302      	adds	r3, #2
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	e007      	b.n	8003ae2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	781a      	ldrb	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1cb      	bne.n	8003a92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2140      	movs	r1, #64	@ 0x40
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f814 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e006      	b.n	8003b2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b42:	e03b      	b.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d037      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4c:	f7fd fd98 	bl	8001680 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	6a3a      	ldr	r2, [r7, #32]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d302      	bcc.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e03a      	b.n	8003bdc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d023      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b80      	cmp	r3, #128	@ 0x80
 8003b78:	d020      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b40      	cmp	r3, #64	@ 0x40
 8003b7e:	d01d      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d116      	bne.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f81d 	bl	8003be4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2208      	movs	r2, #8
 8003bae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e00f      	b.n	8003bdc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d0b4      	beq.n	8003b44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b095      	sub	sp, #84	@ 0x54
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3314      	adds	r3, #20
 8003c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3314      	adds	r3, #20
 8003c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d119      	bne.n	8003c90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f023 0310 	bic.w	r3, r3, #16
 8003c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c7c:	61ba      	str	r2, [r7, #24]
 8003c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6979      	ldr	r1, [r7, #20]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e5      	bne.n	8003c5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c9e:	bf00      	nop
 8003ca0:	3754      	adds	r7, #84	@ 0x54
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb0:	b0c0      	sub	sp, #256	@ 0x100
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	68d9      	ldr	r1, [r3, #12]
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	ea40 0301 	orr.w	r3, r0, r1
 8003cd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d04:	f021 010c 	bic.w	r1, r1, #12
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d12:	430b      	orrs	r3, r1
 8003d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d26:	6999      	ldr	r1, [r3, #24]
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	ea40 0301 	orr.w	r3, r0, r1
 8003d32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b8f      	ldr	r3, [pc, #572]	@ (8003f78 <UART_SetConfig+0x2cc>)
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d005      	beq.n	8003d4c <UART_SetConfig+0xa0>
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b8d      	ldr	r3, [pc, #564]	@ (8003f7c <UART_SetConfig+0x2d0>)
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d104      	bne.n	8003d56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d4c:	f7ff fb68 	bl	8003420 <HAL_RCC_GetPCLK2Freq>
 8003d50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d54:	e003      	b.n	8003d5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d56:	f7ff fb4f 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8003d5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d68:	f040 810c 	bne.w	8003f84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d7e:	4622      	mov	r2, r4
 8003d80:	462b      	mov	r3, r5
 8003d82:	1891      	adds	r1, r2, r2
 8003d84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d86:	415b      	adcs	r3, r3
 8003d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d8e:	4621      	mov	r1, r4
 8003d90:	eb12 0801 	adds.w	r8, r2, r1
 8003d94:	4629      	mov	r1, r5
 8003d96:	eb43 0901 	adc.w	r9, r3, r1
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dae:	4690      	mov	r8, r2
 8003db0:	4699      	mov	r9, r3
 8003db2:	4623      	mov	r3, r4
 8003db4:	eb18 0303 	adds.w	r3, r8, r3
 8003db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	eb49 0303 	adc.w	r3, r9, r3
 8003dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dda:	460b      	mov	r3, r1
 8003ddc:	18db      	adds	r3, r3, r3
 8003dde:	653b      	str	r3, [r7, #80]	@ 0x50
 8003de0:	4613      	mov	r3, r2
 8003de2:	eb42 0303 	adc.w	r3, r2, r3
 8003de6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003de8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003dec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003df0:	f7fc fe5c 	bl	8000aac <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4b61      	ldr	r3, [pc, #388]	@ (8003f80 <UART_SetConfig+0x2d4>)
 8003dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	011c      	lsls	r4, r3, #4
 8003e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	1891      	adds	r1, r2, r2
 8003e1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e1c:	415b      	adcs	r3, r3
 8003e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e24:	4641      	mov	r1, r8
 8003e26:	eb12 0a01 	adds.w	sl, r2, r1
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e44:	4692      	mov	sl, r2
 8003e46:	469b      	mov	fp, r3
 8003e48:	4643      	mov	r3, r8
 8003e4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e52:	464b      	mov	r3, r9
 8003e54:	eb4b 0303 	adc.w	r3, fp, r3
 8003e58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e70:	460b      	mov	r3, r1
 8003e72:	18db      	adds	r3, r3, r3
 8003e74:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e76:	4613      	mov	r3, r2
 8003e78:	eb42 0303 	adc.w	r3, r2, r3
 8003e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e86:	f7fc fe11 	bl	8000aac <__aeabi_uldivmod>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	4b3b      	ldr	r3, [pc, #236]	@ (8003f80 <UART_SetConfig+0x2d4>)
 8003e92:	fba3 2301 	umull	r2, r3, r3, r1
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2264      	movs	r2, #100	@ 0x64
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	1acb      	subs	r3, r1, r3
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ea6:	4b36      	ldr	r3, [pc, #216]	@ (8003f80 <UART_SetConfig+0x2d4>)
 8003ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003eb4:	441c      	add	r4, r3
 8003eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ec0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ec4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ec8:	4642      	mov	r2, r8
 8003eca:	464b      	mov	r3, r9
 8003ecc:	1891      	adds	r1, r2, r2
 8003ece:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ed0:	415b      	adcs	r3, r3
 8003ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ed8:	4641      	mov	r1, r8
 8003eda:	1851      	adds	r1, r2, r1
 8003edc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ede:	4649      	mov	r1, r9
 8003ee0:	414b      	adcs	r3, r1
 8003ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ef0:	4659      	mov	r1, fp
 8003ef2:	00cb      	lsls	r3, r1, #3
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003efa:	4651      	mov	r1, sl
 8003efc:	00ca      	lsls	r2, r1, #3
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	4642      	mov	r2, r8
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	460a      	mov	r2, r1
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	18db      	adds	r3, r3, r3
 8003f30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f32:	4613      	mov	r3, r2
 8003f34:	eb42 0303 	adc.w	r3, r2, r3
 8003f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f42:	f7fc fdb3 	bl	8000aac <__aeabi_uldivmod>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <UART_SetConfig+0x2d4>)
 8003f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	2164      	movs	r1, #100	@ 0x64
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	3332      	adds	r3, #50	@ 0x32
 8003f5e:	4a08      	ldr	r2, [pc, #32]	@ (8003f80 <UART_SetConfig+0x2d4>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	f003 0207 	and.w	r2, r3, #7
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4422      	add	r2, r4
 8003f72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f74:	e106      	b.n	8004184 <UART_SetConfig+0x4d8>
 8003f76:	bf00      	nop
 8003f78:	40011000 	.word	0x40011000
 8003f7c:	40011400 	.word	0x40011400
 8003f80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f96:	4642      	mov	r2, r8
 8003f98:	464b      	mov	r3, r9
 8003f9a:	1891      	adds	r1, r2, r2
 8003f9c:	6239      	str	r1, [r7, #32]
 8003f9e:	415b      	adcs	r3, r3
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	1854      	adds	r4, r2, r1
 8003faa:	4649      	mov	r1, r9
 8003fac:	eb43 0501 	adc.w	r5, r3, r1
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	00eb      	lsls	r3, r5, #3
 8003fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fbe:	00e2      	lsls	r2, r4, #3
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	461d      	mov	r5, r3
 8003fc4:	4643      	mov	r3, r8
 8003fc6:	18e3      	adds	r3, r4, r3
 8003fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fcc:	464b      	mov	r3, r9
 8003fce:	eb45 0303 	adc.w	r3, r5, r3
 8003fd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fe2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	008b      	lsls	r3, r1, #2
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	008a      	lsls	r2, r1, #2
 8004000:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004004:	f7fc fd52 	bl	8000aac <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4b60      	ldr	r3, [pc, #384]	@ (8004190 <UART_SetConfig+0x4e4>)
 800400e:	fba3 2302 	umull	r2, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	011c      	lsls	r4, r3, #4
 8004016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004020:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004024:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	1891      	adds	r1, r2, r2
 800402e:	61b9      	str	r1, [r7, #24]
 8004030:	415b      	adcs	r3, r3
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004038:	4641      	mov	r1, r8
 800403a:	1851      	adds	r1, r2, r1
 800403c:	6139      	str	r1, [r7, #16]
 800403e:	4649      	mov	r1, r9
 8004040:	414b      	adcs	r3, r1
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004050:	4659      	mov	r1, fp
 8004052:	00cb      	lsls	r3, r1, #3
 8004054:	4651      	mov	r1, sl
 8004056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800405a:	4651      	mov	r1, sl
 800405c:	00ca      	lsls	r2, r1, #3
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	4603      	mov	r3, r0
 8004064:	4642      	mov	r2, r8
 8004066:	189b      	adds	r3, r3, r2
 8004068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800406c:	464b      	mov	r3, r9
 800406e:	460a      	mov	r2, r1
 8004070:	eb42 0303 	adc.w	r3, r2, r3
 8004074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004082:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004090:	4649      	mov	r1, r9
 8004092:	008b      	lsls	r3, r1, #2
 8004094:	4641      	mov	r1, r8
 8004096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800409a:	4641      	mov	r1, r8
 800409c:	008a      	lsls	r2, r1, #2
 800409e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040a2:	f7fc fd03 	bl	8000aac <__aeabi_uldivmod>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	4b38      	ldr	r3, [pc, #224]	@ (8004190 <UART_SetConfig+0x4e4>)
 80040ae:	fba3 2301 	umull	r2, r3, r3, r1
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	2264      	movs	r2, #100	@ 0x64
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	1acb      	subs	r3, r1, r3
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	3332      	adds	r3, #50	@ 0x32
 80040c0:	4a33      	ldr	r2, [pc, #204]	@ (8004190 <UART_SetConfig+0x4e4>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040cc:	441c      	add	r4, r3
 80040ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040d2:	2200      	movs	r2, #0
 80040d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80040d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80040d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	1891      	adds	r1, r2, r2
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	415b      	adcs	r3, r3
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ec:	4641      	mov	r1, r8
 80040ee:	1851      	adds	r1, r2, r1
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	4649      	mov	r1, r9
 80040f4:	414b      	adcs	r3, r1
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004104:	4659      	mov	r1, fp
 8004106:	00cb      	lsls	r3, r1, #3
 8004108:	4651      	mov	r1, sl
 800410a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410e:	4651      	mov	r1, sl
 8004110:	00ca      	lsls	r2, r1, #3
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	4603      	mov	r3, r0
 8004118:	4642      	mov	r2, r8
 800411a:	189b      	adds	r3, r3, r2
 800411c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800411e:	464b      	mov	r3, r9
 8004120:	460a      	mov	r2, r1
 8004122:	eb42 0303 	adc.w	r3, r2, r3
 8004126:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	663b      	str	r3, [r7, #96]	@ 0x60
 8004132:	667a      	str	r2, [r7, #100]	@ 0x64
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004140:	4649      	mov	r1, r9
 8004142:	008b      	lsls	r3, r1, #2
 8004144:	4641      	mov	r1, r8
 8004146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800414a:	4641      	mov	r1, r8
 800414c:	008a      	lsls	r2, r1, #2
 800414e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004152:	f7fc fcab 	bl	8000aac <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4b0d      	ldr	r3, [pc, #52]	@ (8004190 <UART_SetConfig+0x4e4>)
 800415c:	fba3 1302 	umull	r1, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	2164      	movs	r1, #100	@ 0x64
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	3332      	adds	r3, #50	@ 0x32
 800416e:	4a08      	ldr	r2, [pc, #32]	@ (8004190 <UART_SetConfig+0x4e4>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	f003 020f 	and.w	r2, r3, #15
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4422      	add	r2, r4
 8004182:	609a      	str	r2, [r3, #8]
}
 8004184:	bf00      	nop
 8004186:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800418a:	46bd      	mov	sp, r7
 800418c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004190:	51eb851f 	.word	0x51eb851f

08004194 <siprintf>:
 8004194:	b40e      	push	{r1, r2, r3}
 8004196:	b500      	push	{lr}
 8004198:	b09c      	sub	sp, #112	@ 0x70
 800419a:	ab1d      	add	r3, sp, #116	@ 0x74
 800419c:	9002      	str	r0, [sp, #8]
 800419e:	9006      	str	r0, [sp, #24]
 80041a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041a4:	4809      	ldr	r0, [pc, #36]	@ (80041cc <siprintf+0x38>)
 80041a6:	9107      	str	r1, [sp, #28]
 80041a8:	9104      	str	r1, [sp, #16]
 80041aa:	4909      	ldr	r1, [pc, #36]	@ (80041d0 <siprintf+0x3c>)
 80041ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80041b0:	9105      	str	r1, [sp, #20]
 80041b2:	6800      	ldr	r0, [r0, #0]
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	a902      	add	r1, sp, #8
 80041b8:	f000 f994 	bl	80044e4 <_svfiprintf_r>
 80041bc:	9b02      	ldr	r3, [sp, #8]
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	b01c      	add	sp, #112	@ 0x70
 80041c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041c8:	b003      	add	sp, #12
 80041ca:	4770      	bx	lr
 80041cc:	2000000c 	.word	0x2000000c
 80041d0:	ffff0208 	.word	0xffff0208

080041d4 <memset>:
 80041d4:	4402      	add	r2, r0
 80041d6:	4603      	mov	r3, r0
 80041d8:	4293      	cmp	r3, r2
 80041da:	d100      	bne.n	80041de <memset+0xa>
 80041dc:	4770      	bx	lr
 80041de:	f803 1b01 	strb.w	r1, [r3], #1
 80041e2:	e7f9      	b.n	80041d8 <memset+0x4>

080041e4 <__errno>:
 80041e4:	4b01      	ldr	r3, [pc, #4]	@ (80041ec <__errno+0x8>)
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	2000000c 	.word	0x2000000c

080041f0 <__libc_init_array>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004228 <__libc_init_array+0x38>)
 80041f4:	4c0d      	ldr	r4, [pc, #52]	@ (800422c <__libc_init_array+0x3c>)
 80041f6:	1b64      	subs	r4, r4, r5
 80041f8:	10a4      	asrs	r4, r4, #2
 80041fa:	2600      	movs	r6, #0
 80041fc:	42a6      	cmp	r6, r4
 80041fe:	d109      	bne.n	8004214 <__libc_init_array+0x24>
 8004200:	4d0b      	ldr	r5, [pc, #44]	@ (8004230 <__libc_init_array+0x40>)
 8004202:	4c0c      	ldr	r4, [pc, #48]	@ (8004234 <__libc_init_array+0x44>)
 8004204:	f000 fc66 	bl	8004ad4 <_init>
 8004208:	1b64      	subs	r4, r4, r5
 800420a:	10a4      	asrs	r4, r4, #2
 800420c:	2600      	movs	r6, #0
 800420e:	42a6      	cmp	r6, r4
 8004210:	d105      	bne.n	800421e <__libc_init_array+0x2e>
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	f855 3b04 	ldr.w	r3, [r5], #4
 8004218:	4798      	blx	r3
 800421a:	3601      	adds	r6, #1
 800421c:	e7ee      	b.n	80041fc <__libc_init_array+0xc>
 800421e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004222:	4798      	blx	r3
 8004224:	3601      	adds	r6, #1
 8004226:	e7f2      	b.n	800420e <__libc_init_array+0x1e>
 8004228:	08004b60 	.word	0x08004b60
 800422c:	08004b60 	.word	0x08004b60
 8004230:	08004b60 	.word	0x08004b60
 8004234:	08004b64 	.word	0x08004b64

08004238 <__retarget_lock_acquire_recursive>:
 8004238:	4770      	bx	lr

0800423a <__retarget_lock_release_recursive>:
 800423a:	4770      	bx	lr

0800423c <_free_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4605      	mov	r5, r0
 8004240:	2900      	cmp	r1, #0
 8004242:	d041      	beq.n	80042c8 <_free_r+0x8c>
 8004244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004248:	1f0c      	subs	r4, r1, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	bfb8      	it	lt
 800424e:	18e4      	addlt	r4, r4, r3
 8004250:	f000 f8e0 	bl	8004414 <__malloc_lock>
 8004254:	4a1d      	ldr	r2, [pc, #116]	@ (80042cc <_free_r+0x90>)
 8004256:	6813      	ldr	r3, [r2, #0]
 8004258:	b933      	cbnz	r3, 8004268 <_free_r+0x2c>
 800425a:	6063      	str	r3, [r4, #4]
 800425c:	6014      	str	r4, [r2, #0]
 800425e:	4628      	mov	r0, r5
 8004260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004264:	f000 b8dc 	b.w	8004420 <__malloc_unlock>
 8004268:	42a3      	cmp	r3, r4
 800426a:	d908      	bls.n	800427e <_free_r+0x42>
 800426c:	6820      	ldr	r0, [r4, #0]
 800426e:	1821      	adds	r1, r4, r0
 8004270:	428b      	cmp	r3, r1
 8004272:	bf01      	itttt	eq
 8004274:	6819      	ldreq	r1, [r3, #0]
 8004276:	685b      	ldreq	r3, [r3, #4]
 8004278:	1809      	addeq	r1, r1, r0
 800427a:	6021      	streq	r1, [r4, #0]
 800427c:	e7ed      	b.n	800425a <_free_r+0x1e>
 800427e:	461a      	mov	r2, r3
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	b10b      	cbz	r3, 8004288 <_free_r+0x4c>
 8004284:	42a3      	cmp	r3, r4
 8004286:	d9fa      	bls.n	800427e <_free_r+0x42>
 8004288:	6811      	ldr	r1, [r2, #0]
 800428a:	1850      	adds	r0, r2, r1
 800428c:	42a0      	cmp	r0, r4
 800428e:	d10b      	bne.n	80042a8 <_free_r+0x6c>
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	4401      	add	r1, r0
 8004294:	1850      	adds	r0, r2, r1
 8004296:	4283      	cmp	r3, r0
 8004298:	6011      	str	r1, [r2, #0]
 800429a:	d1e0      	bne.n	800425e <_free_r+0x22>
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	6053      	str	r3, [r2, #4]
 80042a2:	4408      	add	r0, r1
 80042a4:	6010      	str	r0, [r2, #0]
 80042a6:	e7da      	b.n	800425e <_free_r+0x22>
 80042a8:	d902      	bls.n	80042b0 <_free_r+0x74>
 80042aa:	230c      	movs	r3, #12
 80042ac:	602b      	str	r3, [r5, #0]
 80042ae:	e7d6      	b.n	800425e <_free_r+0x22>
 80042b0:	6820      	ldr	r0, [r4, #0]
 80042b2:	1821      	adds	r1, r4, r0
 80042b4:	428b      	cmp	r3, r1
 80042b6:	bf04      	itt	eq
 80042b8:	6819      	ldreq	r1, [r3, #0]
 80042ba:	685b      	ldreq	r3, [r3, #4]
 80042bc:	6063      	str	r3, [r4, #4]
 80042be:	bf04      	itt	eq
 80042c0:	1809      	addeq	r1, r1, r0
 80042c2:	6021      	streq	r1, [r4, #0]
 80042c4:	6054      	str	r4, [r2, #4]
 80042c6:	e7ca      	b.n	800425e <_free_r+0x22>
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
 80042ca:	bf00      	nop
 80042cc:	200003e8 	.word	0x200003e8

080042d0 <sbrk_aligned>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	4e0f      	ldr	r6, [pc, #60]	@ (8004310 <sbrk_aligned+0x40>)
 80042d4:	460c      	mov	r4, r1
 80042d6:	6831      	ldr	r1, [r6, #0]
 80042d8:	4605      	mov	r5, r0
 80042da:	b911      	cbnz	r1, 80042e2 <sbrk_aligned+0x12>
 80042dc:	f000 fba6 	bl	8004a2c <_sbrk_r>
 80042e0:	6030      	str	r0, [r6, #0]
 80042e2:	4621      	mov	r1, r4
 80042e4:	4628      	mov	r0, r5
 80042e6:	f000 fba1 	bl	8004a2c <_sbrk_r>
 80042ea:	1c43      	adds	r3, r0, #1
 80042ec:	d103      	bne.n	80042f6 <sbrk_aligned+0x26>
 80042ee:	f04f 34ff 	mov.w	r4, #4294967295
 80042f2:	4620      	mov	r0, r4
 80042f4:	bd70      	pop	{r4, r5, r6, pc}
 80042f6:	1cc4      	adds	r4, r0, #3
 80042f8:	f024 0403 	bic.w	r4, r4, #3
 80042fc:	42a0      	cmp	r0, r4
 80042fe:	d0f8      	beq.n	80042f2 <sbrk_aligned+0x22>
 8004300:	1a21      	subs	r1, r4, r0
 8004302:	4628      	mov	r0, r5
 8004304:	f000 fb92 	bl	8004a2c <_sbrk_r>
 8004308:	3001      	adds	r0, #1
 800430a:	d1f2      	bne.n	80042f2 <sbrk_aligned+0x22>
 800430c:	e7ef      	b.n	80042ee <sbrk_aligned+0x1e>
 800430e:	bf00      	nop
 8004310:	200003e4 	.word	0x200003e4

08004314 <_malloc_r>:
 8004314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004318:	1ccd      	adds	r5, r1, #3
 800431a:	f025 0503 	bic.w	r5, r5, #3
 800431e:	3508      	adds	r5, #8
 8004320:	2d0c      	cmp	r5, #12
 8004322:	bf38      	it	cc
 8004324:	250c      	movcc	r5, #12
 8004326:	2d00      	cmp	r5, #0
 8004328:	4606      	mov	r6, r0
 800432a:	db01      	blt.n	8004330 <_malloc_r+0x1c>
 800432c:	42a9      	cmp	r1, r5
 800432e:	d904      	bls.n	800433a <_malloc_r+0x26>
 8004330:	230c      	movs	r3, #12
 8004332:	6033      	str	r3, [r6, #0]
 8004334:	2000      	movs	r0, #0
 8004336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800433a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004410 <_malloc_r+0xfc>
 800433e:	f000 f869 	bl	8004414 <__malloc_lock>
 8004342:	f8d8 3000 	ldr.w	r3, [r8]
 8004346:	461c      	mov	r4, r3
 8004348:	bb44      	cbnz	r4, 800439c <_malloc_r+0x88>
 800434a:	4629      	mov	r1, r5
 800434c:	4630      	mov	r0, r6
 800434e:	f7ff ffbf 	bl	80042d0 <sbrk_aligned>
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	4604      	mov	r4, r0
 8004356:	d158      	bne.n	800440a <_malloc_r+0xf6>
 8004358:	f8d8 4000 	ldr.w	r4, [r8]
 800435c:	4627      	mov	r7, r4
 800435e:	2f00      	cmp	r7, #0
 8004360:	d143      	bne.n	80043ea <_malloc_r+0xd6>
 8004362:	2c00      	cmp	r4, #0
 8004364:	d04b      	beq.n	80043fe <_malloc_r+0xea>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	4639      	mov	r1, r7
 800436a:	4630      	mov	r0, r6
 800436c:	eb04 0903 	add.w	r9, r4, r3
 8004370:	f000 fb5c 	bl	8004a2c <_sbrk_r>
 8004374:	4581      	cmp	r9, r0
 8004376:	d142      	bne.n	80043fe <_malloc_r+0xea>
 8004378:	6821      	ldr	r1, [r4, #0]
 800437a:	1a6d      	subs	r5, r5, r1
 800437c:	4629      	mov	r1, r5
 800437e:	4630      	mov	r0, r6
 8004380:	f7ff ffa6 	bl	80042d0 <sbrk_aligned>
 8004384:	3001      	adds	r0, #1
 8004386:	d03a      	beq.n	80043fe <_malloc_r+0xea>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	442b      	add	r3, r5
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	f8d8 3000 	ldr.w	r3, [r8]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	bb62      	cbnz	r2, 80043f0 <_malloc_r+0xdc>
 8004396:	f8c8 7000 	str.w	r7, [r8]
 800439a:	e00f      	b.n	80043bc <_malloc_r+0xa8>
 800439c:	6822      	ldr	r2, [r4, #0]
 800439e:	1b52      	subs	r2, r2, r5
 80043a0:	d420      	bmi.n	80043e4 <_malloc_r+0xd0>
 80043a2:	2a0b      	cmp	r2, #11
 80043a4:	d917      	bls.n	80043d6 <_malloc_r+0xc2>
 80043a6:	1961      	adds	r1, r4, r5
 80043a8:	42a3      	cmp	r3, r4
 80043aa:	6025      	str	r5, [r4, #0]
 80043ac:	bf18      	it	ne
 80043ae:	6059      	strne	r1, [r3, #4]
 80043b0:	6863      	ldr	r3, [r4, #4]
 80043b2:	bf08      	it	eq
 80043b4:	f8c8 1000 	streq.w	r1, [r8]
 80043b8:	5162      	str	r2, [r4, r5]
 80043ba:	604b      	str	r3, [r1, #4]
 80043bc:	4630      	mov	r0, r6
 80043be:	f000 f82f 	bl	8004420 <__malloc_unlock>
 80043c2:	f104 000b 	add.w	r0, r4, #11
 80043c6:	1d23      	adds	r3, r4, #4
 80043c8:	f020 0007 	bic.w	r0, r0, #7
 80043cc:	1ac2      	subs	r2, r0, r3
 80043ce:	bf1c      	itt	ne
 80043d0:	1a1b      	subne	r3, r3, r0
 80043d2:	50a3      	strne	r3, [r4, r2]
 80043d4:	e7af      	b.n	8004336 <_malloc_r+0x22>
 80043d6:	6862      	ldr	r2, [r4, #4]
 80043d8:	42a3      	cmp	r3, r4
 80043da:	bf0c      	ite	eq
 80043dc:	f8c8 2000 	streq.w	r2, [r8]
 80043e0:	605a      	strne	r2, [r3, #4]
 80043e2:	e7eb      	b.n	80043bc <_malloc_r+0xa8>
 80043e4:	4623      	mov	r3, r4
 80043e6:	6864      	ldr	r4, [r4, #4]
 80043e8:	e7ae      	b.n	8004348 <_malloc_r+0x34>
 80043ea:	463c      	mov	r4, r7
 80043ec:	687f      	ldr	r7, [r7, #4]
 80043ee:	e7b6      	b.n	800435e <_malloc_r+0x4a>
 80043f0:	461a      	mov	r2, r3
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	42a3      	cmp	r3, r4
 80043f6:	d1fb      	bne.n	80043f0 <_malloc_r+0xdc>
 80043f8:	2300      	movs	r3, #0
 80043fa:	6053      	str	r3, [r2, #4]
 80043fc:	e7de      	b.n	80043bc <_malloc_r+0xa8>
 80043fe:	230c      	movs	r3, #12
 8004400:	6033      	str	r3, [r6, #0]
 8004402:	4630      	mov	r0, r6
 8004404:	f000 f80c 	bl	8004420 <__malloc_unlock>
 8004408:	e794      	b.n	8004334 <_malloc_r+0x20>
 800440a:	6005      	str	r5, [r0, #0]
 800440c:	e7d6      	b.n	80043bc <_malloc_r+0xa8>
 800440e:	bf00      	nop
 8004410:	200003e8 	.word	0x200003e8

08004414 <__malloc_lock>:
 8004414:	4801      	ldr	r0, [pc, #4]	@ (800441c <__malloc_lock+0x8>)
 8004416:	f7ff bf0f 	b.w	8004238 <__retarget_lock_acquire_recursive>
 800441a:	bf00      	nop
 800441c:	200003e0 	.word	0x200003e0

08004420 <__malloc_unlock>:
 8004420:	4801      	ldr	r0, [pc, #4]	@ (8004428 <__malloc_unlock+0x8>)
 8004422:	f7ff bf0a 	b.w	800423a <__retarget_lock_release_recursive>
 8004426:	bf00      	nop
 8004428:	200003e0 	.word	0x200003e0

0800442c <__ssputs_r>:
 800442c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	688e      	ldr	r6, [r1, #8]
 8004432:	461f      	mov	r7, r3
 8004434:	42be      	cmp	r6, r7
 8004436:	680b      	ldr	r3, [r1, #0]
 8004438:	4682      	mov	sl, r0
 800443a:	460c      	mov	r4, r1
 800443c:	4690      	mov	r8, r2
 800443e:	d82d      	bhi.n	800449c <__ssputs_r+0x70>
 8004440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004444:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004448:	d026      	beq.n	8004498 <__ssputs_r+0x6c>
 800444a:	6965      	ldr	r5, [r4, #20]
 800444c:	6909      	ldr	r1, [r1, #16]
 800444e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004452:	eba3 0901 	sub.w	r9, r3, r1
 8004456:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800445a:	1c7b      	adds	r3, r7, #1
 800445c:	444b      	add	r3, r9
 800445e:	106d      	asrs	r5, r5, #1
 8004460:	429d      	cmp	r5, r3
 8004462:	bf38      	it	cc
 8004464:	461d      	movcc	r5, r3
 8004466:	0553      	lsls	r3, r2, #21
 8004468:	d527      	bpl.n	80044ba <__ssputs_r+0x8e>
 800446a:	4629      	mov	r1, r5
 800446c:	f7ff ff52 	bl	8004314 <_malloc_r>
 8004470:	4606      	mov	r6, r0
 8004472:	b360      	cbz	r0, 80044ce <__ssputs_r+0xa2>
 8004474:	6921      	ldr	r1, [r4, #16]
 8004476:	464a      	mov	r2, r9
 8004478:	f000 fae8 	bl	8004a4c <memcpy>
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004486:	81a3      	strh	r3, [r4, #12]
 8004488:	6126      	str	r6, [r4, #16]
 800448a:	6165      	str	r5, [r4, #20]
 800448c:	444e      	add	r6, r9
 800448e:	eba5 0509 	sub.w	r5, r5, r9
 8004492:	6026      	str	r6, [r4, #0]
 8004494:	60a5      	str	r5, [r4, #8]
 8004496:	463e      	mov	r6, r7
 8004498:	42be      	cmp	r6, r7
 800449a:	d900      	bls.n	800449e <__ssputs_r+0x72>
 800449c:	463e      	mov	r6, r7
 800449e:	6820      	ldr	r0, [r4, #0]
 80044a0:	4632      	mov	r2, r6
 80044a2:	4641      	mov	r1, r8
 80044a4:	f000 faa8 	bl	80049f8 <memmove>
 80044a8:	68a3      	ldr	r3, [r4, #8]
 80044aa:	1b9b      	subs	r3, r3, r6
 80044ac:	60a3      	str	r3, [r4, #8]
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	4433      	add	r3, r6
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	2000      	movs	r0, #0
 80044b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ba:	462a      	mov	r2, r5
 80044bc:	f000 fad4 	bl	8004a68 <_realloc_r>
 80044c0:	4606      	mov	r6, r0
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d1e0      	bne.n	8004488 <__ssputs_r+0x5c>
 80044c6:	6921      	ldr	r1, [r4, #16]
 80044c8:	4650      	mov	r0, sl
 80044ca:	f7ff feb7 	bl	800423c <_free_r>
 80044ce:	230c      	movs	r3, #12
 80044d0:	f8ca 3000 	str.w	r3, [sl]
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044da:	81a3      	strh	r3, [r4, #12]
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	e7e9      	b.n	80044b6 <__ssputs_r+0x8a>
	...

080044e4 <_svfiprintf_r>:
 80044e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e8:	4698      	mov	r8, r3
 80044ea:	898b      	ldrh	r3, [r1, #12]
 80044ec:	061b      	lsls	r3, r3, #24
 80044ee:	b09d      	sub	sp, #116	@ 0x74
 80044f0:	4607      	mov	r7, r0
 80044f2:	460d      	mov	r5, r1
 80044f4:	4614      	mov	r4, r2
 80044f6:	d510      	bpl.n	800451a <_svfiprintf_r+0x36>
 80044f8:	690b      	ldr	r3, [r1, #16]
 80044fa:	b973      	cbnz	r3, 800451a <_svfiprintf_r+0x36>
 80044fc:	2140      	movs	r1, #64	@ 0x40
 80044fe:	f7ff ff09 	bl	8004314 <_malloc_r>
 8004502:	6028      	str	r0, [r5, #0]
 8004504:	6128      	str	r0, [r5, #16]
 8004506:	b930      	cbnz	r0, 8004516 <_svfiprintf_r+0x32>
 8004508:	230c      	movs	r3, #12
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	f04f 30ff 	mov.w	r0, #4294967295
 8004510:	b01d      	add	sp, #116	@ 0x74
 8004512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004516:	2340      	movs	r3, #64	@ 0x40
 8004518:	616b      	str	r3, [r5, #20]
 800451a:	2300      	movs	r3, #0
 800451c:	9309      	str	r3, [sp, #36]	@ 0x24
 800451e:	2320      	movs	r3, #32
 8004520:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004524:	f8cd 800c 	str.w	r8, [sp, #12]
 8004528:	2330      	movs	r3, #48	@ 0x30
 800452a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80046c8 <_svfiprintf_r+0x1e4>
 800452e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004532:	f04f 0901 	mov.w	r9, #1
 8004536:	4623      	mov	r3, r4
 8004538:	469a      	mov	sl, r3
 800453a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800453e:	b10a      	cbz	r2, 8004544 <_svfiprintf_r+0x60>
 8004540:	2a25      	cmp	r2, #37	@ 0x25
 8004542:	d1f9      	bne.n	8004538 <_svfiprintf_r+0x54>
 8004544:	ebba 0b04 	subs.w	fp, sl, r4
 8004548:	d00b      	beq.n	8004562 <_svfiprintf_r+0x7e>
 800454a:	465b      	mov	r3, fp
 800454c:	4622      	mov	r2, r4
 800454e:	4629      	mov	r1, r5
 8004550:	4638      	mov	r0, r7
 8004552:	f7ff ff6b 	bl	800442c <__ssputs_r>
 8004556:	3001      	adds	r0, #1
 8004558:	f000 80a7 	beq.w	80046aa <_svfiprintf_r+0x1c6>
 800455c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800455e:	445a      	add	r2, fp
 8004560:	9209      	str	r2, [sp, #36]	@ 0x24
 8004562:	f89a 3000 	ldrb.w	r3, [sl]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 809f 	beq.w	80046aa <_svfiprintf_r+0x1c6>
 800456c:	2300      	movs	r3, #0
 800456e:	f04f 32ff 	mov.w	r2, #4294967295
 8004572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004576:	f10a 0a01 	add.w	sl, sl, #1
 800457a:	9304      	str	r3, [sp, #16]
 800457c:	9307      	str	r3, [sp, #28]
 800457e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004582:	931a      	str	r3, [sp, #104]	@ 0x68
 8004584:	4654      	mov	r4, sl
 8004586:	2205      	movs	r2, #5
 8004588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458c:	484e      	ldr	r0, [pc, #312]	@ (80046c8 <_svfiprintf_r+0x1e4>)
 800458e:	f7fb fe1f 	bl	80001d0 <memchr>
 8004592:	9a04      	ldr	r2, [sp, #16]
 8004594:	b9d8      	cbnz	r0, 80045ce <_svfiprintf_r+0xea>
 8004596:	06d0      	lsls	r0, r2, #27
 8004598:	bf44      	itt	mi
 800459a:	2320      	movmi	r3, #32
 800459c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045a0:	0711      	lsls	r1, r2, #28
 80045a2:	bf44      	itt	mi
 80045a4:	232b      	movmi	r3, #43	@ 0x2b
 80045a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045aa:	f89a 3000 	ldrb.w	r3, [sl]
 80045ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80045b0:	d015      	beq.n	80045de <_svfiprintf_r+0xfa>
 80045b2:	9a07      	ldr	r2, [sp, #28]
 80045b4:	4654      	mov	r4, sl
 80045b6:	2000      	movs	r0, #0
 80045b8:	f04f 0c0a 	mov.w	ip, #10
 80045bc:	4621      	mov	r1, r4
 80045be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c2:	3b30      	subs	r3, #48	@ 0x30
 80045c4:	2b09      	cmp	r3, #9
 80045c6:	d94b      	bls.n	8004660 <_svfiprintf_r+0x17c>
 80045c8:	b1b0      	cbz	r0, 80045f8 <_svfiprintf_r+0x114>
 80045ca:	9207      	str	r2, [sp, #28]
 80045cc:	e014      	b.n	80045f8 <_svfiprintf_r+0x114>
 80045ce:	eba0 0308 	sub.w	r3, r0, r8
 80045d2:	fa09 f303 	lsl.w	r3, r9, r3
 80045d6:	4313      	orrs	r3, r2
 80045d8:	9304      	str	r3, [sp, #16]
 80045da:	46a2      	mov	sl, r4
 80045dc:	e7d2      	b.n	8004584 <_svfiprintf_r+0xa0>
 80045de:	9b03      	ldr	r3, [sp, #12]
 80045e0:	1d19      	adds	r1, r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	9103      	str	r1, [sp, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfbb      	ittet	lt
 80045ea:	425b      	neglt	r3, r3
 80045ec:	f042 0202 	orrlt.w	r2, r2, #2
 80045f0:	9307      	strge	r3, [sp, #28]
 80045f2:	9307      	strlt	r3, [sp, #28]
 80045f4:	bfb8      	it	lt
 80045f6:	9204      	strlt	r2, [sp, #16]
 80045f8:	7823      	ldrb	r3, [r4, #0]
 80045fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80045fc:	d10a      	bne.n	8004614 <_svfiprintf_r+0x130>
 80045fe:	7863      	ldrb	r3, [r4, #1]
 8004600:	2b2a      	cmp	r3, #42	@ 0x2a
 8004602:	d132      	bne.n	800466a <_svfiprintf_r+0x186>
 8004604:	9b03      	ldr	r3, [sp, #12]
 8004606:	1d1a      	adds	r2, r3, #4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	9203      	str	r2, [sp, #12]
 800460c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004610:	3402      	adds	r4, #2
 8004612:	9305      	str	r3, [sp, #20]
 8004614:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80046d8 <_svfiprintf_r+0x1f4>
 8004618:	7821      	ldrb	r1, [r4, #0]
 800461a:	2203      	movs	r2, #3
 800461c:	4650      	mov	r0, sl
 800461e:	f7fb fdd7 	bl	80001d0 <memchr>
 8004622:	b138      	cbz	r0, 8004634 <_svfiprintf_r+0x150>
 8004624:	9b04      	ldr	r3, [sp, #16]
 8004626:	eba0 000a 	sub.w	r0, r0, sl
 800462a:	2240      	movs	r2, #64	@ 0x40
 800462c:	4082      	lsls	r2, r0
 800462e:	4313      	orrs	r3, r2
 8004630:	3401      	adds	r4, #1
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004638:	4824      	ldr	r0, [pc, #144]	@ (80046cc <_svfiprintf_r+0x1e8>)
 800463a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800463e:	2206      	movs	r2, #6
 8004640:	f7fb fdc6 	bl	80001d0 <memchr>
 8004644:	2800      	cmp	r0, #0
 8004646:	d036      	beq.n	80046b6 <_svfiprintf_r+0x1d2>
 8004648:	4b21      	ldr	r3, [pc, #132]	@ (80046d0 <_svfiprintf_r+0x1ec>)
 800464a:	bb1b      	cbnz	r3, 8004694 <_svfiprintf_r+0x1b0>
 800464c:	9b03      	ldr	r3, [sp, #12]
 800464e:	3307      	adds	r3, #7
 8004650:	f023 0307 	bic.w	r3, r3, #7
 8004654:	3308      	adds	r3, #8
 8004656:	9303      	str	r3, [sp, #12]
 8004658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800465a:	4433      	add	r3, r6
 800465c:	9309      	str	r3, [sp, #36]	@ 0x24
 800465e:	e76a      	b.n	8004536 <_svfiprintf_r+0x52>
 8004660:	fb0c 3202 	mla	r2, ip, r2, r3
 8004664:	460c      	mov	r4, r1
 8004666:	2001      	movs	r0, #1
 8004668:	e7a8      	b.n	80045bc <_svfiprintf_r+0xd8>
 800466a:	2300      	movs	r3, #0
 800466c:	3401      	adds	r4, #1
 800466e:	9305      	str	r3, [sp, #20]
 8004670:	4619      	mov	r1, r3
 8004672:	f04f 0c0a 	mov.w	ip, #10
 8004676:	4620      	mov	r0, r4
 8004678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800467c:	3a30      	subs	r2, #48	@ 0x30
 800467e:	2a09      	cmp	r2, #9
 8004680:	d903      	bls.n	800468a <_svfiprintf_r+0x1a6>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0c6      	beq.n	8004614 <_svfiprintf_r+0x130>
 8004686:	9105      	str	r1, [sp, #20]
 8004688:	e7c4      	b.n	8004614 <_svfiprintf_r+0x130>
 800468a:	fb0c 2101 	mla	r1, ip, r1, r2
 800468e:	4604      	mov	r4, r0
 8004690:	2301      	movs	r3, #1
 8004692:	e7f0      	b.n	8004676 <_svfiprintf_r+0x192>
 8004694:	ab03      	add	r3, sp, #12
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	462a      	mov	r2, r5
 800469a:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <_svfiprintf_r+0x1f0>)
 800469c:	a904      	add	r1, sp, #16
 800469e:	4638      	mov	r0, r7
 80046a0:	f3af 8000 	nop.w
 80046a4:	1c42      	adds	r2, r0, #1
 80046a6:	4606      	mov	r6, r0
 80046a8:	d1d6      	bne.n	8004658 <_svfiprintf_r+0x174>
 80046aa:	89ab      	ldrh	r3, [r5, #12]
 80046ac:	065b      	lsls	r3, r3, #25
 80046ae:	f53f af2d 	bmi.w	800450c <_svfiprintf_r+0x28>
 80046b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046b4:	e72c      	b.n	8004510 <_svfiprintf_r+0x2c>
 80046b6:	ab03      	add	r3, sp, #12
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	462a      	mov	r2, r5
 80046bc:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <_svfiprintf_r+0x1f0>)
 80046be:	a904      	add	r1, sp, #16
 80046c0:	4638      	mov	r0, r7
 80046c2:	f000 f879 	bl	80047b8 <_printf_i>
 80046c6:	e7ed      	b.n	80046a4 <_svfiprintf_r+0x1c0>
 80046c8:	08004b24 	.word	0x08004b24
 80046cc:	08004b2e 	.word	0x08004b2e
 80046d0:	00000000 	.word	0x00000000
 80046d4:	0800442d 	.word	0x0800442d
 80046d8:	08004b2a 	.word	0x08004b2a

080046dc <_printf_common>:
 80046dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	4616      	mov	r6, r2
 80046e2:	4698      	mov	r8, r3
 80046e4:	688a      	ldr	r2, [r1, #8]
 80046e6:	690b      	ldr	r3, [r1, #16]
 80046e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046ec:	4293      	cmp	r3, r2
 80046ee:	bfb8      	it	lt
 80046f0:	4613      	movlt	r3, r2
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046f8:	4607      	mov	r7, r0
 80046fa:	460c      	mov	r4, r1
 80046fc:	b10a      	cbz	r2, 8004702 <_printf_common+0x26>
 80046fe:	3301      	adds	r3, #1
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	0699      	lsls	r1, r3, #26
 8004706:	bf42      	ittt	mi
 8004708:	6833      	ldrmi	r3, [r6, #0]
 800470a:	3302      	addmi	r3, #2
 800470c:	6033      	strmi	r3, [r6, #0]
 800470e:	6825      	ldr	r5, [r4, #0]
 8004710:	f015 0506 	ands.w	r5, r5, #6
 8004714:	d106      	bne.n	8004724 <_printf_common+0x48>
 8004716:	f104 0a19 	add.w	sl, r4, #25
 800471a:	68e3      	ldr	r3, [r4, #12]
 800471c:	6832      	ldr	r2, [r6, #0]
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	42ab      	cmp	r3, r5
 8004722:	dc26      	bgt.n	8004772 <_printf_common+0x96>
 8004724:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	3b00      	subs	r3, #0
 800472c:	bf18      	it	ne
 800472e:	2301      	movne	r3, #1
 8004730:	0692      	lsls	r2, r2, #26
 8004732:	d42b      	bmi.n	800478c <_printf_common+0xb0>
 8004734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004738:	4641      	mov	r1, r8
 800473a:	4638      	mov	r0, r7
 800473c:	47c8      	blx	r9
 800473e:	3001      	adds	r0, #1
 8004740:	d01e      	beq.n	8004780 <_printf_common+0xa4>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	6922      	ldr	r2, [r4, #16]
 8004746:	f003 0306 	and.w	r3, r3, #6
 800474a:	2b04      	cmp	r3, #4
 800474c:	bf02      	ittt	eq
 800474e:	68e5      	ldreq	r5, [r4, #12]
 8004750:	6833      	ldreq	r3, [r6, #0]
 8004752:	1aed      	subeq	r5, r5, r3
 8004754:	68a3      	ldr	r3, [r4, #8]
 8004756:	bf0c      	ite	eq
 8004758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800475c:	2500      	movne	r5, #0
 800475e:	4293      	cmp	r3, r2
 8004760:	bfc4      	itt	gt
 8004762:	1a9b      	subgt	r3, r3, r2
 8004764:	18ed      	addgt	r5, r5, r3
 8004766:	2600      	movs	r6, #0
 8004768:	341a      	adds	r4, #26
 800476a:	42b5      	cmp	r5, r6
 800476c:	d11a      	bne.n	80047a4 <_printf_common+0xc8>
 800476e:	2000      	movs	r0, #0
 8004770:	e008      	b.n	8004784 <_printf_common+0xa8>
 8004772:	2301      	movs	r3, #1
 8004774:	4652      	mov	r2, sl
 8004776:	4641      	mov	r1, r8
 8004778:	4638      	mov	r0, r7
 800477a:	47c8      	blx	r9
 800477c:	3001      	adds	r0, #1
 800477e:	d103      	bne.n	8004788 <_printf_common+0xac>
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004788:	3501      	adds	r5, #1
 800478a:	e7c6      	b.n	800471a <_printf_common+0x3e>
 800478c:	18e1      	adds	r1, r4, r3
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	2030      	movs	r0, #48	@ 0x30
 8004792:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004796:	4422      	add	r2, r4
 8004798:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800479c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047a0:	3302      	adds	r3, #2
 80047a2:	e7c7      	b.n	8004734 <_printf_common+0x58>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4622      	mov	r2, r4
 80047a8:	4641      	mov	r1, r8
 80047aa:	4638      	mov	r0, r7
 80047ac:	47c8      	blx	r9
 80047ae:	3001      	adds	r0, #1
 80047b0:	d0e6      	beq.n	8004780 <_printf_common+0xa4>
 80047b2:	3601      	adds	r6, #1
 80047b4:	e7d9      	b.n	800476a <_printf_common+0x8e>
	...

080047b8 <_printf_i>:
 80047b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	7e0f      	ldrb	r7, [r1, #24]
 80047be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047c0:	2f78      	cmp	r7, #120	@ 0x78
 80047c2:	4691      	mov	r9, r2
 80047c4:	4680      	mov	r8, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	469a      	mov	sl, r3
 80047ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047ce:	d807      	bhi.n	80047e0 <_printf_i+0x28>
 80047d0:	2f62      	cmp	r7, #98	@ 0x62
 80047d2:	d80a      	bhi.n	80047ea <_printf_i+0x32>
 80047d4:	2f00      	cmp	r7, #0
 80047d6:	f000 80d2 	beq.w	800497e <_printf_i+0x1c6>
 80047da:	2f58      	cmp	r7, #88	@ 0x58
 80047dc:	f000 80b9 	beq.w	8004952 <_printf_i+0x19a>
 80047e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047e8:	e03a      	b.n	8004860 <_printf_i+0xa8>
 80047ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047ee:	2b15      	cmp	r3, #21
 80047f0:	d8f6      	bhi.n	80047e0 <_printf_i+0x28>
 80047f2:	a101      	add	r1, pc, #4	@ (adr r1, 80047f8 <_printf_i+0x40>)
 80047f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047f8:	08004851 	.word	0x08004851
 80047fc:	08004865 	.word	0x08004865
 8004800:	080047e1 	.word	0x080047e1
 8004804:	080047e1 	.word	0x080047e1
 8004808:	080047e1 	.word	0x080047e1
 800480c:	080047e1 	.word	0x080047e1
 8004810:	08004865 	.word	0x08004865
 8004814:	080047e1 	.word	0x080047e1
 8004818:	080047e1 	.word	0x080047e1
 800481c:	080047e1 	.word	0x080047e1
 8004820:	080047e1 	.word	0x080047e1
 8004824:	08004965 	.word	0x08004965
 8004828:	0800488f 	.word	0x0800488f
 800482c:	0800491f 	.word	0x0800491f
 8004830:	080047e1 	.word	0x080047e1
 8004834:	080047e1 	.word	0x080047e1
 8004838:	08004987 	.word	0x08004987
 800483c:	080047e1 	.word	0x080047e1
 8004840:	0800488f 	.word	0x0800488f
 8004844:	080047e1 	.word	0x080047e1
 8004848:	080047e1 	.word	0x080047e1
 800484c:	08004927 	.word	0x08004927
 8004850:	6833      	ldr	r3, [r6, #0]
 8004852:	1d1a      	adds	r2, r3, #4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6032      	str	r2, [r6, #0]
 8004858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800485c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004860:	2301      	movs	r3, #1
 8004862:	e09d      	b.n	80049a0 <_printf_i+0x1e8>
 8004864:	6833      	ldr	r3, [r6, #0]
 8004866:	6820      	ldr	r0, [r4, #0]
 8004868:	1d19      	adds	r1, r3, #4
 800486a:	6031      	str	r1, [r6, #0]
 800486c:	0606      	lsls	r6, r0, #24
 800486e:	d501      	bpl.n	8004874 <_printf_i+0xbc>
 8004870:	681d      	ldr	r5, [r3, #0]
 8004872:	e003      	b.n	800487c <_printf_i+0xc4>
 8004874:	0645      	lsls	r5, r0, #25
 8004876:	d5fb      	bpl.n	8004870 <_printf_i+0xb8>
 8004878:	f9b3 5000 	ldrsh.w	r5, [r3]
 800487c:	2d00      	cmp	r5, #0
 800487e:	da03      	bge.n	8004888 <_printf_i+0xd0>
 8004880:	232d      	movs	r3, #45	@ 0x2d
 8004882:	426d      	negs	r5, r5
 8004884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004888:	4859      	ldr	r0, [pc, #356]	@ (80049f0 <_printf_i+0x238>)
 800488a:	230a      	movs	r3, #10
 800488c:	e011      	b.n	80048b2 <_printf_i+0xfa>
 800488e:	6821      	ldr	r1, [r4, #0]
 8004890:	6833      	ldr	r3, [r6, #0]
 8004892:	0608      	lsls	r0, r1, #24
 8004894:	f853 5b04 	ldr.w	r5, [r3], #4
 8004898:	d402      	bmi.n	80048a0 <_printf_i+0xe8>
 800489a:	0649      	lsls	r1, r1, #25
 800489c:	bf48      	it	mi
 800489e:	b2ad      	uxthmi	r5, r5
 80048a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80048a2:	4853      	ldr	r0, [pc, #332]	@ (80049f0 <_printf_i+0x238>)
 80048a4:	6033      	str	r3, [r6, #0]
 80048a6:	bf14      	ite	ne
 80048a8:	230a      	movne	r3, #10
 80048aa:	2308      	moveq	r3, #8
 80048ac:	2100      	movs	r1, #0
 80048ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048b2:	6866      	ldr	r6, [r4, #4]
 80048b4:	60a6      	str	r6, [r4, #8]
 80048b6:	2e00      	cmp	r6, #0
 80048b8:	bfa2      	ittt	ge
 80048ba:	6821      	ldrge	r1, [r4, #0]
 80048bc:	f021 0104 	bicge.w	r1, r1, #4
 80048c0:	6021      	strge	r1, [r4, #0]
 80048c2:	b90d      	cbnz	r5, 80048c8 <_printf_i+0x110>
 80048c4:	2e00      	cmp	r6, #0
 80048c6:	d04b      	beq.n	8004960 <_printf_i+0x1a8>
 80048c8:	4616      	mov	r6, r2
 80048ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80048ce:	fb03 5711 	mls	r7, r3, r1, r5
 80048d2:	5dc7      	ldrb	r7, [r0, r7]
 80048d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048d8:	462f      	mov	r7, r5
 80048da:	42bb      	cmp	r3, r7
 80048dc:	460d      	mov	r5, r1
 80048de:	d9f4      	bls.n	80048ca <_printf_i+0x112>
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d10b      	bne.n	80048fc <_printf_i+0x144>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	07df      	lsls	r7, r3, #31
 80048e8:	d508      	bpl.n	80048fc <_printf_i+0x144>
 80048ea:	6923      	ldr	r3, [r4, #16]
 80048ec:	6861      	ldr	r1, [r4, #4]
 80048ee:	4299      	cmp	r1, r3
 80048f0:	bfde      	ittt	le
 80048f2:	2330      	movle	r3, #48	@ 0x30
 80048f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048fc:	1b92      	subs	r2, r2, r6
 80048fe:	6122      	str	r2, [r4, #16]
 8004900:	f8cd a000 	str.w	sl, [sp]
 8004904:	464b      	mov	r3, r9
 8004906:	aa03      	add	r2, sp, #12
 8004908:	4621      	mov	r1, r4
 800490a:	4640      	mov	r0, r8
 800490c:	f7ff fee6 	bl	80046dc <_printf_common>
 8004910:	3001      	adds	r0, #1
 8004912:	d14a      	bne.n	80049aa <_printf_i+0x1f2>
 8004914:	f04f 30ff 	mov.w	r0, #4294967295
 8004918:	b004      	add	sp, #16
 800491a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	f043 0320 	orr.w	r3, r3, #32
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	4833      	ldr	r0, [pc, #204]	@ (80049f4 <_printf_i+0x23c>)
 8004928:	2778      	movs	r7, #120	@ 0x78
 800492a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	6831      	ldr	r1, [r6, #0]
 8004932:	061f      	lsls	r7, r3, #24
 8004934:	f851 5b04 	ldr.w	r5, [r1], #4
 8004938:	d402      	bmi.n	8004940 <_printf_i+0x188>
 800493a:	065f      	lsls	r7, r3, #25
 800493c:	bf48      	it	mi
 800493e:	b2ad      	uxthmi	r5, r5
 8004940:	6031      	str	r1, [r6, #0]
 8004942:	07d9      	lsls	r1, r3, #31
 8004944:	bf44      	itt	mi
 8004946:	f043 0320 	orrmi.w	r3, r3, #32
 800494a:	6023      	strmi	r3, [r4, #0]
 800494c:	b11d      	cbz	r5, 8004956 <_printf_i+0x19e>
 800494e:	2310      	movs	r3, #16
 8004950:	e7ac      	b.n	80048ac <_printf_i+0xf4>
 8004952:	4827      	ldr	r0, [pc, #156]	@ (80049f0 <_printf_i+0x238>)
 8004954:	e7e9      	b.n	800492a <_printf_i+0x172>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	f023 0320 	bic.w	r3, r3, #32
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	e7f6      	b.n	800494e <_printf_i+0x196>
 8004960:	4616      	mov	r6, r2
 8004962:	e7bd      	b.n	80048e0 <_printf_i+0x128>
 8004964:	6833      	ldr	r3, [r6, #0]
 8004966:	6825      	ldr	r5, [r4, #0]
 8004968:	6961      	ldr	r1, [r4, #20]
 800496a:	1d18      	adds	r0, r3, #4
 800496c:	6030      	str	r0, [r6, #0]
 800496e:	062e      	lsls	r6, r5, #24
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	d501      	bpl.n	8004978 <_printf_i+0x1c0>
 8004974:	6019      	str	r1, [r3, #0]
 8004976:	e002      	b.n	800497e <_printf_i+0x1c6>
 8004978:	0668      	lsls	r0, r5, #25
 800497a:	d5fb      	bpl.n	8004974 <_printf_i+0x1bc>
 800497c:	8019      	strh	r1, [r3, #0]
 800497e:	2300      	movs	r3, #0
 8004980:	6123      	str	r3, [r4, #16]
 8004982:	4616      	mov	r6, r2
 8004984:	e7bc      	b.n	8004900 <_printf_i+0x148>
 8004986:	6833      	ldr	r3, [r6, #0]
 8004988:	1d1a      	adds	r2, r3, #4
 800498a:	6032      	str	r2, [r6, #0]
 800498c:	681e      	ldr	r6, [r3, #0]
 800498e:	6862      	ldr	r2, [r4, #4]
 8004990:	2100      	movs	r1, #0
 8004992:	4630      	mov	r0, r6
 8004994:	f7fb fc1c 	bl	80001d0 <memchr>
 8004998:	b108      	cbz	r0, 800499e <_printf_i+0x1e6>
 800499a:	1b80      	subs	r0, r0, r6
 800499c:	6060      	str	r0, [r4, #4]
 800499e:	6863      	ldr	r3, [r4, #4]
 80049a0:	6123      	str	r3, [r4, #16]
 80049a2:	2300      	movs	r3, #0
 80049a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049a8:	e7aa      	b.n	8004900 <_printf_i+0x148>
 80049aa:	6923      	ldr	r3, [r4, #16]
 80049ac:	4632      	mov	r2, r6
 80049ae:	4649      	mov	r1, r9
 80049b0:	4640      	mov	r0, r8
 80049b2:	47d0      	blx	sl
 80049b4:	3001      	adds	r0, #1
 80049b6:	d0ad      	beq.n	8004914 <_printf_i+0x15c>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	079b      	lsls	r3, r3, #30
 80049bc:	d413      	bmi.n	80049e6 <_printf_i+0x22e>
 80049be:	68e0      	ldr	r0, [r4, #12]
 80049c0:	9b03      	ldr	r3, [sp, #12]
 80049c2:	4298      	cmp	r0, r3
 80049c4:	bfb8      	it	lt
 80049c6:	4618      	movlt	r0, r3
 80049c8:	e7a6      	b.n	8004918 <_printf_i+0x160>
 80049ca:	2301      	movs	r3, #1
 80049cc:	4632      	mov	r2, r6
 80049ce:	4649      	mov	r1, r9
 80049d0:	4640      	mov	r0, r8
 80049d2:	47d0      	blx	sl
 80049d4:	3001      	adds	r0, #1
 80049d6:	d09d      	beq.n	8004914 <_printf_i+0x15c>
 80049d8:	3501      	adds	r5, #1
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	9903      	ldr	r1, [sp, #12]
 80049de:	1a5b      	subs	r3, r3, r1
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	dcf2      	bgt.n	80049ca <_printf_i+0x212>
 80049e4:	e7eb      	b.n	80049be <_printf_i+0x206>
 80049e6:	2500      	movs	r5, #0
 80049e8:	f104 0619 	add.w	r6, r4, #25
 80049ec:	e7f5      	b.n	80049da <_printf_i+0x222>
 80049ee:	bf00      	nop
 80049f0:	08004b35 	.word	0x08004b35
 80049f4:	08004b46 	.word	0x08004b46

080049f8 <memmove>:
 80049f8:	4288      	cmp	r0, r1
 80049fa:	b510      	push	{r4, lr}
 80049fc:	eb01 0402 	add.w	r4, r1, r2
 8004a00:	d902      	bls.n	8004a08 <memmove+0x10>
 8004a02:	4284      	cmp	r4, r0
 8004a04:	4623      	mov	r3, r4
 8004a06:	d807      	bhi.n	8004a18 <memmove+0x20>
 8004a08:	1e43      	subs	r3, r0, #1
 8004a0a:	42a1      	cmp	r1, r4
 8004a0c:	d008      	beq.n	8004a20 <memmove+0x28>
 8004a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a16:	e7f8      	b.n	8004a0a <memmove+0x12>
 8004a18:	4402      	add	r2, r0
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	428a      	cmp	r2, r1
 8004a1e:	d100      	bne.n	8004a22 <memmove+0x2a>
 8004a20:	bd10      	pop	{r4, pc}
 8004a22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a2a:	e7f7      	b.n	8004a1c <memmove+0x24>

08004a2c <_sbrk_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4d06      	ldr	r5, [pc, #24]	@ (8004a48 <_sbrk_r+0x1c>)
 8004a30:	2300      	movs	r3, #0
 8004a32:	4604      	mov	r4, r0
 8004a34:	4608      	mov	r0, r1
 8004a36:	602b      	str	r3, [r5, #0]
 8004a38:	f7fc fd4a 	bl	80014d0 <_sbrk>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d102      	bne.n	8004a46 <_sbrk_r+0x1a>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	b103      	cbz	r3, 8004a46 <_sbrk_r+0x1a>
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	200003dc 	.word	0x200003dc

08004a4c <memcpy>:
 8004a4c:	440a      	add	r2, r1
 8004a4e:	4291      	cmp	r1, r2
 8004a50:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a54:	d100      	bne.n	8004a58 <memcpy+0xc>
 8004a56:	4770      	bx	lr
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a62:	4291      	cmp	r1, r2
 8004a64:	d1f9      	bne.n	8004a5a <memcpy+0xe>
 8004a66:	bd10      	pop	{r4, pc}

08004a68 <_realloc_r>:
 8004a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6c:	4680      	mov	r8, r0
 8004a6e:	4615      	mov	r5, r2
 8004a70:	460c      	mov	r4, r1
 8004a72:	b921      	cbnz	r1, 8004a7e <_realloc_r+0x16>
 8004a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a78:	4611      	mov	r1, r2
 8004a7a:	f7ff bc4b 	b.w	8004314 <_malloc_r>
 8004a7e:	b92a      	cbnz	r2, 8004a8c <_realloc_r+0x24>
 8004a80:	f7ff fbdc 	bl	800423c <_free_r>
 8004a84:	2400      	movs	r4, #0
 8004a86:	4620      	mov	r0, r4
 8004a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a8c:	f000 f81a 	bl	8004ac4 <_malloc_usable_size_r>
 8004a90:	4285      	cmp	r5, r0
 8004a92:	4606      	mov	r6, r0
 8004a94:	d802      	bhi.n	8004a9c <_realloc_r+0x34>
 8004a96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a9a:	d8f4      	bhi.n	8004a86 <_realloc_r+0x1e>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	f7ff fc38 	bl	8004314 <_malloc_r>
 8004aa4:	4607      	mov	r7, r0
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d0ec      	beq.n	8004a84 <_realloc_r+0x1c>
 8004aaa:	42b5      	cmp	r5, r6
 8004aac:	462a      	mov	r2, r5
 8004aae:	4621      	mov	r1, r4
 8004ab0:	bf28      	it	cs
 8004ab2:	4632      	movcs	r2, r6
 8004ab4:	f7ff ffca 	bl	8004a4c <memcpy>
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4640      	mov	r0, r8
 8004abc:	f7ff fbbe 	bl	800423c <_free_r>
 8004ac0:	463c      	mov	r4, r7
 8004ac2:	e7e0      	b.n	8004a86 <_realloc_r+0x1e>

08004ac4 <_malloc_usable_size_r>:
 8004ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ac8:	1f18      	subs	r0, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bfbc      	itt	lt
 8004ace:	580b      	ldrlt	r3, [r1, r0]
 8004ad0:	18c0      	addlt	r0, r0, r3
 8004ad2:	4770      	bx	lr

08004ad4 <_init>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	bf00      	nop
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr

08004ae0 <_fini>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr
